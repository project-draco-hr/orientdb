{
  counter.set(0);
  ODatabaseDocumentTx database=new ODatabaseDocumentTx(url);
  database.open("admin","admin");
  ODocument doc1=database.newInstance();
  doc1.field("INIT","ok");
  database.save(doc1);
  ORID rid1=doc1.getIdentity();
  ODocument doc2=database.newInstance();
  doc2.field("INIT","ok");
  database.save(doc2);
  ORID rid2=doc2.getIdentity();
  OptimisticUpdateField[] ops=new OptimisticUpdateField[THREADS];
  for (int i=0; i < THREADS; ++i)   ops[i]=new OptimisticUpdateField(url,rid1,rid2,"thread" + i);
  Thread[] threads=new Thread[THREADS];
  for (int i=0; i < THREADS; ++i)   threads[i]=new Thread(ops[i],"ConcurrentTest" + i);
  for (int i=0; i < THREADS; ++i)   threads[i].start();
  for (int i=0; i < THREADS; ++i)   threads[i].join();
  Assert.assertEquals(counter.get(),OPTIMISTIC_CYCLES * THREADS);
  doc1=database.load(rid1,null,true);
  for (int i=0; i < THREADS; ++i)   Assert.assertEquals(doc1.field(ops[i].threadName),ops[i].fieldValue,ops[i].threadName);
  doc1.toJSON();
  doc2=database.load(rid2,null,true);
  for (int i=0; i < THREADS; ++i)   Assert.assertEquals(doc2.field(ops[i].threadName),ops[i].fieldValue,ops[i].threadName);
  doc2.toJSON();
  System.out.println(doc2.toJSON());
  database.close();
}
