{
  if (Thread.interrupted()) {
    throw new OCommandExecutionException("The select execution has been interrupted");
  }
  if (!context.checkTimeout()) {
    return false;
  }
  final LOCKING_STRATEGY contextLockingStrategy=context.getVariable("$locking") != null ? (LOCKING_STRATEGY)context.getVariable("$locking") : null;
  final LOCKING_STRATEGY localLockingStrategy=contextLockingStrategy != null ? contextLockingStrategy : lockingStrategy;
  if (localLockingStrategy != null && !(localLockingStrategy == LOCKING_STRATEGY.DEFAULT || localLockingStrategy == LOCKING_STRATEGY.NONE || localLockingStrategy == LOCKING_STRATEGY.EXCLUSIVE_LOCK || localLockingStrategy == LOCKING_STRATEGY.SHARED_LOCK))   throw new IllegalStateException("Unsupported locking strategy " + localLockingStrategy);
  final ORecord record;
  if (!(id instanceof ORecord)) {
    record=getDatabase().load(id.getIdentity(),null,noCache);
    if (id instanceof OContextualRecordId && ((OContextualRecordId)id).getContext() != null) {
      Map<String,Object> ridContext=((OContextualRecordId)id).getContext();
      for (      String key : ridContext.keySet()) {
        context.setVariable(key,ridContext.get(key));
      }
    }
  }
 else {
    record=(ORecord)id;
  }
  context.updateMetric("recordReads",+1);
  if (record == null || ORecordInternal.getRecordType(record) != ODocument.RECORD_TYPE) {
    return true;
  }
  context.updateMetric("documentReads",+1);
  if (localLockingStrategy == LOCKING_STRATEGY.SHARED_LOCK) {
    record.lock(false);
    record.reload(null,true,false);
  }
 else   if (localLockingStrategy == LOCKING_STRATEGY.EXCLUSIVE_LOCK) {
    record.lock(true);
    record.reload(null,true,false);
  }
  try {
    context.setVariable("current",record);
    if (filter(record)) {
      if (!handleResult(record)) {
        return false;
      }
    }
  }
  finally {
    if (localLockingStrategy != null && record.isLocked()) {
      if (localLockingStrategy == LOCKING_STRATEGY.EXCLUSIVE_LOCK || localLockingStrategy == LOCKING_STRATEGY.SHARED_LOCK) {
        record.unlock();
      }
    }
  }
  return true;
}
