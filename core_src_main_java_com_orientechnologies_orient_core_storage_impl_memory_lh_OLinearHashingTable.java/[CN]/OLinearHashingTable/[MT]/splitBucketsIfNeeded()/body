{
  double capacity=((double)size) / (primaryIndex.bucketCount() * OLinearHashingBucket.BUCKET_MAX_SIZE);
  if (capacity > maxCapacity) {
    int bucketNumberToSplit=(int)OLinearHashingHashCalculatorFactory.INSTANCE.calculateBucketNumber(next,level);
    loadChainInPool(bucketNumberToSplit,level);
    groupOverflowTable.removeUnusedGroups(pageIndicator);
    int pageToStore=next + 1 << level;
    byte groupWithStartingPageLessThan=groupOverflowTable.getGroupWithStartingPageLessThenOrEqual(pageToStore);
    if (groupWithStartingPageLessThan != -2) {
      int groupSize=groupOverflowTable.getSizeForGroup(groupWithStartingPageLessThan);
      final boolean needMove=pageIndicator.isUsedPageExistInRange(pageToStore,pageToStore + groupSize);
      if (needMove) {
        moveOverflowGroupToNewPosition(pageToStore);
      }
    }
    primaryIndex.addNewPosition(pageToStore);
    while (file.size() < pageToStore + 1) {
      file.add(null);
    }
    file.set(pageToStore,new OLinearHashingBucket());
    groupOverflowTable.moveDummyGroupIfNeeded(pageToStore,calculateGroupSize(level + 1));
    next++;
    if (next == 1 << level) {
      next=0;
      level++;
    }
    storeRecordFromRecordPool();
  }
}
