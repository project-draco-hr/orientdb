{
  if (compiledFilter != null)   mergeRangeConditionsToBetweenOperators(compiledFilter);
  if ((compiledFilter == null || (compiledFilter.getRootCondition() == null)) && groupByFields == null && projections != null && projections.size() == 1) {
    final long startOptimization=System.currentTimeMillis();
    try {
      final Map.Entry<String,Object> entry=projections.entrySet().iterator().next();
      if (entry.getValue() instanceof OSQLFunctionRuntime) {
        final OSQLFunctionRuntime rf=(OSQLFunctionRuntime)entry.getValue();
        if (rf.function instanceof OSQLFunctionCount && rf.configuredParameters.length == 1 && "*".equals(rf.configuredParameters[0])) {
          long count=0;
          if (parsedTarget.getTargetClasses() != null) {
            final OClass cls=parsedTarget.getTargetClasses().keySet().iterator().next();
            count=cls.count();
          }
 else           if (parsedTarget.getTargetClusters() != null) {
            for (            String cluster : parsedTarget.getTargetClusters().keySet()) {
              count+=getDatabase().countClusterElements(cluster);
            }
          }
 else           if (parsedTarget.getTargetIndex() != null) {
            count+=getDatabase().getMetadata().getIndexManager().getIndex(parsedTarget.getTargetIndex()).getSize();
          }
 else {
            final Iterable<? extends OIdentifiable> recs=parsedTarget.getTargetRecords();
            if (recs != null) {
              if (recs instanceof Collection<?>)               count+=((Collection<?>)recs).size();
 else {
                for (                Object o : recs)                 count++;
              }
            }
          }
          if (tempResult == null)           tempResult=new ArrayList<OIdentifiable>();
          ((Collection<OIdentifiable>)tempResult).add(new ODocument().field(entry.getKey(),count));
          return true;
        }
      }
    }
  finally {
      context.setVariable("optimizationElapsed",(System.currentTimeMillis() - startOptimization));
    }
  }
  return false;
}
