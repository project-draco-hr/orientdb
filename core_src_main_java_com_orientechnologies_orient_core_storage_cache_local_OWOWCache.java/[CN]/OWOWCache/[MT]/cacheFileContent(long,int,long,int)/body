{
  final long startPosition=pageIndex * pageSize;
  final OFileClassic fileClassic=files.get(intId);
  if (fileClassic == null)   throw new IllegalArgumentException("File with id " + intId + " not found in WOW Cache");
  final long maxToRead=fileClassic.getFileSize() - startPosition;
  if (maxToRead <= 0)   return new OCachePointer[0];
  final int loadPages;
  if (((long)pageSize * iRequestedPrefetchPages) > maxToRead) {
    loadPages=(int)(maxToRead / pageSize);
    if (loadPages == 0)     return new OCachePointer[0];
  }
 else {
    loadPages=iRequestedPrefetchPages;
  }
  final OLogSequenceNumber lastLsn;
  if (writeAheadLog != null)   lastLsn=writeAheadLog.getFlushedLsn();
 else   lastLsn=new OLogSequenceNumber(-1,-1);
  final OCachePointer[] dataPointers=new OCachePointer[loadPages];
  final byte[] content=new byte[pageSize * loadPages];
  fileClassic.read(startPosition,content,content.length,0);
  for (int i=0; i < loadPages; ++i) {
    final byte[] pageContent=new byte[pageSize + (2 * PAGE_PADDING)];
    System.arraycopy(content,pageSize * i,pageContent,PAGE_PADDING,pageSize);
    final ODirectMemoryPointer pointer=ODirectMemoryPointerFactory.instance().createPointer(pageContent);
    dataPointers[i]=new OCachePointer(pointer,lastLsn,fileId,pageIndex + i);
    dataPointers[i].incrementReadersReferrer();
  }
  return dataPointers;
}
