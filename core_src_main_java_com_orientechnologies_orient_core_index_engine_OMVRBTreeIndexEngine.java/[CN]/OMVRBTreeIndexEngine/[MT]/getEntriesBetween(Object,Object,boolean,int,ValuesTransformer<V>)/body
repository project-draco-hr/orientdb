{
  acquireExclusiveLock();
  try {
    final OMVRBTreeEntry<Object,V> firstEntry;
    if (iInclusive)     firstEntry=map.getCeilingEntry(iRangeFrom,OMVRBTree.PartialSearchMode.LOWEST_BOUNDARY);
 else     firstEntry=map.getHigherEntry(iRangeFrom);
    if (firstEntry == null)     return Collections.emptySet();
    final int firstEntryIndex=map.getPageIndex();
    final OMVRBTreeEntry<Object,V> lastEntry;
    if (iInclusive)     lastEntry=map.getHigherEntry(iRangeTo);
 else     lastEntry=map.getCeilingEntry(iRangeTo,OMVRBTree.PartialSearchMode.LOWEST_BOUNDARY);
    final int lastEntryIndex;
    if (lastEntry != null)     lastEntryIndex=map.getPageIndex();
 else     lastEntryIndex=-1;
    OMVRBTreeEntry<Object,V> entry=firstEntry;
    map.setPageIndex(firstEntryIndex);
    final Set<ODocument> result=new ODocumentFieldsHashSet();
    while (entry != null && !(entry == lastEntry && map.getPageIndex() == lastEntryIndex)) {
      final Object key=entry.getKey();
      final V value=entry.getValue();
      addToEntriesResult(transformer,result,key,value,maxEntriesToFetch);
      if (maxEntriesToFetch > -1 && maxEntriesToFetch == result.size())       return result;
      entry=OMVRBTree.next(entry);
    }
    return result;
  }
  finally {
    releaseExclusiveLock();
  }
}
