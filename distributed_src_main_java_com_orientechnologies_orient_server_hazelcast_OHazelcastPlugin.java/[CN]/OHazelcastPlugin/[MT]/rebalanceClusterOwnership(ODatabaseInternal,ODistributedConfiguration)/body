{
  final ODistributedConfiguration.ROLES role=cfg.getServerRole(nodeName);
  if (role != ODistributedConfiguration.ROLES.MASTER)   return false;
  if (iDatabase.isClosed())   getServerInstance().openDatabase(iDatabase);
  ODistributedServerLog.info(this,nodeName,null,DIRECTION.NONE,"Rebalancing cluster ownership for database %s",iDatabase.getName());
  boolean distributedCfgDirty=false;
  final Set<String> availableNodes=getAvailableNodeNames(iDatabase.getName());
  final Set<String> clustersWithNotAvailableOwner=new HashSet<String>();
  for (  String server : cfg.getAllConfiguredServers()) {
    if (!availableNodes.contains(server)) {
      final Set<String> ownedClusters=cfg.getClustersOwnedByServer(server);
      for (Iterator<String> it=ownedClusters.iterator(); it.hasNext(); ) {
        final String cluster=it.next();
        if (cfg.getConfiguredClusterOwner(cluster) != null)         it.remove();
      }
      clustersWithNotAvailableOwner.addAll(ownedClusters);
    }
  }
  final OSchema schema=((ODatabaseInternal<?>)iDatabase).getDatabaseOwner().getMetadata().getSchema();
  for (  final OClass clazz : schema.getClasses())   if (rebalanceStrategy.rebalanceClusterOwnershipOfClass(iDatabase,cfg,clazz,availableNodes,clustersWithNotAvailableOwner))   distributedCfgDirty=true;
  return distributedCfgDirty;
}
