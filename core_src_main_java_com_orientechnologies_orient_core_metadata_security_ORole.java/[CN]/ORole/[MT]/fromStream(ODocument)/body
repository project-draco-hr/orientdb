{
  if (document != null)   return;
  document=iSource;
  try {
    final Number modeField=document.field("mode");
    mode=modeField == null ? ALLOW_MODES.DENY_ALL_BUT : modeField.byteValue() == STREAM_ALLOW ? ALLOW_MODES.ALLOW_ALL_BUT : ALLOW_MODES.DENY_ALL_BUT;
  }
 catch (  Exception ex) {
    OLogManager.instance().error(this,"illegal mode " + ex.getMessage());
    mode=ALLOW_MODES.DENY_ALL_BUT;
  }
  final OIdentifiable role=document.field("inheritedRole");
  parentRole=role != null ? document.getDatabase().getMetadata().getSecurity().getRole(role) : null;
  Object loadedRules=document.field("rules");
  if (loadedRules instanceof Map) {
    loadOldVersionOfRules((Map<String,Number>)loadedRules);
  }
 else {
    final Set<ODocument> storedRules=(Set<ODocument>)loadedRules;
    if (storedRules != null)     for (    ODocument ruleDoc : storedRules) {
      final ORule.ResourceGeneric resourceGeneric=ORule.ResourceGeneric.valueOf(ruleDoc.<String>field("resourceGeneric"));
      if (resourceGeneric == null)       continue;
      final Map<String,Byte> specificResources=ruleDoc.field("specificResources");
      final Byte access=ruleDoc.field("access");
      final ORule rule=new ORule(resourceGeneric,specificResources,access);
      rules.put(resourceGeneric,rule);
    }
  }
  if (getName().equals("admin") && !hasRule(ORule.ResourceGeneric.BYPASS_RESTRICTED,null))   addRule(ORule.ResourceGeneric.BYPASS_RESTRICTED,null,ORole.PERMISSION_ALL).save();
}
