{
  if (!getNodeSource().equals(iManager.getLocalNodeName())) {
    if (database == null)     throw new ODistributedException("Database instance is null");
    final String databaseName=database.getName();
    final Lock lock=iManager.getLock("sync." + databaseName + "."+ clusterName);
    if (lock.tryLock()) {
      try {
        final Long lastDeployment=(Long)iManager.getConfigurationMap().get(DEPLOYCLUSTER + databaseName + "."+ clusterName);
        if (lastDeployment != null && lastDeployment.longValue() == random) {
          ODistributedServerLog.debug(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.NONE,"skip deploying cluster '%s' because already executed",clusterName);
          return Boolean.FALSE;
        }
        iManager.getConfigurationMap().put(DEPLOYCLUSTER + databaseName + "."+ clusterName,random);
        ODistributedServerLog.info(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.OUT,"deploying cluster %s...",databaseName);
        final File backupFile=new File(Orient.getTempPath() + "/backup_" + database.getName()+ "_"+ clusterName+ ".zip");
        if (backupFile.exists())         backupFile.delete();
 else         backupFile.getParentFile().mkdirs();
        backupFile.createNewFile();
        ODistributedServerLog.info(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.OUT,"creating backup of cluster '%s' in directory: %s...",databaseName,backupFile.getAbsolutePath());
        final OPaginatedCluster cluster=(OPaginatedCluster)database.getStorage().getClusterByName(clusterName);
switch (mode) {
case MERGE:
          throw new IllegalArgumentException("merge mode not supported");
case FULL_REPLACE:
        final FileOutputStream fileOutputStream=new FileOutputStream(backupFile);
      final File completedFile=new File(backupFile.getAbsolutePath() + ".completed");
    if (completedFile.exists())     completedFile.delete();
  new Thread(new Runnable(){
    @Override public void run(){
      Thread.currentThread().setName("OrientDB SyncCluster node=" + iManager.getLocalNodeName() + " db="+ databaseName+ " cluster="+ clusterName);
      try {
        database.activateOnCurrentThread();
        database.freeze();
        try {
          final String fileName=cluster.getFileName();
          final String dbPath=iServer.getDatabaseDirectory() + databaseName;
          final String[] fileNames=new String[]{fileName,fileName.substring(0,fileName.length() - 4) + OClusterPositionMap.DEF_EXTENSION};
          OZIPCompressionUtil.compressFiles(dbPath,fileNames,fileOutputStream,null,OGlobalConfiguration.DISTRIBUTED_DEPLOYDB_TASK_COMPRESSION.getValueAsInteger());
        }
 catch (        IOException e) {
          OLogManager.instance().error(this,"Cannot execute backup of cluster '%s.%s' for deploy cluster",e,databaseName,clusterName);
        }
 finally {
          database.release();
        }
      }
  finally {
        try {
          fileOutputStream.close();
        }
 catch (        IOException e) {
        }
        try {
          completedFile.createNewFile();
        }
 catch (        IOException e) {
          OLogManager.instance().error(this,"Cannot create file of backup completed: %s",e,completedFile);
        }
      }
    }
  }
).start();
final long fileSize=backupFile.length();
ODistributedServerLog.info(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.OUT,"sending the compressed cluster '%s.%s' over the NETWORK to node '%s', size=%s...",databaseName,clusterName,getNodeSource(),OFileUtils.getSizeAsString(fileSize));
final ODistributedDatabaseChunk chunk=new ODistributedDatabaseChunk(0,backupFile,0,CHUNK_MAX_SIZE);
ODistributedServerLog.info(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.OUT,"- transferring chunk #%d offset=%d size=%s...",1,0,OFileUtils.getSizeAsNumber(chunk.buffer.length));
return chunk;
}
}
  finally {
lock.unlock();
ODistributedServerLog.info(this,iManager.getLocalNodeName(),getNodeSource(),ODistributedServerLog.DIRECTION.OUT,"deploy cluster %s task completed",clusterName);
}
}
}
 else ODistributedServerLog.debug(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.NONE,"skip deploying cluster %s.%s from the same node");
return Boolean.FALSE;
}
