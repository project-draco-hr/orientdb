{
  final Deque<Long> stamps=tlTimeStumps.get();
  if (stamps.size() > 0) {
    final long endTs=nanoTimer.getNano();
    final long timeDiff=endTs - stamps.pop();
    final PerformanceCounters pf=performanceCounters.get();
    if (pf != null) {
      final AtomicReference<OTimeCounter> commitTimeAvg=pf.commitTimeAvg;
      OTimeCounter oldCommitTimeAvg=commitTimeAvg.get();
      OTimeCounter newCommitTimeAvg=new OTimeCounter(oldCommitTimeAvg.getTime() + timeDiff,oldCommitTimeAvg.getCounter() + 1);
      while (!commitTimeAvg.compareAndSet(oldCommitTimeAvg,newCommitTimeAvg)) {
        oldCommitTimeAvg=commitTimeAvg.get();
        newCommitTimeAvg=new OTimeCounter(oldCommitTimeAvg.getTime() + timeDiff,oldCommitTimeAvg.getCounter() + 1);
      }
    }
  }
}
