{
  if (iValues.isEmpty()) {
    return null;
  }
  Collections.sort(iValues,new Comparator<Number>(){
    @Override public int compare(    Number o1,    Number o2){
      Double d1=o1.doubleValue();
      Double d2=o2.doubleValue();
      return d1.compareTo(d2);
    }
  }
);
  double n=iValues.size();
  double pos=iQuantile * (n + 1);
  if (pos < 1) {
    return iValues.get(0);
  }
  if (pos >= n) {
    return iValues.get((int)n - 1);
  }
  double fpos=Math.floor(pos);
  int intPos=(int)fpos;
  double dif=pos - fpos;
  double lower=iValues.get(intPos - 1).doubleValue();
  double upper=iValues.get(intPos).doubleValue();
  return lower + dif * (upper - lower);
}
