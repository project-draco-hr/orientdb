{
  acquireSharedLock();
  try {
    final BucketSearchResult searchResult=lastItem();
    if (searchResult == null)     return null;
    OAtomicOperation atomicOperation=storage.getAtomicOperationsManager().getCurrentOperation();
    final OCacheEntry cacheEntry=diskCache.load(fileId,searchResult.getLastPathItem(),false);
    try {
      OSBTreeBucket<K,V> bucket=new OSBTreeBucket<K,V>(cacheEntry,keySerializer,keyTypes,valueSerializer,getChangesTree(atomicOperation,cacheEntry));
      return bucket.getKey(searchResult.itemIndex);
    }
  finally {
      diskCache.release(cacheEntry);
    }
  }
 catch (  IOException e) {
    throw new OSBTreeException("Error during finding last key in sbtree [" + name + "]");
  }
 finally {
    releaseSharedLock();
  }
}
