{
  if (uniqueResult != null)   uniqueResult.clear();
  final ODatabaseDocument database=getDatabase();
  database.checkSecurity(ORule.ResourceGeneric.CLASS,ORole.PERMISSION_READ,iSchemaClass.getName().toLowerCase());
  if (compiledFilter == null) {
    return tryOptimizeSort(iSchemaClass);
  }
  Iterator<OIdentifiable> fetchedFromFunction=tryIndexedFunctions(iSchemaClass);
  if (fetchedFromFunction != null) {
    return fetchFromTarget(fetchedFromFunction);
  }
  final List<List<OIndexSearchResult>> conditionHierarchy=filterAnalyzer.analyzeMainCondition(compiledFilter.getRootCondition(),iSchemaClass,context);
  if (conditionHierarchy == null)   return false;
  List<OIndexCursor> cursors=new ArrayList<OIndexCursor>();
  boolean indexIsUsedInOrderBy=false;
  List<IndexUsageLog> indexUseAttempts=new ArrayList<IndexUsageLog>();
  try {
    OIndexSearchResult lastSearchResult=null;
    for (    List<OIndexSearchResult> indexSearchResults : conditionHierarchy) {
      boolean indexUsed=false;
      for (      final OIndexSearchResult searchResult : indexSearchResults) {
        lastSearchResult=searchResult;
        final List<OIndex<?>> involvedIndexes=filterAnalyzer.getInvolvedIndexes(iSchemaClass,searchResult);
        Collections.sort(involvedIndexes,new IndexComparator());
        for (        final OIndex index : involvedIndexes) {
          final long indexRebuildVersion=index.getRebuildVersion();
          if (index.isRebuilding()) {
            continue;
          }
          final OIndexDefinition indexDefinition=index.getDefinition();
          if (searchResult.containsNullValues && indexDefinition.isNullValuesIgnored()) {
            continue;
          }
          final OQueryOperator operator=searchResult.lastOperator;
          if (!OIndexSearchResult.isIndexEqualityOperator(operator)) {
            final String lastFiled=searchResult.lastField.getItemName(searchResult.lastField.getItemCount() - 1);
            final String relatedIndexField=indexDefinition.getFields().get(searchResult.fieldValuePairs.size());
            if (!lastFiled.equals(relatedIndexField)) {
              continue;
            }
          }
          final int searchResultFieldsCount=searchResult.fields().size();
          final List<Object> keyParams=new ArrayList<Object>(searchResultFieldsCount);
          for (          final String fieldName : indexDefinition.getFields().subList(0,searchResultFieldsCount)) {
            final Object fieldValue=searchResult.fieldValuePairs.get(fieldName);
            if (fieldValue instanceof OSQLQuery<?>) {
              return false;
            }
            if (fieldValue != null) {
              keyParams.add(fieldValue);
            }
 else {
              if (searchResult.lastValue instanceof OSQLQuery<?>) {
                return false;
              }
              keyParams.add(searchResult.lastValue);
            }
          }
          metricRecorder.recordInvolvedIndexesMetric(index);
          OIndexCursor cursor;
          indexIsUsedInOrderBy=orderByOptimizer.canBeUsedByOrderBy(index,orderedFields) && !(index.getInternal() instanceof OChainedIndexProxy);
          try {
            boolean ascSortOrder=!indexIsUsedInOrderBy || orderedFields.get(0).getValue().equals(KEYWORD_ASC);
            if (indexIsUsedInOrderBy) {
              fullySortedByIndex=expandTarget == null && indexDefinition.getFields().size() >= orderedFields.size() && conditionHierarchy.size() == 1;
            }
            context.setVariable("$limit",limit);
            cursor=operator.executeIndexQuery(context,index,keyParams,ascSortOrder);
          }
 catch (          OIndexEngineException e) {
            throw e;
          }
catch (          Exception e) {
            OLogManager.instance().error(this,"Error on using index %s in query '%s'. Probably you need to rebuild indexes. Now executing query using cluster scan",e,index.getName(),request != null && request.getText() != null ? request.getText() : "");
            fullySortedByIndex=false;
            cursors.clear();
            return false;
          }
          if (cursor == null) {
            continue;
          }
          if (index.getRebuildVersion() == indexRebuildVersion) {
            cursors.add(OIndexChangesWrapper.wrap(index,cursor));
            indexUseAttempts.add(new IndexUsageLog(index,keyParams,indexDefinition));
            indexUsed=true;
            break;
          }
        }
        if (indexUsed) {
          break;
        }
      }
      if (!indexUsed) {
        return tryOptimizeSort(iSchemaClass);
      }
    }
    if (cursors.size() == 0 || lastSearchResult == null) {
      return false;
    }
    if (cursors.size() == 1 && canOptimize(conditionHierarchy)) {
      filterOptimizer.optimize(compiledFilter,lastSearchResult);
    }
    uniqueResult=new ConcurrentHashMap<ORID,ORID>();
    if (cursors.size() == 1 && (compiledFilter == null || compiledFilter.getRootCondition() == null) && groupByFields == null && projections != null && projections.size() == 1) {
      final Entry<String,Object> entry=projections.entrySet().iterator().next();
      if (entry.getValue() instanceof OSQLFunctionRuntime) {
        final OSQLFunctionRuntime rf=(OSQLFunctionRuntime)entry.getValue();
        if (rf.function instanceof OSQLFunctionCount && rf.configuredParameters.length == 1 && "*".equals(rf.configuredParameters[0])) {
          final boolean restrictedClasses=isUsingRestrictedClasses();
          if (!restrictedClasses) {
            final OIndexCursor cursor=cursors.get(0);
            long count=0;
            if (cursor instanceof OSizeable)             count=((OSizeable)cursor).size();
 else {
              while (cursor.hasNext()) {
                cursor.next();
                count++;
              }
            }
            final OProfiler profiler=Orient.instance().getProfiler();
            if (profiler.isRecording()) {
              profiler.updateCounter(profiler.getDatabaseMetric(database.getName(),"query.indexUsed"),"Used index in query",+1);
            }
            if (tempResult == null)             tempResult=new ArrayList<OIdentifiable>();
            ((Collection<OIdentifiable>)tempResult).add(new ODocument().field(entry.getKey(),count));
            return true;
          }
        }
      }
    }
    for (    OIndexCursor cursor : cursors) {
      if (!fetchValuesFromIndexCursor(cursor)) {
        break;
      }
    }
    uniqueResult.clear();
    uniqueResult=null;
    metricRecorder.recordOrderByOptimizationMetric(indexIsUsedInOrderBy,this.fullySortedByIndex);
    indexUseAttempts.clear();
    return true;
  }
  finally {
    for (    IndexUsageLog wastedIndexUsage : indexUseAttempts) {
      revertProfiler(context,wastedIndexUsage.index,wastedIndexUsage.keyParams,wastedIndexUsage.indexDefinition);
    }
  }
}
