{
  final PoolData data=poolData.get();
  if (data.acquireCount > 0) {
    data.acquireCount++;
    return data.acquiredDatabase;
  }
  acquiredConnections.incrementAndGet();
  try {
    while (true) {
      final AtomicReference<ConcurrentLinkedQueue<DatabaseDocumentTxPolled>>[] pts=partitions;
      final int index=(pts.length - 1) & data.hashCode;
      ConcurrentLinkedQueue<DatabaseDocumentTxPolled> queue=pts[index].get();
      if (queue == null) {
        if (poolBusy.compareAndSet(false,true)) {
          if (pts == partitions) {
            final AtomicReference<ConcurrentLinkedQueue<DatabaseDocumentTxPolled>> queueRef=pts[index];
            if (queueRef.get() == null) {
              queue=new ConcurrentLinkedQueue<DatabaseDocumentTxPolled>();
              initQueue(url,queue);
              queueRef.set(queue);
            }
          }
          poolBusy.set(false);
        }
        continue;
      }
 else {
        DatabaseDocumentTxPolled db=queue.poll();
        if (db == null) {
          if (pts.length < maxPartitions) {
            if (poolBusy.compareAndSet(false,true)) {
              if (pts == partitions) {
                final AtomicReference<ConcurrentLinkedQueue<DatabaseDocumentTxPolled>>[] newPartitions=new AtomicReference[partitions.length << 1];
                System.arraycopy(partitions,0,newPartitions,0,partitions.length);
                for (int i=partitions.length - 1; i < newPartitions.length; i++)                 newPartitions[i]=new AtomicReference<ConcurrentLinkedQueue<DatabaseDocumentTxPolled>>();
                partitions=newPartitions;
              }
              poolBusy.set(false);
            }
            continue;
          }
 else {
            if (currentSize.get() >= maxSize)             throw new IllegalStateException("You have reached maximum pool size");
            db=new DatabaseDocumentTxPolled(url);
            db.open(userName,password);
            db.queue=queue;
            data.acquireCount=1;
            data.acquiredDatabase=db;
            currentSize.incrementAndGet();
            return db;
          }
        }
 else {
          db.open(userName,password);
          db.queue=queue;
          data.acquireCount=1;
          data.acquiredDatabase=db;
          return db;
        }
      }
    }
  }
 catch (  RuntimeException e) {
    acquiredConnections.decrementAndGet();
    throw e;
  }
}
