{
  final byte[] serializedKey=new byte[keySerializer.getObjectSize(key)];
  keySerializer.serialize(key,serializedKey,0);
  final long hashCode=OMurmurHash3.murmurHash3_x64_64(serializedKey,SEED);
  final long index=index(hashCode);
  int hashLineSize=getHashLineSize(entries,index);
  int prevHashLine=ODirectMemory.NULL_POINTER;
  mainHashLoop:   for (int i=0; i < hashLineSize; i++) {
    final long currentHash=getHashCode(entries,index,i);
    if (currentHash == hashCode) {
      final byte[] currentKey=getKey(entries,index,i);
      if (currentKey.length != serializedKey.length)       continue;
      for (int j=0; j < currentKey.length; j++)       if (serializedKey[j] != currentKey[j])       continue mainHashLoop;
      final int valuePtr=memory.allocate(valueSerializer.getObjectSize(value));
      if (valuePtr == ODirectMemory.NULL_POINTER)       return false;
      memory.set(valuePtr,0,value,valueSerializer);
      return replaceValue(entries,index,i,valuePtr);
    }
  }
  int hashLinePtr=getNextHashLinePtr(entries,index);
  while (hashLinePtr != ODirectMemory.NULL_POINTER) {
    hashLineSize=getHashLineSizeFromHashLine(hashLinePtr);
    hashLineLoop:     for (int i=0; i < hashLineSize; i++) {
      final long currentHash=getHashCodeFromHashLine(hashLinePtr,i);
      if (currentHash == hashCode) {
        final byte[] currentKey=getKeyFromHashLine(entries,i);
        if (currentKey.length != serializedKey.length)         continue;
        for (int j=0; j < currentKey.length; j++)         if (serializedKey[j] != currentKey[j])         continue hashLineLoop;
        final int valuePtr=memory.allocate(valueSerializer.getObjectSize(value));
        if (valuePtr == ODirectMemory.NULL_POINTER)         return false;
        memory.set(valuePtr,0,value,valueSerializer);
        return replaceValueInHashLine(entries,i,valuePtr);
      }
    }
    prevHashLine=hashLinePtr;
    hashLinePtr=getNextHashLinePtrFromHashLine(hashLinePtr);
  }
  final int keyPtr=memory.allocate(OIntegerSerializer.INT_SIZE + serializedKey.length);
  if (keyPtr == ODirectMemory.NULL_POINTER)   return false;
  final int valuePtr=memory.allocate(valueSerializer.getObjectSize(value));
  if (valuePtr == ODirectMemory.NULL_POINTER) {
    memory.free(keyPtr);
    return false;
  }
  memory.setInt(keyPtr,0,serializedKey.length);
  memory.set(keyPtr,OIntegerSerializer.INT_SIZE,serializedKey.length,serializedKey);
  memory.set(valuePtr,0,value,valueSerializer);
  if (!appendEntry(hashCode,keyPtr,valuePtr,index,prevHashLine))   return false;
  size++;
  if (size >= nextThreshold)   rehash();
  return true;
}
