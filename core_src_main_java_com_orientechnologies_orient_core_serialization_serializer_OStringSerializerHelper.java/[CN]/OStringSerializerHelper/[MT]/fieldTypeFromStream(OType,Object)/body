{
  if (iValue == null)   return null;
switch (iType) {
case STRING:
    if (iValue instanceof String) {
      final String s=(String)iValue;
      return s.substring(1,s.length() - 1);
    }
  return iValue.toString();
case INTEGER:
if (iValue instanceof Integer) return iValue;
return new Integer(iValue.toString());
case BOOLEAN:
if (iValue instanceof Boolean) return iValue;
return new Boolean(iValue.toString());
case FLOAT:
if (iValue instanceof Float) return iValue;
return new Float(iValue.toString());
case LONG:
if (iValue instanceof Long) return iValue;
return new Long(iValue.toString());
case DOUBLE:
if (iValue instanceof Double) return iValue;
return new Double(iValue.toString());
case SHORT:
if (iValue instanceof Short) return iValue;
return new Short(iValue.toString());
case BYTE:
if (iValue instanceof Byte) return iValue;
return new Byte(iValue.toString());
case BINARY:
if (iValue instanceof byte[]) return iValue;
return iValue.toString().getBytes();
case DATE:
if (iValue instanceof Date) return iValue;
return new Date(Long.parseLong(iValue.toString()));
case LINK:
if (iValue instanceof ORID) return iValue.toString();
 else if (iValue instanceof String) return new ORecordId((String)iValue);
 else return ((ORecord<?>)iValue).getIdentity().toString();
case EMBEDDED:
return OStringSerializerAnyStreamable.INSTANCE.fromStream((String)iValue);
}
throw new IllegalArgumentException("Type " + iType + " not supported to convert value: "+ iValue);
}
