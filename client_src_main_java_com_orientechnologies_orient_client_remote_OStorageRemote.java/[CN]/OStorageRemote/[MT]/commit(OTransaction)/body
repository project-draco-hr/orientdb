{
  checkConnection();
  do {
    try {
      final Set<OTransactionRecordEntry> allEntries=new HashSet<OTransactionRecordEntry>();
      OChannelBinaryClient network=null;
      try {
        network=beginRequest(OChannelBinaryProtocol.REQUEST_TX_COMMIT);
        network.writeInt(((OTransaction)iTx).getId());
        network.writeByte((byte)(((OTransaction)iTx).isUsingLog() ? 1 : 0));
        final List<OTransactionRecordEntry> tmpEntries=new ArrayList<OTransactionRecordEntry>();
        while (iTx.getRecordEntries().iterator().hasNext()) {
          for (          OTransactionRecordEntry txEntry : iTx.getRecordEntries())           if (!allEntries.contains(txEntry))           tmpEntries.add(txEntry);
          iTx.clearRecordEntries();
          if (tmpEntries.size() > 0) {
            for (            OTransactionRecordEntry txEntry : tmpEntries)             commitEntry(network,txEntry);
            allEntries.addAll(tmpEntries);
            tmpEntries.clear();
          }
        }
        network.writeByte((byte)0);
        network.writeBytes(iTx.getIndexChanges().toStream());
      }
  finally {
        endRequest(network);
      }
      try {
        beginResponse(network);
        final int createdRecords=network.readInt();
        ORecordId currentRid;
        ORecordId createdRid;
        for (int i=0; i < createdRecords; i++) {
          currentRid=network.readRID();
          createdRid=network.readRID();
          for (          OTransactionRecordEntry txEntry : allEntries) {
            if (txEntry.getRecord().getIdentity().equals(currentRid)) {
              txEntry.getRecord().setIdentity(createdRid);
              break;
            }
          }
        }
        final int updatedRecords=network.readInt();
        ORecordId rid;
        for (int i=0; i < updatedRecords; ++i) {
          rid=network.readRID();
          for (          OTransactionRecordEntry txEntry : allEntries) {
            if (txEntry.getRecord().getIdentity().equals(rid)) {
              txEntry.getRecord().setVersion(network.readInt());
              break;
            }
          }
        }
      }
  finally {
        endResponse(network);
      }
      OTransactionAbstract.updateCacheFromEntries(this,iTx,allEntries);
      break;
    }
 catch (    OException e) {
      throw e;
    }
catch (    Exception e) {
      handleException("Error on commit",e);
    }
  }
 while (true);
}
