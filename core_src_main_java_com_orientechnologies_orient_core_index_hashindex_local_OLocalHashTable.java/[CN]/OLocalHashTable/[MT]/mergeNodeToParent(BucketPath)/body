{
  final int startIndex=findParentNodeStartIndex(nodePath);
  final int localNodeDepth=nodePath.nodeLocalDepth;
  final int hashMapSize=1 << localNodeDepth;
  final int parentIndex=nodePath.parent.nodeIndex;
  for (int i=0, k=startIndex; i < MAX_LEVEL_SIZE; i+=hashMapSize, k++) {
    directory.setNodePointer(parentIndex,k,directory.getNodePointer(nodePath.nodeIndex,i));
  }
  directory.deleteNode(nodePath.nodeIndex);
  if (nodePath.parent.itemIndex < MAX_LEVEL_SIZE / 2) {
    final int maxChildDepth=directory.getMaxLeftChildDepth(parentIndex);
    if (maxChildDepth == localNodeDepth)     directory.setMaxLeftChildDepth(parentIndex,(byte)getMaxLevelDepth(parentIndex,0,MAX_LEVEL_SIZE / 2));
  }
 else {
    final int maxChildDepth=directory.getMaxRightChildDepth(parentIndex);
    if (maxChildDepth == localNodeDepth)     directory.setMaxRightChildDepth(parentIndex,(byte)getMaxLevelDepth(parentIndex,MAX_LEVEL_SIZE / 2,MAX_LEVEL_SIZE));
  }
}
