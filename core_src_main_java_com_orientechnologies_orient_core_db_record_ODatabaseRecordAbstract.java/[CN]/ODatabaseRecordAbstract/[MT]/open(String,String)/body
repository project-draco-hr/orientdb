{
  setCurrentDatabaseinThreadLocal();
  try {
    super.open(iUserName,iUserPassword);
    componentsFactory=getStorage().getComponentsFactory();
    final OSBTreeCollectionManager sbTreeCM=getStorage().getResource(OSBTreeCollectionManager.class.getSimpleName(),new Callable<OSBTreeCollectionManager>(){
      @Override public OSBTreeCollectionManager call() throws Exception {
        Class<? extends OSBTreeCollectionManager> managerClass=getStorage().getCollectionManagerClass();
        if (managerClass == null) {
          OLogManager.instance().warn(this,"Current implementation of storage does not support sbtree collections");
          return null;
        }
 else {
          return managerClass.newInstance();
        }
      }
    }
);
    sbTreeCollectionManager=sbTreeCM != null ? new OSBTreeCollectionManagerProxy(this,sbTreeCM) : null;
    level1Cache.startup();
    metadata=new OMetadataDefault();
    metadata.load();
    recordFormat=DEF_RECORD_FORMAT;
    if (!(getStorage() instanceof OStorageProxy)) {
      if (metadata.getIndexManager().autoRecreateIndexesAfterCrash())       metadata.getIndexManager().recreateIndexes();
      user=getMetadata().getSecurity().authenticate(iUserName,iUserPassword);
      if (user != null) {
        final Set<ORole> roles=user.getRoles();
        if (roles == null || roles.isEmpty() || roles.iterator().next() == null) {
          for (          ODatabaseListener l : underlying.browseListeners()) {
            if (l.onCorruptionRepairDatabase(this,"Security metadata is broken: current user '" + user.getName() + "' has no roles defined","The 'admin' user will be reinstalled with default role ('admin') and password 'admin'")) {
              user=null;
              user=metadata.getSecurity().repair();
              break;
            }
          }
        }
      }
      installHooks();
    }
 else     user=new OUser(iUserName,OUser.encryptPassword(iUserPassword)).addRole(new ORole("passthrough",null,ORole.ALLOW_MODES.ALLOW_ALL_BUT));
    checkSecurity(ODatabaseSecurityResources.DATABASE,ORole.PERMISSION_READ);
    if (!metadata.getSchema().existsClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME))     metadata.getSchema().createClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME);
  }
 catch (  OException e) {
    close();
    throw e;
  }
catch (  Exception e) {
    close();
    throw new ODatabaseException("Cannot open database",e);
  }
  return (DB)this;
}
