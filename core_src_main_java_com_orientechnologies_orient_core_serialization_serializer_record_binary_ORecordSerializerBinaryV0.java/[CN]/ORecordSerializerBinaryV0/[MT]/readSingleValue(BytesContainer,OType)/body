{
  Object value=null;
switch (type) {
case INTEGER:
    value=OVarIntSerializer.read(bytes).intValue();
  break;
case LONG:
value=OVarIntSerializer.read(bytes).longValue();
break;
case SHORT:
value=OVarIntSerializer.read(bytes).shortValue();
break;
case STRING:
value=readString(bytes);
break;
case DOUBLE:
long parsedd=OLongSerializer.INSTANCE.deserialize(bytes.bytes,bytes.offset);
value=Double.longBitsToDouble(parsedd);
bytes.read(OLongSerializer.LONG_SIZE);
break;
case FLOAT:
int parsedf=OIntegerSerializer.INSTANCE.deserialize(bytes.bytes,bytes.offset);
value=Float.intBitsToFloat(parsedf);
bytes.read(OIntegerSerializer.INT_SIZE);
break;
case BYTE:
value=bytes.bytes[bytes.offset];
bytes.read(1);
break;
case BOOLEAN:
value=bytes.bytes[bytes.offset] == 1 ? true : false;
bytes.read(1);
break;
case DATETIME:
value=new Date(OVarIntSerializer.read(bytes).longValue());
break;
case DATE:
value=new Date((OVarIntSerializer.read(bytes).longValue() * MILLISEC_PER_DAY) - ONE_HOUR);
break;
case EMBEDDED:
value=new ODocument();
deserialize((ODocument)value,bytes);
break;
case EMBEDDEDSET:
value=readEmbeddedCollection(bytes,new HashSet<Object>());
break;
case EMBEDDEDLIST:
value=readEmbeddedCollection(bytes,new ArrayList<Object>());
break;
case LINKSET:
value=readLinkCollection(bytes,new HashSet<OIdentifiable>());
break;
case LINKLIST:
value=readLinkCollection(bytes,new ArrayList<OIdentifiable>());
break;
case BINARY:
Number n=OVarIntSerializer.read(bytes);
byte[] newValue=new byte[n.intValue()];
System.arraycopy(bytes.bytes,bytes.offset,newValue,0,newValue.length);
bytes.read(n.intValue());
value=newValue;
break;
case LINK:
value=readOptimizedLink(bytes);
break;
case LINKMAP:
value=readLinkMap(bytes);
break;
case EMBEDDEDMAP:
value=readEmbeddedMap(bytes);
break;
case DECIMAL:
break;
default :
break;
}
return value;
}
