{
  for (int i=0; i < 100; i++) {
    int upperBorder=keyValues.lastKey() + 5000;
    int toKey;
    if (upperBorder > 0)     toKey=random.nextInt(upperBorder) - 5000;
 else     toKey=random.nextInt(Integer.MAX_VALUE) - 5000;
    if (random.nextBoolean()) {
      Integer includedKey=keyValues.ceilingKey(toKey);
      if (includedKey != null)       toKey=includedKey;
 else       toKey=keyValues.floorKey(toKey);
    }
    final OSBTree.OSBTreeCursor<Integer,OIdentifiable> cursor=sbTree.iterateEntriesMinor(toKey,keyInclusive,ascSortOrder);
    Iterator<Map.Entry<Integer,ORID>> iterator;
    if (ascSortOrder)     iterator=keyValues.headMap(toKey,keyInclusive).entrySet().iterator();
 else     iterator=keyValues.headMap(toKey,keyInclusive).descendingMap().entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry<Integer,OIdentifiable> indexEntry=cursor.next(-1);
      Map.Entry<Integer,ORID> entry=iterator.next();
      Assert.assertEquals(indexEntry.getKey(),entry.getKey());
      Assert.assertEquals(indexEntry.getValue(),entry.getValue());
    }
    Assert.assertFalse(iterator.hasNext());
    Assert.assertNull(cursor.next(-1));
  }
}
