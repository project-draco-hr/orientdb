{
  final OCommandRequestText textRequest=(OCommandRequestText)iRequest;
  String queryText=textRequest.getText();
  String originalQuery=queryText;
  try {
    queryText=preParse(queryText,iRequest);
    textRequest.setText(queryText);
    init((OCommandRequestText)iRequest);
    final StringBuilder word=new StringBuilder();
    int oldPos=0;
    int pos=nextWord(parserText,parserTextUpperCase,oldPos,word,true);
    if (pos == -1 || !word.toString().equals(KEYWORD_DROP))     throw new OCommandSQLParsingException("Keyword " + KEYWORD_DROP + " not found. Use "+ getSyntax(),parserText,oldPos);
    pos=nextWord(parserText,parserTextUpperCase,pos,word,true);
    if (pos == -1 || !word.toString().equals(KEYWORD_PROPERTY))     throw new OCommandSQLParsingException("Keyword " + KEYWORD_PROPERTY + " not found. Use "+ getSyntax(),parserText,oldPos);
    pos=nextWord(parserText,parserTextUpperCase,pos,word,false);
    if (pos == -1)     throw new OCommandSQLParsingException("Expected <class>.<property>. Use " + getSyntax(),parserText,pos);
    String[] parts=word.toString().split("\\.");
    if (parts.length != 2)     throw new OCommandSQLParsingException("Expected <class>.<property>. Use " + getSyntax(),parserText,pos);
    className=parts[0];
    if (className == null)     throw new OCommandSQLParsingException("Class not found",parserText,pos);
    fieldName=parts[1];
    pos=nextWord(parserText,parserTextUpperCase,pos,word,false);
    if (pos != -1) {
      final String forceParameter=word.toString();
      if ("FORCE".equals(forceParameter)) {
        force=true;
      }
 else {
        throw new OCommandSQLParsingException("Wrong query parameter",parserText,pos);
      }
    }
  }
  finally {
    textRequest.setText(originalQuery);
  }
  return this;
}
