{
  long seed=1381299802658L;
  System.out.println("testSearch seed : " + seed);
  TreeSet<Long> keys=new TreeSet<Long>();
  Random random=new Random(seed);
  while (keys.size() < 2 * OSBTreeBonsaiBucket.MAX_BUCKET_SIZE_BYTES / OLongSerializer.LONG_SIZE) {
    keys.add(random.nextLong());
  }
  ODirectMemoryPointer pointer=ODirectMemoryPointerFactory.instance().createPointer(ODurablePage.MAX_PAGE_SIZE_BYTES);
  OCachePointer cachePointer=new OCachePointer(pointer,new OLogSequenceNumber(0,0),0,0);
  cachePointer.incrementReferrer();
  OCacheEntry cacheEntry=new OCacheEntry(0,0,cachePointer,false);
  OSBTreeBonsaiBucket<Long,OIdentifiable> treeBucket=new OSBTreeBonsaiBucket<Long,OIdentifiable>(cacheEntry,0,false,OLongSerializer.INSTANCE,OLinkSerializer.INSTANCE,null,null);
  int index=0;
  Map<Long,Integer> keyIndexMap=new HashMap<Long,Integer>();
  for (  Long key : keys) {
    if (!treeBucket.addEntry(index,new OSBTreeBonsaiBucket.SBTreeEntry<Long,OIdentifiable>(new OBonsaiBucketPointer(random.nextInt(Integer.MAX_VALUE),8192 * 2),new OBonsaiBucketPointer(random.nextInt(Integer.MAX_VALUE),8192 * 2),key,null),true))     break;
    keyIndexMap.put(key,index);
    index++;
  }
  Assert.assertEquals(treeBucket.size(),keyIndexMap.size());
  for (  Map.Entry<Long,Integer> keyIndexEntry : keyIndexMap.entrySet()) {
    int bucketIndex=treeBucket.find(keyIndexEntry.getKey());
    Assert.assertEquals(bucketIndex,(int)keyIndexEntry.getValue());
  }
  OBonsaiBucketPointer prevRight=OBonsaiBucketPointer.NULL;
  for (int i=0; i < treeBucket.size(); i++) {
    OSBTreeBonsaiBucket.SBTreeEntry<Long,OIdentifiable> entry=treeBucket.getEntry(i);
    if (prevRight.getPageIndex() > 0)     Assert.assertEquals(entry.leftChild,prevRight);
    prevRight=entry.rightChild;
  }
  OBonsaiBucketPointer prevLeft=OBonsaiBucketPointer.NULL;
  for (int i=treeBucket.size() - 1; i >= 0; i--) {
    OSBTreeBonsaiBucket.SBTreeEntry<Long,OIdentifiable> entry=treeBucket.getEntry(i);
    if (prevLeft.getPageIndex() > 0)     Assert.assertEquals(entry.rightChild,prevLeft);
    prevLeft=entry.leftChild;
  }
  cachePointer.decrementReferrer();
}
