{
  checkOpeness();
  if (!(iRecord instanceof ODocument))   return (RET)currentTx.saveRecord(iRecord,iClusterName,iMode,iForceCreate,iRecordCreatedCallback,iRecordUpdatedCallback);
  ODocument doc=(ODocument)iRecord;
  ODocumentInternal.checkClass(doc,this);
  if (!getTransaction().isActive() || getTransaction().getStatus() == OTransaction.TXSTATUS.COMMITTING)   doc.validate();
  ODocumentInternal.convertAllMultiValuesToTrackedVersions(doc);
  if (iForceCreate || !doc.getIdentity().isValid()) {
    if (doc.getClassName() != null)     checkSecurity(ORule.ResourceGeneric.CLASS,ORole.PERMISSION_CREATE,doc.getClassName());
    final OClass schemaClass=ODocumentInternal.getImmutableSchemaClass(doc);
    int clusterId=iRecord.getIdentity().getClusterId();
    if (clusterId == ORID.CLUSTER_ID_INVALID) {
      if (iClusterName == null) {
        if (storage.isAssigningClusterIds()) {
          if (schemaClass != null) {
            if (schemaClass.isAbstract())             throw new OSchemaException("Document belongs to abstract class " + schemaClass.getName() + " and can not be saved");
            clusterId=schemaClass.getClusterForNewInstance(doc);
            iClusterName=getClusterNameById(clusterId);
          }
 else {
            clusterId=storage.getDefaultClusterId();
            iClusterName=getClusterNameById(clusterId);
          }
        }
      }
 else {
        clusterId=getClusterIdByName(iClusterName);
        if (clusterId == -1)         throw new IllegalArgumentException("Cluster name '" + iClusterName + "' is not configured");
      }
    }
    if (schemaClass != null && clusterId > -1 && !schemaClass.hasClusterId(clusterId)) {
      throw new IllegalArgumentException("Cluster name '" + iClusterName + "' (id="+ clusterId+ ") is not configured to store the class '"+ doc.getClassName()+ "', valid are "+ Arrays.toString(schemaClass.getClusterIds()));
    }
    ((ORecordId)iRecord.getIdentity()).clusterId=clusterId;
  }
 else {
    if (doc.getClassName() != null)     checkSecurity(ORule.ResourceGeneric.CLASS,ORole.PERMISSION_UPDATE,doc.getClassName());
  }
  doc=(ODocument)currentTx.saveRecord(iRecord,iClusterName,iMode,iForceCreate,iRecordCreatedCallback,iRecordUpdatedCallback);
  return (RET)doc;
}
