{
  checkForDatabase();
  final OClass cls=currentDatabase.getMetadata().getImmutableSchemaSnapshot().getClass(iClassName);
  if (cls == null) {
    message("\n! Class '" + iClassName + "' does not exist in the database '"+ currentDatabaseName+ "'");
    return;
  }
  message("\nCLASS '" + cls.getName() + "'\n");
  final long count=currentDatabase.countClass(cls.getName(),false);
  message("\nRecords..............: " + count);
  if (cls.getShortName() != null)   message("\nAlias................: " + cls.getShortName());
  if (cls.hasSuperClasses())   message("\nSuper classes........: " + Arrays.toString(cls.getSuperClassesNames().toArray()));
  message("\nDefault cluster......: " + currentDatabase.getClusterNameById(cls.getDefaultClusterId()) + " (id="+ cls.getDefaultClusterId()+ ")");
  final StringBuilder clusters=new StringBuilder();
  for (  int clId : cls.getClusterIds()) {
    if (clusters.length() > 0)     clusters.append(", ");
    clusters.append(currentDatabase.getClusterNameById(clId));
    clusters.append("(");
    clusters.append(clId);
    clusters.append(")");
  }
  message("\nSupported clusters...: " + clusters.toString());
  message("\nCluster selection....: " + cls.getClusterSelection().getName());
  message("\nOversize.............: " + cls.getClassOverSize());
  if (!cls.getSubclasses().isEmpty()) {
    message("\nSubclasses.........: ");
    int i=0;
    for (    OClass c : cls.getSubclasses()) {
      if (i > 0)       message(", ");
      message(c.getName());
      ++i;
    }
    out.println();
  }
  if (cls.properties().size() > 0) {
    message("\n\nPROPERTIES");
    final List<ODocument> resultSet=new ArrayList<ODocument>();
    for (    final OProperty p : cls.properties()) {
      try {
        final ODocument row=new ODocument();
        resultSet.add(row);
        row.field("NAME",p.getName());
        row.field("TYPE",p.getType());
        row.field("LINKED-TYPE/CLASS",p.getLinkedClass() != null ? p.getLinkedClass() : p.getLinkedType());
        row.field("MANDATORY",p.isMandatory());
        row.field("READONLY",p.isReadonly());
        row.field("NOT-NULL",p.isNotNull());
        row.field("MIN",p.getMin() != null ? p.getMin() : "");
        row.field("MAX",p.getMax() != null ? p.getMax() : "");
        row.field("COLLATE",p.getCollate() != null ? p.getCollate().getName() : "");
        row.field("DEFAULT",p.getDefaultValue() != null ? p.getDefaultValue() : "");
      }
 catch (      Exception ignored) {
      }
    }
    final OTableFormatter formatter=new OTableFormatter(this);
    formatter.writeRecords(resultSet,-1);
  }
  final Set<OIndex<?>> indexes=cls.getClassIndexes();
  if (!indexes.isEmpty()) {
    message("\n\nINDEXES (" + indexes.size() + " altogether)");
    final List<ODocument> resultSet=new ArrayList<ODocument>();
    for (    final OIndex<?> index : indexes) {
      final ODocument row=new ODocument();
      resultSet.add(row);
      row.field("NAME",index.getName());
      final OIndexDefinition indexDefinition=index.getDefinition();
      if (indexDefinition != null) {
        final List<String> fields=indexDefinition.getFields();
        row.field("PROPERTIES",fields);
      }
    }
    final OTableFormatter formatter=new OTableFormatter(this);
    formatter.writeRecords(resultSet,-1);
  }
  if (cls.getCustomKeys().size() > 0) {
    message("\n\nCUSTOM ATTRIBUTES");
    final List<ODocument> resultSet=new ArrayList<ODocument>();
    for (    final String k : cls.getCustomKeys()) {
      try {
        final ODocument row=new ODocument();
        resultSet.add(row);
        row.field("NAME",k);
        row.field("VALUE",cls.getCustom(k));
      }
 catch (      Exception ignored) {
      }
    }
    final OTableFormatter formatter=new OTableFormatter(this);
    formatter.writeRecords(resultSet,-1);
  }
}
