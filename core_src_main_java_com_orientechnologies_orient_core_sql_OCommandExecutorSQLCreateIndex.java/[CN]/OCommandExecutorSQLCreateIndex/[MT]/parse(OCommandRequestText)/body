{
  iRequest.getDatabase().checkSecurity(ODatabaseSecurityResources.COMMAND,ORole.PERMISSION_CREATE);
  init(iRequest.getDatabase(),iRequest.getText());
  StringBuilder word=new StringBuilder();
  int oldPos=0;
  int pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
  if (pos == -1 || !word.toString().equals(KEYWORD_CREATE))   throw new OCommandSQLParsingException("Keyword " + KEYWORD_CREATE + " not found",text,oldPos);
  oldPos=pos;
  pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
  if (pos == -1 || !word.toString().equals(KEYWORD_INDEX))   throw new OCommandSQLParsingException("Keyword " + KEYWORD_INDEX + " not found",text,oldPos);
  oldPos=pos;
  pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,false);
  if (pos == -1)   throw new OCommandSQLParsingException("Expected <class>.<property>",text,oldPos);
  oldPos=pos;
  String[] parts=word.toString().split("\\.");
  if (parts.length != 2)   throw new OCommandSQLParsingException("Expected <class>.<property>",text,pos);
  sourceClassName=parts[0];
  if (sourceClassName == null)   throw new OCommandSQLParsingException("Class not found",text,pos);
  field=parts[1];
  pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
  if (pos == -1)   throw new OCommandSQLParsingException("Index type requested.",text,oldPos + 1);
  indexType=word.toString();
  if (indexType == null)   throw new OCommandSQLParsingException("Index type requested.",text,pos);
  return this;
}
