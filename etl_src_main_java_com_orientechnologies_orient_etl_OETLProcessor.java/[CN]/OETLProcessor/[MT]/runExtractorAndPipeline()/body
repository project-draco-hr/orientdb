{
  executor=Executors.newCachedThreadPool();
  try {
    out(LOG_LEVELS.INFO,"Started execution with %d worker threads",workers);
    extractor.extract(source.read());
    queue=new LinkedBlockingQueue<OExtractedItem>(workers * 500);
    final AtomicLong counter=new AtomicLong();
    List<Future<Boolean>> tasks=new ArrayList<Future<Boolean>>();
    for (int i=0; i < workers; i++) {
      final OETLPipeline pipeline=new OETLPipeline(this,transformers,loader,logLevel,maxRetries,haltOnError);
      OETLPipelineWorker task=new OETLPipelineWorker(queue,pipeline);
      tasks.add(executor.submit(task));
    }
    Future<Boolean> extractorFuture=executor.submit(new OETLExtractorWorker(queue,counter));
    Boolean extracted=extractorFuture.get();
    for (    Future<Boolean> future : tasks) {
      Boolean result=future.get(1,TimeUnit.MINUTES);
      out(LOG_LEVELS.DEBUG,"Pipeline worker done without errors:: " + result);
    }
    out(LOG_LEVELS.DEBUG,"all items extracted");
    executor.shutdown();
  }
 catch (  OETLProcessHaltedException e) {
    out(LOG_LEVELS.ERROR,"ETL process halted: %s",e);
    executor.shutdownNow();
  }
catch (  Exception e) {
    out(LOG_LEVELS.ERROR,"ETL process has problem: %s",e);
    executor.shutdownNow();
  }
}
