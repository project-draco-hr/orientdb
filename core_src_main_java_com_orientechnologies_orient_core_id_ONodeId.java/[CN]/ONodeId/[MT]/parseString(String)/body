{
  final int intChunkLength=9;
  final int longChunkLength=18;
  int signum;
  int pos;
  if (value.charAt(0) == '-') {
    pos=1;
    signum=-1;
  }
 else {
    pos=0;
    signum=1;
  }
  while (pos < value.length() && Character.digit(value.charAt(pos),10) == 0)   pos++;
  if (pos == value.length())   return ZERO;
  int chunkToRead=Math.min(pos + longChunkLength,value.length());
  long initialValue=Long.parseLong(value.substring(pos,chunkToRead));
  pos=chunkToRead;
  int[] result=new int[CHUNKS_SIZE];
  result[CHUNKS_SIZE - 1]=(int)initialValue;
  result[CHUNKS_SIZE - 2]=(int)(initialValue >>> 32);
  while (pos < value.length()) {
    chunkToRead=Math.min(pos + intChunkLength,value.length());
    int parsedValue=Integer.parseInt(value.substring(pos,chunkToRead));
    final int multiplier=(chunkToRead == intChunkLength) ? 1000000000 : (int)Math.pow(10,chunkToRead - pos);
    multiplyAndAdd(result,multiplier,parsedValue);
    pos=chunkToRead;
  }
  return new ONodeId(result,signum);
}
