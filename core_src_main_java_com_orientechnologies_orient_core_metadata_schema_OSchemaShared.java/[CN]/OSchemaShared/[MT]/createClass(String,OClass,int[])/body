{
  getDatabase().checkSecurity(ODatabaseSecurityResources.SCHEMA,ORole.PERMISSION_CREATE);
  final String key=iClassName.toLowerCase();
  return getDatabase().getStorage().callInLock(new Callable<OClass>(){
    @Override public OClass call() throws Exception {
      if (classes.containsKey(key))       throw new OSchemaException("Class " + iClassName + " already exists in current database");
      final StringBuilder cmd=new StringBuilder("create class ");
      cmd.append(iClassName);
      if (iSuperClass != null) {
        cmd.append(" extends ");
        cmd.append(iSuperClass.getName());
      }
      if (iClusterIds != null) {
        if (iClusterIds.length == 1 && iClusterIds[0] == -1)         cmd.append(" abstract");
 else {
          cmd.append(" cluster ");
          for (int i=0; i < iClusterIds.length; ++i) {
            if (i > 0)             cmd.append(',');
 else             cmd.append(' ');
            cmd.append(iClusterIds[i]);
          }
        }
      }
      getDatabase().command(new OCommandSQL(cmd.toString())).execute();
      if (!(getDatabase().getStorage() instanceof OStorageEmbedded))       getDatabase().reload();
      if (classes.containsKey(key))       return classes.get(key);
 else       createClassInternal(iClassName,iSuperClass,iClusterIds);
      return classes.get(key);
    }
  }
,true);
}
