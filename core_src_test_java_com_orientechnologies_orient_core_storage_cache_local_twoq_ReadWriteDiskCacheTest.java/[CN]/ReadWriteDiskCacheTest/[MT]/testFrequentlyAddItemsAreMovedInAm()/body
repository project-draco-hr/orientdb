{
  long fileId=readBuffer.addFile(fileName,writeBuffer);
  OCacheEntry[] entries=new OCacheEntry[10];
  for (int i=0; i < 10; i++) {
    entries[i]=readBuffer.load(fileId,i,false,writeBuffer,1);
    if (entries[i] == null) {
      entries[i]=readBuffer.allocateNewPage(fileId,writeBuffer);
      Assert.assertEquals(entries[i].getPageIndex(),i);
    }
    entries[i].getCachePointer().acquireExclusiveLock();
    entries[i].markDirty();
    final ByteBuffer buffer=entries[i].getCachePointer().getSharedBuffer();
    buffer.position(systemOffset);
    buffer.put(new byte[]{(byte)i,1,2,seed,4,5,6,(byte)i});
    setLsn(buffer,new OLogSequenceNumber(1,i));
    entries[i].getCachePointer().releaseExclusiveLock();
    readBuffer.release(entries[i],writeBuffer);
  }
  LRUList am=readBuffer.getAm();
  LRUList a1in=readBuffer.getA1in();
  LRUList a1out=readBuffer.getA1out();
  Assert.assertEquals(a1in.size(),4);
  Assert.assertEquals(a1out.size(),2);
  Assert.assertEquals(am.size(),0);
  OByteBufferPool bufferPool=OByteBufferPool.instance();
  for (int i=6; i < 10; i++) {
    OCacheEntry lruEntry=generateEntry(fileId,i,entries[i].getCachePointer().getSharedBuffer(),bufferPool,false,new OLogSequenceNumber(0,0));
    Assert.assertEquals(a1in.get(fileId,i),lruEntry);
  }
  for (int i=4; i < 6; i++) {
    OCacheEntry lruEntry=generateRemovedEntry(fileId,i);
    Assert.assertEquals(a1out.get(fileId,i),lruEntry);
  }
  for (int i=4; i < 6; i++) {
    entries[i]=readBuffer.load(fileId,i,false,writeBuffer,1);
    readBuffer.release(entries[i],writeBuffer);
  }
  Assert.assertEquals(am.size(),2);
  Assert.assertEquals(a1in.size(),2);
  Assert.assertEquals(a1out.size(),2);
  for (int i=4; i < 6; i++) {
    OCacheEntry lruEntry=generateEntry(fileId,i,entries[i].getCachePointer().getSharedBuffer(),bufferPool,false,new OLogSequenceNumber(1,i));
    Assert.assertEquals(am.get(fileId,i),lruEntry);
  }
  for (int i=6; i < 8; i++) {
    OCacheEntry lruEntry=generateRemovedEntry(fileId,i);
    Assert.assertEquals(a1out.get(fileId,i),lruEntry);
  }
  for (int i=8; i < 10; i++) {
    OCacheEntry lruEntry=generateEntry(fileId,i,entries[i].getCachePointer().getSharedBuffer(),bufferPool,false,new OLogSequenceNumber(0,0));
    Assert.assertEquals(a1in.get(fileId,i),lruEntry);
  }
  writeBuffer.flush();
  for (int i=0; i < 10; i++)   assertFile(i,new byte[]{(byte)i,1,2,seed,4,5,6,(byte)i},new OLogSequenceNumber(1,i));
}
