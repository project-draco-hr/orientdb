{
  writeAheadLog.close();
  OLocalPaginatedStorage paginatedStorage=mock(OLocalPaginatedStorage.class);
  when(paginatedStorage.getName()).thenReturn("WriteAheadLogTest");
  when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());
  writeAheadLog=new OWriteAheadLog(1024,-1,2048,2 * 2048,paginatedStorage);
  List<OWALRecord> writtenRecords=new ArrayList<OWALRecord>();
  Random rnd=new Random();
  OWALRecord walRecord=new OFuzzyCheckpointStartRecord();
  writeAheadLog.logRecord(walRecord);
  writtenRecords.add(walRecord);
  walRecord=new OFuzzyCheckpointStartRecord();
  writeAheadLog.logRecord(walRecord);
  writtenRecords.add(walRecord);
  OSetPageDataRecord setPageDataRecord=new OSetPageDataRecord(1,"test");
  final int firstRecordsToWrite=(2048 - 2 * serializeSize(walRecord)) / serializeSize(setPageDataRecord);
  for (int i=0; i < firstRecordsToWrite; i++) {
    long pageIndex=rnd.nextLong();
    setPageDataRecord=new OSetPageDataRecord(pageIndex,"test");
    writtenRecords.add(setPageDataRecord);
    writeAheadLog.logRecord(setPageDataRecord);
  }
  int recordsToWrite=2 * (2048 / serializeSize(setPageDataRecord));
  for (int i=0; i < recordsToWrite - 1; i++) {
    long pageIndex=rnd.nextLong();
    setPageDataRecord=new OSetPageDataRecord(pageIndex,"test");
    writtenRecords.add(setPageDataRecord);
    writeAheadLog.logRecord(setPageDataRecord);
  }
  walRecord=new OFuzzyCheckpointStartRecord();
  writeAheadLog.logRecord(walRecord);
  writtenRecords.add(walRecord);
  assertLogContent(writeAheadLog,writtenRecords.subList(firstRecordsToWrite + 2,writtenRecords.size()));
  Assert.assertEquals(walRecord.getLsn(),writeAheadLog.getLastCheckpoint());
  Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstRecordsToWrite + 1).getLsn()));
  verify(paginatedStorage).scheduleCheckpoint();
  Assert.assertEquals(writeAheadLog.begin(),new OLogSequenceNumber(1,0));
}
