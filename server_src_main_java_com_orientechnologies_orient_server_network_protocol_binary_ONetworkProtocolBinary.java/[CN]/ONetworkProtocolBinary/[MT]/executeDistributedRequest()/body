{
  setDataCommandInfo("Distributed request");
  final byte[] serializedReq=channel.readBytes();
  final ODistributedServerManager manager=server.getDistributedManager();
  final ODistributedRequest req=manager.createRequest();
  for (int retry=1; ; ++retry) {
    final ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(serializedReq));
    try {
      req.readExternal(in);
    }
 catch (    ClassNotFoundException e) {
      throw new IOException("Error on unmarshalling of remote task",e);
    }
    ODistributedServerLog.debug(this,manager.getLocalNodeName(),req.getSenderNodeName(),ODistributedServerLog.DIRECTION.IN,"Received request %s (%d bytes)",req,serializedReq.length);
    final ORemoteTask task=req.getTask();
    final ODistributedDatabase ddb=manager.getMessageService().getDatabase(req.getDatabaseName());
    if (ddb != null) {
      final long waitForMessage=ddb.getWaitForMessageId();
      if (waitForMessage > -1) {
        if (!(task instanceof ODistributedDatabaseChunk)) {
          ODistributedServerLog.info(this,manager.getLocalNodeName(),req.getSenderNodeName(),ODistributedServerLog.DIRECTION.IN,"Skipping request %s waiting for %d",req,waitForMessage);
          return;
        }
        ddb.setWaitForMessage(-1);
      }
    }
    if (task.isRequiredOpenDatabase())     waitNodeIsOnline(req);
    Object responsePayload;
    try {
      task.setNodeSource(req.getSenderNodeName());
      ODatabaseDocumentTx db=connection.getDatabase();
      if (req.getDatabaseName() != null && (db == null || !db.getName().equals(req.getDatabaseName()))) {
        db=(ODatabaseDocumentTx)server.openDatabase(req.getDatabaseName(),"internal","internal",null,true);
        connection.setDatabase(db);
      }
      final ODatabaseDocumentTx database=db;
      ODistributedServerLog.debug(this,manager.getLocalNodeName(),req.getSenderNodeName(),ODistributedServerLog.DIRECTION.IN,"Executing request %s (%d bytes)",req,serializedReq.length);
      responsePayload=OScenarioThreadLocal.executeAsDistributed(new Callable<Object>(){
        @Override public Object call() throws Exception {
          return task.execute(server,server.getDistributedManager(),database);
        }
      }
);
    }
 catch (    RuntimeException e) {
      responsePayload=e;
    }
catch (    Exception e) {
      ODistributedServerLog.error(this,manager.getLocalNodeName(),req.getSenderNodeName(),ODistributedServerLog.DIRECTION.IN,"Error on executing request %s",e,req);
      responsePayload=e;
    }
    if (responsePayload instanceof OModificationOperationProhibitedException) {
      try {
        ODistributedServerLog.info(this,manager.getLocalNodeName(),req.getSenderNodeName(),ODistributedServerLog.DIRECTION.IN,"Database is frozen, waiting and retrying. Request %s (retry=%d)",req,retry);
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
    }
 else {
      if (retry > 1)       ODistributedServerLog.info(this,manager.getLocalNodeName(),req.getSenderNodeName(),ODistributedServerLog.DIRECTION.IN,"Request %s succeed after retry=%d",req,retry);
      ODistributedServerLog.debug(this,manager.getLocalNodeName(),req.getSenderNodeName(),ODistributedServerLog.DIRECTION.OUT,"sending back response '%s' to request %d (%s)",responsePayload,req.getId(),task);
      final ODistributedResponse response=manager.createResponse(req.getId(),manager.getLocalNodeName(),req.getSenderNodeName(),(Serializable)responsePayload);
      try {
        final ORemoteServerController remoteSenderServer=manager.getRemoteServer(req.getSenderNodeName());
        ODistributedServerLog.debug(this,manager.getLocalNodeName(),req.getSenderNodeName(),ODistributedServerLog.DIRECTION.OUT,"Sending back response %s to %s",response,req.getSenderNodeName());
        remoteSenderServer.sendResponse(response,req.getSenderNodeName());
      }
 catch (      Exception e) {
        throw OException.wrapException(new ODistributedException("Cannot send response to the sender node " + req.getSenderNodeName()),e);
      }
      break;
    }
  }
}
