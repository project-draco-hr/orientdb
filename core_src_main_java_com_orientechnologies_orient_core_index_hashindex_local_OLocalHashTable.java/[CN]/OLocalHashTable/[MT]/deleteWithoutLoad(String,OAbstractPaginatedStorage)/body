{
  final OAtomicOperation atomicOperation;
  try {
    atomicOperation=startAtomicOperation();
  }
 catch (  IOException e) {
    throw new OIndexException("Error during hash table deletion.",e);
  }
  acquireExclusiveLock();
  try {
    final ODiskCache diskCache=storage.getDiskCache();
    if (isFileExists(atomicOperation,name + metadataConfigurationFileExtension,diskCache)) {
      fileStateId=openFile(atomicOperation,name + metadataConfigurationFileExtension,diskCache);
      deleteFile(atomicOperation,fileStateId,diskCache);
    }
    directory=new OHashTableDirectory(treeStateFileExtension,name,durableInNonTxMode,storage);
    directory.deleteWithoutOpen();
    if (isFileExists(atomicOperation,name + nullBucketFileExtension,diskCache)) {
      final long nullBucketId=openFile(atomicOperation,name + nullBucketFileExtension,diskCache);
      deleteFile(atomicOperation,nullBucketId,diskCache);
    }
    if (isFileExists(atomicOperation,name + bucketFileExtension,diskCache)) {
      final long fileId=openFile(atomicOperation,name + bucketFileExtension,diskCache);
      deleteFile(atomicOperation,fileId,diskCache);
    }
    endAtomicOperation(false);
  }
 catch (  IOException ioe) {
    rollback();
    throw new OIndexException("Can not delete hash table with name " + name,ioe);
  }
catch (  Exception e) {
    rollback();
    throw new OIndexException("Can not delete hash table with name " + name,e);
  }
 finally {
    releaseExclusiveLock();
  }
}
