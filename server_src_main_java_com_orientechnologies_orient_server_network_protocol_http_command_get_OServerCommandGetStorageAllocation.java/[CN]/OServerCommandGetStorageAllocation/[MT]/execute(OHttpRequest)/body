{
  String[] urlParts=checkSyntax(iRequest.url,2,"Syntax error: allocation/<database>");
  iRequest.data.commandInfo="Storage allocation";
  iRequest.data.commandDetail=urlParts[1];
  ODatabaseDocumentTx db=null;
  try {
    db=getProfiledDatabaseInstance(iRequest);
    final List<OPhysicalPosition> holes=((OStorageLocal)db.getStorage()).getHolesList();
    Collections.sort(holes);
    final StringWriter buffer=new StringWriter();
    final OJSONWriter json=new OJSONWriter(buffer);
    final ODataLocal dataSegment=((OStorageLocal)db.getStorage()).getDataSegment(0);
    final long dbSize=dataSegment.getFilledUpTo();
    json.beginObject();
    json.writeAttribute(1,true,"size",dbSize);
    long current=0;
    long holesSize=0;
    json.beginCollection(1,true,"segments");
    for (    OPhysicalPosition h : holes) {
      if (h.dataPosition == -1)       continue;
      if (current < h.dataPosition) {
        json.beginObject(2,true,null);
        json.writeAttribute(3,false,"type","d");
        json.writeAttribute(3,false,"offset",current);
        json.writeAttribute(3,false,"size",h.dataPosition - current);
        json.endObject(2,false);
      }
      json.beginObject(2,true,null);
      json.writeAttribute(3,false,"type","h");
      json.writeAttribute(3,false,"offset",h.dataPosition);
      json.writeAttribute(3,false,"size",h.recordSize);
      json.endObject(2,false);
      holesSize+=h.recordSize;
      current=h.dataPosition + h.recordSize;
    }
    if (dbSize > current) {
      json.beginObject(2,true,null);
      json.writeAttribute(3,false,"type","d");
      json.writeAttribute(3,false,"offset",current);
      json.writeAttribute(3,false,"size",dbSize - current);
      json.endObject(2,false);
    }
    json.endCollection(1,true);
    json.writeAttribute(1,true,"dataSize",dbSize - holesSize);
    json.writeAttribute(1,true,"dataSizePercent",(dbSize - holesSize) * 100 / dbSize);
    json.writeAttribute(1,true,"holesSize",holesSize);
    json.writeAttribute(1,true,"holesSizePercent",100 - (dbSize - holesSize) * 100 / dbSize);
    json.endObject();
    json.flush();
    sendTextContent(iRequest,OHttpUtils.STATUS_OK_CODE,"OK",null,OHttpUtils.CONTENT_JSON,buffer.toString());
  }
  finally {
    if (db != null)     OSharedDocumentDatabase.release(db);
  }
  return false;
}
