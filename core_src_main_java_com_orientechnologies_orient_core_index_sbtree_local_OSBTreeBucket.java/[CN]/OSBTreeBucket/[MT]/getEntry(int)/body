{
  int entryPosition=getIntValue(entryIndex * OIntegerSerializer.INT_SIZE + POSITIONS_ARRAY_OFFSET);
  if (isLeaf) {
    K key=keySerializer.deserializeFromDirectMemory(directMemory,pagePointer + entryPosition);
    entryPosition+=keySerializer.getObjectSizeInDirectMemory(directMemory,pagePointer + entryPosition);
    ORID value=OLinkSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + entryPosition).getIdentity();
    return new SBTreeEntry<K>(-1,-1,key,value);
  }
 else {
    long leftChild=getLongValue(entryPosition);
    entryPosition+=OLongSerializer.LONG_SIZE;
    long rightChild=getLongValue(entryPosition);
    entryPosition+=OLongSerializer.LONG_SIZE;
    K key=keySerializer.deserializeFromDirectMemory(directMemory,pagePointer + entryPosition);
    return new SBTreeEntry<K>(leftChild,rightChild,key,null);
  }
}
