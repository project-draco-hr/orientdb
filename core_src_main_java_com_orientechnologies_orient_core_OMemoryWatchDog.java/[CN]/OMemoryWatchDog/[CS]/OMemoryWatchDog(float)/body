{
  OMemoryWatchDog.setPercentageUsageThreshold(iThreshold);
  final MemoryMXBean memBean=ManagementFactory.getMemoryMXBean();
  final NotificationEmitter memEmitter=(NotificationEmitter)memBean;
  memEmitter.addNotificationListener(new NotificationListener(){
    public void handleNotification(    Notification n,    Object hb){
      if (n.getType().equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED)) {
        alertTimes++;
        final long maxMemory=tenuredGenPool.getUsage().getMax();
        final long usedMemory=tenuredGenPool.getUsage().getUsed();
        OLogManager.instance().warn(this,"Low memory (%s of %s), calling listeners to free memory...",OFileUtils.getSizeAsString(usedMemory),OFileUtils.getSizeAsString(maxMemory));
        final long timer=OProfiler.getInstance().startChrono();
        for (        Listener listener : listeners) {
          try {
            listener.memoryUsageLow(TYPE.JVM,usedMemory,maxMemory);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
          OProfiler.getInstance().stopChrono("OMemoryWatchDog.freeResources",timer);
        }
      }
    }
  }
,null,null);
  OProfiler.getInstance().registerHookValue("memory.alerts",new OProfilerHookValue(){
    public Object getValue(){
      return alertTimes;
    }
  }
);
}
