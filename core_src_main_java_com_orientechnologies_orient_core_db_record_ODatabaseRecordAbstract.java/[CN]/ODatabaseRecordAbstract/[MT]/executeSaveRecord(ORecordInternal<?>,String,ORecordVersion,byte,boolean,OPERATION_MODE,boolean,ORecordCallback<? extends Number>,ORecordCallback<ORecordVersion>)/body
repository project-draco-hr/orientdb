{
  checkOpeness();
  if (!record.isDirty())   return (RET)record;
  final ORecordId rid=(ORecordId)record.getIdentity();
  if (rid == null)   throw new ODatabaseException("Cannot create record because it has no identity. Probably is not a regular record or contains projections of fields rather than a full record");
  setCurrentDatabaseinThreadLocal();
  record.setInternalStatus(com.orientechnologies.orient.core.db.record.ORecordElement.STATUS.MARSHALLING);
  try {
    final boolean wasNew=iForceCreate || rid.isNew();
    if (wasNew && rid.clusterId == -1 && iClusterName != null)     rid.clusterId=getClusterIdByName(iClusterName);
    byte[] stream;
    final OStorageOperationResult<ORecordVersion> operationResult;
    ORecordSerializationContext.pushContext();
    try {
      stream=record.toStream();
      final boolean isNew=iForceCreate || rid.isNew();
      if (isNew)       record.onBeforeIdentityChanged(rid);
 else       if (stream == null || stream.length == 0)       return (RET)record;
      if (isNew && rid.clusterId < 0)       rid.clusterId=iClusterName != null ? getClusterIdByName(iClusterName) : getDefaultClusterId();
      if (rid.clusterId > -1 && iClusterName == null)       iClusterName=getClusterNameById(rid.clusterId);
      if (stream != null && stream.length > 0) {
        if (iCallTriggers)         if (wasNew) {
          checkSecurity(ODatabaseSecurityResources.CLUSTER,ORole.PERMISSION_CREATE,iClusterName);
          if (callbackHooks(TYPE.BEFORE_CREATE,record) == RESULT.RECORD_CHANGED) {
            record.unsetDirty();
            record.setDirty();
            ORecordSerializationContext.pullContext();
            ORecordSerializationContext.pushContext();
            stream=record.toStream();
          }
        }
 else {
          checkSecurity(ODatabaseSecurityResources.CLUSTER,ORole.PERMISSION_UPDATE,iClusterName);
          if (callbackHooks(TYPE.BEFORE_UPDATE,record) == RESULT.RECORD_CHANGED) {
            record.unsetDirty();
            record.setDirty();
            ORecordSerializationContext.pullContext();
            ORecordSerializationContext.pushContext();
            stream=record.toStream();
          }
        }
      }
      if (!record.isDirty())       return (RET)record;
      final ORecordVersion realVersion=!mvcc || iVersion.isUntracked() ? OVersionFactory.instance().createUntrackedVersion() : record.getRecordVersion();
      final int dataSegmentId=dataSegmentStrategy.assignDataSegmentId(this,record);
      try {
        operationResult=underlying.save(dataSegmentId,rid,stream == null ? new byte[0] : stream,realVersion,record.getRecordType(),iMode.ordinal(),iForceCreate,iRecordCreatedCallback,iRecordUpdatedCallback);
        final ORecordVersion version=operationResult.getResult();
        if (isNew) {
          ((ORecordId)record.getIdentity()).copyFrom(rid);
          record.onAfterIdentityChanged(record);
          record.fill(rid,version,stream,stream == null || stream.length == 0);
        }
 else {
          record.fill(rid,version,stream,stream == null || stream.length == 0);
        }
        if (iCallTriggers && stream != null && stream.length > 0) {
          if (!operationResult.isMoved()) {
            callbackHooks(wasNew ? TYPE.AFTER_CREATE : TYPE.AFTER_UPDATE,record);
          }
 else {
            callbackHooks(wasNew ? TYPE.CREATE_REPLICATED : TYPE.UPDATE_REPLICATED,record);
          }
        }
      }
 catch (      Throwable t) {
        if (iCallTriggers && stream != null && stream.length > 0)         callbackHooks(wasNew ? TYPE.CREATE_FAILED : TYPE.UPDATE_FAILED,record);
        throw t;
      }
    }
  finally {
      ORecordSerializationContext.pullContext();
    }
    if (stream != null && stream.length > 0 && !operationResult.isMoved())     getLevel1Cache().updateRecord(record);
  }
 catch (  OException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new ODatabaseException("Error on saving record in cluster #" + record.getIdentity().getClusterId(),t);
  }
 finally {
    record.setInternalStatus(com.orientechnologies.orient.core.db.record.ORecordElement.STATUS.LOADED);
  }
  return (RET)record;
}
