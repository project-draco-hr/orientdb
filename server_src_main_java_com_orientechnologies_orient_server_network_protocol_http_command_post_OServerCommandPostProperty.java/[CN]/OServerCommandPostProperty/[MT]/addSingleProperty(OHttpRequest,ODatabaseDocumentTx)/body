{
  String[] urlParts=checkSyntax(iRequest.url,4,"Syntax error: property/<database>/<class-name>/<property-name>/[<property-type>]/[<link-type>]");
  iRequest.data.commandInfo="Create property";
  iRequest.data.commandDetail=urlParts[2] + "." + urlParts[3];
  if (db.getMetadata().getSchema().getClass(urlParts[2]) == null)   throw new IllegalArgumentException("Invalid class '" + urlParts[2] + "'");
  final OClass cls=db.getMetadata().getSchema().getClass(urlParts[2]);
  final String propertyName=urlParts[3];
  final OType propertyType=urlParts.length > 4 ? OType.valueOf(urlParts[4]) : OType.STRING;
switch (propertyType) {
case LINKLIST:
case LINKMAP:
case LINKSET:
{
      if (urlParts.length < 6) {
        throw new OHttpRequestException("Syntax error: property named " + propertyName + " is declared as "+ propertyType+ " but linked type is not declared: property/<database>/<class-name>/<property-name>/<property-type>/<link-type>");
      }
      final OType linkType=OType.valueOf(urlParts[5]);
      final OClass linkClass=db.getMetadata().getSchema().getClass(urlParts[5]);
      if (linkType != null && linkClass != null) {
        throw new IllegalArgumentException("linked type declared as " + urlParts[5] + " can be either a Type or a Class, use the JSON document usage instead. See 'http://code.google.com/p/orient/w/edit/OrientDB_REST'");
      }
 else       if (linkType != null) {
        final OProperty prop=cls.createProperty(propertyName,propertyType,linkType);
      }
 else       if (linkClass != null) {
        final OProperty prop=cls.createProperty(propertyName,propertyType,linkClass);
      }
 else {
        throw new IllegalArgumentException("property named " + propertyName + " is declared as "+ propertyType+ " but linked type is not declared");
      }
    }
  break;
case LINK:
{
  if (urlParts.length < 6) {
    throw new OHttpRequestException("Syntax error: property named " + propertyName + " is declared as "+ propertyType+ " but linked type is not declared: property/<database>/<class-name>/<property-name>/<property-type>/<link-type>");
  }
  final String linkClass=urlParts[5];
  if (linkClass != null) {
    final OProperty prop=cls.createProperty(propertyName,propertyType,db.getMetadata().getSchema().getClass(linkClass));
  }
 else {
    throw new IllegalArgumentException("property named " + propertyName + " is declared as "+ propertyType+ " but linked Class is not declared");
  }
}
break;
default :
final OProperty prop=cls.createProperty(propertyName,propertyType);
break;
}
sendTextContent(iRequest,OHttpUtils.STATUS_CREATED_CODE,OHttpUtils.STATUS_CREATED_DESCRIPTION,null,OHttpUtils.CONTENT_TEXT_PLAIN,cls.properties().size());
return false;
}
