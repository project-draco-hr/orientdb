{
  ODatabaseDocumentTx db=fc.getDatabase();
  db.command(new OCommandSQL("create class TestEncryption")).execute();
  db.command(new OCommandSQL("insert into TestEncryption set name = 'Jay'")).execute();
  List result=db.query(new OSQLSynchQuery<ODocument>("select from TestEncryption"));
  Assert.assertEquals(result.size(),1);
  db.close();
  db=fc.getDatabase();
  OStorage storage=((ODatabaseDocumentInternal)db).getStorage();
  db.close();
  storage.close(true,false);
  fc.setProperty(STORAGE_ENCRYPTION_KEY.getKey(),"T1JJRU5UREJfSVNfQ09PTA==");
  db=fc.getDatabase();
  result=db.query(new OSQLSynchQuery<ODocument>("select from TestEncryption"));
  Assert.assertEquals(result.size(),1);
  storage=((ODatabaseDocumentInternal)db).getStorage();
  db.close();
  storage.close(true,false);
  db=fc.getDatabase();
  db.setProperty(STORAGE_ENCRYPTION_KEY.getKey(),"invalidPassword");
  try {
    storage=((ODatabaseDocumentInternal)db).getStorage();
    Assert.fail();
  }
 catch (  OSecurityException e) {
    Assert.assertTrue(true);
  }
 finally {
    db.activateOnCurrentThread();
    db.close();
    storage.close(true,false);
  }
  fc.setProperty(STORAGE_ENCRYPTION_KEY.getKey(),"T1JJRU5UREJfSVNfQ09PTA=-");
  try {
    db=fc.getDatabase();
    storage=((ODatabaseDocumentInternal)db).getStorage();
    Assert.fail();
  }
 catch (  OSecurityException e) {
    Assert.assertTrue(true);
  }
 finally {
    db.activateOnCurrentThread();
    db.close();
    storage.close(true,false);
  }
  fc.setProperty(STORAGE_ENCRYPTION_KEY.getKey(),"T1JJRU5UREJfSVNfQ09PTA==");
  db=fc.getDatabase();
  result=db.query(new OSQLSynchQuery<ODocument>("select from TestEncryption"));
  Assert.assertEquals(result.size(),1);
}
