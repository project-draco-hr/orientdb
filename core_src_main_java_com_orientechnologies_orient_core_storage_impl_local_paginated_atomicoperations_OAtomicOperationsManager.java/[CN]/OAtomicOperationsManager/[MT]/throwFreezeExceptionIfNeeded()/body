{
  for (  FreezeParameters freezeParameters : this.freezeParametersIdMap.values()) {
    if (freezeParameters.exceptionClass != null) {
      if (freezeParameters.message != null)       try {
        final Constructor<? extends OException> mConstructor=freezeParameters.exceptionClass.getConstructor(String.class);
        throw mConstructor.newInstance(freezeParameters.message);
      }
 catch (      InstantiationException ie) {
        OLogManager.instance().error(this,"Can not create instance of exception " + freezeParameters.exceptionClass + " with message will try empty constructor instead",ie);
        throwFreezeExceptionWithoutMessage(freezeParameters);
      }
catch (      IllegalAccessException iae) {
        OLogManager.instance().error(this,"Can not create instance of exception " + freezeParameters.exceptionClass + " with message will try empty constructor instead",iae);
        throwFreezeExceptionWithoutMessage(freezeParameters);
      }
catch (      NoSuchMethodException nsme) {
        OLogManager.instance().error(this,"Can not create instance of exception " + freezeParameters.exceptionClass + " with message will try empty constructor instead",nsme);
        throwFreezeExceptionWithoutMessage(freezeParameters);
      }
catch (      SecurityException se) {
        OLogManager.instance().error(this,"Can not create instance of exception " + freezeParameters.exceptionClass + " with message will try empty constructor instead",se);
        throwFreezeExceptionWithoutMessage(freezeParameters);
      }
catch (      InvocationTargetException ite) {
        OLogManager.instance().error(this,"Can not create instance of exception " + freezeParameters.exceptionClass + " with message will try empty constructor instead",ite);
        throwFreezeExceptionWithoutMessage(freezeParameters);
      }
 else {
        throwFreezeExceptionWithoutMessage(freezeParameters);
      }
    }
  }
}
