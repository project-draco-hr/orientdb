{
  database.open("admin","admin");
  final OSecurity security=database.getMetadata().getSecurity();
  ORole writer=security.getRole("writer");
  ORole writerChild=security.createRole("writerChild",writer,OSecurityRole.ALLOW_MODES.ALLOW_ALL_BUT);
  writerChild.save();
  try {
    ORole writerGrandChild=security.createRole("writerGrandChild",writerChild,OSecurityRole.ALLOW_MODES.ALLOW_ALL_BUT);
    writerGrandChild.save();
    try {
      OUser child=security.createUser("writerChild","writerChild",writerGrandChild);
      child.save();
      try {
        Assert.assertTrue(child.hasRole("writer",true));
        Assert.assertFalse(child.hasRole("wrter",true));
        database.close();
        if (!(database.getStorage() instanceof OStorageProxy)) {
          database.open("writerChild","writerChild");
          OSecurityUser user=database.getUser();
          Assert.assertTrue(user.hasRole("writer",true));
          Assert.assertFalse(user.hasRole("wrter",true));
          database.close();
        }
        database.open("admin","admin");
      }
  finally {
        security.dropUser("writerChild");
      }
    }
  finally {
      security.dropRole("writerGrandChild");
    }
  }
  finally {
    security.dropRole("writerChild");
  }
}
