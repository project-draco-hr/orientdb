{
  if (limit == 0)   return Collections.emptyList();
  if (((OrientBaseGraph)graph).getRawGraph().getTransaction().isActive() || hasCustomPredicate()) {
    String[] classes=allSubClassesLabels();
    return new OrientGraphQueryIterable<Vertex>(true,classes);
  }
  final StringBuilder text=new StringBuilder(512);
  text.append(QUERY_SELECT_FROM);
  if (((OrientBaseGraph)graph).isUseClassForVertexLabel() && labels != null && labels.length > 0) {
    if (labels.length == 1)     text.append(OrientBaseGraph.encodeClassName(labels[0]));
 else {
      String[] classes=allSubClassesLabels();
      return new OrientGraphQueryIterable<Vertex>(true,classes);
    }
  }
 else   text.append(OrientVertexType.CLASS_NAME);
  final boolean usedWhere=manageFilters(text);
  if (!((OrientBaseGraph)graph).isUseClassForVertexLabel())   manageLabels(usedWhere,text);
  if (orderBy.length() > 1) {
    text.append(ORDERBY);
    text.append(orderBy);
    text.append(" ").append(orderByDir).append(" ");
  }
  if (skip > 0 && skip < Integer.MAX_VALUE) {
    text.append(SKIP);
    text.append(skip);
  }
  if (limit > 0 && limit < Integer.MAX_VALUE) {
    text.append(LIMIT);
    text.append(limit);
  }
  final OSQLSynchQuery<OIdentifiable> query=new OSQLSynchQuery<OIdentifiable>(text.toString());
  if (fetchPlan != null)   query.setFetchPlan(fetchPlan);
  return new OrientElementIterable<Vertex>(((OrientBaseGraph)graph),((OrientBaseGraph)graph).getRawGraph().query(query));
}
