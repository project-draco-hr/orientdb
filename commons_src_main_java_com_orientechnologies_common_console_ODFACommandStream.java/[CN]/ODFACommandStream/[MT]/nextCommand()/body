{
  try {
    fillBuffer();
    partialResult=new StringBuilder();
    state=State.S;
    start=0;
    end=-1;
    position=0;
    Symbol s=null;
    while (state != State.E) {
      s=nextSymbol();
      final State newState=transition(state,s);
      if (state == State.S && newState != State.S)       start=position;
      if (newState == State.A)       end=position;
      if (newState == State.F)       throw new IllegalStateException("Unexpected end of file");
      state=newState;
      position++;
    }
    if (s == Symbol.EOF) {
      position--;
      if (end == -1) {
        start=0;
        end=0;
      }
    }
    String result;
    if (partialResult.length() > 0) {
      if (end > 0) {
        result=partialResult.append(buffer.subSequence(start,end + 1).toString()).toString();
      }
 else {
        partialResult.setLength(partialResult.length() + end + 1);
        result=partialResult.toString();
      }
    }
 else {
      final CharSequence cs=buffer.subSequence(start,end + 1);
      result=cs.toString();
    }
    buffer.position(buffer.position() + position);
    return result;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
