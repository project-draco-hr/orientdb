{
  StringBuilder buffer=new StringBuilder();
switch (iType) {
case EMBEDDED:
    if (iValue instanceof ODocument)     buffer.append(toString((ODocument)iValue,null,iObjHandler,iMarshalledRecords));
 else     if (iValue != null)     buffer.append(iValue.toString());
  break;
case LINK:
{
  linkToStream(buffer,iRecord,(ORecordSchemaAware<?>)iValue);
  break;
}
case EMBEDDEDLIST:
case EMBEDDEDSET:
{
buffer.append(OStringSerializerHelper.COLLECTION_BEGIN);
int size=iValue instanceof Collection<?> ? ((Collection<Object>)iValue).size() : Array.getLength(iValue);
Iterator<Object> iterator=iValue instanceof Collection<?> ? ((Collection<Object>)iValue).iterator() : null;
Object o;
for (int i=0; i < size; ++i) {
  if (iValue instanceof Collection<?>)   o=iterator.next();
 else   o=Array.get(iValue,i);
  if (iLinkedClass != null) {
    ODocument record;
    if (i > 0)     buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);
    if (o != null) {
      if (o instanceof ODocument)       record=(ODocument)o;
 else       record=OObjectSerializerHelper.toStream(o,new ODocument(o.getClass().getSimpleName()),iDatabase instanceof ODatabaseObjectTx ? ((ODatabaseObjectTx)iDatabase).getEntityManager() : OEntityManagerInternal.INSTANCE,iLinkedClass,iObjHandler != null ? iObjHandler : new OUserObject2RecordHandler(){
        public Object getUserObjectByRecord(        ORecordInternal<?> iRecord){
          return iRecord;
        }
        public ORecordInternal<?> getRecordByUserObject(        Object iPojo,        boolean iIsMandatory){
          return new ODocument(iLinkedClass);
        }
      }
);
      buffer.append(toString(record,null,iObjHandler,iMarshalledRecords));
    }
  }
 else {
    if (i > 0)     buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);
    buffer.append(OStringSerializerHelper.fieldTypeToString(iLinkedType,o));
  }
}
buffer.append(OStringSerializerHelper.COLLECTION_END);
break;
}
case EMBEDDEDMAP:
{
buffer.append(OStringSerializerHelper.MAP_BEGIN);
int items=0;
if (iLinkedClass != null) {
ODocument record;
for (Entry<String,Object> o : ((Map<String,Object>)iValue).entrySet()) {
  if (items > 0)   buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);
  if (o != null) {
    if (o instanceof ODocument)     record=(ODocument)o;
 else     record=OObjectSerializerHelper.toStream(o,new ODocument(o.getClass().getSimpleName()),iDatabase instanceof ODatabaseObjectTx ? ((ODatabaseObjectTx)iDatabase).getEntityManager() : OEntityManagerInternal.INSTANCE,iLinkedClass,iObjHandler != null ? iObjHandler : new OUserObject2RecordHandler(){
      public Object getUserObjectByRecord(      ORecordInternal<?> iRecord){
        return iRecord;
      }
      public ORecordInternal<?> getRecordByUserObject(      Object iPojo,      boolean iIsMandatory){
        return new ODocument(iLinkedClass);
      }
    }
);
    buffer.append(toString(record,null,iObjHandler,iMarshalledRecords));
  }
  items++;
}
}
 else for (Entry<String,Object> o : ((Map<String,Object>)iValue).entrySet()) {
if (items > 0) buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);
buffer.append(OStringSerializerHelper.fieldTypeToString(OType.STRING,o.getKey()));
buffer.append(OStringSerializerHelper.ENTRY_SEPARATOR);
buffer.append(OStringSerializerHelper.fieldTypeToString(iLinkedType,o.getValue()));
items++;
}
buffer.append(OStringSerializerHelper.MAP_END);
break;
}
case LINKLIST:
case LINKSET:
{
buffer.append(OStringSerializerHelper.COLLECTION_BEGIN);
int items=0;
for (ORecordSchemaAware<?> record : (Collection<ORecordSchemaAware<?>>)iValue) {
if (items++ > 0) buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);
if (record.getDatabase() == null) record.setDatabase(iDatabase);
linkToStream(buffer,iRecord,record);
}
buffer.append(OStringSerializerHelper.COLLECTION_END);
break;
}
default :
return OStringSerializerHelper.fieldTypeToString(iType,iValue);
}
return buffer.toString();
}
