{
  acquireExclusiveLock();
  try {
    final long hashCode=keyHashFunction.hashCode(key);
    final BucketPath nodePath=getBucket(hashCode);
    final long bucketPointer=hashTree[nodePath.nodeIndex][nodePath.itemIndex + nodePath.hashMapOffset];
    final long pageIndex=getPageIndex(bucketPointer);
    final int fileLevel=getFileLevel(bucketPointer);
    final V removed;
    final OCachePointer dataPointer=loadPage(pageIndex,fileLevel);
    dataPointer.acquireExclusiveLock();
    try {
      final OHashIndexBucket<K,V> bucket=new OHashIndexBucket<K,V>(dataPointer.getDataPointer(),directMemory,keySerializer,valueSerializer);
      final int positionIndex=bucket.getIndex(key);
      if (positionIndex < 0)       return null;
      removed=bucket.deleteEntry(positionIndex).value;
      size--;
      if (!mergeBucketsAfterDeletion(nodePath,bucket))       markPageAsDirty(pageIndex,fileLevel);
    }
  finally {
      dataPointer.releaseExclusiveLock();
      releasePage(pageIndex,fileLevel);
    }
    if (nodePath.parent != null) {
      final int hashMapSize=1 << nodePath.nodeLocalDepth;
      final long[] node=hashTree[nodePath.nodeIndex];
      final boolean allMapsContainSameBucket=checkAllMapsContainSameBucket(node,hashMapSize);
      if (allMapsContainSameBucket)       mergeNodeToParent(node,nodePath);
    }
    return removed;
  }
 catch (  IOException e) {
    throw new OIndexException("Error during index removal",e);
  }
 finally {
    releaseExclusiveLock();
  }
}
