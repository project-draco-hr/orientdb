{
  setDataCommandInfo("Execute remote command");
  byte type=channel.readByte();
  final boolean live=type == 'l';
  final boolean asynch=type == 'a';
  String dbSerializerName=connection.database.getSerializer().toString();
  String name=getRecordSerializerName();
  if (!dbSerializerName.equals(name)) {
    ORecordSerializer ser=ORecordSerializerFactory.instance().getFormat(name);
    ONetworkThreadLocalSerializer.setNetworkSerializer(ser);
  }
  final OCommandRequestText command=(OCommandRequestText)OStreamSerializerAnyStreamable.INSTANCE.fromStream(channel.readBytes());
  ONetworkThreadLocalSerializer.setNetworkSerializer(null);
  connection.data.commandDetail=command.getText();
  beginResponse();
  try {
    connection.data.command=command;
    OAbstractCommandResultListener listener=null;
    OLiveCommandResultListener liveListener=null;
    if (live) {
      liveListener=new OLiveCommandResultListener(this,clientTxId,command.getResultListener());
      listener=new OSyncCommandResultListener();
      command.setResultListener(liveListener);
    }
 else     if (asynch) {
      listener=new OAsyncCommandResultListener(this,clientTxId,command.getResultListener());
      command.setResultListener(listener);
    }
 else     listener=new OSyncCommandResultListener();
    final long serverTimeout=OGlobalConfiguration.COMMAND_TIMEOUT.getValueAsLong();
    if (serverTimeout > 0 && command.getTimeoutTime() > serverTimeout)     command.setTimeout(serverTimeout,command.getTimeoutStrategy());
    if (!isConnectionAlive())     return;
    command.setCacheableResult(true);
    listener.setFetchPlan(connection.database.command(command).getFetchPlan());
    final Object result=connection.database.command(command).execute();
    listener.setFetchPlan(command.getFetchPlan());
    if (asynch) {
      if (listener.isEmpty())       try {
        sendOk(clientTxId);
      }
 catch (      IOException ignored) {
      }
      channel.writeByte((byte)0);
    }
 else {
      sendOk(clientTxId);
      serializeValue(listener,result,false);
      if (connection.data.protocolVersion >= 17 && listener instanceof OSyncCommandResultListener) {
        for (        ORecord rec : ((OSyncCommandResultListener)listener).getFetchedRecordsToSend()) {
          channel.writeByte((byte)2);
          writeIdentifiable(rec);
        }
        channel.writeByte((byte)0);
      }
    }
  }
  finally {
    connection.data.command=null;
    endResponse();
  }
}
