{
  OFetchHelper.checkFetchPlanValid(iFetchPlan);
  final long timer=OProfiler.getInstance().startChrono();
  final Class<?> pojoClass=iPojo.getClass();
  final List<Field> properties=getClassFields(pojoClass);
  String fieldName;
  Object fieldValue;
  final String idFieldName=setObjectID(iRecord.getIdentity(),iPojo);
  final String vFieldName=setObjectVersion(iRecord.getVersion(),iPojo);
  invokeCallback(iPojo,iRecord,OBeforeDeserialization.class);
  final String[] fieldNames=new String[properties.size()];
  int f=0;
  for (  Field p : properties) {
    fieldName=p.getName();
    fieldNames[f++]=fieldName;
    if (fieldName.equals(idFieldName) || fieldName.equals(vFieldName))     continue;
    if (iRecord.containsField(fieldName)) {
      fieldValue=iRecord.field(fieldName);
      if (fieldValue == null || !(fieldValue instanceof ODocument) || (fieldValue instanceof Collection<?> && (((Collection<?>)fieldValue).size() == 0 || !(((Collection<?>)fieldValue).iterator().next() instanceof ODocument))) || (!(fieldValue instanceof Map<?,?>) || ((Map<?,?>)fieldValue).size() == 0 || !(((Map<?,?>)fieldValue).values().iterator().next() instanceof ODocument))) {
        final Class<?> genericTypeClass=getGenericMultivalueType(p);
        if (genericTypeClass != null)         if (genericTypeClass.isEnum()) {
          if (fieldValue instanceof List) {
            final List<Object> list=(List<Object>)fieldValue;
            Object v;
            for (int i=0; i < list.size(); ++i) {
              v=list.get(i);
              if (v != null) {
                v=Enum.valueOf((Class<Enum>)genericTypeClass,v.toString());
                list.set(i,v);
              }
            }
          }
 else           if (fieldValue instanceof Set) {
            final Set<Object> newColl=new HashSet<Object>();
            final Set<Object> set=(Set<Object>)fieldValue;
            for (            Object v : set) {
              if (v != null) {
                v=Enum.valueOf((Class<Enum>)genericTypeClass,v.toString());
                newColl.add(v);
              }
            }
            fieldValue=newColl;
          }
 else           if (fieldValue instanceof Map) {
            final Map<String,Object> map=(Map<String,Object>)fieldValue;
            Object v;
            for (            Entry<String,?> entry : map.entrySet()) {
              v=entry.getValue();
              if (v != null) {
                v=Enum.valueOf((Class<Enum>)genericTypeClass,v.toString());
                map.put(entry.getKey(),v);
              }
            }
          }
        }
        setFieldValue(iPojo,fieldName,unserializeFieldValue(iPojo,fieldName,fieldValue));
      }
    }
  }
  final Map<String,Integer> fetchPlan=OFetchHelper.buildFetchPlan(iFetchPlan);
  OFetchHelper.fetch(iRecord,iPojo,fieldNames,fetchPlan,null,0,-1,new OFetchListener(){
    /** 
 * Doesn't matter size.
 */
    public int size(){
      return 0;
    }
    public Object fetchLinked(    final ODocument iRoot,    final Object iUserObject,    final String iFieldName,    final Object iLinked){
      final Class<?> type;
      if (iLinked != null && iLinked instanceof ODocument)       type=getFieldType((ODocument)iLinked,iEntityManager);
 else       type=getFieldType(iUserObject,iFieldName);
      if (type == null)       throw new OSerializationException("Linked type of field '" + iRoot.getClassName() + "."+ iFieldName+ "' is unknown. Probably needs to be registered with <db>.getEntityManager().registerEntityClasses(<package>) or <db>.getEntityManager().registerEntityClass(<class>) or the package can't be loaded correctly due to a classpath problem. In this case register the single classes one by one.");
      Object fieldValue=null;
      Class<?> fieldClass;
      boolean propagate=false;
      if (Set.class.isAssignableFrom(type)) {
        final Collection<Object> set=(Collection<Object>)iLinked;
        final Set<Object> target;
        if (iLazyLoading)         target=new OLazyObjectSet<Object>(iRoot,set).setFetchPlan(iFetchPlan);
 else {
          target=new HashSet();
          if (set != null && !set.isEmpty())           for (          Object o : set) {
            if (o instanceof OIdentifiable)             target.add(iObj2RecHandler.getUserObjectByRecord((ORecordInternal<?>)((OIdentifiable)o).getRecord(),iFetchPlan));
 else             target.add(o);
          }
        }
        fieldValue=target;
      }
 else       if (Collection.class.isAssignableFrom(type)) {
        final Collection<ODocument> list=(Collection<ODocument>)iLinked;
        final List<Object> target;
        if (iLazyLoading)         target=new OLazyObjectList<Object>(iRoot,list).setFetchPlan(iFetchPlan);
 else {
          target=new ArrayList();
          if (list != null && !list.isEmpty())           for (          Object o : list) {
            if (o instanceof OIdentifiable)             target.add(iObj2RecHandler.getUserObjectByRecord((ORecordInternal<?>)((OIdentifiable)o).getRecord(),iFetchPlan));
 else             target.add(o);
          }
        }
        fieldValue=target;
      }
 else       if (Map.class.isAssignableFrom(type)) {
        final Map<Object,Object> map=(Map<Object,Object>)iLinked;
        final Map<Object,Object> target;
        if (iLazyLoading)         target=new OLazyObjectMap<Object>(iRoot,map).setFetchPlan(iFetchPlan);
 else {
          target=new HashMap();
          if (map != null && !map.isEmpty())           for (          Map.Entry<Object,Object> o : map.entrySet()) {
            final Object k=o.getKey() instanceof OIdentifiable ? iObj2RecHandler.getUserObjectByRecord((ORecordInternal<?>)((OIdentifiable)o.getKey()).getRecord(),iFetchPlan) : o.getKey();
            final Object v=o.getValue() instanceof OIdentifiable ? iObj2RecHandler.getUserObjectByRecord((ORecordInternal<?>)((OIdentifiable)o.getValue()).getRecord(),iFetchPlan) : o.getValue();
            target.put(k,v);
          }
        }
        fieldValue=target;
      }
 else       if (type.isEnum()) {
        String enumName=((ODocument)iLinked).field(iFieldName);
        Class<Enum> enumClass=(Class<Enum>)type;
        fieldValue=Enum.valueOf(enumClass,enumName);
      }
 else {
        fieldClass=iEntityManager.getEntityClass(type.getSimpleName());
        if (fieldClass != null) {
          propagate=!iObj2RecHandler.existsUserObjectByRID(((ODocument)iLinked).getIdentity());
          fieldValue=iObj2RecHandler.getUserObjectByRecord((ODocument)iLinked,iFetchPlan);
        }
      }
      setFieldValue(iUserObject,iFieldName,unserializeFieldValue(iPojo,iFieldName,fieldValue));
      return propagate ? fieldValue : null;
    }
  }
);
  invokeCallback(iPojo,iRecord,OAfterDeserialization.class);
  OProfiler.getInstance().stopChrono("Object.fromStream",timer);
  return iPojo;
}
