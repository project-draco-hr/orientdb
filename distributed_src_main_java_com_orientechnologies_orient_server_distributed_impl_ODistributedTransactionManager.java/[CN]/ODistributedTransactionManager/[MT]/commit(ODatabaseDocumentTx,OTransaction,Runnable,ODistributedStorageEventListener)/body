{
  final String localNodeName=dManager.getLocalNodeName();
  try {
    OTransactionInternal.setStatus((OTransactionAbstract)iTx,OTransaction.TXSTATUS.BEGUN);
    final ODistributedConfiguration dbCfg=dManager.getDatabaseConfiguration(storage.getName());
    checkForClusterIds(iTx,localNodeName,dbCfg);
    final List<OAbstractRemoteTask> undoTasks=createUndoTasksFromTx(iTx);
    final int maxAutoRetry=OGlobalConfiguration.DISTRIBUTED_CONCURRENT_TX_MAX_AUTORETRY.getValueAsInteger();
    final int autoRetryDelay=OGlobalConfiguration.DISTRIBUTED_CONCURRENT_TX_AUTORETRY_DELAY.getValueAsInteger();
    Boolean executionModeSynch=dbCfg.isExecutionModeSynchronous(null);
    if (executionModeSynch == null)     executionModeSynch=Boolean.TRUE;
    final boolean finalExecutionModeSynch=executionModeSynch;
    final ODistributedRequestId requestId=new ODistributedRequestId(dManager.getLocalNodeId(),dManager.getNextMessageIdCounter());
    final ODistributedTxContext ctx=localDistributedDatabase.registerTxContext(requestId);
    final AtomicBoolean lockReleased=new AtomicBoolean(true);
    try {
      acquireMultipleRecordLocks(iTx,maxAutoRetry,autoRetryDelay,eventListener,ctx);
      lockReleased.set(false);
      final List<ORecordOperation> uResult=(List<ORecordOperation>)OScenarioThreadLocal.executeAsDistributed(new Callable(){
        @Override public Object call() throws Exception {
          return storage.commit(iTx,callback);
        }
      }
);
      database.setDefaultTransactionMode();
      for (      ORecordOperation ent : iTx.getAllRecordEntries()) {
        ORecordInternal.getDirtyManager(ent.getRecord()).clear();
      }
      final Set<String> involvedClusters=getInvolvedClusters(uResult);
      final Set<String> nodes=getAvailableNodesButLocal(dbCfg,involvedClusters,localNodeName);
      if (nodes.isEmpty()) {
        executionModeSynch=true;
        return null;
      }
      updateUndoTaskWithCreatedRecords(uResult,undoTasks);
      final OTxTaskResult localResult=createLocalTxResult(uResult);
      final OTxTask txTask=createTxTask(uResult);
      txTask.setLocalUndoTasks(undoTasks);
      try {
        txTask.setLastLSN(((OAbstractPaginatedStorage)storage.getUnderlying()).getLSN());
        OTransactionInternal.setStatus((OTransactionAbstract)iTx,OTransaction.TXSTATUS.COMMITTING);
        if (finalExecutionModeSynch) {
          ODistributedResponse lastResult=null;
          for (int retry=1; retry <= maxAutoRetry; ++retry) {
            boolean isLastRetry=maxAutoRetry == retry;
            lastResult=dManager.sendRequest(storage.getName(),involvedClusters,nodes,txTask,requestId.getMessageId(),EXECUTION_MODE.RESPONSE,localResult,null);
            if (!processCommitResult(localNodeName,iTx,txTask,involvedClusters,uResult,nodes,autoRetryDelay,lastResult.getRequestId(),lastResult,isLastRetry)) {
              Orient.instance().getProfiler().updateCounter("db." + database.getName() + ".distributedTxRetries","Number of retries executed in distributed transaction",+1,"db.*.distributedTxRetries");
              continue;
            }
            ODistributedServerLog.debug(this,localNodeName,null,ODistributedServerLog.DIRECTION.NONE,"Distributed transaction succeeded. Tasks: %s",txTask.getTasks());
            return null;
          }
          ODistributedServerLog.debug(this,localNodeName,null,ODistributedServerLog.DIRECTION.NONE,"Distributed transaction retries exceed maximum auto-retries (%d). Task: %s - Tasks: %s",maxAutoRetry,txTask,txTask.getTasks());
          storage.executeUndoOnLocalServer(requestId,txTask);
          sendTxCompleted(localNodeName,involvedClusters,nodes,lastResult.getRequestId(),false,txTask.getPartitionKey());
          throw (ODistributedRecordLockedException)lastResult.getPayload();
        }
 else {
          final OCallable<Void,ODistributedRequestId> unlockCallback=new OCallable<Void,ODistributedRequestId>(){
            @Override public Void call(            final ODistributedRequestId reqId){
              if (lockReleased.compareAndSet(false,true)) {
                localDistributedDatabase.popTxContext(requestId);
                ctx.destroy();
              }
              return null;
            }
          }
;
          executeAsyncTx(nodes,localResult,involvedClusters,txTask,requestId.getMessageId(),localNodeName,unlockCallback);
        }
      }
 catch (      Throwable e) {
        storage.executeUndoOnLocalServer(requestId,txTask);
        executionModeSynch=true;
        if (e instanceof RuntimeException)         throw (RuntimeException)e;
 else         if (e instanceof InterruptedException)         throw OException.wrapException(new ODistributedOperationException("Cannot commit transaction"),e);
 else         throw OException.wrapException(new ODistributedException("Cannot commit transaction"),e);
      }
    }
 catch (    RuntimeException e) {
      executionModeSynch=true;
      throw e;
    }
catch (    InterruptedException e) {
      executionModeSynch=true;
      throw OException.wrapException(new ODistributedOperationException("Cannot commit transaction"),e);
    }
catch (    Exception e) {
      executionModeSynch=true;
      throw OException.wrapException(new ODistributedException("Cannot commit transaction"),e);
    }
 finally {
      if (executionModeSynch) {
        if (lockReleased.compareAndSet(false,true)) {
          localDistributedDatabase.popTxContext(requestId);
          ctx.destroy();
        }
      }
    }
  }
 catch (  OValidationException e) {
    throw e;
  }
catch (  ODistributedRecordLockedException e) {
    throw e;
  }
catch (  OConcurrentCreateException e) {
    localDistributedDatabase.getDatabaseRapairer().repairCluster(e.getActualRid().getClusterId());
    throw e;
  }
catch (  OConcurrentModificationException e) {
    localDistributedDatabase.getDatabaseRapairer().repairRecord((ORecordId)e.getRid());
    throw e;
  }
catch (  Exception e) {
    for (    ORecordOperation op : iTx.getAllRecordEntries()) {
      if (iTx.hasRecordCreation()) {
        final ORecordId lockEntireCluster=(ORecordId)op.getRecord().getIdentity().copy();
        localDistributedDatabase.getDatabaseRapairer().repairCluster(lockEntireCluster.clusterId);
      }
      localDistributedDatabase.getDatabaseRapairer().repairRecord((ORecordId)op.getRecord().getIdentity());
    }
    storage.handleDistributedException("Cannot route TX operation against distributed node",e);
  }
  return null;
}
