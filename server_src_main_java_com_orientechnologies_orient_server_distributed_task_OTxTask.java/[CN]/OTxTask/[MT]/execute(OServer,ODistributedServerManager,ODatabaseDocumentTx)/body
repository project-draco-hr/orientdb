{
  ODistributedServerLog.debug(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.IN,"committing transaction against db=%s...",database.getName());
  ODatabaseRecordThreadLocal.INSTANCE.set(database);
  try {
    database.begin();
    final OTransactionOptimistic tx=(OTransactionOptimistic)database.getTransaction();
    final List<Object> results=new ArrayList<Object>();
    for (    OAbstractRecordReplicatedTask task : tasks) {
      if (task instanceof OCreateRecordTask) {
        final OCreateRecordTask createRT=(OCreateRecordTask)task;
        final int clId=createRT.clusterId > -1 ? createRT.clusterId : createRT.getRid().isValid() ? createRT.getRid().getClusterId() : -1;
        final String clusterName=clId > -1 ? database.getClusterNameById(clId) : null;
        tx.addRecord(createRT.getRecord(),ORecordOperation.CREATED,clusterName);
      }
    }
    for (    OAbstractRecordReplicatedTask task : tasks) {
      if (task instanceof OAbstractRecordReplicatedTask) {
        final ORecord record=((OAbstractRecordReplicatedTask)task).getRecord();
        if (record != null)         for (        String f : ((ODocument)record).fieldNames()) {
          final Object fValue=((ODocument)record).field(f);
          if (fValue instanceof ORecordLazyMultiValue)           ((ORecordLazyMultiValue)fValue).convertLinks2Records();
 else           if (fValue instanceof ORecordId)           ((ODocument)record).field(f,((ORecordId)fValue).getRecord());
        }
      }
    }
    for (    OAbstractRecordReplicatedTask task : tasks) {
      final Object taskResult=task.execute(iServer,iManager,database);
      results.add(taskResult);
    }
    database.commit();
    for (int i=0; i < results.size(); ++i) {
      final Object o=results.get(i);
      final OAbstractRecordReplicatedTask task=tasks.get(i);
      if (task instanceof OCreateRecordTask) {
        final OCreateRecordTask t=(OCreateRecordTask)task;
        results.set(i,new OPlaceholder(t.getRecord()));
      }
 else       if (task instanceof OUpdateRecordTask) {
        if (((OSimpleVersion)o).getCounter() < 0) {
          results.set(i,task.getRid().getRecord().reload().getRecordVersion());
        }
 else         results.set(i,o);
      }
    }
    return results;
  }
 catch (  ONeedRetryException e) {
    return e;
  }
catch (  OTransactionException e) {
    return e;
  }
catch (  ORecordDuplicatedException e) {
    return e;
  }
catch (  ORecordNotFoundException e) {
    return e;
  }
catch (  Exception e) {
    OLogManager.instance().error(this,"Error on distributed transaction commit",e);
    return e;
  }
}
