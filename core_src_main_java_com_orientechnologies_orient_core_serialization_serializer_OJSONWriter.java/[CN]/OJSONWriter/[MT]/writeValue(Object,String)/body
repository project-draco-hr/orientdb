{
  final StringBuilder buffer=new StringBuilder();
  final boolean oldAutoConvertSettings;
  if (iValue instanceof ORecordLazyMultiValue) {
    oldAutoConvertSettings=((ORecordLazyMultiValue)iValue).isAutoConvertToRecord();
    ((ORecordLazyMultiValue)iValue).setAutoConvertToRecord(false);
  }
 else   oldAutoConvertSettings=false;
  if (iValue == null)   buffer.append("null");
 else   if (iValue instanceof ORecordId) {
    final ORecordId rid=(ORecordId)iValue;
    buffer.append('\"');
    rid.toString(buffer);
    buffer.append('\"');
  }
 else   if (iValue instanceof ORecord<?>) {
    final ORecord<?> linked=(ORecord<?>)iValue;
    if (linked.getIdentity().isValid()) {
      buffer.append('\"');
      linked.getIdentity().toString(buffer);
      buffer.append('\"');
    }
 else {
      buffer.append(linked.toJSON(iFormat));
    }
  }
 else   if (iValue.getClass().isArray()) {
    if (iValue instanceof byte[]) {
      buffer.append('\"');
      final byte[] source=(byte[])iValue;
      buffer.append(OBase64Utils.encodeBytes(source));
      buffer.append('\"');
    }
 else {
      buffer.append('[');
      for (int i=0; i < Array.getLength(iValue); ++i) {
        if (i > 0)         buffer.append(", ");
        buffer.append(writeValue(Array.get(iValue,i),iFormat));
      }
      buffer.append(']');
    }
  }
 else   if (iValue instanceof Collection<?>) {
    final Collection<Object> coll=(Collection<Object>)iValue;
    buffer.append('[');
    int i=0;
    for (Iterator<Object> it=coll.iterator(); it.hasNext(); ++i) {
      if (i > 0)       buffer.append(", ");
      buffer.append(writeValue(it.next(),iFormat));
    }
    buffer.append(']');
  }
 else   if (iValue instanceof Map<?,?>) {
    final Map<Object,Object> map=(Map<Object,Object>)iValue;
    buffer.append('{');
    int i=0;
    Entry<Object,Object> entry;
    for (Iterator<Entry<Object,Object>> it=map.entrySet().iterator(); it.hasNext(); ++i) {
      entry=it.next();
      if (i > 0)       buffer.append(", ");
      buffer.append(writeValue(entry.getKey(),iFormat));
      buffer.append(": ");
      buffer.append(writeValue(entry.getValue(),iFormat));
    }
    buffer.append('}');
  }
 else   if (iValue instanceof Date) {
    final SimpleDateFormat dateFormat=new SimpleDateFormat(ORecordSerializerJSON.DEF_DATE_FORMAT);
    buffer.append('"');
    buffer.append(dateFormat.format(iValue));
    buffer.append('"');
  }
 else   if (iValue instanceof String) {
    final String v=(String)iValue;
    if (v.startsWith("\""))     buffer.append(v);
 else {
      buffer.append('"');
      buffer.append(encode(v));
      buffer.append('"');
    }
  }
 else   buffer.append(iValue.toString());
  if (iValue instanceof ORecordLazyMultiValue)   ((ORecordLazyMultiValue)iValue).setAutoConvertToRecord(oldAutoConvertSettings);
  return buffer.toString();
}
