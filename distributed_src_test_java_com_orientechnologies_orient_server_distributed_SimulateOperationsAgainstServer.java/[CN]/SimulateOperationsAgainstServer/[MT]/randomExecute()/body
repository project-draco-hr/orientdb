{
  final ExecutorService executor=Executors.newFixedThreadPool(threads);
  for (int i=0; i < threads; ++i) {
    final int id=i;
    executor.submit(new Runnable(){
      private int threadId=id;
      @Override public void run(){
        for (int i=0; i < count; ++i) {
          final Random rnd=new Random();
          try {
switch (rnd.nextInt(5)) {
case 0:
              createDocument(threadId,i,urls[rnd.nextInt(urls.length)],className,rnd.nextInt(5));
            break;
case 1:
          queryClass(threadId,i,urls[rnd.nextInt(urls.length)],className,rnd.nextInt(10));
        break;
case 2:
      updateDocument(threadId,i,urls[rnd.nextInt(urls.length)],className,rnd.nextInt(100));
    break;
case 3:
  deleteDocument(threadId,i,urls[rnd.nextInt(urls.length)],className,rnd.nextInt(100));
break;
case 4:
pause(threadId,i,rnd.nextInt(2000));
break;
}
totalOperations.addAndGet(1);
try {
Thread.sleep(delay);
}
 catch (InterruptedException e) {
}
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
}
);
}
}
