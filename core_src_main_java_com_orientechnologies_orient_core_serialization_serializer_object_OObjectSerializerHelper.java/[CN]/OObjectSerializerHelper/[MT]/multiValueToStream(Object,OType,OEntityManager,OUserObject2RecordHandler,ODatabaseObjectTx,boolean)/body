{
  if (iMultiValue == null)   return null;
  final Collection<Object> sourceValues;
  if (iMultiValue instanceof Collection<?>) {
    sourceValues=(Collection<Object>)iMultiValue;
  }
 else {
    sourceValues=(Collection<Object>)((Map<?,?>)iMultiValue).values();
  }
  if (iType == null) {
    if (sourceValues.size() == 0)     return iMultiValue;
    final Object firstValue=sourceValues.iterator().next();
    if (firstValue == null)     return iMultiValue;
    if (OType.isSimpleType(firstValue)) {
      if (iMultiValue instanceof List)       iType=OType.EMBEDDEDLIST;
 else       if (iMultiValue instanceof Set)       iType=OType.EMBEDDEDSET;
 else       iType=OType.EMBEDDEDMAP;
    }
 else {
      if (iMultiValue instanceof List)       iType=OType.LINKLIST;
 else       if (iMultiValue instanceof Set)       iType=OType.LINKSET;
 else       iType=OType.LINKMAP;
    }
  }
  Object result=iMultiValue;
  final OType linkedType;
  if (iType.equals(OType.EMBEDDEDSET) || iType.equals(OType.LINKSET)) {
    result=new HashSet<Object>();
  }
 else   if (iType.equals(OType.EMBEDDEDLIST) || iType.equals(OType.LINKLIST)) {
    result=new ArrayList<Object>();
  }
  if (iType.equals(OType.LINKLIST) || iType.equals(OType.LINKSET) || iType.equals(OType.LINKMAP))   linkedType=OType.LINK;
 else   if (iType.equals(OType.EMBEDDEDLIST) || iType.equals(OType.EMBEDDEDSET) || iType.equals(OType.EMBEDDEDMAP))   linkedType=OType.EMBEDDED;
 else   throw new IllegalArgumentException("Type " + iType + " must be a multi value type (collection or map)");
  if (iMultiValue instanceof Set<?>) {
    for (    Object o : sourceValues) {
      ((Collection<Object>)result).add(typeToStream(o,linkedType,iEntityManager,iObj2RecHandler,db,iSaveOnlyDirty));
    }
  }
 else   if (iMultiValue instanceof List<?>) {
    for (int i=0; i < sourceValues.size(); i++) {
      ((List<Object>)result).add(typeToStream(((List<?>)sourceValues).get(i),linkedType,iEntityManager,iObj2RecHandler,db,iSaveOnlyDirty));
    }
  }
 else {
    if (iMultiValue instanceof OLazyObjectMap<?>) {
      result=((OLazyObjectMap<?>)iMultiValue).getUnderlying();
    }
 else {
      result=new HashMap<String,Object>();
      for (      Entry<String,Object> entry : ((Map<String,Object>)iMultiValue).entrySet()) {
        ((Map<String,Object>)result).put(entry.getKey(),typeToStream(entry.getValue(),linkedType,iEntityManager,iObj2RecHandler,db,iSaveOnlyDirty));
      }
    }
  }
  return result;
}
