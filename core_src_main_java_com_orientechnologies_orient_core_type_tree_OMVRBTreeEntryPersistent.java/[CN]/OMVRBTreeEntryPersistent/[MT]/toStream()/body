{
  record.setDatabase(ODatabaseRecordThreadLocal.INSTANCE.get());
  final Integer identityRecord=System.identityHashCode(record);
  final Set<Integer> marshalledRecords=OSerializationThreadLocal.INSTANCE.get();
  if (marshalledRecords.contains(identityRecord)) {
    return new byte[]{};
  }
 else   marshalledRecords.add(identityRecord);
  if (parent != null && parentRid.isNew())   parent.save();
  if (left != null && leftRid.isNew())   left.save();
  if (right != null && rightRid.isNew())   right.save();
  final long timer=OProfiler.getInstance().startChrono();
  final OMemoryOutputStream outStream=new OMemoryOutputStream();
  try {
    outStream.add(pageSize);
    outStream.addAsFixed(parentRid.toStream());
    outStream.addAsFixed(leftRid.toStream());
    outStream.addAsFixed(rightRid.toStream());
    outStream.add(color);
    outStream.add(size);
    for (int i=0; i < size; ++i)     serializedKeys[i]=outStream.add(serializeNewKey(i));
    for (int i=0; i < size; ++i)     serializedValues[i]=outStream.add(serializeNewValue(i));
    outStream.flush();
    final byte[] buffer=outStream.getByteArray();
    inStream.setSource(buffer);
    record.fromStream(buffer);
    return buffer;
  }
 catch (  IOException e) {
    throw new OSerializationException("Can't marshall RB+Tree node",e);
  }
 finally {
    marshalledRecords.remove(identityRecord);
    checkEntryStructure();
    OProfiler.getInstance().stopChrono("OMVRBTreeEntryP.toStream",timer);
  }
}
