{
  final List<OIdentifiable> rows=new ArrayList<OIdentifiable>();
  final List<ODocument> members=distribCfg.field("members");
  final StringBuilder buffer=new StringBuilder();
  buffer.append("\nREPLICATION MESSAGE COORDINATOR STATS");
  final OTableFormatter table=new OTableFormatter(new OTableFormatter.OTableOutput(){
    @Override public void onMessage(    final String text,    final Object... args){
      buffer.append(String.format(text,args));
    }
  }
);
  table.setColumnHidden("#");
  if (members != null) {
    final List<String> orderedServers=new ArrayList<String>(members.size());
    for (    ODocument fromMember : members) {
      if (fromMember != null) {
        String serverName=fromMember.field("name");
        orderedServers.add(serverName);
        table.setColumnAlignment(serverName + (manager.getLocalNodeName().equals(serverName) ? "*" : ""),OTableFormatter.ALIGNMENT.RIGHT);
      }
    }
    Collections.sort(orderedServers);
    for (    String server : orderedServers) {
      ODocument member=null;
      for (      ODocument m : members) {
        if (server.equals(m.field("name"))) {
          member=m;
          break;
        }
      }
      if (member == null)       continue;
      final ODocument row=new ODocument();
      rows.add(row);
      row.field("Servers",server + (manager.getLocalNodeName().equals(server) ? "*" : ""));
      final ODocument messages=member.field("messages");
      if (messages == null)       continue;
      for (      String opName : messages.fieldNames()) {
        final Long counter=messages.field(opName);
        final String value=String.format("%,d",counter);
        row.field(opName,value);
      }
    }
  }
  table.writeRecords(rows,-1);
  buffer.append("\n");
  return buffer.toString();
}
