{
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField("dbURL"))   dbURL=(String)resolve(iConfiguration.field("dbURL"));
  if (iConfiguration.containsField("dbUser"))   dbUser=(String)resolve(iConfiguration.field("dbUser"));
  if (iConfiguration.containsField("dbPassword"))   dbPassword=(String)resolve(iConfiguration.field("dbPassword"));
  if (iConfiguration.containsField("dbType"))   dbType=DB_TYPE.valueOf(iConfiguration.field("dbType").toString().toUpperCase());
  if (iConfiguration.containsField("tx"))   tx=iConfiguration.<Boolean>field("tx");
  if (iConfiguration.containsField("wal"))   wal=iConfiguration.<Boolean>field("wal");
  if (iConfiguration.containsField("txUseLog"))   txUseLog=iConfiguration.<Boolean>field("txUseLog");
  if (iConfiguration.containsField("batchCommit"))   batchCommit=iConfiguration.<Integer>field("batchCommit");
  if (iConfiguration.containsField("dbAutoCreate"))   dbAutoCreate=iConfiguration.<Boolean>field("dbAutoCreate");
  if (iConfiguration.containsField("dbAutoDropIfExists"))   dbAutoDropIfExists=iConfiguration.<Boolean>field("dbAutoDropIfExists");
  if (iConfiguration.containsField("dbAutoCreateProperties"))   dbAutoCreateProperties=iConfiguration.<Boolean>field("dbAutoCreateProperties");
  if (iConfiguration.containsField("useLightweightEdges"))   useLightweightEdges=iConfiguration.<Boolean>field("useLightweightEdges");
  if (iConfiguration.containsField("standardElementConstraints"))   standardElementConstraints=iConfiguration.<Boolean>field("standardElementConstraints");
  clusterName=iConfiguration.field("cluster");
  className=iConfiguration.field("class");
  indexes=iConfiguration.field("indexes");
  classes=iConfiguration.field("classes");
  if (iConfiguration.containsField("settings")) {
    final ODocument settings=(ODocument)iConfiguration.field("settings");
    settings.setAllowChainedAccess(false);
    for (    String s : settings.fieldNames()) {
      final OGlobalConfiguration v=OGlobalConfiguration.findByKey(s);
      if (v != null)       v.setValue(settings.field(s));
    }
  }
  OGlobalConfiguration.USE_WAL.setValue(wal);
switch (dbType) {
case DOCUMENT:
    final ODatabaseDocumentTx documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists() && dbAutoDropIfExists) {
    log(OETLProcessor.LOG_LEVELS.INFO,"Dropping existent database '%s'...",dbURL);
    documentDatabase.open(dbUser,dbPassword);
    documentDatabase.drop();
  }
if (documentDatabase.exists()) {
  log(DEBUG,"Opening database '%s'...",dbURL);
  documentDatabase.open(dbUser,dbPassword);
}
 else if (dbAutoCreate) {
  documentDatabase.create();
}
 else throw new IllegalArgumentException("Database '" + dbURL + "' not exists and 'dbAutoCreate' setting is false");
documentDatabase.close();
break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL,dbUser,dbPassword);
if (dbAutoDropIfExists && factory.exists()) {
log(OETLProcessor.LOG_LEVELS.INFO,"Dropping existent database '%s'...",dbURL);
factory.drop();
}
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.shutdown();
break;
}
}
