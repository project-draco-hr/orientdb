{
  final ORemoteTask task=request.getTask();
  final int partitionKey=task.getPartitionKey();
  if (partitionKey < 0) {
    processLock.writeLock().lock();
    try {
      int anyQueueWorkerIsWorking=0;
      final boolean[] workingQueues=new boolean[workerThreads.size()];
      for (int i=0; i < workerThreads.size(); ++i) {
        final ODistributedWorker w=workerThreads.get(i);
        workingQueues[i]=!w.localQueue.isEmpty();
        if (workingQueues[i])         anyQueueWorkerIsWorking++;
      }
      if (anyQueueWorkerIsWorking > 0) {
        ODistributedServerLog.debug(this,getLocalNodeName(),null,DIRECTION.NONE,"Request %s on database '%s' waiting for all the previous requests to be completed",request,databaseName);
        final CountDownLatch emptyQueues=new CountDownLatch(anyQueueWorkerIsWorking);
        for (int i=0; i < workerThreads.size(); ++i) {
          if (workingQueues[i]) {
            final ODistributedRequest req=new ODistributedRequest(manager.getTaskFactory(),request.getId().getNodeId(),-1,databaseName,new OSynchronizedTaskWrapper(emptyQueues),ODistributedRequest.EXECUTION_MODE.NO_RESPONSE);
            workerThreads.get(i).processRequest(req);
          }
        }
        try {
          emptyQueues.await();
          final CountDownLatch queueLatch=new CountDownLatch(1);
          final String senderNodeName=manager.getNodeNameById(request.getId().getNodeId());
          request.setTask(new OSynchronizedTaskWrapper(queueLatch,senderNodeName,task));
          workerThreads.get(0).processRequest(request);
          queueLatch.await();
        }
 catch (        InterruptedException e) {
        }
      }
 else {
        ODistributedServerLog.debug(this,getLocalNodeName(),null,DIRECTION.NONE,"Synchronous request %s on database '%s' dispatched to the worker 0",request,databaseName);
        workerThreads.get(0).processRequest(request);
      }
    }
  finally {
      processLock.writeLock().unlock();
    }
  }
 else {
    processLock.readLock().lock();
    try {
      final int partition=partitionKey % workerThreads.size();
      ODistributedServerLog.debug(this,getLocalNodeName(),null,DIRECTION.NONE,"Request %s on database '%s' dispatched to the worker %d",request,databaseName,partition);
      final ODistributedWorker worker=workerThreads.get(partition);
      worker.processRequest(request);
    }
  finally {
      processLock.readLock().unlock();
    }
  }
}
