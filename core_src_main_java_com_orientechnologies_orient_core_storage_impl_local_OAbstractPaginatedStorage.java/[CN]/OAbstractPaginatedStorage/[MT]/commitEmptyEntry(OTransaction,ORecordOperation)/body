{
  final ORecord rec=txEntry.getRecord();
  ORecordId rid=(ORecordId)rec.getIdentity();
  int clusterId=rid.clusterId;
  if (rid.clusterId == ORID.CLUSTER_ID_INVALID && rec instanceof ODocument && ODocumentInternal.getImmutableSchemaClass(((ODocument)rec)) != null) {
    final OClass schemaClass=ODocumentInternal.getImmutableSchemaClass(((ODocument)rec));
    clusterId=schemaClass.getClusterForNewInstance((ODocument)rec);
  }
  final OCluster cluster=getClusterById(clusterId);
  if (cluster.getName().equals(OMetadataDefault.CLUSTER_INDEX_NAME) || cluster.getName().equals(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME))   return;
  final ORecordId oldRID=rid.copy();
  ORecordSerializer binary=((ODatabaseDocumentInternal)clientTx.getDatabase()).getSerializer();
  final byte[] stream=binary.writeClassOnly(rec);
  rid=rid.copy();
  rid.clusterId=cluster.getId();
  final OPhysicalPosition ppos;
  final byte recordType=ORecordInternal.getRecordType(rec);
  ppos=doCreateRecord(rid,stream,rec.getVersion(),recordType,null,cluster,new OPhysicalPosition(recordType),-1).getResult();
  rid.clusterPosition=ppos.clusterPosition;
  ORecordInternal.setVersion(rec,ppos.recordVersion);
  clientTx.updateIdentityAfterCommit(oldRID,rid);
}
