{
  final OReadCache expectedReadCache=((OAbstractPaginatedStorage)expectedDatabaseDocumentTx.getStorage()).getReadCache();
  final OWriteCache expectedWriteCache=((OAbstractPaginatedStorage)expectedDatabaseDocumentTx.getStorage()).getWriteCache();
  for (  OWALRecord walRecord : records) {
    atomicUnit.add(walRecord);
    if (!atomicChangeIsProcessed && walRecord instanceof OAtomicUnitStartRecord) {
      atomicChangeIsProcessed=true;
    }
 else     if (walRecord instanceof OAtomicUnitEndRecord) {
      atomicChangeIsProcessed=false;
      for (      OWALRecord restoreRecord : atomicUnit) {
        if (restoreRecord instanceof OAtomicUnitStartRecord || restoreRecord instanceof OAtomicUnitEndRecord || restoreRecord instanceof ONonTxOperationPerformedWALRecord|| restoreRecord instanceof OFullCheckpointStartRecord|| restoreRecord instanceof OCheckpointEndRecord|| restoreRecord instanceof OFuzzyCheckpointStartRecord|| restoreRecord instanceof OFuzzyCheckpointEndRecord)         continue;
        if (restoreRecord instanceof OUpdatePageRecord) {
          final OUpdatePageRecord updatePageRecord=(OUpdatePageRecord)restoreRecord;
          final long fileId=updatePageRecord.getFileId();
          final long pageIndex=updatePageRecord.getPageIndex();
          if (!expectedWriteCache.isOpen(fileId))           expectedReadCache.openFile(fileId,expectedWriteCache);
          OCacheEntry cacheEntry=expectedReadCache.load(fileId,pageIndex,true,expectedWriteCache,1);
          if (cacheEntry == null)           do {
            cacheEntry=expectedReadCache.allocateNewPage(fileId,expectedWriteCache);
          }
 while (cacheEntry.getPageIndex() != pageIndex);
          cacheEntry.acquireExclusiveLock();
          try {
            ODurablePage durablePage=new ODurablePage(cacheEntry,null);
            durablePage.restoreChanges(updatePageRecord.getChanges());
            durablePage.setLsn(updatePageRecord.getLsn());
          }
  finally {
            cacheEntry.releaseExclusiveLock();
            expectedReadCache.release(cacheEntry,expectedWriteCache);
          }
        }
 else         if (restoreRecord instanceof OFileCreatedWALRecord) {
          final OFileCreatedWALRecord fileCreatedCreatedRecord=(OFileCreatedWALRecord)restoreRecord;
          String fileName=fileCreatedCreatedRecord.getFileName().replace("actualSBTree","expectedSBTree");
          if (expectedWriteCache.exists(fileName))           expectedReadCache.openFile(fileName,fileCreatedCreatedRecord.getFileId(),expectedWriteCache);
 else           expectedReadCache.addFile(fileName,fileCreatedCreatedRecord.getFileId(),expectedWriteCache);
        }
      }
      atomicUnit.clear();
    }
 else {
      Assert.assertTrue(walRecord instanceof OUpdatePageRecord || walRecord instanceof OFileCreatedWALRecord || walRecord instanceof ONonTxOperationPerformedWALRecord|| walRecord instanceof OFullCheckpointStartRecord|| walRecord instanceof OCheckpointEndRecord|| walRecord instanceof OFuzzyCheckpointStartRecord|| walRecord instanceof OFuzzyCheckpointEndRecord);
    }
  }
  return atomicChangeIsProcessed;
}
