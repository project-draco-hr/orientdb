{
  final byte[] stream;
  if (iStream[0] == 1) {
    final ByteArrayInputStream compressedBuffer=new ByteArrayInputStream(iStream,1,iStream.length - 1);
    try {
      final GZIPInputStream compression=new GZIPInputStream(compressedBuffer);
      final ByteArrayOutputStream tempBuffer=new ByteArrayOutputStream();
      int length;
      byte[] buffer=new byte[8192];
      while ((length=compression.read(buffer,0,8192)) != -1)       tempBuffer.write(buffer,0,length);
      compression.close();
      stream=tempBuffer.toByteArray();
    }
 catch (    IOException ex) {
      throw new OConfigurationException("Error while uncompressing storage configuration",ex);
    }
  }
 else   stream=iStream;
  String[] values=new String(stream).split("\\|");
  int index=0;
  version=Integer.parseInt(read(values[index++]));
  name=read(values[index++]);
  schemaRecordId=read(values[index++]);
  dictionaryRecordId=read(values[index++]);
  if (version > 0)   indexMgrRecordId=read(values[index++]);
 else   indexMgrRecordId=null;
  localeLanguage=read(values[index++]);
  localeCountry=read(values[index++]);
  dateFormat=read(values[index++]);
  dateTimeFormat=read(values[index++]);
  index=phySegmentFromStream(values,index,fileTemplate);
  int size=Integer.parseInt(read(values[index++]));
  String clusterType;
  int clusterId;
  String clusterName;
  clusters=new ArrayList<OStorageClusterConfiguration>(size);
  for (int i=0; i < size; ++i)   clusters.add(null);
  OStoragePhysicalClusterConfiguration phyCluster;
  OStorageLogicalClusterConfiguration logCluster;
  OStorageMemoryClusterConfiguration memCluster;
  for (int i=0; i < size; ++i) {
    clusterId=Integer.parseInt(read(values[index++]));
    if (clusterId == -1)     continue;
    clusterName=read(values[index++]);
    clusterType=read(values[index++]);
    if (clusterType.equals("p")) {
      phyCluster=new OStoragePhysicalClusterConfiguration(this,clusterId);
      phyCluster.name=clusterName;
      index=phySegmentFromStream(values,index,phyCluster);
      phyCluster.holeFile=new OStorageClusterHoleConfiguration(phyCluster,read(values[index++]),read(values[index++]),read(values[index++]));
      clusters.set(clusterId,phyCluster);
    }
 else     if (clusterType.equals("l")) {
      logCluster=new OStorageLogicalClusterConfiguration(clusterName,clusterId,Integer.parseInt(read(values[index++])),new ORecordId(values[index++]));
      clusters.set(clusterId,logCluster);
    }
 else {
      memCluster=new OStorageMemoryClusterConfiguration(clusterName,clusterId);
      clusters.set(clusterId,memCluster);
    }
  }
  size=Integer.parseInt(read(values[index++]));
  dataSegments=new ArrayList<OStorageDataConfiguration>(size);
  for (int i=0; i < size; ++i)   dataSegments.add(null);
  int dataId;
  String dataName;
  OStorageDataConfiguration data;
  for (int i=0; i < size; ++i) {
    dataId=Integer.parseInt(read(values[index++]));
    dataName=read(values[index++]);
    data=new OStorageDataConfiguration(this,dataName);
    index=phySegmentFromStream(values,index,data);
    data.holeFile=new OStorageDataHoleConfiguration(data,read(values[index++]),read(values[index++]),read(values[index++]));
    dataSegments.set(dataId,data);
  }
  txSegment=new OStorageTxConfiguration(read(values[index++]),read(values[index++]),read(values[index++]),read(values[index++]),read(values[index++]));
  size=Integer.parseInt(read(values[index++]));
  properties=new ArrayList<OEntryConfiguration>(size);
  for (int i=0; i < size; ++i) {
    properties.add(new OEntryConfiguration(read(values[index++]),read(values[index++])));
  }
  return this;
}
