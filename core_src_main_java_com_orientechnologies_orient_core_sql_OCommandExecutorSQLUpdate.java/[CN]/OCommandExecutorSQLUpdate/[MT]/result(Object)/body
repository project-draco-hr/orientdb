{
  final ODocument record=(ODocument)((OIdentifiable)iRecord).getRecord();
  if (compiledFilter != null) {
    if (!(Boolean)compiledFilter.evaluate(record,null,context))     return false;
  }
  boolean recordUpdated=false;
  parameters.reset();
  if (!setEntries.isEmpty()) {
    OSQLHelper.bindParameters(record,setEntries,parameters);
    recordUpdated=true;
  }
  for (  Map.Entry<String,Number> entry : incrementEntries.entrySet()) {
    final Number prevValue=record.field(entry.getKey());
    if (prevValue == null)     record.field(entry.getKey(),entry.getValue());
 else     record.field(entry.getKey(),OType.increment(prevValue,entry.getValue()));
    recordUpdated=true;
  }
  Object v;
  Collection<Object> coll;
  Object fieldValue;
  for (  OPair<String,Object> entry : addEntries) {
    coll=null;
    if (!record.containsField(entry.getKey())) {
      if (record.getSchemaClass() != null) {
        OProperty prop=record.getSchemaClass().getProperty(entry.getKey());
        if (prop != null && prop.getType() == OType.LINKSET)         coll=new HashSet<Object>();
      }
      if (coll == null)       coll=new ArrayList<Object>();
      record.field(entry.getKey(),coll);
    }
 else {
      fieldValue=record.field(entry.getKey());
      if (fieldValue instanceof Collection<?>)       coll=(Collection<Object>)fieldValue;
 else       continue;
    }
    v=entry.getValue();
    if (v instanceof OSQLFilterItem)     v=((OSQLFilterItem)v).getValue(record,context);
 else     if (v instanceof OSQLFunctionRuntime)     v=((OSQLFunctionRuntime)v).execute(record,null,context);
    coll.add(v);
    recordUpdated=true;
  }
  Map<String,Object> map;
  OPair<String,Object> pair;
  for (  Entry<String,OPair<String,Object>> entry : putEntries.entrySet()) {
    fieldValue=record.field(entry.getKey());
    if (fieldValue == null) {
      if (record.getSchemaClass() != null) {
        final OProperty property=record.getSchemaClass().getProperty(entry.getKey());
        if (property != null && (property.getType() != null && (!property.getType().equals(OType.EMBEDDEDMAP) && !property.getType().equals(OType.LINKMAP)))) {
          throw new OCommandExecutionException("field " + entry.getKey() + " is not defined as a map");
        }
      }
      fieldValue=new HashMap<String,Object>();
      record.field(entry.getKey(),fieldValue);
    }
    if (fieldValue instanceof Map<?,?>) {
      map=(Map<String,Object>)fieldValue;
      pair=entry.getValue();
      v=pair.getValue();
      if (v instanceof OSQLFilterItem)       v=((OSQLFilterItem)v).getValue(record,context);
 else       if (pair.getValue() instanceof OSQLFunctionRuntime)       v=((OSQLFunctionRuntime)v).execute(record,null,context);
      map.put(pair.getKey(),v);
      recordUpdated=true;
    }
  }
  for (  OPair<String,Object> entry : removeEntries) {
    v=entry.getValue();
    if (v == EMPTY_VALUE) {
      record.removeField(entry.getKey());
      recordUpdated=true;
    }
 else {
      fieldValue=record.field(entry.getKey());
      if (fieldValue instanceof Collection<?>) {
        coll=(Collection<Object>)fieldValue;
        if (coll.remove(v))         recordUpdated=true;
      }
 else       if (fieldValue instanceof Map<?,?>) {
        map=(Map<String,Object>)fieldValue;
        if (map.remove(v) != null)         recordUpdated=true;
      }
    }
  }
  if (recordUpdated) {
    record.setDirty();
    record.save();
    recordCount++;
  }
  return true;
}
