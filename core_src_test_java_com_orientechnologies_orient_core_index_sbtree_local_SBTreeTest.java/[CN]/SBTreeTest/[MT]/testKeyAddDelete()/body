{
  for (int i=0; i < KEYS_COUNT; i++) {
    sbTree.put(i,new ORecordId(i % 32000,i));
    Assert.assertEquals(sbTree.get(i),new ORecordId(i % 32000,i));
    doReset();
  }
  for (int i=0; i < KEYS_COUNT; i++) {
    if (i % 3 == 0)     Assert.assertEquals(sbTree.remove(i),new ORecordId(i % 32000,i));
    if (i % 2 == 0)     sbTree.put(KEYS_COUNT + i,new ORecordId((KEYS_COUNT + i) % 32000,KEYS_COUNT + i));
    doReset();
  }
  Assert.assertEquals((int)sbTree.firstKey(),1);
  doReset();
  Assert.assertEquals((int)sbTree.lastKey(),2 * KEYS_COUNT - 2);
  doReset();
  for (int i=0; i < KEYS_COUNT; i++) {
    if (i % 3 == 0)     Assert.assertNull(sbTree.get(i));
 else     Assert.assertEquals(sbTree.get(i),new ORecordId(i % 32000,i));
    if (i % 2 == 0)     Assert.assertEquals(sbTree.get(KEYS_COUNT + i),new ORecordId((KEYS_COUNT + i) % 32000,KEYS_COUNT + i));
    doReset();
  }
}
