{
  Object lastResult=null;
  int txBegunAtLine=-1;
  int txBegunAtPart=-1;
  int maxRetry=1;
  context.setVariable("transactionRetries",0);
  for (int retry=0; retry < maxRetry; retry++) {
    final BufferedReader reader=new BufferedReader(new StringReader(iText));
    int line=0;
    int linePart=0;
    String lastLine;
    boolean txBegun=false;
    for (; line < txBegunAtLine; ++line)     lastLine=reader.readLine();
    for (; (lastLine=reader.readLine()) != null; ++line) {
      lastLine=lastLine.trim();
      final List<String> lineParts=OStringSerializerHelper.smartSplit(lastLine,';');
      if (line == txBegunAtLine)       linePart=txBegunAtPart;
      for (; linePart < lineParts.size(); ++linePart) {
        final String lastCommand=lineParts.get(linePart);
        if (OStringSerializerHelper.startsWithIgnoreCase(lastCommand,"let ")) {
          final int equalsPos=lastCommand.indexOf('=');
          final String variable=lastCommand.substring("let ".length(),equalsPos).trim();
          final String cmd=lastCommand.substring(equalsPos + 1).trim();
          lastResult=db.command(new OCommandSQL(cmd).setContext(getContext())).execute();
          getContext().setVariable(variable,lastResult);
        }
 else         if (lastCommand.equalsIgnoreCase("begin")) {
          if (txBegun)           throw new OCommandSQLParsingException("Transaction already begun");
          txBegun=true;
          txBegunAtLine=line;
          txBegunAtPart=linePart;
          db.begin();
        }
 else         if (lastCommand.equalsIgnoreCase("rollback")) {
          if (!txBegun)           throw new OCommandSQLParsingException("Transaction not begun");
          db.rollback();
          txBegun=false;
          txBegunAtLine=-1;
          txBegunAtPart=-1;
        }
 else         if (OStringSerializerHelper.startsWithIgnoreCase(lastCommand,"commit")) {
          if (txBegunAtLine < 0)           throw new OCommandSQLParsingException("Transaction not begun");
          if (lastCommand.length() > "commit ".length()) {
            String next=lastCommand.substring("commit ".length()).trim();
            if (OStringSerializerHelper.startsWithIgnoreCase(next,"retry ")) {
              next=next.substring("retry ".length()).trim();
              maxRetry=Integer.parseInt(next) + 1;
            }
          }
          try {
            db.commit();
          }
 catch (          OConcurrentModificationException e) {
            context.setVariable("transactionRetries",retry);
            break;
          }
          txBegun=false;
          txBegunAtLine=-1;
          txBegunAtPart=-1;
        }
 else         if (OStringSerializerHelper.startsWithIgnoreCase(lastCommand,"sleep ")) {
          final String sleepTimeInMs=lastCommand.substring("sleep ".length()).trim();
          try {
            Thread.sleep(Integer.parseInt(sleepTimeInMs));
          }
 catch (          InterruptedException e) {
          }
        }
 else         if (OStringSerializerHelper.startsWithIgnoreCase(lastCommand,"return ")) {
          final String variable=lastCommand.substring("return ".length()).trim();
          if (variable.equalsIgnoreCase("NULL"))           lastResult=null;
 else           if (variable.startsWith("$"))           lastResult=getContext().getVariable(variable);
 else           lastResult=variable;
          return lastResult;
        }
 else         if (lastCommand != null && lastCommand.length() > 0)         lastResult=db.command(new OCommandSQL(lastCommand).setContext(getContext())).execute();
      }
    }
  }
  return lastResult;
}
