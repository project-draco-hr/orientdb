{
  FileLockKey key=new FileLockKey(fileName,pageIndex);
  if (evictedItems.containsKey(key))   return new CacheResult(true,evictedItems.remove(key));
  final OMultiFileSegment multiFileSegment=files.get(fileName);
  final long startPosition=pageIndex * pageSize;
  final long endPosition=startPosition + pageSize;
  byte[] content=new byte[pageSize];
  if (multiFileSegment.getFilledUpTo() >= endPosition) {
    multiFileSegment.readContinuously(startPosition,content,content.length);
  }
 else {
    multiFileSegment.allocateSpaceContinuously((int)(endPosition - multiFileSegment.getFilledUpTo()));
  }
  long dataPointer;
  dataPointer=directMemory.allocate(content);
  return new CacheResult(false,dataPointer);
}
