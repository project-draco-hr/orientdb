{
  acquireSharedLock();
  try {
    OAtomicOperationsManager operationsManager=storage.getAtomicOperationsManager();
    operationsManager.acquireReadLock(this);
    try {
      OAtomicOperation atomicOperation=operationsManager.getCurrentOperation();
      if (ascSortOrder)       return iterateEntriesBetweenAscOrder(keyFrom,fromInclusive,keyTo,toInclusive,atomicOperation);
 else       return iterateEntriesBetweenDescOrder(keyFrom,fromInclusive,keyTo,toInclusive,atomicOperation);
    }
  finally {
      operationsManager.releaseReadLock(this);
    }
  }
 catch (  IOException ioe) {
    throw new OSBTreeException("Error during fetch of values between key " + keyFrom + " and key "+ keyTo+ " in sbtree "+ name);
  }
 finally {
    releaseSharedLock();
  }
}
