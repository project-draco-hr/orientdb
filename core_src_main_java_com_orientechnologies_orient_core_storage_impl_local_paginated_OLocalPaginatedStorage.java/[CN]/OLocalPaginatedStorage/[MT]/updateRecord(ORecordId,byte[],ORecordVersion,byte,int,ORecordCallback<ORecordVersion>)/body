{
  checkOpeness();
  final long timer=Orient.instance().getProfiler().startChrono();
  final OCluster cluster=getClusterById(rid.clusterId);
  cluster.getExternalModificationLock().requestModificationLock();
  try {
    modificationLock.requestModificationLock();
    try {
      lock.acquireSharedLock();
      try {
        lockManager.acquireLock(Thread.currentThread(),rid,OLockManager.LOCK.EXCLUSIVE);
        try {
          final OPhysicalPosition ppos=cluster.getPhysicalPosition(new OPhysicalPosition(rid.clusterPosition));
          if (!checkForRecordValidity(ppos)) {
            final ORecordVersion recordVersion=OVersionFactory.instance().createUntrackedVersion();
            if (callback != null)             callback.call(rid,recordVersion);
            return new OStorageOperationResult<ORecordVersion>(recordVersion);
          }
switch (version.getCounter()) {
case -1:
            ppos.recordVersion.increment();
          break;
case -2:
        ppos.recordVersion.setCounter(-2);
      break;
default :
    if (!version.equals(ppos.recordVersion))     if (OFastConcurrentModificationException.enabled())     throw OFastConcurrentModificationException.instance();
 else     throw new OConcurrentModificationException(rid,ppos.recordVersion,version,ORecordOperation.UPDATED);
  ppos.recordVersion.increment();
}
atomicOperationsManager.startAtomicOperation();
try {
cluster.updateRecord(rid.clusterPosition,content,ppos.recordVersion,recordType);
final ORecordSerializationContext context=ORecordSerializationContext.getContext();
if (context != null) context.executeOperations(this);
}
 catch (RuntimeException e) {
atomicOperationsManager.endAtomicOperation(true);
throw e;
}
 finally {
atomicOperationsManager.endAtomicOperation(false);
}
if (callback != null) callback.call(rid,ppos.recordVersion);
return new OStorageOperationResult<ORecordVersion>(ppos.recordVersion);
}
  finally {
lockManager.releaseLock(Thread.currentThread(),rid,OLockManager.LOCK.EXCLUSIVE);
}
}
 catch (IOException e) {
OLogManager.instance().error(this,"Error on updating record " + rid + " (cluster: "+ cluster+ ")",e);
final ORecordVersion recordVersion=OVersionFactory.instance().createUntrackedVersion();
if (callback != null) callback.call(rid,recordVersion);
return new OStorageOperationResult<ORecordVersion>(recordVersion);
}
 finally {
lock.releaseSharedLock();
}
}
  finally {
modificationLock.releaseModificationLock();
}
}
  finally {
cluster.getExternalModificationLock().releaseModificationLock();
Orient.instance().getProfiler().stopChrono(PROFILER_UPDATE_RECORD,"Update a record to database",timer,"db.*.updateRecord");
}
}
