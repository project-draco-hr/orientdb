{
  key=keySerializer.preprocess(key,(Object[])keyTypes);
  key=enhanceCompositeKeyMinorDesc(key,inclusive);
  BucketSearchResult bucketSearchResult=findBucket(key);
  long pageIndex=bucketSearchResult.getLastPathItem();
  int index;
  if (bucketSearchResult.itemIndex >= 0) {
    index=inclusive ? bucketSearchResult.itemIndex : bucketSearchResult.itemIndex - 1;
  }
 else {
    index=-bucketSearchResult.itemIndex - 2;
  }
  boolean firstBucket=true;
  resultsLoop:   while (true) {
    long nextPageIndex=-1;
    OCacheEntry cacheEntry=diskCache.load(fileId,pageIndex,false);
    final OCachePointer pointer=cacheEntry.getCachePointer();
    try {
      OSBTreeBucket<K,V> bucket=new OSBTreeBucket<K,V>(pointer.getDataPointer(),keySerializer,keyTypes,valueSerializer,ODurablePage.TrackMode.NONE);
      if (!firstBucket)       index=bucket.size() - 1;
      for (int i=index; i >= 0; i--) {
        if (!listener.addResult(convertToMapEntry(bucket.getEntry(i))))         break resultsLoop;
      }
      if (bucket.getLeftSibling() >= 0)       nextPageIndex=bucket.getLeftSibling();
 else       break;
    }
  finally {
      diskCache.release(cacheEntry);
    }
    pageIndex=nextPageIndex;
    firstBucket=false;
  }
}
