{
  key=keySerializer.preprocess(key,(Object[])keyTypes);
  final BucketSearchResult searchResult;
  acquireSharedLock();
  try {
    searchResult=firstItem();
    if (searchResult == null)     return new OSBTreeCursor<K,V>(){
      @Override public Map.Entry<K,V> next(      int prefetchSize){
        return null;
      }
    }
;
  }
 catch (  IOException e) {
    throw new OSBTreeException("Error during finding first key in sbtree [" + name + "]");
  }
 finally {
    releaseSharedLock();
  }
  return new OSBTreeCursorForward(searchResult.getLastPathItem(),searchResult.itemIndex,null,key,false,inclusive);
}
