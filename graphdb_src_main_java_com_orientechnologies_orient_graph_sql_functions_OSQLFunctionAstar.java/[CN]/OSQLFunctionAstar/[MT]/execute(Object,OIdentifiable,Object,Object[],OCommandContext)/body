{
  context=iContext;
  final OSQLFunctionAstar context=this;
  return OGraphCommandExecutorSQLFactory.runWithAnyGraph(new OGraphCommandExecutorSQLFactory.GraphCallBack<LinkedList<OrientVertex>>(){
    @Override public LinkedList<OrientVertex> call(    final OrientBaseGraph graph){
      final ORecord record=iCurrentRecord != null ? iCurrentRecord.getRecord() : null;
      Object source=iParams[0];
      if (OMultiValue.isMultiValue(source)) {
        if (OMultiValue.getSize(source) > 1)         throw new IllegalArgumentException("Only one sourceVertex is allowed");
        source=OMultiValue.getFirstValue(source);
      }
      paramSourceVertex=graph.getVertex(OSQLHelper.getValue(source,record,iContext));
      Object dest=iParams[1];
      if (OMultiValue.isMultiValue(dest)) {
        if (OMultiValue.getSize(dest) > 1)         throw new IllegalArgumentException("Only one destinationVertex is allowed");
        dest=OMultiValue.getFirstValue(dest);
      }
      paramDestinationVertex=graph.getVertex(OSQLHelper.getValue(dest,record,iContext));
      paramWeightFieldName=OIOUtils.getStringContent(iParams[2]);
      if (iParams.length > 3) {
        bindAdditionalParams(iParams[3],context);
      }
      iContext.setVariable("getNeighbors",0);
      return internalExecute(iContext);
    }
  }
);
}
