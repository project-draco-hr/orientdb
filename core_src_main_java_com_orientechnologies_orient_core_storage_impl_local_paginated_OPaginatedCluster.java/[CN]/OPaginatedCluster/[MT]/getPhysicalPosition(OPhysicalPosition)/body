{
  startOperation();
  try {
    atomicOperationsManager.acquireReadLock(this);
    try {
      acquireSharedLock();
      try {
        long clusterPosition=position.clusterPosition;
        OClusterPositionMapBucket.PositionEntry positionEntry=clusterPositionMap.get(clusterPosition,1);
        if (positionEntry == null)         return null;
        OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
        long pageIndex=positionEntry.getPageIndex();
        int recordPosition=positionEntry.getRecordPosition();
        long pagesCount=getFilledUpTo(atomicOperation,fileId);
        if (pageIndex >= pagesCount)         return null;
        OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,pageIndex,false);
        try {
          final OClusterPage localPage=new OClusterPage(cacheEntry,false,getChangesTree(atomicOperation,cacheEntry));
          if (localPage.isDeleted(recordPosition))           return null;
          if (localPage.getRecordByteValue(recordPosition,-OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE) == 0)           return null;
          final OPhysicalPosition physicalPosition=new OPhysicalPosition();
          physicalPosition.recordSize=-1;
          physicalPosition.recordType=localPage.getRecordByteValue(recordPosition,0);
          physicalPosition.recordVersion=localPage.getRecordVersion(recordPosition);
          physicalPosition.clusterPosition=position.clusterPosition;
          return physicalPosition;
        }
  finally {
          releasePage(atomicOperation,cacheEntry);
        }
      }
  finally {
        releaseSharedLock();
      }
    }
  finally {
      atomicOperationsManager.releaseReadLock(this);
    }
  }
  finally {
    completeOperation();
  }
}
