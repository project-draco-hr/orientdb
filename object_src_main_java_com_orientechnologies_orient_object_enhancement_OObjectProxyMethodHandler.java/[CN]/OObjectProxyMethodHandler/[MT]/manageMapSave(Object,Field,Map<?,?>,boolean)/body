{
  final Class genericType=OReflectionHelper.getGenericMultivalueType(f);
  if (customSerialization) {
    Map<Object,Object> map=new HashMap<Object,Object>();
    setDocFieldValue(f.getName(),map,OType.EMBEDDEDMAP);
    value=new OObjectCustomSerializerMap<TYPE>(OObjectEntitySerializer.getSerializedType(f),doc,map,(Map<Object,Object>)value);
  }
 else   if (genericType != null && genericType.isEnum()) {
    Map<Object,Object> map=new HashMap<Object,Object>();
    setDocFieldValue(f.getName(),map,OType.EMBEDDEDMAP);
    value=new OObjectEnumLazyMap(genericType,doc,map,(Map<Object,Object>)value);
  }
 else   if (!(value instanceof OObjectLazyMultivalueElement)) {
    OType type=OObjectEntitySerializer.isEmbeddedField(self.getClass(),f.getName()) ? OType.EMBEDDEDMAP : OType.LINKMAP;
    if (doc.fieldType(f.getName()) != type)     doc.field(f.getName(),doc.field(f.getName()),type);
    Map<Object,OIdentifiable> docMap=doc.field(f.getName(),type);
    if (docMap == null) {
      if (OType.EMBEDDEDMAP == type)       docMap=new OTrackedMap<OIdentifiable>(doc);
 else       docMap=new ORecordLazyMap(doc);
      setDocFieldValue(f.getName(),docMap,type);
    }
    value=new OObjectLazyMap(self,docMap,value,OObjectEntitySerializer.isCascadeDeleteField(self.getClass(),f.getName()));
  }
  return value;
}
