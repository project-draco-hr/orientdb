{
  try {
    fillBuffer();
    StringBuilder partialResult=new StringBuilder();
    State state=State.S;
    int start=0, end=-1;
    int position=0;
    Symbol s=null;
    while (state != State.E) {
      if (buffer.position() + position < buffer.limit()) {
        s=symbol(buffer.charAt(position));
      }
 else {
        buffer.compact();
        int read=reader.read(buffer);
        buffer.flip();
        if (read == 0) {
          if (state != State.S)           partialResult.append(buffer.subSequence(start,position).toString());
          start=0;
          end=end - position;
          buffer.clear();
          read=reader.read(buffer);
          buffer.flip();
          position=0;
        }
        if (read == -1) {
          s=Symbol.EOF;
        }
 else {
          s=symbol(buffer.charAt(position));
        }
      }
      final State newState=transition(state,s);
      if (state == State.S && newState != State.S)       start=position;
      if (newState == State.A)       end=position;
      if (newState == State.F)       throw new IllegalStateException("Unexpected end of file");
      state=newState;
      position++;
    }
    if (s == Symbol.EOF)     position--;
    final String result;
    if (partialResult.length() > 0) {
      if (end > 0) {
        result=partialResult.append(buffer.subSequence(start,end + 1).toString()).toString();
      }
 else {
        partialResult.setLength(partialResult.length() + end + 1);
        result=partialResult.toString();
      }
    }
 else {
      result=buffer.subSequence(start,end + 1).toString();
    }
    buffer.position(buffer.position() + position);
    return result;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
