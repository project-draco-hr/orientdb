{
  if (currentDatabaseName == null) {
    out.println("No database selected yet.");
    return;
  }
  final OClass cls=currentDatabase.getMetadata().getSchema().getClass(iClassName);
  if (cls == null) {
    out.println("! Class '" + iClassName + "' does not exist in the database '"+ currentDatabaseName+ "'");
    return;
  }
  out.println();
  out.println("Class................: " + cls);
  if (cls.getShortName() != null)   out.println("Alias................: " + cls.getShortName());
  if (cls.getSuperClass() != null)   out.println("Super class..........: " + cls.getSuperClass());
  out.println("Default cluster......: " + currentDatabase.getClusterNameById(cls.getDefaultClusterId()) + " (id="+ cls.getDefaultClusterId()+ ")");
  out.println("Supported cluster ids: " + Arrays.toString(cls.getClusterIds()));
  if (cls.getBaseClasses().hasNext()) {
    out.print("Base classes.........: ");
    int i=0;
    for (Iterator<OClass> it=cls.getBaseClasses(); it.hasNext(); ) {
      if (i > 0)       out.print(", ");
      out.print(it.next().getName());
      ++i;
    }
    out.println();
  }
  if (cls.properties().size() > 0) {
    out.println("Properties:");
    out.println("-------------------------------+-------------+-------------------------------+-----------+----------+----------+-----------+-----------+");
    out.println(" NAME                          | TYPE        | LINKED TYPE/CLASS             | MANDATORY | READONLY | NOT NULL |    MIN    |    MAX    |");
    out.println("-------------------------------+-------------+-------------------------------+-----------+----------+----------+-----------+-----------+");
    for (    final OProperty p : cls.properties()) {
      try {
        out.printf(" %-30s| %-12s| %-30s| %-10s| %-10s| %-9s| %-10s| %-10s|\n",p.getName(),p.getType(),p.getLinkedClass() != null ? p.getLinkedClass() : p.getLinkedType(),p.isMandatory(),p.isReadonly(),p.isNotNull(),p.getMin() != null ? p.getMin() : "",p.getMax() != null ? p.getMax() : "");
      }
 catch (      Exception e) {
      }
    }
    out.println("-------------------------------+-------------+-------------------------------+-----------+----------+-----------+-----------+");
  }
  final Set<OIndex<?>> indexes=cls.getClassIndexes();
  if (!indexes.isEmpty()) {
    out.println("Indexes (" + indexes.size() + " altogether):");
    out.println("-------------------------------+----------------+");
    out.println(" NAME                          | PROPERTIES     |");
    out.println("-------------------------------+----------------+");
    for (    final OIndex<?> index : indexes) {
      final OIndexDefinition indexDefinition=index.getDefinition();
      if (indexDefinition != null) {
        final List<String> fields=indexDefinition.getFields();
        out.printf(" %-30s| %-15s|\n",index.getName(),fields.get(0) + (fields.size() > 1 ? " (+)" : ""));
        for (int i=1; i < fields.size(); i++) {
          if (i < fields.size() - 1)           out.printf(" %-30s| %-15s|\n","",fields.get(i) + " (+)");
 else           out.printf(" %-30s| %-15s|\n","",fields.get(i));
        }
      }
 else {
        out.printf(" %-30s| %-15s|\n",index.getName(),"");
      }
    }
    out.println("-------------------------------+----------------+");
  }
}
