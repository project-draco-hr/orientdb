{
  int localNodeDepth=directory.getNodeLocalDepth(0);
  int nodeDepth=localNodeDepth;
  OHashTable.BucketPath parentNode=null;
  int nodeIndex=0;
  int offset=0;
  int index=(int)((hashCode >>> (HASH_CODE_SIZE - nodeDepth)) & (LEVEL_MASK >>> (MAX_LEVEL_DEPTH - localNodeDepth)));
  OHashTable.BucketPath currentNode=new OHashTable.BucketPath(null,0,index,0,localNodeDepth,nodeDepth);
  do {
    final long position=directory.getNodePointer(nodeIndex,index + offset);
    if (position >= 0)     return currentNode;
    nodeIndex=(int)((position & Long.MAX_VALUE) >>> 8);
    offset=(int)(position & 0xFF);
    localNodeDepth=directory.getNodeLocalDepth(nodeIndex);
    nodeDepth+=localNodeDepth;
    index=(int)((hashCode >>> (HASH_CODE_SIZE - nodeDepth)) & (LEVEL_MASK >>> (MAX_LEVEL_DEPTH - localNodeDepth)));
    parentNode=currentNode;
    currentNode=new OHashTable.BucketPath(parentNode,offset,index,nodeIndex,localNodeDepth,nodeDepth);
  }
 while (nodeDepth <= HASH_CODE_SIZE);
  throw new IllegalStateException("Extendible hashing tree in corrupted state.");
}
