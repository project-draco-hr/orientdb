{
  long fileId=buffer.openFile(fileName);
  OCachePointer[] pointers=new OCachePointer[4];
  for (int i=0; i < 4; i++) {
    pointers[i]=buffer.load(fileId,i);
    pointers[i].acquireExclusiveLock();
    buffer.markDirty(fileId,i);
    directMemory.set(pointers[i].getDataPointer() + systemOffset,new byte[]{(byte)i,1,2,seed,4,5,6,(byte)i},0,8);
    pointers[i].releaseExclusiveLock();
    buffer.release(fileId,i);
  }
  LRUList am=buffer.getAm();
  LRUList a1in=buffer.getA1in();
  LRUList a1out=buffer.getA1out();
  Assert.assertEquals(am.size(),0);
  Assert.assertEquals(a1out.size(),0);
  for (int i=0; i < 4; i++) {
    OReadCacheEntry entry=generateEntry(fileId,i,pointers[i].getDataPointer(),false,new OLogSequenceNumber(0,0));
    Assert.assertEquals(a1in.get(entry.fileId,entry.pageIndex),entry);
  }
  Assert.assertEquals(buffer.getFilledUpTo(fileId),4);
  buffer.flushBuffer();
  for (int i=0; i < 4; i++) {
    assertFile(i,new byte[]{(byte)i,1,2,seed,4,5,6,(byte)i},new OLogSequenceNumber(0,0));
  }
}
