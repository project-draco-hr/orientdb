{
  String[] indexNames=new String[10];
  Random random=new Random();
  char[] chars="abcdefghijklmnopqrstuvwxyz".toCharArray();
  for (int i=0; i < indexNames.length; i++) {
    String nm="";
    for (int k=0; k < 10; k++)     nm+=chars[random.nextInt(chars.length)];
    indexNames[i]=nm;
  }
  ODatabaseDocumentTx db=new ODatabaseDocumentTx("plocal:./uniqueIndexTest");
  final int cores=Runtime.getRuntime().availableProcessors();
  if (db.exists()) {
    db.open("admin","admin");
    db.drop();
  }
  for (int i=0; i < propValues.length; i++)   propValues[i]=new AtomicInteger();
  db.create();
  db.set(ODatabase.ATTRIBUTES.MINIMUMCLUSTERS,cores);
  OSchema schema=db.getMetadata().getSchema();
  OClass oClass=schema.createClass("indexTest");
  for (int i=0; i < 10; i++) {
    oClass.createProperty("prop" + i,OType.INTEGER);
    oClass.createIndex(indexNames[i],OClass.INDEX_TYPE.UNIQUE,"prop" + i);
  }
  ExecutorService executor=Executors.newCachedThreadPool();
  List<Future<Integer>> futures=new ArrayList<Future<Integer>>();
  for (int i=0; i < cores; i++) {
    phaser.register();
    futures.add(executor.submit(new Populator("plocal:./uniqueIndexTest")));
  }
  int sum=0;
  for (  Future<Integer> future : futures)   sum+=future.get();
  System.out.println("Total documents " + sum);
  Assert.assertEquals(db.countClass("indexTest"),sum);
  Set<Integer>[] props=new Set[10];
  for (int i=0; i < props.length; i++) {
    props[i]=new HashSet<Integer>();
  }
  for (  ODocument document : db.browseClass("indexTest")) {
    for (int i=0; i < 10; i++) {
      Set<Integer> propValues=props[i];
      Assert.assertTrue(propValues.add(document.<Integer>field("prop" + i)));
    }
  }
}
