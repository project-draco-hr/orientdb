{
  OIndexMatchCondition jjtn000=new OIndexMatchCondition(JJTINDEXMATCHCONDITION);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  Token token;
  jjtn000.leftExpressions=new ArrayList();
  OExpression lastExpression;
  try {
    jj_consume_token(KEY);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LUCENE:
case NEAR:
case WITHIN:
case EQ:
case EQEQ:
case LT:
case GT:
case LE:
case GE:
case NE:
case NEQ:
case SC_AND:
case LIKE:
case CONTAINSKEY:
      jjtn000.operator=CompareOperator();
    jj_consume_token(LBRACKET);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case NULL:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case THIS:
case RECORD_ATTRIBUTE:
case INTEGER_LITERAL:
case FLOATING_POINT_LITERAL:
case CHARACTER_LITERAL:
case STRING_LITERAL:
case TRUE:
case FALSE:
case LPAREN:
case LBRACE:
case LBRACKET:
case HOOK:
case COLON:
case MINUS:
case STAR:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
case 222:
    lastExpression=Expression();
  jjtn000.leftExpressions.add(lastExpression);
label_33: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
    ;
  break;
default :
jj_la1[190]=jj_gen;
break label_33;
}
jj_consume_token(COMMA);
lastExpression=Expression();
jjtn000.leftExpressions.add(lastExpression);
}
break;
default :
jj_la1[191]=jj_gen;
;
}
jj_consume_token(RBRACKET);
break;
case BETWEEN:
jj_consume_token(BETWEEN);
jjtn000.between=true;
jj_consume_token(LBRACKET);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case NULL:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case THIS:
case RECORD_ATTRIBUTE:
case INTEGER_LITERAL:
case FLOATING_POINT_LITERAL:
case CHARACTER_LITERAL:
case STRING_LITERAL:
case TRUE:
case FALSE:
case LPAREN:
case LBRACE:
case LBRACKET:
case HOOK:
case COLON:
case MINUS:
case STAR:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
case 222:
lastExpression=Expression();
jjtn000.leftExpressions.add(lastExpression);
label_34: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[192]=jj_gen;
break label_34;
}
jj_consume_token(COMMA);
lastExpression=Expression();
jjtn000.leftExpressions.add(lastExpression);
}
break;
default :
jj_la1[193]=jj_gen;
;
}
jj_consume_token(RBRACKET);
jj_consume_token(AND);
jj_consume_token(LBRACKET);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case NULL:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case THIS:
case RECORD_ATTRIBUTE:
case INTEGER_LITERAL:
case FLOATING_POINT_LITERAL:
case CHARACTER_LITERAL:
case STRING_LITERAL:
case TRUE:
case FALSE:
case LPAREN:
case LBRACE:
case LBRACKET:
case HOOK:
case COLON:
case MINUS:
case STAR:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
case 222:
lastExpression=Expression();
jjtn000.rightExpressions.add(lastExpression);
label_35: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[194]=jj_gen;
break label_35;
}
jj_consume_token(COMMA);
lastExpression=Expression();
jjtn000.rightExpressions.add(lastExpression);
}
break;
default :
jj_la1[195]=jj_gen;
;
}
jj_consume_token(RBRACKET);
break;
default :
jj_la1[196]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
