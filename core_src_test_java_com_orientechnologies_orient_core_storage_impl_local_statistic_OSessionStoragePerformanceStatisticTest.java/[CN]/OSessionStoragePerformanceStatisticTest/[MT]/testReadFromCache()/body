{
  final OModifiableInteger increment=new OModifiableInteger();
  OSessionStoragePerformanceStatistic sessionStoragePerformanceStatistic=new OSessionStoragePerformanceStatistic(100,new OSessionStoragePerformanceStatistic.NanoTimer(){
    private long counter=0;
    @Override public long getNano(){
      return counter+=increment.getValue();
    }
  }
,false);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesReadFromCache(),0);
  sessionStoragePerformanceStatistic.startCommitTimer();
  for (int i=0; i < 50; i++) {
    increment.setValue(50);
    sessionStoragePerformanceStatistic.startComponentOperation("c1po");
    sessionStoragePerformanceStatistic.startComponentOperation("c1po");
    sessionStoragePerformanceStatistic.startPageReadFromCacheTimer();
    sessionStoragePerformanceStatistic.stopPageReadFromCacheTimer();
    increment.setValue(150);
    sessionStoragePerformanceStatistic.startComponentOperation("c2po");
    sessionStoragePerformanceStatistic.startPageReadFromCacheTimer();
    sessionStoragePerformanceStatistic.stopPageReadFromCacheTimer();
    sessionStoragePerformanceStatistic.completeComponentOperation();
    sessionStoragePerformanceStatistic.completeComponentOperation();
    sessionStoragePerformanceStatistic.completeComponentOperation();
  }
  increment.setValue(100);
  for (int i=0; i < 50; i++) {
    sessionStoragePerformanceStatistic.startPageReadFromCacheTimer();
    sessionStoragePerformanceStatistic.stopPageReadFromCacheTimer();
  }
  sessionStoragePerformanceStatistic.stopCommitTimer();
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesPerOperation("c3po"),-1);
  sessionStoragePerformanceStatistic.startComponentOperation("c4po");
  sessionStoragePerformanceStatistic.startComponentOperation("c3po");
  sessionStoragePerformanceStatistic.completeComponentOperation();
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesPerOperation(null),-1);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesPerOperation("c1po"),2);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesPerOperation("c2po"),1);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesPerOperation("c3po"),0);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesPerOperation("c4po"),-1);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesPerOperation("c5po"),-1);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesReadFromCache(),150);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesReadFromCache(null),150);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesReadFromCache("c1po"),100);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesReadFromCache("c2po"),50);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesReadFromCache("c3po"),0);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesReadFromCache("c4po"),-1);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getReadSpeedFromCacheInPages(),10000000);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getReadSpeedFromCacheInPages(null),10000000);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getReadSpeedFromCacheInPages("c1po"),10000000);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getReadSpeedFromCacheInPages("c2po"),6666666);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getReadSpeedFromCacheInPages("c3po"),-1);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getReadSpeedFromCacheInPages("c4po"),-1);
  final ODocument doc=sessionStoragePerformanceStatistic.toDocument();
  Assert.assertEquals(doc.field("amountOfPagesReadFromCache"),150L);
  Assert.assertEquals(doc.field("readSpeedFromCacheInPages"),10000000L);
  final ODocument docC1PO=doc.<Map<String,ODocument>>field("dataByComponent").get("c1po");
  Assert.assertEquals(docC1PO.field("amountOfPagesReadFromCache"),100L);
  Assert.assertEquals(docC1PO.field("readSpeedFromCacheInPages"),10000000L);
  Assert.assertEquals(docC1PO.field("amountOfPagesPerOperation"),2L);
  final ODocument docC2PO=doc.<Map<String,ODocument>>field("dataByComponent").get("c2po");
  Assert.assertEquals(docC2PO.field("amountOfPagesReadFromCache"),50L);
  Assert.assertEquals(docC2PO.field("readSpeedFromCacheInPages"),6666666L);
  Assert.assertEquals(docC2PO.field("amountOfPagesPerOperation"),1L);
}
