{
  final Deque<Long> stamps=tlTimeStumps.get();
  if (stamps.size() > 0) {
    final long endTs=nanoTimer.getNano();
    final long timeDiff=endTs - stamps.pop();
    final PerformanceCounters pf=performanceCounters.get();
    if (pf != null) {
      final AtomicReference<OTimeCounter> writeSpeedInFile=pf.writeSpeedInFile;
      OTimeCounter oldWriteSpeedInFile=writeSpeedInFile.get();
      OTimeCounter newWriteSpeedInFile=new OTimeCounter(oldWriteSpeedInFile.getTime() + timeDiff,oldWriteSpeedInFile.getCounter() + 1);
      while (!writeSpeedInFile.compareAndSet(oldWriteSpeedInFile,newWriteSpeedInFile)) {
        oldWriteSpeedInFile=writeSpeedInFile.get();
        newWriteSpeedInFile=new OTimeCounter(oldWriteSpeedInFile.getTime() + timeDiff,oldWriteSpeedInFile.getCounter() + 1);
      }
    }
  }
}
