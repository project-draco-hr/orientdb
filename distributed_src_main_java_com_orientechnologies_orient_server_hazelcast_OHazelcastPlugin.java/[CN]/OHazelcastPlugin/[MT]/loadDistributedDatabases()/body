{
  for (  Entry<String,String> storageEntry : serverInstance.getAvailableStorageNames().entrySet()) {
    final String databaseName=storageEntry.getKey();
    if (messageService.getDatabase(databaseName) == null) {
      ODistributedServerLog.info(this,nodeName,null,DIRECTION.NONE,"Opening database '%s'...",databaseName);
      ODistributedConfiguration cfg=getDatabaseConfiguration(databaseName);
      ODistributedServerLog.info(this,nodeName,null,DIRECTION.NONE,"Current node started as %s for database '%s'",cfg.getServerRole(nodeName),databaseName);
      boolean publishCfg=!getConfigurationMap().containsKey(CONFIG_DATABASE_PREFIX + databaseName);
      if (activeNodes.size() == 1 && !cfg.isHotAlignment()) {
        final Set<String> cfgServers=cfg.getAllConfiguredServers();
        for (        String cfgServer : cfgServers) {
          if (!isNodeAvailable(cfgServer,databaseName)) {
            ODistributedServerLog.info(this,nodeName,null,DIRECTION.NONE,"Removing offline server '%s' for database '%s' in distributed configuration",cfgServer,databaseName);
            cfg.removeNodeInServerList(cfgServer,true);
            publishCfg=true;
          }
        }
      }
      if (publishCfg) {
        ODocument cfgDoc=cfg.serialize();
        ORecordInternal.setRecordSerializer(cfgDoc,ODatabaseDocumentTx.getDefaultSerializer());
        getConfigurationMap().put(CONFIG_DATABASE_PREFIX + databaseName,cfgDoc);
      }
      messageService.registerDatabase(databaseName);
      final ODatabaseDocumentTx database=(ODatabaseDocumentTx)serverInstance.openDatabase(databaseName,"internal","internal",null,true);
      try {
        cfg=getDatabaseConfiguration(databaseName);
        final boolean distribCfgDirty=rebalanceClusterOwnership(database,cfg,new HashSet<String>(),true);
        if (distribCfgDirty) {
          OLogManager.instance().info(this,"Distributed configuration modified");
          updateCachedDatabaseConfiguration(databaseName,cfg.serialize(),true,true);
        }
      }
  finally {
        database.close();
      }
    }
  }
}
