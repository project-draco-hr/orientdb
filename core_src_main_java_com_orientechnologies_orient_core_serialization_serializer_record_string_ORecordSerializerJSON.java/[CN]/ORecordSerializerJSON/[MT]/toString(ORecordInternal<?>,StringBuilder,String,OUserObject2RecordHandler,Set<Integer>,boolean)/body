{
  try {
    final StringWriter buffer=new StringWriter();
    final OJSONWriter json=new OJSONWriter(buffer,iFormat);
    boolean includeVer;
    boolean includeType;
    boolean includeId;
    boolean includeClazz;
    boolean attribSameRow;
    boolean alwaysFetchEmbeddedDocuments;
    int indentLevel;
    String fetchPlan=null;
    boolean keepTypes;
    if (iFormat == null) {
      includeType=true;
      includeVer=true;
      includeId=true;
      includeClazz=true;
      attribSameRow=true;
      indentLevel=0;
      fetchPlan="";
      keepTypes=true;
      alwaysFetchEmbeddedDocuments=true;
    }
 else {
      includeType=false;
      includeVer=false;
      includeId=false;
      includeClazz=false;
      attribSameRow=false;
      alwaysFetchEmbeddedDocuments=false;
      indentLevel=0;
      keepTypes=true;
      final String[] format=iFormat.split(",");
      for (      String f : format)       if (f.equals("type"))       includeType=true;
 else       if (f.equals("rid"))       includeId=true;
 else       if (f.equals("version"))       includeVer=true;
 else       if (f.equals("class"))       includeClazz=true;
 else       if (f.equals("attribSameRow"))       attribSameRow=true;
 else       if (f.startsWith("indent"))       indentLevel=Integer.parseInt(f.substring(f.indexOf(':') + 1));
 else       if (f.startsWith("fetchPlan"))       fetchPlan=f.substring(f.indexOf(':') + 1);
 else       if (f.startsWith("keepTypes"))       keepTypes=true;
 else       if (f.startsWith("alwaysFetchEmbedded"))       alwaysFetchEmbeddedDocuments=true;
    }
    json.beginObject(indentLevel);
    OJSONFetchContext context=new OJSONFetchContext(json,includeType,includeId,includeVer,includeClazz,attribSameRow,keepTypes,alwaysFetchEmbeddedDocuments);
    context.writeSignature(json,indentLevel,includeType,includeId,includeVer,includeClazz,attribSameRow,iRecord);
    if (iRecord instanceof ORecordSchemaAware<?>) {
      OFetchHelper.fetch(iRecord,null,OFetchHelper.buildFetchPlan(fetchPlan),new OJSONFetchListener(),context);
    }
 else     if (iRecord instanceof ORecordStringable) {
      final ORecordStringable record=(ORecordStringable)iRecord;
      json.writeAttribute(indentLevel + 1,true,"value",record.value());
    }
 else     if (iRecord instanceof ORecordBytes) {
      final ORecordBytes record=(ORecordBytes)iRecord;
      json.writeAttribute(indentLevel + 1,true,"value",OBase64Utils.encodeBytes(record.toStream()));
    }
 else     throw new OSerializationException("Error on marshalling record of type '" + iRecord.getClass() + "' to JSON. The record type cannot be exported to JSON");
    json.endObject(indentLevel);
    iOutput.append(buffer);
    return iOutput;
  }
 catch (  IOException e) {
    throw new OSerializationException("Error on marshalling of record to JSON",e);
  }
}
