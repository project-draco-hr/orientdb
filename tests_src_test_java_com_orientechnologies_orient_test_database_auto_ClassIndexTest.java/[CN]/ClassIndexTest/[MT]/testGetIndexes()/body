{
  final Set<OIndex<?>> indexes=oClass.getIndexes();
  final Set<OIndexDefinition> expectedIndexDefinitions=new HashSet<OIndexDefinition>();
  final OCompositeIndexDefinition compositeIndexOne=new OCompositeIndexDefinition("ClassIndexTestClass");
  compositeIndexOne.addIndex(new OPropertyIndexDefinition("ClassIndexTestClass","fOne",OType.INTEGER));
  compositeIndexOne.addIndex(new OPropertyIndexDefinition("ClassIndexTestClass","fTwo",OType.STRING));
  expectedIndexDefinitions.add(compositeIndexOne);
  final OCompositeIndexDefinition compositeIndexTwo=new OCompositeIndexDefinition("ClassIndexTestClass");
  compositeIndexTwo.addIndex(new OPropertyIndexDefinition("ClassIndexTestClass","fOne",OType.INTEGER));
  compositeIndexTwo.addIndex(new OPropertyIndexDefinition("ClassIndexTestClass","fTwo",OType.STRING));
  compositeIndexTwo.addIndex(new OPropertyIndexDefinition("ClassIndexTestClass","fThree",OType.BOOLEAN));
  expectedIndexDefinitions.add(compositeIndexTwo);
  final OPropertyIndexDefinition propertyIndex=new OPropertyIndexDefinition("ClassIndexTestClass","fOne",OType.INTEGER);
  expectedIndexDefinitions.add(propertyIndex);
  final OPropertyIndexDefinition parentPropertyIndex=new OPropertyIndexDefinition("ClassIndexTestSuperClass","fNine",OType.INTEGER);
  expectedIndexDefinitions.add(parentPropertyIndex);
  assertEquals(indexes.size(),4);
  for (  final OIndex index : indexes) {
    assertTrue(expectedIndexDefinitions.contains(index.getDefinition()));
  }
}
