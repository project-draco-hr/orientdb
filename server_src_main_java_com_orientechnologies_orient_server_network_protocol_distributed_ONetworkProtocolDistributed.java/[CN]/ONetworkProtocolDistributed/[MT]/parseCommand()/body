{
  if (clientId == null && data.clientId != null)   clientId=data.clientId.substring(ODistributedStorage.DNODE_PREFIX.length());
switch (lastRequestType) {
case OChannelDistributedProtocol.REQUEST_DISTRIBUTED_SYNCHRONIZE:
{
      data.commandInfo="Synchronization between nodes";
      final ODocument nodeCfg=new ODocument(channel.readBytes());
      final ORecordOperation op=new ORecordOperation();
      final String node=nodeCfg.field("node");
      final long lastOpId=(Long)nodeCfg.field("lastOperation");
      final String dbName=connection.database.getName();
      OLogManager.instance().info(this,"<-> DB %s: received synchronization request from node %s reading operation logs after %d",dbName,clientId,lastOpId);
      final OOperationLog opLog=manager.getReplicator().getOperationLog(node,dbName);
      sendOk(lastClientTxId);
      if (opLog != null) {
        int position=opLog.findOperationId(lastOpId);
        int sent=0;
        sendOk(lastClientTxId);
        for (int i=position - 1; i >= 0; --i) {
          channel.writeByte((byte)1);
          opLog.getEntry(i,op);
          channel.writeBytes(op.toStream());
          sent++;
          OLogManager.instance().info(this,">> %s: (%d) operation %d with RID %s",dbName,sent,op.serial,op.record.getIdentity());
        }
      }
      channel.writeByte((byte)0);
      break;
    }
case OChannelDistributedProtocol.REQUEST_DISTRIBUTED_LEADER_CONNECT:
{
    data.commandInfo="Clustered connection from leader";
    final ODocument doc=new ODocument().fromStream(channel.readBytes());
    final String clusterName=doc.field("clusterName");
    final byte[] encodedSecurityKey=doc.field("clusterKey");
    final String leaderAddress=doc.field("leaderNodeAddress");
    if (!clusterName.equals(manager.getName()) || !Arrays.equals(encodedSecurityKey,manager.getConfig().getSecurityKey()))     throw new OSecurityException("Invalid combination of cluster name and key received");
    channel.acquireExclusiveLock();
    try {
      sendOk(lastClientTxId);
      channel.writeInt(connection.id);
      if (manager.isLeader()) {
        OLogManager.instance().warn(this,"Received remote connection from the leader node %s, but current node is itself leader: split network problem?",leaderAddress);
        final String myUid=InetAddress.getLocalHost().getHostAddress() + ":" + channel.socket.getLocalPort();
        if (leaderAddress.compareTo(myUid) > 0) {
          channel.writeByte((byte)0);
          channel.flush();
          OLogManager.instance().warn(this,"Current node remains the Leader of the cluster because it has lower network address",leaderAddress);
          return;
        }
      }
      channel.writeByte((byte)1);
      manager.becomePeer(this);
    }
  finally {
      channel.releaseExclusiveLock();
    }
    manager.getPeer().updateConfigurationToLeader();
    break;
  }
case OChannelDistributedProtocol.REQUEST_DISTRIBUTED_HEARTBEAT:
checkConnected();
data.commandInfo="Cluster Heartbeat";
manager.updateHeartBeatTime();
channel.acquireExclusiveLock();
try {
sendOk(lastClientTxId);
}
  finally {
channel.releaseExclusiveLock();
}
break;
case OChannelDistributedProtocol.REQUEST_DISTRIBUTED_RECORD_CHANGE:
{
data.commandInfo="Distributed record change";
final byte operationType=channel.readByte();
final long operationId=channel.readLong();
final ORecordId rid=channel.readRID();
final byte[] buffer=channel.readBytes();
final int version=channel.readInt();
final byte recordType=channel.readByte();
final long result;
ODistributedRequesterThreadLocal.INSTANCE.set(true);
try {
switch (operationType) {
case ORecordOperation.CREATED:
result=createRecord(rid,buffer,recordType);
break;
case ORecordOperation.UPDATED:
result=updateRecord(rid,buffer,version,recordType);
break;
case ORecordOperation.DELETED:
result=deleteRecord(rid,version);
break;
default :
throw new IllegalArgumentException("Received invalid distributed record change operation type: " + operationType);
}
}
  finally {
ODistributedRequesterThreadLocal.INSTANCE.set(false);
}
final ODistributedNode node=manager.getReplicator().getNode(clientId);
final ODistributedDatabaseInfo db=node.getDatabase(connection.database.getName());
db.log.appendLog(operationId,operationType,rid);
channel.acquireExclusiveLock();
try {
sendOk(lastClientTxId);
channel.writeLong(result);
}
  finally {
channel.releaseExclusiveLock();
}
break;
}
case OChannelDistributedProtocol.REQUEST_DISTRIBUTED_DB_SHARE_SENDER:
{
data.commandInfo="Share the database to a remote server";
final String dbUrl=channel.readString();
final String dbUser=channel.readString();
final String dbPassword=channel.readString();
final String remoteServerName=channel.readString();
final String remoteServerEngine=channel.readString();
checkServerAccess("database.share");
openDatabase(dbUrl,dbUser,dbPassword);
final ODistributedNode node=manager.getReplicator().getNode(remoteServerName);
if (node == null) throw new ODistributedSynchronizationException("Cannot find remote node '" + remoteServerName + "'. Assure the remote server and port are correct. Example '192.168.0.10:2425'");
final ODistributedDatabaseInfo db=node.shareDatabase(connection.database,remoteServerEngine,manager.getReplicator().getReplicatorUser().name,manager.getReplicator().getReplicatorUser().password);
channel.acquireExclusiveLock();
try {
sendOk(lastClientTxId);
}
  finally {
channel.releaseExclusiveLock();
}
manager.getPeer().updateConfigurationToLeader();
break;
}
case OChannelDistributedProtocol.REQUEST_DISTRIBUTED_DB_SHARE_RECEIVER:
{
checkConnected();
data.commandInfo="Received a shared database from a remote server to install";
final String dbName=channel.readString();
final String dbUser=channel.readString();
final String dbPasswd=channel.readString();
final String engineName=channel.readString();
try {
OLogManager.instance().info(this,"<-> DB %s: importing database...",dbName);
connection.database=getDatabaseInstance(dbName,engineName);
if (connection.database.exists()) {
OLogManager.instance().info(this,"<-> DB %s: deleting existent database...",connection.database.getName());
connection.database.delete();
}
createDatabase(connection.database,dbUser,dbPasswd);
if (connection.database.isClosed()) connection.database.open(dbUser,dbPasswd);
OLogManager.instance().info(this,"<-> DB %s: reading database content via streaming from remote server node...",dbName);
channel.acquireExclusiveLock();
try {
new ODatabaseImport(connection.database,new OChannelBinaryInputStream(channel),this).importDatabase();
OLogManager.instance().info(this,"<-> DB %s: database imported correctly",dbName);
sendOk(lastClientTxId);
channel.writeInt(connection.id);
}
  finally {
channel.releaseExclusiveLock();
}
}
  finally {
manager.getPeer().updateHeartBeatTime();
}
manager.getPeer().updateConfigurationToLeader();
break;
}
case OChannelDistributedProtocol.REQUEST_DISTRIBUTED_DB_CONFIG:
{
checkConnected();
data.commandInfo="Update db configuration from server node leader";
final ODocument cfg=new ODocument().fromStream(channel.readBytes());
manager.getReplicator().updateConfiguration(cfg);
OLogManager.instance().warn(this,"Cluster <%s>: changed distributed server configuration:\n%s",manager.getConfig().name,cfg.toJSON(""));
for (String dbName : cfg.fieldNames()) manager.sendClusterConfigurationToClients(dbName,cfg);
channel.acquireExclusiveLock();
try {
sendOk(lastClientTxId);
}
  finally {
channel.releaseExclusiveLock();
}
break;
}
default :
super.parseCommand();
return;
}
try {
channel.flush();
}
 catch (Throwable t) {
OLogManager.instance().debug(this,"Error on send data over the network",t);
}
}
