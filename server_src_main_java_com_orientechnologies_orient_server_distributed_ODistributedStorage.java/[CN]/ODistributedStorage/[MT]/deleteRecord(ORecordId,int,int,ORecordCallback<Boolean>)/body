{
  resetLastValidBackup();
  if (OScenarioThreadLocal.INSTANCE.get() == RUN_MODE.RUNNING_DISTRIBUTED) {
    return wrapped.deleteRecord(iRecordId,iVersion,iMode,iCallback);
  }
  try {
    final String clusterName=getClusterNameByRID(iRecordId);
    final ODistributedConfiguration dbCfg=dManager.getDatabaseConfiguration(getName());
    final String localNodeName=dManager.getLocalNodeName();
    checkNodeIsMaster(localNodeName,dbCfg);
    final List<String> nodes=dbCfg.getServers(clusterName,null);
    if (nodes.isEmpty()) {
      return (OStorageOperationResult<Boolean>)ODistributedAbstractPlugin.runInDistributedMode(new Callable(){
        @Override public Object call() throws Exception {
          return wrapped.deleteRecord(iRecordId,iVersion,iMode,iCallback);
        }
      }
);
    }
    nodes.remove(localNodeName);
    dManager.getAvailableNodes(nodes,getName());
    final OStorageOperationResult<Boolean> localResult;
    sequentialRIDLock.writeLock().lock();
    try {
      clusterLocks[iRecordId.clusterId % clusterLocks.length].lock();
      try {
        localResult=(OStorageOperationResult<Boolean>)ODistributedAbstractPlugin.runInDistributedMode(new Callable(){
          @Override public Object call() throws Exception {
            final ODatabaseDocumentInternal db=ODatabaseRecordThreadLocal.INSTANCE.get();
            try {
              db.delete(iRecordId,iVersion);
              return new OStorageOperationResult<Boolean>(true);
            }
 catch (            ORecordNotFoundException e) {
              return new OStorageOperationResult<Boolean>(false);
            }
          }
        }
);
        if (!nodes.isEmpty()) {
          Boolean executionModeSynch=dbCfg.isExecutionModeSynchronous(clusterName);
          if (executionModeSynch == null)           executionModeSynch=iMode == 0;
          if (executionModeSynch) {
            final Object result=dManager.sendRequest(getName(),Collections.singleton(clusterName),nodes,new ODeleteRecordTask(iRecordId,iVersion),EXECUTION_MODE.RESPONSE,localResult.getResult());
            if (result instanceof ONeedRetryException)             throw (ONeedRetryException)result;
 else             if (result instanceof Exception)             throw OException.wrapException(new ODistributedException("Error on execution distributed DELETE_RECORD"),(Exception)result);
            return new OStorageOperationResult<Boolean>(true);
          }
          if (!nodes.isEmpty())           asynchronousExecution(new OAsynchDistributedOperation(getName(),Collections.singleton(clusterName),nodes,new ODeleteRecordTask(iRecordId,iVersion),null,localResult.getResult()));
        }
      }
  finally {
        clusterLocks[iRecordId.clusterId % clusterLocks.length].unlock();
      }
    }
  finally {
      sequentialRIDLock.writeLock().unlock();
    }
    return localResult;
  }
 catch (  ONeedRetryException e) {
    throw e;
  }
catch (  Exception e) {
    handleDistributedException("Cannot route DELETE_RECORD operation for %s to the distributed node",e,iRecordId);
    return null;
  }
}
