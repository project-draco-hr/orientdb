{
  logger.setNode(databaseEntry.serverId);
  logger.setDatabase(databaseEntry.databaseName);
  if (OLogManager.instance().isInfoEnabled())   logger.log(this,Level.INFO,TYPE.REPLICATION,DIRECTION.OUT,"%s record %s in %s mode",ORecordOperation.getName(iRequest.type),iRecord.getIdentity(),iRequestType);
  do {
    try {
      final OChannelBinaryClient network=beginRequest(OClusterProtocol.REQUEST_NODE2NODE_REPLICATION_RECORD_PROPAGATE);
      try {
        network.writeString(databaseEntry.databaseName);
        network.writeByte(iRequest.type);
        network.writeLong(iRequest.serial);
        network.writeRID(iRecord.getIdentity());
        network.writeBytes(iRecord.toStream());
        network.writeInt(iRecord.getVersion());
        network.writeByte(iRecord.getRecordType());
      }
  finally {
        endRequest();
      }
      if (iRequestType == SYNCH_TYPE.SYNCH)       try {
        beginResponse();
        handleRemoteResponse(iRequest.type,iRequestType,iRecord,network.readLong());
      }
  finally {
        endResponse();
      }
 else {
        Callable<Object> response=new Callable<Object>(){
          public Object call() throws Exception {
            beginResponse();
            try {
              handleRemoteResponse(iRequest.type,iRequestType,iRecord,network.readLong());
            }
  finally {
              endResponse();
            }
            return null;
          }
        }
;
        asynchExecutor.submit(new FutureTask<Object>(response));
      }
      return;
    }
 catch (    OConcurrentModificationException e) {
      conflictResolver.handleUpdateConflict(iRequest.type,iRequestType,iRecord,e.getRecordVersion(),e.getDatabaseVersion());
      return;
    }
catch (    ODatabaseException e) {
      conflictResolver.handleUpdateConflict(iRequest.type,iRequestType,iRecord,iRecord.getVersion(),-1);
      return;
    }
catch (    OException e) {
      throw e;
    }
catch (    Exception e) {
      throw new OIOException("REPL <" + databaseEntry.databaseName + "> error on distribute record: "+ iRecord.getIdentity(),e);
    }
  }
 while (true);
}
