{
  final int records=10000;
  long seed=System.currentTimeMillis();
  MersenneTwisterFast mersenneTwisterFast=new MersenneTwisterFast(seed);
  System.out.println("testHideHalfRecordsAndAddAnotherHalfAgain seed : " + seed);
  Map<Long,byte[]> positionRecordMap=new HashMap<Long,byte[]>();
  int recordVersion=0;
  recordVersion++;
  recordVersion++;
  for (int i=0; i < records; i++) {
    int recordSize=mersenneTwisterFast.nextInt(3 * OClusterPage.MAX_RECORD_SIZE) + 1;
    byte[] bigRecord=new byte[recordSize];
    mersenneTwisterFast.nextBytes(bigRecord);
    final OPhysicalPosition physicalPosition=paginatedCluster.createRecord(bigRecord,recordVersion,(byte)2);
    positionRecordMap.put(physicalPosition.clusterPosition,bigRecord);
  }
  int hiddenRecords=0;
  Assert.assertEquals(records,paginatedCluster.getEntries());
  Iterator<Long> positionIterator=positionRecordMap.keySet().iterator();
  while (positionIterator.hasNext()) {
    long clusterPosition=positionIterator.next();
    if (mersenneTwisterFast.nextBoolean()) {
      Assert.assertTrue(paginatedCluster.hideRecord(clusterPosition));
      hiddenRecords++;
      Assert.assertEquals(paginatedCluster.getEntries(),records - hiddenRecords);
      positionIterator.remove();
    }
  }
  Assert.assertEquals(paginatedCluster.getEntries(),records - hiddenRecords);
  for (int i=0; i < records / 2; i++) {
    int recordSize=mersenneTwisterFast.nextInt(3 * OClusterPage.MAX_RECORD_SIZE) + 1;
    byte[] bigRecord=new byte[recordSize];
    mersenneTwisterFast.nextBytes(bigRecord);
    final OPhysicalPosition physicalPosition=paginatedCluster.createRecord(bigRecord,recordVersion,(byte)2);
    positionRecordMap.put(physicalPosition.clusterPosition,bigRecord);
  }
  Assert.assertEquals(paginatedCluster.getEntries(),(long)(1.5 * records - hiddenRecords));
}
