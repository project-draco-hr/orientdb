{
  final DateFormat dateTimeFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
  json.beginCollection(1,true,"connections");
  final List<OClientConnection> conns=server.getClientConnectionManager().getConnections();
  for (  OClientConnection c : conns) {
    final ONetworkProtocolData data=c.getData();
    final OClientConnectionStats stats=c.getStats();
    if (databaseName != null && !databaseName.equals((stats.lastDatabase)))     continue;
    final String lastCommandOn;
    final String connectedOn;
synchronized (dateTimeFormat) {
      lastCommandOn=dateTimeFormat.format(new Date(stats.lastCommandReceived));
      connectedOn=dateTimeFormat.format(new Date(c.getSince()));
    }
    String lastDatabase;
    String lastUser;
    if (stats.lastDatabase != null && stats.lastUser != null) {
      lastDatabase=stats.lastDatabase;
      lastUser=stats.lastUser;
    }
 else {
      lastDatabase=data.lastDatabase;
      lastUser=data.lastUser;
    }
    json.beginObject(2);
    writeField(json,2,"connectionId",c.getId());
    writeField(json,2,"remoteAddress",c.getProtocol().getChannel() != null ? c.getProtocol().getChannel().toString() : "Disconnected");
    writeField(json,2,"db",lastDatabase != null ? lastDatabase : "-");
    writeField(json,2,"user",lastUser != null ? lastUser : "-");
    writeField(json,2,"totalRequests",stats.totalRequests);
    writeField(json,2,"commandInfo",data.commandInfo);
    writeField(json,2,"commandDetail",data.commandDetail);
    writeField(json,2,"lastCommandOn",lastCommandOn);
    writeField(json,2,"lastCommandInfo",stats.lastCommandInfo);
    writeField(json,2,"lastCommandDetail",stats.lastCommandDetail);
    writeField(json,2,"lastExecutionTime",stats.lastCommandExecutionTime);
    writeField(json,2,"totalWorkingTime",stats.totalCommandExecutionTime);
    writeField(json,2,"connectedOn",connectedOn);
    writeField(json,2,"protocol",c.getProtocol().getType());
    writeField(json,2,"sessionId",data.sessionId);
    writeField(json,2,"clientId",data.clientId);
    final StringBuilder driver=new StringBuilder(128);
    if (data.driverName != null) {
      driver.append(data.driverName);
      driver.append(" v");
      driver.append(data.driverVersion);
      driver.append(" Protocol v");
      driver.append(data.protocolVersion);
    }
    writeField(json,2,"driver",driver.toString());
    json.endObject(2);
  }
  json.endCollection(1,false);
}
