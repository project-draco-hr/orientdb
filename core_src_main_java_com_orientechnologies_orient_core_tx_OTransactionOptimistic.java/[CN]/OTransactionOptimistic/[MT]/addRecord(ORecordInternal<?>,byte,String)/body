{
  checkTransaction();
switch (iStatus) {
case ORecordOperation.CREATED:
    database.callbackHooks(TYPE.BEFORE_CREATE,iRecord);
  break;
case ORecordOperation.LOADED:
database.callbackHooks(TYPE.BEFORE_READ,iRecord);
break;
case ORecordOperation.UPDATED:
database.callbackHooks(TYPE.BEFORE_UPDATE,iRecord);
break;
case ORecordOperation.DELETED:
database.callbackHooks(TYPE.BEFORE_DELETE,iRecord);
break;
}
if (iRecord.getIdentity().isTemporary()) temp2persistent.put(iRecord.getIdentity().copy(),iRecord);
if ((status == OTransaction.TXSTATUS.COMMITTING) && database.getStorage() instanceof OStorageEmbedded) {
switch (iStatus) {
case ORecordOperation.CREATED:
case ORecordOperation.UPDATED:
database.executeSaveRecord(iRecord,iClusterName,iRecord.getVersion(),iRecord.getRecordType(),false,OPERATION_MODE.SYNCHRONOUS,null);
break;
case ORecordOperation.DELETED:
database.executeDeleteRecord(iRecord,iRecord.getVersion(),false,false,OPERATION_MODE.SYNCHRONOUS);
break;
}
}
 else {
final ORecordId rid=(ORecordId)iRecord.getIdentity();
if (!rid.isValid()) {
iRecord.onBeforeIdentityChanged(rid);
if (rid.clusterId == ORID.CLUSTER_ID_INVALID) rid.clusterId=iClusterName != null ? database.getClusterIdByName(iClusterName) : database.getDefaultClusterId();
rid.clusterPosition=newObjectCounter--;
iRecord.onAfterIdentityChanged(iRecord);
}
 else database.getLevel1Cache().freeRecord(rid);
ORecordOperation txEntry=getRecordEntry(rid);
if (txEntry == null) {
if (!(rid.isTemporary() && iStatus != ORecordOperation.CREATED)) {
txEntry=new ORecordOperation(iRecord,iStatus);
recordEntries.put(rid,txEntry);
}
}
 else {
txEntry.record=iRecord;
switch (txEntry.type) {
case ORecordOperation.LOADED:
switch (iStatus) {
case ORecordOperation.UPDATED:
txEntry.type=ORecordOperation.UPDATED;
break;
case ORecordOperation.DELETED:
txEntry.type=ORecordOperation.DELETED;
break;
}
break;
case ORecordOperation.UPDATED:
switch (iStatus) {
case ORecordOperation.DELETED:
txEntry.type=ORecordOperation.DELETED;
break;
}
break;
case ORecordOperation.DELETED:
break;
case ORecordOperation.CREATED:
switch (iStatus) {
case ORecordOperation.DELETED:
recordEntries.remove(rid);
break;
}
break;
}
}
}
switch (iStatus) {
case ORecordOperation.CREATED:
database.callbackHooks(TYPE.AFTER_CREATE,iRecord);
break;
case ORecordOperation.LOADED:
database.callbackHooks(TYPE.AFTER_READ,iRecord);
break;
case ORecordOperation.UPDATED:
database.callbackHooks(TYPE.AFTER_UPDATE,iRecord);
break;
case ORecordOperation.DELETED:
database.callbackHooks(TYPE.AFTER_DELETE,iRecord);
break;
}
}
