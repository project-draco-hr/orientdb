{
  acquireSharedLock();
  try {
    final long filledUpTo=diskCache.getFilledUpTo(fileId);
    for (long pageIndex=0; pageIndex < filledUpTo; pageIndex++) {
      OCacheEntry cacheEntry=diskCache.load(fileId,pageIndex,false);
      try {
        OClusterPositionMapBucket bucket=new OClusterPositionMapBucket(cacheEntry,ODurablePage.TrackMode.NONE);
        int bucketSize=bucket.getSize();
        for (int index=0; index < bucketSize; index++) {
          if (bucket.exists(index))           return pageIndex * OClusterPositionMapBucket.MAX_ENTRIES + index;
        }
      }
  finally {
        diskCache.release(cacheEntry);
      }
    }
    return ORID.CLUSTER_POS_INVALID;
  }
  finally {
    releaseSharedLock();
  }
}
