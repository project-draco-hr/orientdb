{
  acquireWriteLock();
  try {
    if (!osFile.exists())     throw new FileNotFoundException("File: " + osFile.getAbsolutePath());
    openChannel(-1);
    OLogManager.instance().debug(this,"Checking file integrity of " + osFile.getName() + "...");
    init();
    long filledUpTo=getFilledUpTo();
    long fileSize=getFileSize();
    if (fileSize == 0) {
      final long newFileSize=osFile.length() - HEADER_SIZE;
      if (newFileSize != fileSize) {
        OLogManager.instance().error(this,"Invalid fileSize=%d for file %s. Resetting it to the os file size: %d. Probably the file was not closed correctly last time. The number of records has been set to the maximum value. It's strongly suggested to export and reimport the database before using it",fileSize,getOsFile().getAbsolutePath(),newFileSize);
        setFilledUpTo(newFileSize,true);
        setSize(newFileSize,true);
        fileSize=newFileSize;
      }
    }
    if (filledUpTo > 0 && filledUpTo > fileSize) {
      OLogManager.instance().error(this,"Invalid filledUp=%d for file %s. Resetting it to the os file size: %d. Probably the file was not closed correctly last time. The number of records has been set to the maximum value. It's strongly suggested to export and reimport the database before using it",filledUpTo,getOsFile().getAbsolutePath(),fileSize);
      setSize(fileSize);
      setFilledUpTo(fileSize);
      filledUpTo=getFilledUpTo();
    }
    if (filledUpTo > fileSize || filledUpTo < 0)     OLogManager.instance().error(this,"Invalid filledUp size (=" + filledUpTo + "). The file '"+ getName()+ "' could be corrupted",null,OStorageException.class);
    if (failCheck) {
      wasSoftlyClosed=isSoftlyClosed();
      if (wasSoftlyClosed)       setSoftlyClosed(false);
    }
    if (version < CURRENT_VERSION) {
      setSize(fileSize,true);
      setFilledUpTo(filledUpTo,true);
      setVersion(CURRENT_VERSION);
      version=CURRENT_VERSION;
      setSoftlyClosed(!failCheck);
    }
    if (failCheck)     return wasSoftlyClosed;
    return true;
  }
  finally {
    releaseWriteLock();
  }
}
