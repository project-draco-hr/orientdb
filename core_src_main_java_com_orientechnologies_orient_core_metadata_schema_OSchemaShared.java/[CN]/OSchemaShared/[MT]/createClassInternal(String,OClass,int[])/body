{
  if (iClassName == null || iClassName.length() == 0)   throw new OSchemaException("Found class name null");
  final Character wrongCharacter=checkNameIfValid(iClassName);
  if (wrongCharacter != null)   throw new OSchemaException("Found invalid class name. Character '" + wrongCharacter + "' cannot be used in class name.");
  final ODatabaseRecord database=getDatabase();
  rwLock.writeLock().lock();
  try {
    checkClustersAreAbsent(iClusterIds);
    final int[] clusterIds;
    if (iClusterIds == null || iClusterIds.length == 0)     clusterIds=new int[]{database.addCluster(CLUSTER_TYPE.PHYSICAL.toString(),iClassName,null,null)};
 else     clusterIds=iClusterIds;
    database.checkSecurity(ODatabaseSecurityResources.SCHEMA,ORole.PERMISSION_CREATE);
    final String key=iClassName.toLowerCase();
    if (classes.containsKey(key))     throw new OSchemaException("Class " + iClassName + " already exists in current database");
    final OClassImpl cls=new OClassImpl(this,iClassName,clusterIds);
    classes.put(key,cls);
    if (cls.getShortName() != null)     classes.put(cls.getShortName().toLowerCase(),cls);
    if (superClass != null) {
      cls.setSuperClassInternal(superClass);
      final int[] clustersToIndex=superClass.getPolymorphicClusterIds();
      final String[] clusterNames=new String[clustersToIndex.length];
      for (int i=0; i < clustersToIndex.length; i++)       clusterNames[i]=database.getClusterNameById(clustersToIndex[i]);
      for (      OIndex<?> index : superClass.getIndexes())       for (      String clusterName : clusterNames)       if (clusterName != null)       database.getMetadata().getIndexManager().addClusterToIndex(clusterName,index.getName());
    }
    addClusterClassMap(cls);
    return cls;
  }
  finally {
    rwLock.writeLock().unlock();
  }
}
