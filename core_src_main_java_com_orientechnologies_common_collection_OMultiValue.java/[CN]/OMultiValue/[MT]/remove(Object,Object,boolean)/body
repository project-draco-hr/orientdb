{
  if (iObject != null) {
    if (iObject instanceof OMultiCollectionIterator<?>) {
      final Collection<Object> list=new LinkedList<Object>();
      for (      Object o : ((OMultiCollectionIterator<?>)iObject))       list.add(o);
      iObject=list;
    }
    if (iToRemove instanceof OMultiCollectionIterator<?>) {
      final Set<Object> set=new HashSet<Object>();
      for (      Object o : ((OMultiCollectionIterator<?>)iToRemove))       set.add(o);
      iToRemove=set;
    }
    if (iObject instanceof Collection<?> || iObject instanceof OCollection<?>) {
      final OCollection<Object> coll;
      if (iObject instanceof Collection<?>) {
        final Collection<Object> collection=(Collection<Object>)iObject;
        coll=new OCollection<Object>(){
          @Override public void add(          Object value){
            collection.add(value);
          }
          @Override public void remove(          Object value){
            collection.remove(value);
          }
          @Override public Iterator<Object> iterator(){
            return collection.iterator();
          }
          @Override public int size(){
            return collection.size();
          }
        }
;
      }
 else       coll=(OCollection<Object>)iObject;
      if (iToRemove instanceof Collection<?>) {
        for (        Object o : (Collection<Object>)iToRemove) {
          if (isMultiValue(o))           remove(coll,o,iAllOccurrences);
 else           removeFromOCollection(iObject,coll,o,iAllOccurrences);
        }
      }
 else       if (iToRemove != null && iToRemove.getClass().isArray()) {
        for (int i=0; i < Array.getLength(iToRemove); ++i) {
          Object o=Array.get(iToRemove,i);
          if (isMultiValue(o))           remove(coll,o,iAllOccurrences);
 else           removeFromOCollection(iObject,coll,o,iAllOccurrences);
        }
      }
 else       if (iToRemove instanceof Map<?,?>) {
        for (        Entry<Object,Object> entry : ((Map<Object,Object>)iToRemove).entrySet())         coll.remove(entry.getKey());
      }
 else       if (iToRemove instanceof Iterator<?>) {
        if (iToRemove instanceof OMultiCollectionIterator<?>)         ((OMultiCollectionIterator<?>)iToRemove).reset();
        if (iAllOccurrences) {
          if (iObject instanceof OCollection)           throw new IllegalStateException("Mutable collection can not be used to remove all occurrences.");
          final Collection<Object> collection=(Collection)iObject;
          OMultiCollectionIterator<?> it=(OMultiCollectionIterator<?>)iToRemove;
          batchRemove(collection,it);
        }
 else {
          Iterator<?> it=(Iterator<?>)iToRemove;
          if (it.hasNext()) {
            final Object itemToRemove=it.next();
            coll.remove(itemToRemove);
          }
        }
      }
 else       removeFromOCollection(iObject,coll,iToRemove,iAllOccurrences);
    }
 else     if (iObject.getClass().isArray()) {
      final Object[] copy;
      if (iToRemove instanceof Collection<?>) {
        final int sourceTot=Array.getLength(iObject);
        final int tot=sourceTot - ((Collection<Object>)iToRemove).size();
        copy=new Object[tot];
        int k=0;
        for (int i=0; i < sourceTot; ++i) {
          Object o=Array.get(iObject,i);
          if (o != null) {
            boolean found=false;
            for (            Object toRemove : (Collection<Object>)iToRemove) {
              if (o.equals(toRemove)) {
                found=true;
                break;
              }
            }
            if (!found)             copy[k++]=o;
          }
        }
      }
 else       if (iToRemove != null && iToRemove.getClass().isArray()) {
        throw new UnsupportedOperationException("Cannot execute remove() against an array");
      }
 else {
        throw new UnsupportedOperationException("Cannot execute remove() against an array");
      }
      return copy;
    }
 else     throw new IllegalArgumentException("Object " + iObject + " is not a multi value");
  }
  return iObject;
}
