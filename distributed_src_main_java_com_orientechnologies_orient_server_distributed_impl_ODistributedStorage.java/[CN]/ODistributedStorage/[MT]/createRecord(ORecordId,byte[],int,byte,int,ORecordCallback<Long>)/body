{
  resetLastValidBackup();
  if (OScenarioThreadLocal.INSTANCE.isRunModeDistributed()) {
    return wrapped.createRecord(iRecordId,iContent,iRecordVersion,iRecordType,iMode,iCallback);
  }
  checkLocalNodeIsAvailable();
  checkClusterRebalanceIsNotRunning();
  try {
    final int clusterId=iRecordId.getClusterId();
    if (clusterId == ORID.CLUSTER_ID_INVALID)     throw new IllegalArgumentException("Cluster not valid");
    final String localNodeName=dManager.getLocalNodeName();
    final ODistributedConfiguration dbCfg=distributedConfiguration;
    checkNodeIsMaster(localNodeName,dbCfg);
    final String clusterName=getClusterNameByRID(iRecordId);
    checkForCluster(iRecordId,localNodeName,dbCfg);
    final List<String> servers=dbCfg.getServers(clusterName,null);
    if (servers.isEmpty())     return wrapped.createRecord(iRecordId,iContent,iRecordVersion,iRecordType,iMode,iCallback);
    final String finalClusterName=clusterName;
    final Set<String> clusterNames=Collections.singleton(finalClusterName);
    servers.remove(localNodeName);
    Boolean executionModeSynch=dbCfg.isExecutionModeSynchronous(finalClusterName);
    if (executionModeSynch == null)     executionModeSynch=iMode == 0;
    final boolean syncMode=executionModeSynch;
    return (OStorageOperationResult<OPhysicalPosition>)executeRecordOperationInLock(syncMode,iRecordId,new OCallable<Object,OCallable<Void,ODistributedRequestId>>(){
      @Override public Object call(      OCallable<Void,ODistributedRequestId> unlockCallback){
        final OStorageOperationResult<OPhysicalPosition> localResult;
        localResult=wrapped.createRecord(iRecordId,iContent,iRecordVersion,iRecordType,iMode,iCallback);
        iRecordId.clusterPosition=localResult.getResult().clusterPosition;
        final OPlaceholder localPlaceholder=new OPlaceholder(iRecordId,localResult.getResult().recordVersion);
        final OCreateRecordTask task=new OCreateRecordTask(iRecordId,iContent,iRecordVersion,iRecordType);
        task.setLastLSN(wrapped.getLSN());
        if (!servers.isEmpty()) {
          if (syncMode) {
            try {
              final ODistributedResponse dResponse=dManager.sendRequest(getName(),clusterNames,servers,task,dManager.getNextMessageIdCounter(),EXECUTION_MODE.RESPONSE,localPlaceholder,unlockCallback);
              final Object payload=dResponse.getPayload();
              if (payload != null) {
                if (payload instanceof Exception) {
                  executeUndoOnLocalServer(dResponse.getRequestId(),task);
                  if (payload instanceof ONeedRetryException)                   throw (ONeedRetryException)payload;
                  throw OException.wrapException(new ODistributedException("Error on execution distributed create record"),(Exception)payload);
                }
                final OPlaceholder masterPlaceholder=(OPlaceholder)payload;
                iRecordId.copyFrom(masterPlaceholder.getIdentity());
                return new OStorageOperationResult<OPhysicalPosition>(new OPhysicalPosition(masterPlaceholder.getIdentity().getClusterPosition(),masterPlaceholder.getVersion()));
              }
            }
 catch (            RuntimeException e) {
              executeUndoOnLocalServer(null,task);
              throw e;
            }
catch (            Exception e) {
              executeUndoOnLocalServer(null,task);
              ODatabaseException.wrapException(new ODistributedException("Cannot execute distributed create record"),e);
            }
          }
 else {
            asynchronousExecution(new OAsynchDistributedOperation(getName(),Collections.singleton(finalClusterName),servers,task,dManager.getNextMessageIdCounter(),localPlaceholder,unlockCallback,null));
          }
        }
 else         unlockCallback.call(null);
        return localResult;
      }
    }
);
  }
 catch (  ONeedRetryException e) {
    throw e;
  }
catch (  HazelcastInstanceNotActiveException e) {
    throw new OOfflineNodeException("Hazelcast instance is not available");
  }
catch (  HazelcastException e) {
    throw new OOfflineNodeException("Hazelcast instance is not available");
  }
catch (  Exception e) {
    handleDistributedException("Cannot route create record operation for %s to the distributed node",e,iRecordId);
    return null;
  }
}
