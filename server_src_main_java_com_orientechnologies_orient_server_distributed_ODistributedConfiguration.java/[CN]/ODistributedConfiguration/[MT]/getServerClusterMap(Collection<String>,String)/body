{
synchronized (configuration) {
    if (iClusterNames == null || iClusterNames.isEmpty())     iClusterNames=DEFAULT_CLUSTER_NAME;
    final Map<String,Collection<String>> servers=new HashMap<String,Collection<String>>(iClusterNames.size());
    boolean canUseLocalNode=true;
    for (    String p : iClusterNames) {
      final List<String> serverList=getClusterConfiguration(p).field(SERVERS);
      if (serverList != null && !serverList.contains(iLocalNode)) {
        canUseLocalNode=false;
        break;
      }
    }
    if (canUseLocalNode) {
      servers.put(iLocalNode,iClusterNames);
      return servers;
    }
    if (iClusterNames.size() == 1) {
      final List<String> serverList=getClusterConfiguration(iClusterNames.iterator().next()).field(SERVERS);
      for (      String s : serverList) {
        if (NEW_NODE_TAG.equalsIgnoreCase(s))         continue;
        servers.put(s,iClusterNames);
        return servers;
      }
    }
    final Map<String,Collection<String>> serverMap=new HashMap<String,Collection<String>>();
    for (    String p : iClusterNames) {
      final List<String> serverList=getClusterConfiguration(p).field(SERVERS);
      for (      String s : serverList) {
        if (NEW_NODE_TAG.equalsIgnoreCase(s))         continue;
        Collection<String> clustersInServer=serverMap.get(s);
        if (clustersInServer == null) {
          clustersInServer=new HashSet<String>();
          serverMap.put(s,clustersInServer);
        }
        clustersInServer.add(p);
      }
    }
    if (serverMap.size() == 1)     return serverMap;
    final List<String> orderedServers=new ArrayList<String>(serverMap.keySet());
    Collections.sort(orderedServers,new Comparator<String>(){
      @Override public int compare(      final String o1,      final String o2){
        return ((Integer)serverMap.get(o2).size()).compareTo((Integer)serverMap.get(o1).size());
      }
    }
);
    final Set<String> remainingClusters=new HashSet<String>(iClusterNames);
    final Set<String> includedClusters=new HashSet<String>(iClusterNames.size());
    for (    String s : orderedServers) {
      final Collection<String> clusters=serverMap.get(s);
      if (!servers.isEmpty()) {
        clusters.removeAll(includedClusters);
      }
      servers.put(s,clusters);
      remainingClusters.removeAll(clusters);
      includedClusters.addAll(clusters);
      if (remainingClusters.isEmpty())       break;
    }
    return servers;
  }
}
