{
  OOrderBy jjtn000=new OOrderBy(JJTORDERBY);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  jjtn000.items=new java.util.ArrayList();
  OOrderByItem lastItem;
  OIdentifier lastIdentifier;
  OModifier lastModifier;
  ORid lastRid;
  Token lastToken;
  try {
    jj_consume_token(ORDER);
    jj_consume_token(BY);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case CACHE:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case EXECUTE:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case BEGIN:
case COMMIT:
case IF:
case ISOLATION:
case SLEEP:
case CONSOLE:
case BLOB:
case SHARED:
case DEFAULT_:
case SEQUENCE:
case START:
case OPTIONAL:
case RECORD_ATTRIBUTE:
case INTEGER_LITERAL:
case MINUS:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
case 236:
      lastItem=new OOrderByItem();
    jjtn000.items.add(lastItem);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case CACHE:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case EXECUTE:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case BEGIN:
case COMMIT:
case IF:
case ISOLATION:
case SLEEP:
case CONSOLE:
case BLOB:
case SHARED:
case DEFAULT_:
case SEQUENCE:
case START:
case OPTIONAL:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
    lastIdentifier=Identifier();
  lastItem.alias=lastIdentifier.toString();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LBRACKET:
case DOT:
  lastModifier=Modifier();
lastItem.modifier=lastModifier;
break;
default :
jj_la1[197]=jj_gen;
;
}
break;
case INTEGER_LITERAL:
case MINUS:
case 236:
lastItem.rid=Rid();
break;
case RECORD_ATTRIBUTE:
lastToken=jj_consume_token(RECORD_ATTRIBUTE);
lastItem.recordAttr=lastToken.image;
break;
default :
jj_la1[198]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ASC:
case DESC:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DESC:
jj_consume_token(DESC);
lastItem.type=OOrderByItem.DESC;
break;
case ASC:
jj_consume_token(ASC);
lastItem.type=OOrderByItem.ASC;
break;
default :
jj_la1[199]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[200]=jj_gen;
;
}
break;
case LPAREN:
jj_consume_token(LPAREN);
lastItem=new OOrderByItem();
jjtn000.items.add(lastItem);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case CACHE:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case EXECUTE:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case BEGIN:
case COMMIT:
case IF:
case ISOLATION:
case SLEEP:
case CONSOLE:
case BLOB:
case SHARED:
case DEFAULT_:
case SEQUENCE:
case START:
case OPTIONAL:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
lastIdentifier=Identifier();
lastItem.alias=lastIdentifier.toString();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LBRACKET:
case DOT:
lastModifier=Modifier();
lastItem.modifier=lastModifier;
break;
default :
jj_la1[201]=jj_gen;
;
}
break;
case INTEGER_LITERAL:
case MINUS:
case 236:
lastItem.rid=Rid();
break;
case RECORD_ATTRIBUTE:
lastToken=jj_consume_token(RECORD_ATTRIBUTE);
lastItem.recordAttr=lastToken.image;
break;
default :
jj_la1[202]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ASC:
case DESC:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DESC:
jj_consume_token(DESC);
lastItem.type=OOrderByItem.DESC;
break;
case ASC:
jj_consume_token(ASC);
lastItem.type=OOrderByItem.ASC;
break;
default :
jj_la1[203]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[204]=jj_gen;
;
}
jj_consume_token(RPAREN);
break;
default :
jj_la1[205]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
label_35: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[206]=jj_gen;
break label_35;
}
jj_consume_token(COMMA);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case CACHE:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case EXECUTE:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case BEGIN:
case COMMIT:
case IF:
case ISOLATION:
case SLEEP:
case CONSOLE:
case BLOB:
case SHARED:
case DEFAULT_:
case SEQUENCE:
case START:
case OPTIONAL:
case RECORD_ATTRIBUTE:
case INTEGER_LITERAL:
case MINUS:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
case 236:
lastItem=new OOrderByItem();
jjtn000.items.add(lastItem);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case CACHE:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case EXECUTE:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case BEGIN:
case COMMIT:
case IF:
case ISOLATION:
case SLEEP:
case CONSOLE:
case BLOB:
case SHARED:
case DEFAULT_:
case SEQUENCE:
case START:
case OPTIONAL:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
lastIdentifier=Identifier();
lastItem.alias=lastIdentifier.toString();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LBRACKET:
case DOT:
lastModifier=Modifier();
lastItem.modifier=lastModifier;
break;
default :
jj_la1[207]=jj_gen;
;
}
break;
case INTEGER_LITERAL:
case MINUS:
case 236:
lastItem.rid=Rid();
break;
case RECORD_ATTRIBUTE:
lastToken=jj_consume_token(RECORD_ATTRIBUTE);
lastItem.recordAttr=lastToken.image;
break;
default :
jj_la1[208]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ASC:
case DESC:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DESC:
jj_consume_token(DESC);
lastItem.type=OOrderByItem.DESC;
break;
case ASC:
jj_consume_token(ASC);
lastItem.type=OOrderByItem.ASC;
break;
default :
jj_la1[209]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[210]=jj_gen;
;
}
break;
case LPAREN:
jj_consume_token(LPAREN);
lastItem=new OOrderByItem();
jjtn000.items.add(lastItem);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case CACHE:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case EXECUTE:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case BEGIN:
case COMMIT:
case IF:
case ISOLATION:
case SLEEP:
case CONSOLE:
case BLOB:
case SHARED:
case DEFAULT_:
case SEQUENCE:
case START:
case OPTIONAL:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
lastIdentifier=Identifier();
lastItem.alias=lastIdentifier.toString();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LBRACKET:
case DOT:
lastModifier=Modifier();
lastItem.modifier=lastModifier;
break;
default :
jj_la1[211]=jj_gen;
;
}
break;
case INTEGER_LITERAL:
case MINUS:
case 236:
lastItem.rid=Rid();
break;
case RECORD_ATTRIBUTE:
lastToken=jj_consume_token(RECORD_ATTRIBUTE);
lastItem.recordAttr=lastToken.image;
break;
default :
jj_la1[212]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ASC:
case DESC:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DESC:
jj_consume_token(DESC);
lastItem.type=OOrderByItem.DESC;
break;
case ASC:
jj_consume_token(ASC);
lastItem.type=OOrderByItem.ASC;
break;
default :
jj_la1[213]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[214]=jj_gen;
;
}
jj_consume_token(RPAREN);
break;
default :
jj_la1[215]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
