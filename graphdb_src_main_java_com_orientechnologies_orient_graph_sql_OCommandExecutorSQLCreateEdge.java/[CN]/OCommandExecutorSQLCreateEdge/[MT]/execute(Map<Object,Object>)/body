{
  if (clazz == null)   throw new OCommandExecutionException("Cannot execute the command because it has not been parsed yet");
  return OGraphCommandExecutorSQLFactory.runInTx(new OGraphCommandExecutorSQLFactory.GraphCallBack<List<Object>>(){
    @Override public List<Object> call(    OrientBaseGraph graph){
      final Set<OIdentifiable> fromIds=OSQLEngine.getInstance().parseRIDTarget(graph.getRawGraph(),from,context,iArgs);
      final Set<OIdentifiable> toIds=OSQLEngine.getInstance().parseRIDTarget(graph.getRawGraph(),to,context,iArgs);
      final List<Object> edges=new ArrayList<Object>();
      for (      OIdentifiable from : fromIds) {
        final OrientVertex fromVertex=graph.getVertex(from);
        if (fromVertex == null)         throw new OCommandExecutionException("Source vertex '" + from + "' not exists");
        for (        OIdentifiable to : toIds) {
          final OrientVertex toVertex;
          if (from.equals(to)) {
            toVertex=fromVertex;
          }
 else {
            toVertex=graph.getVertex(to);
          }
          final String clsName=clazz.getName();
          if (fields != null)           for (Iterator<OPair<String,Object>> it=fields.iterator(); it.hasNext(); ) {
            final OPair<String,Object> f=it.next();
            if (f.getValue() instanceof OSQLFunctionRuntime)             f.setValue(((OSQLFunctionRuntime)f.getValue()).getValue(to,null,context));
          }
          OrientEdge edge=null;
          for (int r=0; r < retry; ++r) {
            try {
              if (content != null) {
                if (fields != null)                 fields.addAll(OPair.convertFromMap(content.toMap()));
 else                 fields=OPair.convertFromMap(content.toMap());
              }
              edge=fromVertex.addEdge(null,toVertex,clsName,clusterName,fields);
              if (fields != null && !fields.isEmpty()) {
                if (edge.isLightweight())                 edge.convertToDocument();
                OSQLHelper.bindParameters(edge.getRecord(),fields,new OCommandParameters(iArgs),context);
              }
              edge.save(clusterName);
              break;
            }
 catch (            OConcurrentModificationException e) {
              if (r + 1 >= retry)               throw e;
              if (wait > 0)               try {
                Thread.sleep(wait);
              }
 catch (              InterruptedException e1) {
                OLogManager.instance().error(this,"Wait was interrupted.");
              }
              fromVertex.getRecord().reload(null,true);
              toVertex.getRecord().reload(null,true);
            }
          }
          edges.add(edge);
        }
      }
      if (edges.isEmpty()) {
        if (fromIds.isEmpty())         throw new OCommandExecutionException("No edge has been created because no source vertices");
 else         if (toIds.isEmpty())         throw new OCommandExecutionException("No edge has been created because no target vertices");
        throw new OCommandExecutionException("No edge has been created between " + fromIds + " and "+ toIds);
      }
      return edges;
    }
  }
);
}
