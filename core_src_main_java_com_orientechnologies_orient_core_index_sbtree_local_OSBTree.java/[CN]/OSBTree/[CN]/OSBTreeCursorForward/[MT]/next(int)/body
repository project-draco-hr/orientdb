{
  if (dataCacheIterator == null)   return null;
  if (dataCacheIterator.hasNext())   return dataCacheIterator.next();
  dataCache.clear();
  if (prefetchSize < 0 || prefetchSize > OGlobalConfiguration.INDEX_CURSOR_PREFETCH_SIZE.getValueAsInteger())   prefetchSize=OGlobalConfiguration.INDEX_CURSOR_PREFETCH_SIZE.getValueAsInteger();
  if (prefetchSize == 0)   prefetchSize=1;
  acquireSharedLock();
  try {
    OAtomicOperation atomicOperation=storage.getAtomicOperationsManager().getCurrentOperation();
    while (dataCache.size() < prefetchSize) {
      if (pageIndex == -1)       break;
      if (pageIndex >= getFilledUpTo(atomicOperation,diskCache,fileId)) {
        pageIndex=-1;
        break;
      }
      final OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,pageIndex,false,diskCache);
      try {
        final OSBTreeBucket<K,V> bucket=new OSBTreeBucket<K,V>(cacheEntry,keySerializer,keyTypes,valueSerializer,getChangesTree(atomicOperation,cacheEntry));
        if (itemIndex >= bucket.size()) {
          pageIndex=bucket.getRightSibling();
          itemIndex=0;
          continue;
        }
        final Map.Entry<K,V> entry=convertToMapEntry(bucket.getEntry(itemIndex));
        itemIndex++;
        if (fromKey != null && (fromKeyInclusive ? comparator.compare(entry.getKey(),fromKey) < 0 : comparator.compare(entry.getKey(),fromKey) <= 0))         continue;
        if (toKey != null && (toKeyInclusive ? comparator.compare(entry.getKey(),toKey) > 0 : comparator.compare(entry.getKey(),toKey) >= 0)) {
          pageIndex=-1;
          break;
        }
        dataCache.add(entry);
      }
  finally {
        releasePage(atomicOperation,cacheEntry,diskCache);
      }
    }
  }
 catch (  IOException e) {
    throw new OSBTreeException("Error during element iteration",e);
  }
 finally {
    releaseSharedLock();
  }
  if (dataCache.isEmpty()) {
    dataCacheIterator=null;
    return null;
  }
  dataCacheIterator=dataCache.iterator();
  return dataCacheIterator.next();
}
