{
  try {
    begin();
    out(LOG_LEVELS.INFO,"Started parallel execution with %d threads",threads.length);
    if (source != null) {
      final Reader reader=source.read();
      if (reader != null)       extractor.extract(reader);
    }
    final LinkedBlockingQueue<OExtractedItem> queue=new LinkedBlockingQueue<OExtractedItem>(threads.length * 500){
      @Override public boolean offer(      OExtractedItem e){
        try {
          put(e);
          return true;
        }
 catch (        InterruptedException ie) {
          Thread.currentThread().interrupt();
        }
        return false;
      }
    }
;
    final AtomicLong counter=new AtomicLong();
    final AtomicBoolean extractionFinished=new AtomicBoolean(false);
    final OETLProcessor processor=this;
    for (int i=0; i < threads.length; ++i) {
      threads[i]=new Thread(new Runnable(){
        @Override public void run(){
          final OETLPipeline pipeline=new OETLPipeline(processor,transformers,loader,logLevel,maxRetries);
          pipeline.begin();
          while (!extractionFinished.get() || counter.get() > 0) {
            try {
              final OExtractedItem content=queue.take();
              try {
                pipeline.execute(content);
              }
  finally {
                counter.decrementAndGet();
              }
            }
 catch (            InterruptedException e) {
            }
          }
        }
      }
,"OrientDB ETL pipeline-" + i);
      threads[i].setDaemon(true);
      threads[i].start();
    }
    while (extractor.hasNext()) {
      final OExtractedItem current=extractor.next();
      queue.offer(current);
      counter.incrementAndGet();
    }
    extractionFinished.set(true);
    while (counter.get() > 0) {
      out(LOG_LEVELS.INFO,"Waiting for the pipeline to finish, remaining " + counter.get() + " entries to process");
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
      }
    }
    end();
  }
 catch (  OETLProcessHaltedException e) {
    out(LOG_LEVELS.ERROR,"ETL process halted: %s",e);
  }
}
