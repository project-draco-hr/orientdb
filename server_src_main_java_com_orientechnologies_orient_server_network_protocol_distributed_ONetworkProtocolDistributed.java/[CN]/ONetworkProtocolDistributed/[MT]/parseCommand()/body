{
  if (commandType < 80) {
    super.parseCommand();
    return;
  }
switch (commandType) {
case OChannelDistributedProtocol.SERVERNODE_KEEPALIVE:
    data.commandInfo="Keep-alive";
  channel.writeByte(OChannelBinaryProtocol.RESPONSE_STATUS_OK);
break;
case OChannelDistributedProtocol.SERVERNODE_CONNECT:
{
data.commandInfo="Cluster connection";
manager.receivedLeaderConnection(this);
channel.writeByte(OChannelBinaryProtocol.RESPONSE_STATUS_OK);
Map<String,Long> storages=new HashMap<String,Long>();
for (OStorage stg : Orient.instance().getStorages()) {
  storages.put(stg.getName(),stg.getVersion());
}
channel.writeInt(storages.size());
for (Entry<String,Long> s : storages.entrySet()) {
  channel.writeString(s.getKey());
  channel.writeLong(s.getValue());
}
break;
}
case OChannelDistributedProtocol.SERVERNODE_DB_CONFIG:
{
data.commandInfo="Update db configuration from server node leader";
ODocument config=(ODocument)new ODocument().fromStream(channel.readBytes());
config.getClassName();
channel.writeByte(OChannelBinaryProtocol.RESPONSE_STATUS_OK);
break;
}
default :
data.commandInfo="Command not supported";
OLogManager.instance().error(this,"Request not supported. Code: " + commandType);
channel.clearInput();
sendError(clientTxId,null);
}
}
