{
  OFetchPlanItem jjtn000=new OFetchPlanItem(JJTFETCHPLANITEM);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  try {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STAR:
      jj_consume_token(STAR);
    break;
case TO:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case IN:
case KEY:
case IDENTIFIER:
  Identifier();
label_34: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DOT:
    ;
  break;
default :
jj_la1[127]=jj_gen;
break label_34;
}
jj_consume_token(DOT);
Identifier();
}
break;
default :
jj_la1[128]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jj_consume_token(COLON);
Integer();
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
}
