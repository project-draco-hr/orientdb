{
  acquireExclusiveLock();
  try {
    this.storage=storageLocal;
    this.keyTypes=keyTypes;
    this.nullKeyIsSupported=nullKeyIsSupported;
    diskCache=storage.getDiskCache();
    this.name=name;
    initStores(metadataConfigurationFileExtension,treeStateFileExtension);
    metadataStore.open();
    treeStateStore.open();
    size=metadataStore.getRecordsCount();
    hashTreeSize=(int)treeStateStore.getHashTreeSize();
    hashTreeTombstone=(int)treeStateStore.getHashTreeTombstone();
    bucketTombstonePointer=treeStateStore.getBucketTombstonePointer();
    final int arraySize;
    int bitsCount=Integer.bitCount(hashTreeSize);
    if (bitsCount == 1)     arraySize=hashTreeSize;
 else     arraySize=Integer.highestOneBit(hashTreeSize) << 1;
    OHashIndexTreeStateStore.TreeState treeState=treeStateStore.loadTreeState(arraySize);
    hashTree=treeState.getHashTree();
    nodesMetadata=treeState.getHashTreeNodeMetadata();
    size=metadataStore.getRecordsCount();
    keySerializer=(OBinarySerializer<K>)OBinarySerializerFactory.getInstance().getObjectSerializer(metadataStore.getKeySerializerId());
    valueSerializer=(OBinarySerializer<V>)OBinarySerializerFactory.getInstance().getObjectSerializer(metadataStore.getValuerSerializerId());
    filesMetadata=metadataStore.loadMetadata();
    for (int i=0; i < filesMetadata.length; i++) {
      OHashIndexFileLevelMetadata fileLevelMetadata=filesMetadata[i];
      if (fileLevelMetadata != null)       fileLevelIds[i]=diskCache.openFile(fileLevelMetadata.getFileName());
    }
    if (nullKeyIsSupported)     nullBucketFileId=diskCache.openFile(name + nullBucketFileExtension);
  }
 catch (  IOException e) {
    throw new OIndexException("Exception during hash table loading",e);
  }
 finally {
    releaseExclusiveLock();
  }
}
