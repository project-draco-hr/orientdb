{
  final OSchema schema=database.getMetadata().getSchema();
  OClass vertex=schema.getClass("V");
  OClass edge=schema.getClass("E");
  schema.createClass("UpdateEdgeContentV",vertex);
  schema.createClass("UpdateEdgeContentE",edge);
  final ORID vOneId=((ODocument)database.command(new OCommandSQL("create vertex UpdateEdgeContentV")).execute()).getIdentity();
  final ORID vTwoId=((ODocument)database.command(new OCommandSQL("create vertex UpdateEdgeContentV")).execute()).getIdentity();
  database.command(new OCommandSQL("create edge UpdateEdgeContentE from " + vOneId + " to "+ vTwoId)).execute();
  database.command(new OCommandSQL("create edge UpdateEdgeContentE from " + vOneId + " to "+ vTwoId)).execute();
  database.command(new OCommandSQL("create edge UpdateEdgeContentE from " + vOneId + " to "+ vTwoId)).execute();
  List<ODocument> result=database.query(new OSQLSynchQuery<ODocument>("select outV(), inV() from UpdateEdgeContentE"));
  Assert.assertEquals(result.size(),3);
  for (  ODocument doc : result) {
    Assert.assertEquals(doc.field("outV"),vOneId);
    Assert.assertEquals(doc.field("inV"),vTwoId);
  }
  database.command(new OCommandSQL("update UpdateEdgeContentE content {value : 'val'}")).execute();
  result=database.query(new OSQLSynchQuery<ODocument>("select outV(), inV() from UpdateEdgeContentE"));
  Assert.assertEquals(result.size(),3);
  for (  ODocument doc : result) {
    Assert.assertEquals(doc.field("outV"),vOneId);
    Assert.assertEquals(doc.field("inV"),vTwoId);
  }
  result=database.query(new OSQLSynchQuery<ODocument>("select from UpdateEdgeContentE"));
  Assert.assertEquals(result.size(),3);
  for (  ODocument doc : result) {
    Assert.assertEquals(doc.field("value"),"val");
  }
}
