{
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  try {
    final OBinaryToken token=new OBinaryToken();
    long expiryMinutes=sessionInMills;
    long currTime=System.currentTimeMillis();
    final OrientJwtHeader header=new OrientJwtHeader();
    header.setAlgorithm(algorithm);
    header.setKeyId(keyProvider.getDefaultKey());
    header.setType("OrientDB");
    token.setHeader(header);
    if (db != null) {
      token.setDatabase(db.getName());
      token.setDatabaseType(db.getStorage().getUnderlying().getType());
    }
    if (data.serverUser) {
      token.setServerUser(true);
      token.setUserName(data.serverUsername);
    }
    if (user != null)     token.setUserRid(user.getIdentity().getIdentity());
    token.setExpiry(currTime + expiryMinutes);
    token.setProtocolVersion(data.protocolVersion);
    token.setSerializer(data.serializationImpl);
    token.setDriverName(data.driverName);
    token.setDriverVersion(data.driverVersion);
    binarySerializer.serialize(token,baos);
    final byte[] signature=signToken(header,baos.toByteArray());
    baos.write(signature);
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new OException(e);
  }
  return baos.toByteArray();
}
