{
  if (exception instanceof OTimeoutException)   throw (OTimeoutException)exception;
 else   if (exception instanceof OException)   throw (OException)exception;
 else   if (!(exception instanceof IOException))   throw new OStorageException(message,exception);
  if (status != STATUS.OPEN)   return;
  OLogManager.instance().warn(this,"Caught I/O errors from %s (local socket=%s), trying to reconnect (error: %s)",iNetwork,iNetwork.socket.getLocalSocketAddress(),exception);
  try {
    iNetwork.close();
  }
 catch (  Exception e) {
  }
  final long lostConnectionTime=System.currentTimeMillis();
  final int currentMaxRetry;
  final int currentRetryDelay;
synchronized (clusterConfiguration) {
    if (!clusterConfiguration.isEmpty()) {
      currentMaxRetry=1;
      currentRetryDelay=0;
    }
 else {
      currentMaxRetry=connectionRetry;
      currentRetryDelay=connectionRetryDelay;
    }
  }
  for (int retry=0; retry < currentMaxRetry; ++retry) {
    if (currentRetryDelay > 0)     try {
      Thread.sleep(currentRetryDelay);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      break;
    }
    try {
      if (OLogManager.instance().isDebugEnabled())       OLogManager.instance().debug(this,"Retrying to connect to remote server #" + (retry + 1) + "/"+ currentMaxRetry+ "...");
      setSessionId(null,-1);
      if (createConnectionPool() == 0)       break;
      openRemoteDatabase();
      OLogManager.instance().warn(this,"Connection re-acquired transparently after %dms and %d retries: no errors will be thrown at application level",System.currentTimeMillis() - lostConnectionTime,retry + 1);
      return;
    }
 catch (    Throwable t) {
    }
  }
  throw new OStorageException(message,exception);
}
