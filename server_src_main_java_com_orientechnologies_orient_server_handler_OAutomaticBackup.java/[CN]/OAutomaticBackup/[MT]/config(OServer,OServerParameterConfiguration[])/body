{
  serverInstance=iServer;
  for (  OServerParameterConfiguration param : iParams) {
    if (param.name.equalsIgnoreCase("enabled")) {
      if (!Boolean.parseBoolean(param.value))       return;
    }
 else     if (param.name.equalsIgnoreCase("delay"))     delay=OIOUtils.getTimeAsMillisecs(param.value);
 else     if (param.name.equalsIgnoreCase("firstTime")) {
      try {
        firstTime=OIOUtils.getTodayWithTime(param.value);
        if (firstTime.before(new Date())) {
          Calendar cal=Calendar.getInstance();
          cal.setTime(firstTime);
          cal.add(Calendar.DAY_OF_MONTH,1);
          firstTime=cal.getTime();
        }
      }
 catch (      ParseException e) {
        throw OException.wrapException(new OConfigurationException("Parameter 'firstTime' has invalid format, expected: HH:mm:ss"),e);
      }
    }
 else     if (param.name.equalsIgnoreCase("target.directory"))     targetDirectory=param.value;
 else     if (param.name.equalsIgnoreCase("db.include") && param.value.trim().length() > 0)     for (    String db : param.value.split(","))     includeDatabases.add(db);
 else     if (param.name.equalsIgnoreCase("db.exclude") && param.value.trim().length() > 0)     for (    String db : param.value.split(","))     excludeDatabases.add(db);
 else     if (param.name.equalsIgnoreCase("target.fileName"))     targetFileName=param.value;
 else     if (param.name.equalsIgnoreCase("bufferSize"))     bufferSize=Integer.parseInt(param.value);
 else     if (param.name.equalsIgnoreCase("compressionLevel"))     compressionLevel=Integer.parseInt(param.value);
 else     if (param.name.equalsIgnoreCase("mode"))     mode=MODE.valueOf(param.value.toUpperCase());
 else     if (param.name.equalsIgnoreCase("exportOptions"))     exportOptions=param.value;
  }
  if (delay <= 0)   throw new OConfigurationException("Cannot find mandatory parameter 'delay'");
  if (!targetDirectory.endsWith("/"))   targetDirectory+="/";
  final File filePath=new File(targetDirectory);
  if (filePath.exists()) {
    if (!filePath.isDirectory())     throw new OConfigurationException("Parameter 'path' points to a file, not a directory");
  }
 else   filePath.mkdirs();
  OLogManager.instance().info(this,"Automatic backup plugin installed and active: delay=%dms, firstTime=%s, targetDirectory=%s",delay,firstTime,targetDirectory);
  final TimerTask timerTask=new TimerTask(){
    @Override public void run(){
      OLogManager.instance().info(this,"Scanning databases to backup...");
      int ok=0, errors=0;
      final Map<String,String> databases=serverInstance.getAvailableStorageNames();
      for (      final Entry<String,String> database : databases.entrySet()) {
        final String dbName=database.getKey();
        final String dbURL=database.getValue();
        boolean include;
        if (includeDatabases.size() > 0)         include=includeDatabases.contains(dbName);
 else         include=true;
        if (excludeDatabases.contains(dbName))         include=false;
        if (include) {
          ODatabaseDocumentTx db=null;
          try {
            db=new ODatabaseDocumentTx(dbURL);
            db.setProperty(ODatabase.OPTIONS.SECURITY.toString(),OSecurityNull.class);
            db.open("admin","aaa");
            final long begin=System.currentTimeMillis();
switch (mode) {
case FULL_BACKUP:
              fullBackupDatabase(dbURL,targetDirectory + getFileName(database),db);
            OLogManager.instance().info(this,"Full Backup of database '" + dbURL + "' completed in "+ (System.currentTimeMillis() - begin)+ "ms");
          break;
case INCREMENTAL_BACKUP:
        incrementalBackupDatabase(dbURL,targetDirectory,db);
      OLogManager.instance().info(this,"Incremental Backup of database '" + dbURL + "' completed in "+ (System.currentTimeMillis() - begin)+ "ms");
    break;
case EXPORT:
  exportDatabase(dbURL,targetDirectory + getFileName(database),db);
OLogManager.instance().info(this,"Export of database '" + dbURL + "' completed in "+ (System.currentTimeMillis() - begin)+ "ms");
break;
}
ok++;
}
 catch (Exception e) {
OLogManager.instance().error(this,"Error on backup of database '" + dbURL + "' to directory: "+ targetDirectory,e);
errors++;
}
 finally {
if (db != null) db.close();
}
}
}
OLogManager.instance().info(this,"Automatic Backup finished: %d ok, %d errors",ok,errors);
}
}
;
if (firstTime == null) Orient.instance().scheduleTask(timerTask,delay,delay);
 else Orient.instance().scheduleTask(timerTask,firstTime,delay);
}
