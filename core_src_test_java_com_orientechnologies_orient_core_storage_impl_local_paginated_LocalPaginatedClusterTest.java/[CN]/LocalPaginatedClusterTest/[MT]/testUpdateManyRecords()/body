{
  final int records=10000;
  long seed=System.currentTimeMillis();
  Random mersenneTwisterFast=new Random(seed);
  System.out.println("testUpdateManyRecords seed : " + seed);
  Map<Long,byte[]> positionRecordMap=new HashMap<Long,byte[]>();
  Set<Long> updatedPositions=new HashSet<Long>();
  int recordVersion=0;
  recordVersion++;
  recordVersion++;
  for (int i=0; i < records; i++) {
    int recordSize=mersenneTwisterFast.nextInt(2 * OClusterPage.MAX_RECORD_SIZE) + 1;
    byte[] record=new byte[recordSize];
    mersenneTwisterFast.nextBytes(record);
    final OPhysicalPosition physicalPosition=paginatedCluster.createRecord(record,recordVersion,(byte)2);
    positionRecordMap.put(physicalPosition.clusterPosition,record);
  }
  int newRecordVersion=0;
  newRecordVersion=recordVersion;
  newRecordVersion++;
  for (  long clusterPosition : positionRecordMap.keySet()) {
    if (mersenneTwisterFast.nextBoolean()) {
      int recordSize=mersenneTwisterFast.nextInt(2 * OClusterPage.MAX_RECORD_SIZE) + 1;
      byte[] record=new byte[recordSize];
      mersenneTwisterFast.nextBytes(record);
      paginatedCluster.updateRecord(clusterPosition,record,newRecordVersion,(byte)3);
      positionRecordMap.put(clusterPosition,record);
      updatedPositions.add(clusterPosition);
    }
  }
  for (  Map.Entry<Long,byte[]> entry : positionRecordMap.entrySet()) {
    ORawBuffer rawBuffer=paginatedCluster.readRecord(entry.getKey());
    Assert.assertNotNull(rawBuffer);
    Assert.assertEquals(rawBuffer.buffer,entry.getValue());
    if (updatedPositions.contains(entry.getKey())) {
      Assert.assertEquals(rawBuffer.version,newRecordVersion);
      Assert.assertEquals(rawBuffer.recordType,3);
    }
 else {
      Assert.assertEquals(rawBuffer.version,recordVersion);
      Assert.assertEquals(rawBuffer.recordType,2);
    }
  }
}
