{
  resetLastValidBackup();
  if (OScenarioThreadLocal.INSTANCE.get() == RUN_MODE.RUNNING_DISTRIBUTED) {
    return wrapped.createRecord(iRecordId,iContent,iRecordVersion,iRecordType,iMode,iCallback);
  }
  try {
    String clusterName=getClusterNameByRID(iRecordId);
    int clusterId=iRecordId.getClusterId();
    if (clusterId == ORID.CLUSTER_ID_INVALID)     throw new IllegalArgumentException("Cluster not valid");
    final String localNodeName=dManager.getLocalNodeName();
    final ODistributedConfiguration dbCfg=dManager.getDatabaseConfiguration(getName());
    checkNodeIsMaster(localNodeName,dbCfg);
    List<String> nodes=dbCfg.getServers(clusterName,null);
    if (nodes.isEmpty()) {
      return (OStorageOperationResult<OPhysicalPosition>)ODistributedAbstractPlugin.runInDistributedMode(new Callable(){
        @Override public Object call() throws Exception {
          return wrapped.createRecord(iRecordId,iContent,iRecordVersion,iRecordType,iMode,iCallback);
        }
      }
);
    }
    String masterNode=nodes.get(0);
    if (!masterNode.equals(localNodeName)) {
      final OCluster cl=getClusterByName(clusterName);
      final ODatabaseDocumentInternal db=ODatabaseRecordThreadLocal.INSTANCE.get();
      final OClass cls=db.getMetadata().getSchema().getClassByClusterId(cl.getId());
      String newClusterName=null;
      if (cls != null) {
        OClusterSelectionStrategy clSel=cls.getClusterSelection();
        if (!(clSel instanceof OLocalClusterStrategy)) {
          dManager.propagateSchemaChanges(db);
          clSel=cls.getClusterSelection();
        }
        newClusterName=getPhysicalClusterNameById(clSel.getCluster(cls,null));
        nodes=dbCfg.getServers(newClusterName,null);
        masterNode=nodes.get(0);
      }
      if (!masterNode.equals(localNodeName))       throw new ODistributedException("Error on inserting into cluster '" + clusterName + "' where local node '"+ localNodeName+ "' is not the master of it, but it's '"+ masterNode+ "'");
      OLogManager.instance().warn(this,"Local node '" + localNodeName + "' is not the master for cluster '"+ clusterName+ "' (it's '"+ masterNode+ "'). Switching to a valid cluster of the same class: '"+ newClusterName+ "'");
      clusterName=newClusterName;
    }
    Boolean executionModeSynch=dbCfg.isExecutionModeSynchronous(clusterName);
    if (executionModeSynch == null)     executionModeSynch=iMode == 0;
    if (executionModeSynch) {
      final Object masterResult=dManager.sendRequest(getName(),Collections.singleton(clusterName),nodes,new OCreateRecordTask(iRecordId,iContent,iRecordVersion,iRecordType),EXECUTION_MODE.RESPONSE);
      if (masterResult instanceof ONeedRetryException)       throw (ONeedRetryException)masterResult;
 else       if (masterResult instanceof Exception)       throw OException.wrapException(new ODistributedException("Error on execution distributed CREATE_RECORD"),(Exception)masterResult);
      final OPlaceholder masterPlaceholder=(OPlaceholder)masterResult;
      iRecordId.copyFrom(masterPlaceholder.getIdentity());
      return new OStorageOperationResult<OPhysicalPosition>(new OPhysicalPosition(masterPlaceholder.getIdentity().getClusterPosition(),masterPlaceholder.getVersion()));
    }
    final OStorageOperationResult<OPhysicalPosition> localResult;
    localResult=(OStorageOperationResult<OPhysicalPosition>)ODistributedAbstractPlugin.runInDistributedMode(new Callable(){
      @Override public Object call() throws Exception {
        final ODatabaseDocumentInternal db=ODatabaseRecordThreadLocal.INSTANCE.get();
        final ORecord record=Orient.instance().getRecordFactoryManager().newInstance(iRecordType);
        ORecordInternal.fill(record,iRecordId,iRecordVersion,iContent,true);
        db.save(record);
        final OPhysicalPosition ppos=new OPhysicalPosition(iRecordType);
        ppos.clusterPosition=record.getIdentity().getClusterPosition();
        ppos.recordVersion=record.getVersion();
        return new OStorageOperationResult<OPhysicalPosition>(ppos);
      }
    }
);
    nodes.remove(localNodeName);
    if (!nodes.isEmpty()) {
      asynchronousExecution(new OAsynchDistributedOperation(getName(),Collections.singleton(clusterName),nodes,new OCreateRecordTask(iRecordId,iContent,iRecordVersion,iRecordType)));
    }
    iRecordId.clusterPosition=localResult.getResult().clusterPosition;
    return localResult;
  }
 catch (  ONeedRetryException e) {
    throw e;
  }
catch (  Exception e) {
    handleDistributedException("Cannot route CREATE_RECORD operation for %s to the distributed node",e,iRecordId);
    return null;
  }
}
