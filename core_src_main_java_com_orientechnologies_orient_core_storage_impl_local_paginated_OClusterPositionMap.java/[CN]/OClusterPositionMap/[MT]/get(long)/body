{
  acquireSharedLock();
  try {
    atomicOperationsManager.acquireReadLock(this);
    try {
      long pageIndex=clusterPosition / OClusterPositionMapBucket.MAX_ENTRIES;
      int index=(int)(clusterPosition % OClusterPositionMapBucket.MAX_ENTRIES);
      final OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
      if (pageIndex >= getFilledUpTo(atomicOperation,diskCache,fileId))       return null;
      final OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,pageIndex,false,diskCache);
      try {
        final OClusterPositionMapBucket bucket=new OClusterPositionMapBucket(cacheEntry,getChangesTree(atomicOperation,cacheEntry));
        return bucket.get(index);
      }
  finally {
        releasePage(atomicOperation,cacheEntry,diskCache);
      }
    }
  finally {
      atomicOperationsManager.releaseReadLock(this);
    }
  }
  finally {
    releaseSharedLock();
  }
}
