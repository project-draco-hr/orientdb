{
  OMVRBTreeEntryDatabase<K,V> entry=(OMVRBTreeEntryDatabase<K,V>)cache.get(iRecordId);
  if (entry == null) {
    entry=new OMVRBTreeEntryDatabase<K,V>(this,(OMVRBTreeEntryDatabase<K,V>)iParent,iRecordId);
    cache.put(iRecordId,entry);
    if (entry.parent == null && entry.parentRid.isValid()) {
      final OMVRBTreeEntryPersistent<K,V> parentNode=cache.get(entry.parentRid);
      if (parentNode != null)       entry.setParent(parentNode);
    }
    if (entry.left == null && entry.leftRid.isValid()) {
      final OMVRBTreeEntryPersistent<K,V> leftNode=cache.get(entry.leftRid);
      if (leftNode != null)       entry.setLeft(leftNode);
    }
    if (entry.right == null && entry.rightRid.isValid()) {
      final OMVRBTreeEntryPersistent<K,V> rightNode=cache.get(entry.rightRid);
      if (rightNode != null)       entry.setRight(rightNode);
    }
    if (debug)     System.out.printf("\nLoaded entry node %s: parent %s, left %s, right %s",iRecordId,entry.parentRid,entry.leftRid,entry.rightRid);
  }
 else {
    if (debug)     System.out.printf("\nReused entry node %s from cache: parent %s, left %s, right %s. New parent: %s",iRecordId,entry.parentRid,entry.leftRid,entry.rightRid,iParent);
    entry.setParent(iParent);
  }
  entry.checkEntryStructure();
  return entry;
}
