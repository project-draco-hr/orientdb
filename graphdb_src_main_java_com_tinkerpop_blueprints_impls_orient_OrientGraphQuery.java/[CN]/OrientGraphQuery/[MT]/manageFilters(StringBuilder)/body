{
  boolean firstPredicate=true;
  for (  HasContainer has : hasContainers) {
    if (!firstPredicate)     text.append(QUERY_FILTER_AND);
 else {
      text.append(QUERY_WHERE);
      firstPredicate=false;
    }
    if (has.predicate instanceof Contains) {
      if (has.predicate == Contains.NOT_IN) {
        text.append(OPERATOR_NOT);
        text.append(PARENTHESIS_BEGIN);
      }
      text.append(has.key);
      if (has.value instanceof String) {
        text.append(OPERATOR_LIKE);
        generateFilterValue(text,has.value);
      }
 else {
        text.append(OPERATOR_IN);
        text.append(COLLECTION_BEGIN);
        boolean firstItem=true;
        for (        Object o : (Collection<Object>)has.value) {
          if (!firstItem)           text.append(QUERY_SEPARATOR);
 else           firstItem=false;
          generateFilterValue(text,o);
        }
        text.append(COLLECTION_END);
      }
      if (has.predicate == Contains.NOT_IN)       text.append(PARENTHESIS_END);
    }
 else {
      text.append(has.key);
      text.append(SPACE);
      if (has.predicate instanceof com.tinkerpop.blueprints.Compare) {
        final com.tinkerpop.blueprints.Compare compare=(com.tinkerpop.blueprints.Compare)has.predicate;
switch (compare) {
case EQUAL:
          if (has.value == null)           text.append(OPERATOR_IS);
 else           text.append(OPERATOR_EQUALS);
        break;
case GREATER_THAN:
      text.append(OPERATOR_GT);
    break;
case GREATER_THAN_EQUAL:
  text.append(OPERATOR_GTE);
break;
case LESS_THAN:
text.append(OPERATOR_LT);
break;
case LESS_THAN_EQUAL:
text.append(OPERATOR_LET);
break;
case NOT_EQUAL:
if (has.value == null) text.append(OPERATOR_IS_NOT);
 else text.append(OPERATOR_DIFFERENT);
break;
}
text.append(SPACE);
generateFilterValue(text,has.value);
}
if (has.value instanceof Collection<?>) text.append(PARENTHESIS_END);
}
}
return !firstPredicate;
}
