{
  if (OScenarioThreadLocal.INSTANCE.get() == RUN_MODE.RUNNING_DISTRIBUTED)   return wrapped.deleteRecord(iRecordId,iVersion,iMode,iCallback);
  try {
    final String clusterName=getClusterNameByRID(iRecordId);
    final ODistributedConfiguration dbCfg=dManager.getDatabaseConfiguration(getName());
    final List<String> nodes=dbCfg.getServers(clusterName,null);
    if (nodes.isEmpty())     return wrapped.deleteRecord(iRecordId,iVersion,iMode,iCallback);
    Boolean executionModeSynch=dbCfg.isExecutionModeSynchronous(clusterName);
    if (executionModeSynch == null)     executionModeSynch=iMode == 0;
    if (executionModeSynch) {
      final Object result=dManager.sendRequest(getName(),Collections.singleton(clusterName),nodes,new ODeleteRecordTask(iRecordId,iVersion),EXECUTION_MODE.RESPONSE);
      if (result instanceof ONeedRetryException)       throw (ONeedRetryException)result;
 else       if (result instanceof Throwable)       throw new ODistributedException("Error on execution distributed DELETE_RECORD",(Throwable)result);
      return new OStorageOperationResult<Boolean>(true);
    }
    final OStorageOperationResult<Boolean> localResult=wrapped.deleteRecord(iRecordId,iVersion,iMode,iCallback);
    nodes.remove(0);
    if (!nodes.isEmpty())     asynchronousOperationsQueue.offer(new OAsynchDistributedOperation(getName(),Collections.singleton(clusterName),nodes,new ODeleteRecordTask(iRecordId,iVersion)));
    return localResult;
  }
 catch (  ONeedRetryException e) {
    throw e;
  }
catch (  Exception e) {
    handleDistributedException("Cannot route DELETE_RECORD operation against %s to the distributed node",e,iRecordId);
    return null;
  }
}
