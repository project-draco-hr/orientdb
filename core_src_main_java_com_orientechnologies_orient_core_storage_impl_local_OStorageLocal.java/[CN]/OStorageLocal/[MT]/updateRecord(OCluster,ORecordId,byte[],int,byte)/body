{
  if (iClusterSegment == null)   throw new OStorageException("Cluster not defined for record: " + iRid);
  final long timer=OProfiler.getInstance().startChrono();
  lock.acquireExclusiveLock();
  try {
    lockManager.acquireLock(Thread.currentThread(),iRid,LOCK.EXCLUSIVE);
    try {
      final OPhysicalPosition ppos=iClusterSegment.getPhysicalPosition(new OPhysicalPosition(iRid.clusterPosition));
      if (!checkForRecordValidity(ppos))       return null;
switch (iVersion) {
case -1:
        ++ppos.recordVersion;
      iClusterSegment.updateVersion(iRid.clusterPosition,ppos.recordVersion);
    break;
case -2:
  break;
default :
if (iVersion > -1) {
  if (iVersion != ppos.recordVersion)   if (OFastConcurrentModificationException.enabled())   throw OFastConcurrentModificationException.instance();
 else   throw new OConcurrentModificationException(iRid,ppos.recordVersion,iVersion,ORecordOperation.UPDATED);
  ++ppos.recordVersion;
  iClusterSegment.updateVersion(iRid.clusterPosition,ppos.recordVersion);
}
 else {
  ppos.recordVersion=iVersion - Integer.MIN_VALUE;
  iClusterSegment.updateVersion(iRid.clusterPosition,ppos.recordVersion);
}
}
if (ppos.recordType != iRecordType) iClusterSegment.updateRecordType(iRid.clusterPosition,iRecordType);
final long newDataSegmentOffset;
if (ppos.dataSegmentPos == -1) newDataSegmentOffset=getDataSegmentById(ppos.dataSegmentId).addRecord(iRid,iContent);
 else newDataSegmentOffset=getDataSegmentById(ppos.dataSegmentId).setRecord(ppos.dataSegmentPos,iRid,iContent);
if (newDataSegmentOffset != ppos.dataSegmentPos) {
iClusterSegment.updateDataSegmentPosition(ppos.clusterPosition,ppos.dataSegmentId,newDataSegmentOffset);
ppos.dataSegmentPos=newDataSegmentOffset;
}
return ppos;
}
  finally {
lockManager.releaseLock(Thread.currentThread(),iRid,LOCK.EXCLUSIVE);
}
}
 catch (IOException e) {
OLogManager.instance().error(this,"Error on updating record " + iRid + " (cluster: "+ iClusterSegment+ ")",e);
}
 finally {
lock.releaseExclusiveLock();
OProfiler.getInstance().stopChrono(PROFILER_UPDATE_RECORD,timer);
}
return null;
}
