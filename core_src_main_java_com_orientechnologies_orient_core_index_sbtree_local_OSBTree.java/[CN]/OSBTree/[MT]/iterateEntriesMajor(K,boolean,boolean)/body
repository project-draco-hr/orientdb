{
  acquireSharedLock();
  try {
    atomicOperationsManager.acquireReadLock(this);
    try {
      OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
      if (ascSortOrder)       return iterateEntriesMajorAsc(key,inclusive,atomicOperation);
      return iterateEntriesMajorDesc(key,inclusive,atomicOperation);
    }
  finally {
      atomicOperationsManager.releaseReadLock(this);
    }
  }
 catch (  IOException ioe) {
    throw new OSBTreeException("Error during iteration of major values for key " + key + " in sbtree "+ name);
  }
 finally {
    releaseSharedLock();
  }
}
