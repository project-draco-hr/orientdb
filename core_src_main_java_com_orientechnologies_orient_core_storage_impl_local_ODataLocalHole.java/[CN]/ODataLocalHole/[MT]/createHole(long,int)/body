{
  final long timer=OProfiler.getInstance().startChrono();
  final int recycledPosition;
  final ODataHoleInfo hole;
  if (freeHoles.size() > 0) {
    recycledPosition=freeHoles.remove(0);
    hole=availableHolesList.get(recycledPosition);
    hole.dataOffset=iRecordOffset;
    hole.size=iRecordSize;
  }
 else {
    recycledPosition=getHoles();
    hole=new ODataHoleInfo(iRecordSize,iRecordOffset,recycledPosition);
    availableHolesList.add(hole);
    file.allocateSpace(RECORD_SIZE);
  }
  availableHolesBySize.put(hole,hole);
  availableHolesByPosition.put(hole,hole);
  if (maxHoleSize < iRecordSize)   maxHoleSize=iRecordSize;
  final long p=recycledPosition * RECORD_SIZE;
  file.writeLong(p,iRecordOffset);
  file.writeInt(p + OConstants.SIZE_LONG,iRecordSize);
  OProfiler.getInstance().stopChrono(PROFILER_DATA_HOLE_CREATE,timer);
}
