{
  final NavigableMap<Long,Long> pageIndexDataMap=new TreeMap<Long,Long>();
  long fileId=wowCache.openFile(fileName);
  Random random=new Random();
  for (int i=0; i < 600; i++) {
    long pageIndex=random.nextInt(2048);
    byte[] data=new byte[8];
    random.nextBytes(data);
    long pagePointer=directMemory.allocate(new byte[pageSize]);
    directMemory.set(pagePointer + systemOffset,data,0,data.length);
    pageIndexDataMap.put(pageIndex,pagePointer);
    wowCache.put(fileId,pageIndex,pagePointer);
  }
  for (  Map.Entry<Long,Long> entry : pageIndexDataMap.entrySet()) {
    long pageIndex=entry.getKey();
    long pagePointer=entry.getValue();
    byte[] dataOne=directMemory.get(pagePointer + systemOffset,8);
    byte[] dataTwo=directMemory.get(wowCache.get(fileId,pageIndex) + systemOffset,8);
    Assert.assertEquals(dataTwo,dataOne);
  }
  for (int i=0; i < 300; i++) {
    long desiredIndex=random.nextInt(2048);
    Long pageIndex=pageIndexDataMap.ceilingKey(desiredIndex);
    if (pageIndex == null)     pageIndex=pageIndexDataMap.floorKey(desiredIndex);
    long pagePointer=pageIndexDataMap.get(pageIndex);
    byte[] data=new byte[8];
    random.nextBytes(data);
    directMemory.set(pagePointer + systemOffset,data,0,data.length);
    wowCache.put(fileId,pageIndex,pagePointer);
  }
  for (  Map.Entry<Long,Long> entry : pageIndexDataMap.entrySet()) {
    long pageIndex=entry.getKey();
    long pagePointer=entry.getValue();
    byte[] dataOne=directMemory.get(pagePointer + systemOffset,8);
    byte[] dataTwo=directMemory.get(wowCache.get(fileId,pageIndex) + systemOffset,8);
    Assert.assertEquals(dataTwo,dataOne);
  }
  for (  long pagePointer : pageIndexDataMap.values())   directMemory.free(pagePointer);
}
