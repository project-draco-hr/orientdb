{
  acquireExclusiveLock();
  try {
    final ORID rid=(ORID)iConfig.field(CONFIG_MAP_RID,ORID.class);
    if (rid == null)     return null;
    configuration=iConfig;
    name=configuration.field(OIndexInternal.CONFIG_NAME);
    final ODocument indexDefinitionDoc=configuration.field(OIndexInternal.INDEX_DEFINITION);
    if (indexDefinitionDoc != null) {
      try {
        final String indexDefClassName=configuration.field(OIndexInternal.INDEX_DEFINITION_CLASS);
        final Class indexDefClass=Class.forName(indexDefClassName);
        indexDefinition=(OIndexDefinition)indexDefClass.getDeclaredConstructor().newInstance();
        indexDefinition.fromStream(indexDefinitionDoc);
      }
 catch (      final ClassNotFoundException e) {
        throw new OIndexException("Error during deserialization of index definition",e);
      }
catch (      final NoSuchMethodException e) {
        throw new OIndexException("Error during deserialization of index definition",e);
      }
catch (      final InvocationTargetException e) {
        throw new OIndexException("Error during deserialization of index definition",e);
      }
catch (      final InstantiationException e) {
        throw new OIndexException("Error during deserialization of index definition",e);
      }
catch (      final IllegalAccessException e) {
        throw new OIndexException("Error during deserialization of index definition",e);
      }
    }
 else {
      final Boolean isAutomatic=configuration.field(OIndexInternal.CONFIG_AUTOMATIC);
      if (Boolean.TRUE.equals(isAutomatic)) {
        final int pos=name.lastIndexOf('.');
        if (pos < 0)         throw new OIndexException("Can not convert from old index model to new one. " + "Invalid index name. Dot (.) separator should be present.");
        final String className=name.substring(0,pos);
        final String propertyName=name.substring(pos + 1);
        final String keyTypeStr=configuration.field(OIndexInternal.CONFIG_KEYTYPE);
        if (keyTypeStr == null)         throw new OIndexException("Can not convert from old index model to new one. " + "Index key type is absent.");
        final OType keyType=OType.valueOf(keyTypeStr.toUpperCase(Locale.ENGLISH));
        indexDefinition=new OPropertyIndexDefinition(className,propertyName,keyType);
        configuration.removeField(OIndexInternal.CONFIG_AUTOMATIC);
        configuration.removeField(OIndexInternal.CONFIG_KEYTYPE);
      }
 else       if (configuration.field(OIndexInternal.CONFIG_KEYTYPE) != null) {
        final String keyTypeStr=configuration.field(OIndexInternal.CONFIG_KEYTYPE);
        final OType keyType=OType.valueOf(keyTypeStr.toUpperCase(Locale.ENGLISH));
        indexDefinition=new OSimpleKeyIndexDefinition(keyType);
        configuration.removeField(OIndexInternal.CONFIG_KEYTYPE);
      }
    }
    clustersToIndex.clear();
    final Collection<? extends String> clusters=configuration.field(CONFIG_CLUSTERS);
    if (clusters != null)     clustersToIndex.addAll(clusters);
    map=new OMVRBTreeDatabaseLazySave<Object,T>(getDatabase(),rid);
    map.load();
    installHooks(iConfig.getDatabase());
    return this;
  }
  finally {
    releaseExclusiveLock();
  }
}
