{
  final Map<String,Integer> columns=parseColumns(resultSet,limit);
  if (columnSorting != null) {
    Collections.sort(resultSet,new Comparator<Object>(){
      @Override public int compare(      final Object o1,      final Object o2){
        final ODocument doc1=((OIdentifiable)o1).getRecord();
        final ODocument doc2=((OIdentifiable)o2).getRecord();
        final Object value1=doc1.field(columnSorting.getKey());
        final Object value2=doc2.field(columnSorting.getKey());
        final boolean ascending=columnSorting.getValue();
        final int result;
        if (value2 == null)         result=1;
 else         if (value1 == null)         result=0;
 else         if (value1 instanceof Comparable)         result=((Comparable)value1).compareTo(value2);
 else         result=value1.toString().compareTo(value2.toString());
        return ascending ? result : result * -1;
      }
    }
);
  }
  int fetched=0;
  for (  OIdentifiable record : resultSet) {
    dumpRecordInTable(fetched++,record,columns);
    if (iAfterDump != null)     iAfterDump.call(record);
    if (limit > -1 && fetched >= limit) {
      printHeaderLine(columns);
      out.onMessage("\nLIMIT EXCEEDED: resultset contains more items not displayed (limit=" + limit + ")");
      return;
    }
  }
  if (fetched > 0)   printHeaderLine(columns);
}
