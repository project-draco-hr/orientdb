{
  optimize();
  final long timer=PROFILER.startChrono();
  try {
    for (int i=0; i < OPTIMIZE_MAX_RETRY; ++i) {
      try {
        V v=super.remove(key);
        commitChanges();
        return v;
      }
 catch (      OLowMemoryException e) {
        OLogManager.instance().debug(this,"Optimization required during remove %d/%d",i,OPTIMIZE_MAX_RETRY);
        freeMemory(i);
        optimization=-1;
      }
    }
  }
  finally {
    PROFILER.stopChrono(PROFILER.getProcessMetric("mvrbtree.remove"),timer);
  }
  throw new OLowMemoryException("OMVRBTreePersistent.remove()");
}
