{
  while (true) {
    int freePageIndex=contentSize / ONE_KB;
    freePageIndex-=PAGINATED_STORAGE_LOWEST_FREELIST_BOUNDARY.getValueAsInteger();
    if (freePageIndex < 0)     freePageIndex=0;
    long pageIndex;
    do {
      pageIndex=freePageLists[freePageIndex];
      freePageIndex++;
    }
 while (pageIndex < 0 && freePageIndex < freePageLists.length);
    if (pageIndex < 0)     pageIndex=diskCache.getFilledUpTo(fileId);
 else     freePageIndex--;
    if (freePageIndex < freePageLists.length) {
      OCachePointer pointer=diskCache.load(fileId,pageIndex);
      int realFreePageIndex;
      try {
        OLocalPage localPage=new OLocalPage(pointer.getDataPointer(),false,OLocalPage.TrackMode.NONE);
        realFreePageIndex=calculateFreePageIndex(localPage);
      }
  finally {
        diskCache.release(fileId,pageIndex);
      }
      if (realFreePageIndex != freePageIndex) {
        OLogManager.instance().warn(this,"Page in file %s with index %d was placed in wrong free list, this error will be fixed automatically.",name + DEF_EXTENSION,pageIndex);
        updateFreePagesIndex(freePageIndex,pageIndex,trackMode);
        continue;
      }
    }
    return new FindFreePageResult(pageIndex,freePageIndex);
  }
}
