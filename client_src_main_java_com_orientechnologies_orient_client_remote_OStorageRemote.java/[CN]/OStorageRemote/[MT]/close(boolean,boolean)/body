{
  if (status == STATUS.CLOSED)   return;
  stateLock.acquireWriteLock();
  try {
    if (status == STATUS.CLOSED)     return;
    final OStorageRemoteSession session=getCurrentSession();
    if (session != null) {
      final Collection<OStorageRemoteNodeSession> nodes=session.getAll();
      if (!nodes.isEmpty()) {
        for (        OStorageRemoteNodeSession nodeSession : nodes) {
          OChannelBinaryAsynchClient network=null;
          try {
            network=getNetwork(nodeSession.getServerURL());
            network.beginRequest(OChannelBinaryProtocol.REQUEST_DB_CLOSE,session);
            endRequest(network);
            connectionManager.release(network);
          }
 catch (          OIOException ex) {
            OLogManager.instance().debug(this,"Impossible to comunicate to the server for close: %s",ex);
            connectionManager.remove(network);
          }
catch (          IOException ex) {
            OLogManager.instance().debug(this,"Impossible to comunicate to the server for close: %s",ex);
            connectionManager.remove(network);
          }
        }
        session.close();
        sessions.remove(session);
        if (!checkForClose(iForce))         return;
      }
 else {
        if (!iForce)         return;
      }
    }
    status=STATUS.CLOSING;
    for (    String url : serverURLs) {
      connectionManager.closePool(url);
    }
    sbTreeCollectionManager.close();
    super.close(iForce,onDelete);
    status=STATUS.CLOSED;
    Orient.instance().unregisterStorage(this);
  }
  finally {
    stateLock.releaseWriteLock();
  }
}
