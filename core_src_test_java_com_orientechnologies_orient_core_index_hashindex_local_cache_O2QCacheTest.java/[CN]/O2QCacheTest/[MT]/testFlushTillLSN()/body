{
  closeBufferAndDeleteFile();
  File file=new File(storageLocal.getConfiguration().getDirectory());
  if (!file.exists())   file.mkdir();
  writeAheadLog=new OWriteAheadLog(1024,-1,10 * 1024,100L * 1024 * 1024* 1024,storageLocal);
  final OStorageSegmentConfiguration segmentConfiguration=new OStorageSegmentConfiguration(storageLocal.getConfiguration(),"o2QCacheTest",0);
  segmentConfiguration.fileType=OFileFactory.CLASSIC;
  buffer=new O2QCache(4 * (8 + systemOffset),2,directMemory,writeAheadLog,8 + systemOffset,storageLocal,true);
  writeAheadLog.logRecord(new OSetPageDataRecord(new byte[]{1,2},1,1,"test"));
  OLogSequenceNumber lsnToFlush=writeAheadLog.logRecord(new OSetPageDataRecord(new byte[]{2,3},2,2,"test1"));
  writeAheadLog.logRecord(new OSetPageDataRecord(new byte[]{3,4},2,2,"test1"));
  writeAheadLog.logRecord(new OSetPageDataRecord(new byte[]{4,5},2,2,"test1"));
  writeAheadLog.logRecord(new OSetPageDataRecord(new byte[]{5,6},2,2,"test1"));
  writeAheadLog.logRecord(new OSetPageDataRecord(new byte[]{7,8},2,2,"test1"));
  long fileId=buffer.openFile(fileConfiguration,".tst");
  for (int i=0; i < 8; i++) {
    long dataPointer=buffer.load(fileId,i);
    setLsn(dataPointer,lsnToFlush);
    buffer.markDirty(fileId,i);
    buffer.release(fileId,i);
  }
  writeAheadLog.close(false);
  writeAheadLog=new OWriteAheadLog(1024,-1,10 * 1024,100L * 1024 * 1024* 1024,storageLocal);
  OWALRecord recordOne=writeAheadLog.read(writeAheadLog.begin());
  Assert.assertEquals(recordOne,new OSetPageDataRecord(new byte[]{1,2},1,1,"test"));
  OWALRecord recordTwo=writeAheadLog.readNext(recordOne.getLsn());
  Assert.assertEquals(recordTwo,new OSetPageDataRecord(new byte[]{2,3},2,2,"test1"));
  Assert.assertNull(writeAheadLog.readNext(recordTwo.getLsn()));
}
