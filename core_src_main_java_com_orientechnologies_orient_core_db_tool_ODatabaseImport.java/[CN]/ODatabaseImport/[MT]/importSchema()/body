{
  listener.onMessage("\nImporting database schema...");
  jsonReader.readNext(OJSONReader.BEGIN_OBJECT);
  @SuppressWarnings("unused") int schemaVersion=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"version\"").readNumber(OJSONReader.ANY_NUMBER,true);
  jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);
  jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);
  if (jsonReader.getValue().equals("\"globalProperties\"")) {
    jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);
    do {
      jsonReader.readNext(OJSONReader.BEGIN_OBJECT);
      jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"name\"");
      String name=jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);
      jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"global-id\"");
      String id=jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);
      jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"type\"");
      String type=jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);
      jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
    }
 while (jsonReader.lastChar() == ',');
    jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);
    jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);
  }
  jsonReader.checkContent("\"classes\"").readNext(OJSONReader.BEGIN_COLLECTION);
  long classImported=0;
  try {
    do {
      jsonReader.readNext(OJSONReader.BEGIN_OBJECT);
      final String className=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"name\"").readString(OJSONReader.COMMA_SEPARATOR);
      String next=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();
      if (next.equals("\"id\"")) {
        next=jsonReader.readString(OJSONReader.COMMA_SEPARATOR);
        next=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();
      }
      final int classDefClusterId;
      if (jsonReader.isContent("\"default-cluster-id\"")) {
        next=jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);
        classDefClusterId=Integer.parseInt(next);
      }
 else       classDefClusterId=database.getDefaultClusterId();
      String classClusterIds=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"cluster-ids\"").readString(OJSONReader.END_COLLECTION,true).trim();
      jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);
      OClassImpl cls=(OClassImpl)database.getMetadata().getSchema().getClass(className);
      if (cls != null) {
        if (cls.getDefaultClusterId() != classDefClusterId)         cls.setDefaultClusterId(classDefClusterId);
      }
 else       cls=(OClassImpl)database.getMetadata().getSchema().createClass(className,classDefClusterId);
      if (classClusterIds != null) {
        classClusterIds=classClusterIds.substring(1,classClusterIds.length() - 1);
        for (        int i : OStringSerializerHelper.splitIntArray(classClusterIds)) {
          if (i != -1)           cls.addClusterId(i);
        }
      }
      String value;
      while (jsonReader.lastChar() == ',') {
        jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);
        value=jsonReader.getValue();
        if (value.equals("\"strictMode\"")) {
          cls.setStrictMode(jsonReader.readBoolean(OJSONReader.NEXT_IN_OBJECT));
        }
 else         if (value.equals("\"abstract\"")) {
          cls.setAbstract(jsonReader.readBoolean(OJSONReader.NEXT_IN_OBJECT));
        }
 else         if (value.equals("\"oversize\"")) {
          final String oversize=jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);
          cls.setOverSize(Float.parseFloat(oversize));
        }
 else         if (value.equals("\"short-name\"")) {
          final String shortName=jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);
          cls.setShortName(shortName);
        }
 else         if (value.equals("\"super-class\"")) {
          final String classSuper=jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);
          superClasses.put(cls,classSuper);
        }
 else         if (value.equals("\"properties\"")) {
          jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);
          while (jsonReader.lastChar() != ']') {
            importProperty(cls);
            if (jsonReader.lastChar() == '}')             jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
          }
          jsonReader.readNext(OJSONReader.END_OBJECT);
        }
 else         if (value.equals("\"cluster-selection\"")) {
          cls.setClusterSelection(jsonReader.readString(OJSONReader.NEXT_IN_OBJECT));
        }
      }
      classImported++;
      jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
    }
 while (jsonReader.lastChar() == ',');
    for (    Map.Entry<OClass,String> entry : superClasses.entrySet())     entry.getKey().setSuperClass(database.getMetadata().getSchema().getClass(entry.getValue()));
    for (    Map.Entry<OPropertyImpl,String> entry : linkedClasses.entrySet()) {
      entry.getKey().setLinkedClass(database.getMetadata().getSchema().getClass(entry.getValue()));
    }
    database.getMetadata().getSchema().save();
    if (exporterVersion < 11) {
      OClass role=database.getMetadata().getSchema().getClass("ORole");
      role.dropProperty("rules");
    }
    listener.onMessage("OK (" + classImported + " classes)");
    schemaImported=true;
    jsonReader.readNext(OJSONReader.END_OBJECT);
    jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);
  }
 catch (  Exception e) {
    OLogManager.instance().error(this,"Error on importing schema",e);
    listener.onMessage("ERROR (" + classImported + " entries): "+ e);
  }
}
