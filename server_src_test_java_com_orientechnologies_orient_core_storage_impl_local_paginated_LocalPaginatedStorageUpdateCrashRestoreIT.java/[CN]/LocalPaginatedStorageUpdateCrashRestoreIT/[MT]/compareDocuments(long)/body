{
  long minTs=Long.MAX_VALUE;
  baseDocumentTx.activateOnCurrentThread();
  int clusterId=baseDocumentTx.getClusterIdByName("TestClass");
  OStorage baseStorage=baseDocumentTx.getStorage();
  OPhysicalPosition[] physicalPositions=baseStorage.ceilingPhysicalPositions(clusterId,new OPhysicalPosition(0));
  int recordsRestored=0;
  int recordsTested=0;
  while (physicalPositions.length > 0) {
    final ORecordId rid=new ORecordId(clusterId);
    for (    OPhysicalPosition physicalPosition : physicalPositions) {
      rid.clusterPosition=physicalPosition.clusterPosition;
      baseDocumentTx.activateOnCurrentThread();
      ODocument baseDocument=baseDocumentTx.load(rid);
      testDocumentTx.activateOnCurrentThread();
      List<ODocument> testDocuments=testDocumentTx.query(new OSQLSynchQuery<ODocument>("select from TestClass where id  = " + baseDocument.field("id")));
      Assert.assertTrue(!testDocuments.isEmpty());
      ODocument testDocument=testDocuments.get(0);
      if (testDocument.field("timestamp").equals(baseDocument.field("timestamp")) && testDocument.field("stringValue").equals(baseDocument.field("stringValue"))) {
        recordsRestored++;
      }
 else {
        if (((Long)baseDocument.field("timestamp")) < minTs)         minTs=baseDocument.field("timestamp");
      }
      recordsTested++;
      if (recordsTested % 10000 == 0)       System.out.println(recordsTested + " were tested, " + recordsRestored+ " were restored ...");
    }
    physicalPositions=baseStorage.higherPhysicalPositions(clusterId,physicalPositions[physicalPositions.length - 1]);
  }
  System.out.println(recordsRestored + " records were restored. Total records " + recordsTested+ ". lost records "+ (recordsTested - recordsRestored));
  long maxInterval=minTs == Long.MAX_VALUE ? 0 : lastTs - minTs;
  System.out.println("Lost records max interval (ms) : " + maxInterval);
  assertThat(recordsTested - recordsRestored).isLessThan(120);
  assertThat(maxInterval).isLessThan(2000);
}
