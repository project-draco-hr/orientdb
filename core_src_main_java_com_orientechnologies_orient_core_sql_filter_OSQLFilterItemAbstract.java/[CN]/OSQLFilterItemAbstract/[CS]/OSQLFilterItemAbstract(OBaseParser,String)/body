{
  final List<String> parts=OStringSerializerHelper.smartSplit(iText,'.');
  setRoot(iQueryToParse,parts.get(0));
  if (parts.size() > 1) {
    operationsChain=new ArrayList<OPair<Integer,List<String>>>();
    for (int i=1; i < parts.size(); ++i) {
      String part=parts.get(i);
      String partUpperCase=part.toUpperCase(Locale.ENGLISH);
      if (part.indexOf('(') > -1) {
        boolean operatorFound=false;
        for (        OSQLFilterFieldOperator op : OSQLFilterFieldOperator.OPERATORS)         if (partUpperCase.startsWith(op.keyword + "(")) {
          final List<String> arguments;
          if (op.maxArguments > 0) {
            arguments=OStringSerializerHelper.getParameters(part);
            if (arguments.size() < op.minArguments || arguments.size() > op.maxArguments)             throw new OQueryParsingException(iQueryToParse.parserText,"Syntax error: field operator '" + op.keyword + "' needs "+ (op.minArguments == op.maxArguments ? op.minArguments : op.minArguments + "-" + op.maxArguments)+ " argument(s) while has been received "+ arguments.size(),0);
          }
 else           arguments=null;
          operationsChain.add(new OPair<Integer,List<String>>(op.id,arguments));
          operatorFound=true;
          break;
        }
        if (!operatorFound)         throw new OQueryParsingException(iQueryToParse.parserText,"Syntax error: field operator not recognized between the supported ones: " + Arrays.toString(OSQLFilterFieldOperator.OPERATORS),0);
      }
 else {
        final List<String> list=new ArrayList<String>();
        list.add(part);
        operationsChain.add(new OPair<Integer,List<String>>(OSQLFilterFieldOperator.FIELD.id,list));
      }
    }
  }
}
