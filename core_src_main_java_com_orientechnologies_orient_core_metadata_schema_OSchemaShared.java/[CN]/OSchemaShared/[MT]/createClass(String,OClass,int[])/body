{
  OClass result;
  startReloadRequest();
  readWriteLock.writeLock().lock();
  try {
    getDatabase().checkSecurity(ODatabaseSecurityResources.SCHEMA,ORole.PERMISSION_CREATE);
    StringBuilder cmd=null;
    final String key=className.toLowerCase();
    if (classes.containsKey(key))     throw new OSchemaException("Class " + className + " already exists in current database");
    checkClustersAreAbsent(clusterIds);
    cmd=new StringBuilder("create class ");
    cmd.append(className);
    if (superClass != null) {
      cmd.append(" extends ");
      cmd.append(superClass.getName());
    }
    if (clusterIds != null) {
      if (clusterIds.length == 1 && clusterIds[0] == -1)       cmd.append(" abstract");
 else {
        cmd.append(" cluster ");
        for (int i=0; i < clusterIds.length; ++i) {
          if (i > 0)           cmd.append(',');
 else           cmd.append(' ');
          cmd.append(clusterIds[i]);
        }
      }
    }
    final ODatabaseRecord db=getDatabase();
    final OStorage storage=db.getStorage();
    if (storage instanceof OAutoshardedStorage) {
      final OAutoshardedStorage autoshardedStorage=(OAutoshardedStorage)storage;
      OCommandSQL commandSQL=new OCommandSQL(cmd.toString());
      commandSQL.addExcludedNode(autoshardedStorage.getNodeId());
      db.command(commandSQL).execute();
      commandSQL=db.command(commandSQL);
      storage.getUnderlying().command(commandSQL);
    }
 else     db.command(new OCommandSQL(cmd.toString())).execute();
    if (storage instanceof OStorageProxy)     reload();
    result=classes.get(className.toLowerCase());
  }
  finally {
    readWriteLock.writeLock().unlock();
    endReloadRequest();
  }
  reloadStorageMetadata();
  return result;
}
