{
  final OCommandRequestText textRequest=(OCommandRequestText)iRequest;
  String queryText=textRequest.getText();
  String originalQuery=queryText;
  try {
    queryText=preParse(queryText,iRequest);
    textRequest.setText(queryText);
    init((OCommandRequestText)iRequest);
    final StringBuilder word=new StringBuilder();
    int oldPos=0;
    int pos=nextWord(parserText,parserTextUpperCase,oldPos,word,true);
    if (pos == -1 || !word.toString().equals(KEYWORD_CREATE))     throw new OCommandSQLParsingException("Keyword " + KEYWORD_CREATE + " not found",parserText,oldPos);
    oldPos=pos;
    pos=nextWord(parserText,parserTextUpperCase,oldPos,word,true);
    if (pos == -1 || !word.toString().equals(KEYWORD_PROPERTY))     throw new OCommandSQLParsingException("Keyword " + KEYWORD_PROPERTY + " not found",parserText,oldPos);
    oldPos=pos;
    pos=nextWord(parserText,parserTextUpperCase,oldPos,word,false);
    if (pos == -1)     throw new OCommandSQLParsingException("Expected <class>.<property>",parserText,oldPos);
    String[] parts=split(word);
    if (parts.length != 2)     throw new OCommandSQLParsingException("Expected <class>.<property>",parserText,oldPos);
    className=parts[0];
    if (className == null)     throw new OCommandSQLParsingException("Class not found",parserText,oldPos);
    fieldName=parts[1];
    oldPos=pos;
    pos=nextWord(parserText,parserTextUpperCase,oldPos,word,true);
    if (pos == -1)     throw new OCommandSQLParsingException("Missed property type",parserText,oldPos);
    type=OType.valueOf(word.toString());
    oldPos=pos;
    pos=nextWord(parserText,parserTextUpperCase,oldPos,word,false);
    if (pos == -1)     return this;
    if (word.toString().equals(KEYWORD_UNSAFE))     unsafe=true;
 else {
      linked=word.toString();
      if (linked.startsWith("`") && linked.endsWith("`") && linked.length() > 1) {
        linked=linked.substring(1,linked.length() - 1);
      }
      oldPos=pos;
      pos=nextWord(parserText,parserTextUpperCase,oldPos,word,false);
      if (pos == -1)       return this;
      if (word.toString().equals(KEYWORD_UNSAFE))       unsafe=true;
    }
  }
  finally {
    textRequest.setText(originalQuery);
  }
  return this;
}
