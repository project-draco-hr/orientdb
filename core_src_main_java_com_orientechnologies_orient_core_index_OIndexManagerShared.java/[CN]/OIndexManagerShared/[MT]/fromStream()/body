{
  acquireExclusiveLock();
  try {
    final Map<String,OIndex<?>> oldIndexes=new HashMap<String,OIndex<?>>(indexes);
    clearMetadata();
    final Collection<ODocument> idxs=document.field(CONFIG_INDEXES);
    if (idxs != null) {
      OIndexInternal<?> index;
      boolean configUpdated=false;
      Iterator<ODocument> indexConfigurationIterator=idxs.iterator();
      while (indexConfigurationIterator.hasNext()) {
        final ODocument d=indexConfigurationIterator.next();
        try {
          index=OIndexes.createIndex(getDatabase(),(String)d.field(OIndexInternal.CONFIG_TYPE),(String)d.field(OIndexInternal.ALGORITHM),d.<String>field(OIndexInternal.VALUE_CONTAINER_ALGORITHM),(ODocument)d.field(OIndexInternal.METADATA));
          OIndexInternal.IndexMetadata newIndexMetadata=index.loadMetadata(d);
          final String normalizedName=newIndexMetadata.getName().toLowerCase();
          OIndex<?> oldIndex=oldIndexes.get(normalizedName);
          if (oldIndex != null) {
            OIndexInternal.IndexMetadata oldIndexMetadata=oldIndex.getInternal().loadMetadata(oldIndex.getConfiguration());
            if (oldIndexMetadata.equals(newIndexMetadata)) {
              addIndexInternal(oldIndex.getInternal());
              oldIndexes.remove(normalizedName);
            }
 else             if (newIndexMetadata.getIndexDefinition() == null && d.field(OIndexAbstract.CONFIG_MAP_RID).equals(oldIndex.getConfiguration().field(OIndexAbstract.CONFIG_MAP_RID))) {
              addIndexInternal(oldIndex.getInternal());
              oldIndexes.remove(normalizedName);
            }
          }
 else {
            if (index.loadFromConfiguration(d)) {
              addIndexInternal(index);
            }
 else {
              indexConfigurationIterator.remove();
              configUpdated=true;
            }
          }
        }
 catch (        Exception e) {
          indexConfigurationIterator.remove();
          configUpdated=true;
          OLogManager.instance().error(this,"Error on loading index by configuration: %s",e,d);
        }
      }
      for (      OIndex<?> oldIndex : oldIndexes.values())       try {
        OLogManager.instance().warn(this,"Index %s was not found after reload and will be removed",oldIndex.getName());
        getDatabase().unregisterListener(oldIndex.getInternal());
        oldIndex.delete();
      }
 catch (      Exception e) {
        OLogManager.instance().error(this,"Error on deletion of index %s",e,oldIndex.getName());
      }
      if (configUpdated) {
        document.field(CONFIG_INDEXES,idxs);
        save();
      }
    }
  }
  finally {
    releaseExclusiveLock();
  }
}
