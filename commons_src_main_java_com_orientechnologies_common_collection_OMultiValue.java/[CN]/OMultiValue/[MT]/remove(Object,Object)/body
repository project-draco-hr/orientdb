{
  if (iObject != null) {
    if (iObject instanceof OMultiCollectionIterator<?>) {
      final Collection<Object> list=new ArrayList<Object>(OMultiValue.getSize(iObject));
      for (      Object o : ((OMultiCollectionIterator<?>)iObject))       list.add(o);
      iObject=list;
    }
    if (iObject instanceof Collection<?>) {
      final Collection<Object> coll=(Collection<Object>)iObject;
      if (iToRemove instanceof Collection<?>) {
        for (        Object o : (Collection<Object>)iToRemove) {
          if (isMultiValue(o))           remove(coll,o);
 else           coll.remove(o);
        }
      }
 else       if (iToRemove != null && iToRemove.getClass().isArray()) {
        for (int i=0; i < Array.getLength(iToRemove); ++i) {
          Object o=Array.get(iToRemove,i);
          if (isMultiValue(o))           remove(coll,o);
 else           coll.remove(o);
        }
      }
 else       if (iToRemove instanceof Map<?,?>) {
        for (        Entry<Object,Object> entry : ((Map<Object,Object>)iToRemove).entrySet())         coll.remove(entry.getKey());
      }
 else       if (iToRemove instanceof Iterator<?>) {
        if (iToRemove instanceof OMultiCollectionIterator<?>)         ((OMultiCollectionIterator<?>)iToRemove).reset();
        for (Iterator<?> it=(Iterator<?>)iToRemove; it.hasNext(); ) {
          final Object itemToRemove=it.next();
          while (coll.remove(itemToRemove))           ;
        }
      }
 else       coll.remove(iToRemove);
    }
 else     if (iObject.getClass().isArray()) {
      final Object[] copy;
      if (iToRemove instanceof Collection<?>) {
        final int sourceTot=Array.getLength(iObject);
        final int tot=sourceTot - ((Collection<Object>)iToRemove).size();
        copy=new Object[tot];
        int k=0;
        for (int i=0; i < sourceTot; ++i) {
          Object o=Array.get(iObject,i);
          if (o != null) {
            boolean found=false;
            for (            Object toRemove : (Collection<Object>)iToRemove) {
              if (o.equals(toRemove)) {
                found=true;
                break;
              }
            }
            if (!found)             copy[k++]=o;
          }
        }
      }
 else       if (iToRemove != null && iToRemove.getClass().isArray()) {
        throw new UnsupportedOperationException("Cannot execute remove() against an array");
      }
 else {
        throw new UnsupportedOperationException("Cannot execute remove() against an array");
      }
      return copy;
    }
 else     throw new IllegalArgumentException("Object " + iObject + " is not a multi value");
  }
  return iObject;
}
