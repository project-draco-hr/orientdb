{
  iOutput.append(OStringSerializerHelper.COLLECTION_BEGIN);
  final Iterator<Object> iterator=iValue instanceof Collection<?> ? ((Collection<Object>)iValue).iterator() : null;
  final int size=iValue instanceof Collection<?> ? ((Collection<Object>)iValue).size() : Array.getLength(iValue);
  OType linkedType=iLinkedType;
  for (int i=0; i < size; ++i) {
    final Object o;
    if (iValue instanceof Collection<?>)     o=iterator.next();
 else     o=Array.get(iValue,i);
    if (i > 0)     iOutput.append(OStringSerializerHelper.RECORD_SEPARATOR);
    if (o == null)     continue;
    OIdentifiable id=null;
    ODocument doc=null;
    final OClass linkedClass;
    if (!(o instanceof OIdentifiable)) {
      final String fieldBound=OObjectSerializerHelper.getDocumentBoundField(o.getClass());
      if (fieldBound != null) {
        OObjectSerializerHelper.invokeCallback(o,null,OBeforeSerialization.class);
        doc=(ODocument)OObjectSerializerHelper.getFieldValue(o,fieldBound);
        OObjectSerializerHelper.invokeCallback(o,doc,OAfterSerialization.class);
        id=doc;
      }
 else       if (iLinkedType == null)       linkedType=OType.getTypeByClass(o.getClass());
      linkedClass=iLinkedClass;
    }
 else {
      id=(OIdentifiable)o;
      if (iLinkedType == null)       if (id.getIdentity().isValid())       linkedType=OType.LINK;
 else       linkedType=OType.EMBEDDED;
      if (id instanceof ODocument) {
        doc=(ODocument)id;
        if (id.getIdentity().isTemporary())         doc.save();
        linkedClass=doc.getSchemaClass();
      }
 else       linkedClass=null;
    }
    if (id != null && linkedType != OType.LINK)     iOutput.append(OStringSerializerHelper.EMBEDDED_BEGIN);
    if (linkedType != OType.LINK && (linkedClass != null || doc != null)) {
      if (id == null)       id=OObjectSerializerHelper.toStream(o,new ODocument((ODatabaseRecord)iDatabase,o.getClass().getSimpleName()),iDatabase instanceof ODatabaseObjectTx ? ((ODatabaseObjectTx)iDatabase).getEntityManager() : OEntityManagerInternal.INSTANCE,iLinkedClass,iObjHandler != null ? iObjHandler : new OUserObject2RecordHandler(){
        public Object getUserObjectByRecord(        ORecordInternal<?> iRecord,        final String iFetchPlan){
          return iRecord;
        }
        public ORecordInternal<?> getRecordByUserObject(        Object iPojo,        boolean iCreateIfNotAvailable){
          return new ODocument(linkedClass);
        }
        public boolean existsUserObjectByRID(        ORID iRID){
          return false;
        }
        public void registerUserObject(        Object iObject,        ORecordInternal<?> iRecord){
        }
      }
,null,iSaveOnlyDirty);
      toString(doc,iOutput,null,iObjHandler,iMarshalledRecords,false);
    }
 else {
      if (iLinkedType == null) {
        if (o != null)         linkedType=OType.getTypeByClass(o.getClass());
      }
 else       if (iLinkedType == OType.CUSTOM)       iOutput.append(OStringSerializerHelper.CUSTOM_TYPE);
      fieldTypeToString(iOutput,linkedType,o);
    }
    if (id != null && linkedType != OType.LINK)     iOutput.append(OStringSerializerHelper.EMBEDDED_END);
  }
  iOutput.append(OStringSerializerHelper.COLLECTION_END);
  return iOutput;
}
