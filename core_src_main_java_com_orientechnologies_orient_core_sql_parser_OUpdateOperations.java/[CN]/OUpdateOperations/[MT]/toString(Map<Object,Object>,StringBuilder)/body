{
  boolean first=true;
switch (type) {
case TYPE_SET:
    builder.append("SET ");
  for (  OUpdateItem item : this.updateItems) {
    if (!first) {
      builder.append(", ");
    }
    item.toString(params,builder);
    first=false;
  }
break;
case TYPE_PUT:
builder.append("PUT ");
for (OUpdatePutItem item : this.updatePutItems) {
if (!first) {
builder.append(", ");
}
item.toString(params,builder);
first=false;
}
break;
case TYPE_MERGE:
builder.append("MERGE ");
json.toString(params,builder);
break;
case TYPE_CONTENT:
builder.append("CONTENT ");
json.toString(params,builder);
break;
case TYPE_INCREMENT:
builder.append("INCREMENT ");
for (OUpdateIncrementItem item : this.updateIncrementItems) {
if (!first) {
builder.append(", ");
}
item.toString(params,builder);
first=false;
}
break;
case TYPE_ADD:
builder.append("ADD ");
for (OUpdateIncrementItem item : this.updateIncrementItems) {
if (!first) {
builder.append(", ");
}
item.toString(params,builder);
first=false;
}
break;
case TYPE_REMOVE:
builder.append("REMOVE ");
for (OUpdateRemoveItem item : this.updateRemoveItems) {
if (!first) {
builder.append(", ");
}
item.toString(params,builder);
first=false;
}
break;
}
}
