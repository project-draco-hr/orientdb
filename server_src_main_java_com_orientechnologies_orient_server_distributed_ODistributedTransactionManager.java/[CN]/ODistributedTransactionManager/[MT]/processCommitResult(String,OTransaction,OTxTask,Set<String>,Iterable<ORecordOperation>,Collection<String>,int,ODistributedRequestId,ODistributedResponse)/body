{
  final Object result=dResponse.getPayload();
  if (result instanceof OTxTaskResult) {
    final OTxTaskResult txResult=((OTxTaskResult)result);
    final List<Object> list=txResult.results;
    for (int i=0; i < txTask.getTasks().size(); ++i) {
      final Object o=list.get(i);
      final OAbstractRecordReplicatedTask task=txTask.getTasks().get(i);
      if (task instanceof OCreateRecordTask) {
        final OCreateRecordTask t=(OCreateRecordTask)task;
        iTx.updateIdentityAfterCommit(t.getRid(),((OPlaceholder)o).getIdentity());
        ORecordInternal.setVersion(iTx.getRecord(t.getRid()),((OPlaceholder)o).getVersion());
      }
 else       if (task instanceof OUpdateRecordTask) {
        final OUpdateRecordTask t=(OUpdateRecordTask)task;
        ORecordInternal.setVersion(iTx.getRecord(t.getRid()),(Integer)o);
      }
 else       if (task instanceof ODeleteRecordTask) {
      }
    }
    for (    ORecordOperation op : tmpEntries) {
      final ORecord record=op.getRecord();
      if (record != null)       ORecordInternal.unsetDirty(record);
    }
    sendTxCompleted(localNodeName,involvedClusters,nodes,reqId,true);
  }
 else   if (result instanceof ODistributedRecordLockedException) {
    if (autoRetryDelay > 0)     Thread.sleep(autoRetryDelay);
    return false;
  }
 else   if (result instanceof Exception) {
    if (ODistributedServerLog.isDebugEnabled())     ODistributedServerLog.debug(this,localNodeName,null,ODistributedServerLog.DIRECTION.NONE,"distributed transaction error: %s",result,result.toString());
    storage.executeUndoOnLocalServer(dResponse.getRequestId(),txTask);
    if (result instanceof OTransactionException || result instanceof ONeedRetryException)     throw (RuntimeException)result;
    throw OException.wrapException(new OTransactionException("Error on committing distributed transaction"),(Exception)result);
  }
 else {
    if (ODistributedServerLog.isDebugEnabled())     ODistributedServerLog.debug(this,localNodeName,null,ODistributedServerLog.DIRECTION.NONE,"distributed transaction error, received unknown response type: %s",result);
    throw new OTransactionException("Error on committing distributed transaction, received unknown response type " + result);
  }
  return true;
}
