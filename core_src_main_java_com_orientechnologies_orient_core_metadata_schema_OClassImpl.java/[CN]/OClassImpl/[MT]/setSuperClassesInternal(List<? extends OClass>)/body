{
  acquireSchemaWriteLock();
  try {
    List<OClassImpl> newSuperClasses=new ArrayList<OClassImpl>();
    OClassImpl cls;
    for (    OClass superClass : classes) {
      if (superClass instanceof OClassAbstractDelegate)       cls=(OClassImpl)((OClassAbstractDelegate)superClass).delegate;
 else       cls=(OClassImpl)superClass;
      newSuperClasses.add(cls);
    }
    List<OClassImpl> toAddList=new ArrayList<OClassImpl>(newSuperClasses);
    toAddList.removeAll(superClasses);
    List<OClassImpl> toRemoveList=new ArrayList<OClassImpl>(superClasses);
    toRemoveList.removeAll(newSuperClasses);
    for (    OClassImpl addTo : toAddList) {
      addTo.addBaseClasses(this);
    }
    for (    OClassImpl toRemove : toRemoveList) {
      toRemove.removeBaseClassInternal(this);
    }
    superClasses.clear();
    superClasses.addAll(newSuperClasses);
  }
  finally {
    releaseSchemaWriteLock();
  }
}
