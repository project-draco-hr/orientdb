{
  if (!database.getMetadata().getSchema().existsClass("JSONTxDocOne"))   database.getMetadata().getSchema().createClass("JSONTxDocOne");
  if (!database.getMetadata().getSchema().existsClass("JSONTxDocTwo"))   database.getMetadata().getSchema().createClass("JSONTxDocTwo");
  ODocument adamDoc=new ODocument("JSONTxDocOne");
  adamDoc.field("name","adam");
  adamDoc.save();
  database.begin();
  ODocument eveDoc=new ODocument("JSONTxDocOne");
  eveDoc.field("name","eve");
  eveDoc.save();
  ODocument nestedWithTypeD=new ODocument("JSONTxDocTwo");
  nestedWithTypeD.fromJSON("{\"@type\":\"d\",\"event_name\":\"world cup 2014\",\"admin\":[" + eveDoc.toJSON() + ","+ adamDoc.toJSON()+ "]}");
  nestedWithTypeD.save();
  database.commit();
  Assert.assertEquals(database.countClass("JSONTxDocOne"),2);
  Map<ORID,ODocument> contentMap=new HashMap<ORID,ODocument>();
  ODocument adam=new ODocument("JSONTxDocOne");
  adam.field("name","adam");
  contentMap.put(adamDoc.getIdentity(),adam);
  ODocument eve=new ODocument("JSONTxDocOne");
  eve.field("name","eve");
  contentMap.put(eveDoc.getIdentity(),eve);
  for (  ODocument o : database.browseClass("JSONTxDocOne")) {
    ODocument content=contentMap.get(o.getIdentity());
    Assert.assertTrue(content.hasSameContentOf(o));
  }
}
