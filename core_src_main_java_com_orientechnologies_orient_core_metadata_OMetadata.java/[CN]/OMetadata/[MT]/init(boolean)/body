{
  final ODatabaseRecord database=getDatabase();
  schemaClusterId=database.getClusterIdByName(OStorage.CLUSTER_INTERNAL_NAME);
  schema=new OSchemaProxy(database.getStorage().getResource(OSchema.class.getSimpleName(),new Callable<OSchemaShared>(){
    public OSchemaShared call(){
      final OSchemaShared instance=new OSchemaShared(schemaClusterId);
      if (iLoad)       instance.load();
      return instance;
    }
  }
),database);
  indexManager=new OIndexManagerProxy(database.getStorage().getResource(OIndexManager.class.getSimpleName(),new Callable<OIndexManager>(){
    public OIndexManager call(){
      OIndexManager instance;
      if (database.getStorage() instanceof OStorageProxy)       instance=new OIndexManagerRemote(database);
 else       instance=new OIndexManagerShared(database);
      if (iLoad)       instance.load();
      return instance;
    }
  }
),database);
  final Boolean enableSecurity=(Boolean)database.getProperty(ODatabase.OPTIONS.SECURITY.toString());
  if (enableSecurity != null && !enableSecurity)   security=new OSecurityNull();
 else   security=new OSecurityProxy(database.getStorage().getResource(OSecurity.class.getSimpleName(),new Callable<OSecurityShared>(){
    public OSecurityShared call(){
      final OSecurityShared instance=new OSecurityShared();
      if (iLoad)       instance.load();
      return instance;
    }
  }
),database);
}
