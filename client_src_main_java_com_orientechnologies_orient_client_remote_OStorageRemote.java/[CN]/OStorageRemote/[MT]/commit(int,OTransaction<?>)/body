{
  checkConnection();
  do {
    boolean locked=lock.acquireExclusiveLock();
    try {
      try {
        beginRequest(OChannelBinaryProtocol.REQUEST_TX_COMMIT);
        network.writeInt(iTx.getId());
        network.writeInt(iTx.size());
        for (        OTransactionEntry<? extends ORecord<?>> txEntry : iTx.getEntries()) {
          if (txEntry.status == OTransactionEntry.LOADED)           continue;
          network.writeByte(txEntry.status);
          network.writeShort((short)txEntry.getRecord().getIdentity().getClusterId());
          network.writeByte(txEntry.getRecord().getRecordType());
switch (txEntry.status) {
case OTransactionEntry.CREATED:
            network.writeString(txEntry.clusterName);
          network.writeBytes(txEntry.getRecord().toStream());
        break;
case OTransactionEntry.UPDATED:
      network.writeLong(txEntry.getRecord().getIdentity().getClusterPosition());
    network.writeInt(txEntry.getRecord().getVersion());
  network.writeBytes(txEntry.getRecord().toStream());
break;
case OTransactionEntry.DELETED:
network.writeLong(txEntry.getRecord().getIdentity().getClusterPosition());
network.writeInt(txEntry.getRecord().getVersion());
break;
}
}
}
  finally {
endRequest();
}
try {
beginResponse();
final int updatedRecords=network.readInt();
ORecordId rid;
for (int i=0; i < updatedRecords; ++i) {
rid=network.readRID();
for (OTransactionEntry<? extends ORecord<?>> txEntry : iTx.getEntries()) {
if (txEntry.getRecord().getIdentity().equals(rid)) {
txEntry.getRecord().setVersion(network.readInt());
break;
}
}
}
}
  finally {
endResponse();
}
break;
}
 catch (Exception e) {
handleException("Error on commit",e);
}
 finally {
lock.releaseExclusiveLock(locked);
}
}
 while (true);
}
