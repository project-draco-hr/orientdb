{
  if (iOutVertex == null)   throw new IllegalArgumentException("iOutVertex is null");
  if (iInVertex == null)   throw new IllegalArgumentException("iInVertex is null");
  final OClass cls=checkEdgeClass(iClassName);
  final boolean safeMode=beginBlock();
  try {
    final ODocument edge=new ODocument(cls).setOrdered(true);
    edge.field(EDGE_FIELD_OUT,iOutVertex);
    edge.field(EDGE_FIELD_IN,iInVertex);
    if (iFields != null)     if (iFields.length == 1) {
      Object f=iFields[0];
      if (f instanceof Map<?,?>)       edge.fields((Map<String,Object>)f);
 else       throw new IllegalArgumentException("Invalid fields: expecting a pairs of fields as String,Object or a single Map<String,Object>, but found: " + f);
    }
 else     for (int i=0; i < iFields.length; i+=2)     edge.field(iFields[i].toString(),iFields[i + 1]);
    acquireWriteLock(iOutVertex);
    try {
      final Object outField=iOutVertex.field(VERTEX_FIELD_OUT);
      final OMVRBTreeRIDSet out;
      if (outField instanceof OMVRBTreeRIDSet) {
        out=(OMVRBTreeRIDSet)outField;
      }
 else       if (outField instanceof Collection<?>) {
        out=new OMVRBTreeRIDSet(iOutVertex,(Collection<OIdentifiable>)outField);
        iOutVertex.field(VERTEX_FIELD_OUT,out);
      }
 else {
        out=new OMVRBTreeRIDSet(iOutVertex);
        iOutVertex.field(VERTEX_FIELD_OUT,out);
      }
      out.add(edge);
    }
  finally {
      releaseWriteLock(iOutVertex);
    }
    acquireWriteLock(iInVertex);
    try {
      final Object inField=iInVertex.field(VERTEX_FIELD_IN);
      final OMVRBTreeRIDSet in;
      if (inField instanceof OMVRBTreeRIDSet) {
        in=(OMVRBTreeRIDSet)inField;
      }
 else       if (inField instanceof Collection<?>) {
        in=new OMVRBTreeRIDSet(iInVertex,(Collection<OIdentifiable>)inField);
        iInVertex.field(VERTEX_FIELD_IN,in);
      }
 else {
        in=new OMVRBTreeRIDSet(iInVertex);
        iInVertex.field(VERTEX_FIELD_IN,in);
      }
      in.add(edge);
    }
  finally {
      releaseWriteLock(iInVertex);
    }
    edge.setDirty();
    if (safeMode) {
      save(edge);
      commitBlock(safeMode);
    }
    return edge;
  }
 catch (  RuntimeException e) {
    rollbackBlock(safeMode);
    throw e;
  }
}
