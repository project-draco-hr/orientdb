{
  final OCommandRequestText textRequest=(OCommandRequestText)iRequest;
  String queryText=textRequest.getText();
  String originalQuery=queryText;
  try {
    queryText=preParse(queryText,iRequest);
    textRequest.setText(queryText);
    init((OCommandRequestText)iRequest);
    final StringBuilder word=new StringBuilder();
    int oldPos=0;
    int pos=nextWord(parserText,parserTextUpperCase,oldPos,word,true);
    if (pos == -1 || !word.toString().equals(KEYWORD_CREATE))     throw new OCommandSQLParsingException("Keyword " + KEYWORD_CREATE + " not found",parserText,oldPos);
    oldPos=pos;
    pos=nextWord(parserText,parserTextUpperCase,oldPos,word,true);
    if (pos == -1 || !word.toString().equals(KEYWORD_PROPERTY))     throw new OCommandSQLParsingException("Keyword " + KEYWORD_PROPERTY + " not found",parserText,oldPos);
    oldPos=pos;
    pos=nextWord(parserText,parserTextUpperCase,oldPos,word,false);
    if (pos == -1)     throw new OCommandSQLParsingException("Expected <class>.<property>",parserText,oldPos);
    String[] parts=split(word);
    if (parts.length != 2)     throw new OCommandSQLParsingException("Expected <class>.<property>",parserText,oldPos);
    className=decodeClassName(parts[0]);
    if (className == null)     throw new OCommandSQLParsingException("Class not found",parserText,oldPos);
    fieldName=decodeClassName(parts[1]);
    oldPos=pos;
    pos=nextWord(parserText,parserTextUpperCase,oldPos,word,true);
    if (pos == -1)     throw new OCommandSQLParsingException("Missed property type",parserText,oldPos);
    type=OType.valueOf(word.toString());
    String rest=parserText.substring(pos).trim();
    String pattern="(`[^`]*`|[^\\(]\\S*)?\\s*(\\(.*\\))?\\s*(UNSAFE)?";
    Pattern r=Pattern.compile(pattern,Pattern.CASE_INSENSITIVE);
    Matcher m=r.matcher(rest.trim());
    if (m.matches()) {
      if (m.group(1) != null && !m.group(1).equalsIgnoreCase("UNSAFE")) {
        linked=m.group(1);
        if (linked.startsWith("`") && linked.endsWith("`") && linked.length() > 1) {
          linked=linked.substring(1,linked.length() - 1);
        }
      }
      if (m.group(2) != null) {
        String raw=m.group(2);
        String atts=raw.substring(1,raw.length() - 1);
        processAtts(atts);
      }
      if (m.group(3) != null) {
        this.unsafe=true;
      }
    }
 else {
    }
  }
  finally {
    textRequest.setText(originalQuery);
  }
  return this;
}
