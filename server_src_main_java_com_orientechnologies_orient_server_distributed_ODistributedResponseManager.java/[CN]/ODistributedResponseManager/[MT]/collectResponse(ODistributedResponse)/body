{
  final String executorNode=response.getExecutorNodeName();
  if (!responses.containsKey(executorNode)) {
    ODistributedServerLog.warn(this,response.getSenderNodeName(),executorNode,DIRECTION.IN,"received response for request %s from unexpected node. Expected are: %s",request,getExpectedNodes());
    Orient.instance().getProfiler().updateCounter("distributed.replication.unexpectedNodeResponse","Number of responses from unexpected nodes",+1);
    return false;
  }
  Orient.instance().getProfiler().stopChrono("distributed.replication.responseTime","Response time from replication messages",sentOn,"distributed.replication.responseTime");
  Orient.instance().getProfiler().stopChrono("distributed.replication." + executorNode + ".responseTime","Response time from replication messages",sentOn,"distributed.replication.*.responseTime");
  boolean completed=false;
synchronized (responseGroups) {
    responses.put(executorNode,response);
    receivedResponses++;
    if (waitForLocalNode && response.isExecutedOnLocalNode())     receivedCurrentNode=true;
    if (ODistributedServerLog.isDebugEnabled())     ODistributedServerLog.debug(this,response.getSenderNodeName(),executorNode,DIRECTION.IN,"received response '%s' for request %s (receivedCurrentNode=%s receivedResponses=%d)",response,request,receivedCurrentNode,receivedResponses);
    boolean foundBucket=false;
    for (int i=0; i < responseGroups.size(); ++i) {
      final List<ODistributedResponse> sameResponse=responseGroups.get(i);
      if (sameResponse.isEmpty() || (sameResponse.get(0).getPayload() == null && response.getPayload() == null) || sameResponse.get(0).getPayload().equals(response.getPayload())) {
        sameResponse.add(response);
        foundBucket=true;
        break;
      }
    }
    if (!foundBucket) {
      final ArrayList<ODistributedResponse> newBucket=new ArrayList<ODistributedResponse>();
      responseGroups.add(newBucket);
      newBucket.add(response);
    }
    completed=getExpectedResponses() == receivedResponses;
    if (receivedResponses >= expectedSynchronousResponses && (!waitForLocalNode || receivedCurrentNode)) {
      if (completed || isMinimumQuorumReached(false)) {
        synchronousResponsesLock.lock();
        try {
          synchronousResponsesArrived.signalAll();
        }
  finally {
          synchronousResponsesLock.unlock();
        }
      }
    }
  }
  return completed;
}
