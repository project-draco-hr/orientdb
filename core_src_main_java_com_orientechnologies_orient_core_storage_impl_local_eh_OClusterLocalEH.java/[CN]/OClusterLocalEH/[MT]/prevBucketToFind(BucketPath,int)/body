{
  int offset=bucketPath.nodeGlobalDepth - bucketDepth;
  BucketPath currentBucket=bucketPath;
  int nodeLocalDepth=bucketPath.nodeLocalDepth;
  while (offset > 0) {
    offset-=nodeLocalDepth;
    if (offset > 0) {
      currentBucket=bucketPath.parent;
      nodeLocalDepth=currentBucket.nodeLocalDepth;
    }
  }
  final int diff=bucketDepth - (currentBucket.nodeGlobalDepth - nodeLocalDepth);
  final int firstStartIndex=currentBucket.itemIndex & ((levelMask << (nodeLocalDepth - diff)) & levelMask);
  final int globalIndex=firstStartIndex + currentBucket.hashMapOffset - 1;
  final BucketPath bucketPathToFind;
  if (globalIndex < 0)   bucketPathToFind=prevLevelUp(bucketPath);
 else {
    final int hashMapSize=1 << currentBucket.nodeLocalDepth;
    final int hashMapOffset=globalIndex / hashMapSize * hashMapSize;
    final int startIndex=globalIndex - hashMapOffset;
    bucketPathToFind=new BucketPath(currentBucket.parent,hashMapOffset,startIndex,currentBucket.nodeIndex,currentBucket.nodeLocalDepth,currentBucket.nodeGlobalDepth);
  }
  return prevNonEmptyNode(bucketPathToFind);
}
