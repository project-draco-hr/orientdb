{
  return new OIndexAbstractCursor(){
    private Iterator<Map.Entry<Object,V>> entryIterator=concurrentHashMap.entrySet().iterator();
    private Object currentKey;
    private Iterator<OIdentifiable> currentIterator=new OEmptyIterator<OIdentifiable>();
    @Override public Map.Entry<Object,OIdentifiable> next(    int prefetchSize){
      if (currentIterator == null)       return null;
      if (currentIterator.hasNext())       return nextCursorValue();
      while (currentIterator != null && !currentIterator.hasNext()) {
        final Map.Entry<Object,V> entry=entryIterator.next();
        currentKey=entry.getKey();
        final V value=entry.getValue();
        if (valuesTransformer == null)         currentIterator=Collections.singletonList((OIdentifiable)value).iterator();
 else         currentIterator=valuesTransformer.transformFromValue(value).iterator();
      }
      if (currentIterator != null && currentIterator.hasNext())       return nextCursorValue();
      currentIterator=null;
      return null;
    }
    private Map.Entry<Object,OIdentifiable> nextCursorValue(){
      final OIdentifiable identifiable=currentIterator.next();
      return new Map.Entry<Object,OIdentifiable>(){
        @Override public Object getKey(){
          return currentKey;
        }
        @Override public OIdentifiable getValue(){
          return identifiable;
        }
        @Override public OIdentifiable setValue(        OIdentifiable value){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
}
