{
  maxSize=OGlobalConfiguration.STORAGE_CACHE_SIZE.getValueAsInteger();
  cache=new LinkedHashMap<String,ORawBuffer>(maxSize,0.75f,true){
    @Override protected boolean removeEldestEntry(    java.util.Map.Entry<String,ORawBuffer> iEldest){
      return size() > maxSize;
    }
  }
;
  Orient.instance().getMemoryWatchDog().addListener(new Listener(){
    /** 
 * Auto reduce cache size of 10%
 */
    public void memoryUsageLow(    TYPE iType,    final long usedMemory,    final long maxMemory){
      if (iType == TYPE.JVM) {
        final int threshold=maxSize * 90 / 100;
        if (cache.size() < threshold)         return;
        OLogManager.instance().debug(this,"Low memory: auto reduce the storage cache size from %d to %d",maxSize,threshold);
        maxSize=threshold;
      }
    }
  }
);
  OProfiler.getInstance().registerHookValue("cache.records.current",new OProfilerHookValue(){
    public Object getValue(){
      return cache.size();
    }
  }
);
  OProfiler.getInstance().registerHookValue("cache.records.max",new OProfilerHookValue(){
    public Object getValue(){
      return maxSize;
    }
  }
);
  OProfiler.getInstance().registerHookValue("cache.records.bytes",new OProfilerHookValue(){
    public Object getValue(){
      final boolean locked=acquireSharedLock();
      try {
        long tot=0;
        for (        ORawBuffer buff : cache.values()) {
          tot+=buff.buffer.length;
        }
        return tot;
      }
  finally {
        releaseSharedLock(locked);
      }
    }
  }
);
}
