{
  checkOpeness();
  stateLock.acquireReadLock();
  try {
    final long timer=Orient.instance().getProfiler().startChrono();
    final long lockId=atomicOperationsManager.freezeAtomicOperations(null,null);
    try {
      checkOpeness();
      for (      OIndexEngine indexEngine : indexEngines)       try {
        if (indexEngine != null)         indexEngine.flush();
      }
 catch (      Throwable t) {
        OLogManager.instance().error(this,"Error while flushing index via index engine of class %s.",t,indexEngine.getClass().getSimpleName());
      }
      if (writeAheadLog != null) {
        makeFullCheckpoint();
        return;
      }
      writeCache.flush();
      if (configuration != null)       configuration.synch();
      clearStorageDirty();
    }
 catch (    IOException e) {
      throw OException.wrapException(new OStorageException("Error on synch storage '" + name + "'"),e);
    }
 finally {
      atomicOperationsManager.releaseAtomicOperations(lockId);
      Orient.instance().getProfiler().stopChrono("db." + name + ".synch","Synch a database",timer,"db.*.synch");
    }
  }
  finally {
    stateLock.releaseReadLock();
  }
}
