{
  try {
    listener.onMessage("\nStarted import of database '" + database.getURL() + "' from "+ fileName+ "...");
    long time=System.currentTimeMillis();
    jsonReader.readNext(OJSONReader.BEGIN_OBJECT);
    database.getLevel1Cache().setEnable(false);
    database.getLevel2Cache().setEnable(false);
    database.setMVCC(false);
    database.setValidationEnabled(false);
    database.setStatus(STATUS.IMPORTING);
    for (    OIndex<?> index : database.getMetadata().getIndexManager().getIndexes()) {
      if (index.isAutomatic())       indexesToRebuild.add(index.getName().toLowerCase());
    }
    if (!merge)     removeDefaultNonSecurityClasses();
    String tag;
    while (jsonReader.hasNext() && jsonReader.lastChar() != '}') {
      tag=jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);
      if (tag.equals("info"))       importInfo();
 else       if (tag.equals("clusters"))       importClusters();
 else       if (tag.equals("schema"))       importSchema();
 else       if (tag.equals("records"))       importRecords();
 else       if (tag.equals("indexes"))       importIndexes();
 else       if (tag.equals("manualIndexes"))       importManualIndexes();
    }
    if (rebuildIndexes)     rebuildIndexes();
    database.getStorage().synch();
    database.setStatus(STATUS.OPEN);
    if (isDeleteRIDMapping())     removeExportImportRIDsMap();
    listener.onMessage("\n\nDatabase import completed in " + ((System.currentTimeMillis() - time)) + " ms");
  }
 catch (  Exception e) {
    System.err.println("Error on database import happened just before line " + jsonReader.getLineNumber() + ", column "+ jsonReader.getColumnNumber());
    e.printStackTrace();
    throw new ODatabaseExportException("Error on importing database '" + database.getName() + "' from file: "+ fileName,e);
  }
 finally {
    close();
  }
  return this;
}
