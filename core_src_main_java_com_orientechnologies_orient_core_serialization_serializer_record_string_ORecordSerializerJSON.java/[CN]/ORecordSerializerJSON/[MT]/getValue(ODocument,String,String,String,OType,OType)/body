{
  if (iFieldValue.equals("null"))   return null;
  if (iFieldName != null)   if (iRecord.getSchemaClass() != null) {
    final OProperty p=iRecord.getSchemaClass().getProperty(iFieldName);
    if (p != null) {
      iType=p.getType();
      iLinkedType=p.getLinkedType();
    }
  }
  if (iFieldValue.startsWith("{") && iFieldValue.endsWith("}")) {
    String[] fields=OStringParser.getWords(iFieldValueAsString,":,",true);
    if (fields == null || fields.length == 0)     return new HashMap<String,Object>();
    if (fields[0].equals("\"@type\""))     return fromString(iRecord.getDatabase(),iFieldValue,null);
 else {
      if (fields.length % 2 == 1)       throw new OSerializationException("Bad JSON format on map. Expected pairs of field:value but received '" + iFieldValueAsString + "'");
      final Map<String,Object> embeddedMap=new LinkedHashMap<String,Object>();
      for (int i=0; i < fields.length; i+=2) {
        iFieldName=fields[i];
        if (iFieldName.length() >= 2)         iFieldName=iFieldName.substring(1,iFieldName.length() - 1);
        iFieldValue=fields[i + 1];
        iFieldValueAsString=iFieldValue.length() >= 2 ? iFieldValue.substring(1,iFieldValue.length() - 1) : iFieldValue;
        embeddedMap.put(iFieldName,getValue(iRecord,null,iFieldValue,iFieldValueAsString,iLinkedType,null));
      }
      return embeddedMap;
    }
  }
 else   if (iFieldValue.startsWith("[") && iFieldValue.endsWith("]")) {
    final Collection<Object> embeddedCollection;
    if (iType == OType.LINKSET || iType == OType.EMBEDDEDSET)     embeddedCollection=new ORecordTrackedSet(iRecord);
 else     embeddedCollection=new ORecordTrackedList(iRecord);
    iFieldValue=iFieldValue.substring(1,iFieldValue.length() - 1);
    if (iFieldValue.length() > 0) {
      List<String> items=OStringSerializerHelper.smartSplit(iFieldValue,',');
      Object collectionItem;
      for (      String item : items) {
        iFieldValue=item.trim();
        iFieldValueAsString=iFieldValue.length() >= 2 ? iFieldValue.substring(1,iFieldValue.length() - 1) : iFieldValue;
        collectionItem=getValue(iRecord,null,iFieldValue,iFieldValueAsString,iLinkedType,null);
        if (collectionItem instanceof ODocument && iRecord instanceof ODocument)         ((ODocument)collectionItem).setOwner(iRecord);
        embeddedCollection.add(collectionItem);
      }
    }
    return embeddedCollection;
  }
  if (iType == null)   if (iFieldValue.charAt(0) != '\"') {
    if (iFieldValue.equalsIgnoreCase("false") || iFieldValue.equalsIgnoreCase("true"))     iType=OType.BOOLEAN;
 else     if (OStringSerializerHelper.contains(iFieldValue,'.'))     iType=OType.DOUBLE;
 else     iType=OType.LONG;
  }
 else   if (iFieldValueAsString.length() >= 4 && iFieldValueAsString.charAt(0) == '#')   iType=OType.LINK;
 else   if (iFieldValueAsString.startsWith("{") && iFieldValueAsString.endsWith("}"))   iType=OType.EMBEDDED;
 else {
    if (iFieldValueAsString.length() == DEF_DATE_FORMAT.length())     try {
      return dateFormat.parseObject(iFieldValueAsString);
    }
 catch (    Exception e) {
    }
    iType=OType.STRING;
  }
  if (iType != null) switch (iType) {
case STRING:
    return OStringSerializerHelper.unicode2java(iFieldValueAsString);
case LINK:
  final int pos=iFieldValueAsString.indexOf("@");
if (pos > -1) return new ODocument(iRecord.getDatabase(),iFieldValueAsString.substring(1,pos),new ORecordId(iFieldValueAsString.substring(pos + 1)));
 else return new ORecordId(iFieldValueAsString.substring(1));
case EMBEDDED:
return fromString(iRecord.getDatabase(),iFieldValueAsString);
case DATE:
try {
return dateFormat.parseObject(iFieldValueAsString);
}
 catch (ParseException e) {
throw new OSerializationException("Unable to unmarshall date: " + iFieldValueAsString,e);
}
default :
return OStringSerializerHelper.fieldTypeFromStream(iRecord,iType,iFieldValue);
}
return iFieldValueAsString;
}
