{
  long filePosition=position.longValue() * RECORD_SIZE;
  acquireSharedLock();
  try {
    if (position.compareTo(getLastPosition()) > 0)     return OClusterPosition.INVALID_POSITION;
    byte recordType;
    do {
      filePosition-=RECORD_SIZE;
      final long[] pos=fileSegment.getRelativePosition(filePosition);
      final OFile f=fileSegment.files[(int)pos[0]];
      long p=pos[1] + RECORD_TYPE_OFFSET;
      recordType=f.readByte(p);
    }
 while (recordType == RECORD_WAS_DELETED && position.compareTo(getFirstPosition()) >= 0);
    if (recordType == RECORD_WAS_DELETED) {
      return OClusterPosition.INVALID_POSITION;
    }
 else {
      return OClusterPositionFactory.INSTANCE.valueOf(filePosition / RECORD_SIZE);
    }
  }
  finally {
    releaseSharedLock();
  }
}
