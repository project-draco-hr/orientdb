{
  if (!parserOptionalKeyword(KEYWORD_SELECT))   return -1;
  int upperBound=OStringSerializerHelper.getLowerIndexOf(parserTextUpperCase,parserGetCurrentPosition(),KEYWORD_FROM_2FIND,KEYWORD_LET_2FIND);
  if (upperBound == -1)   upperBound=parserText.length();
  Object projectionValue;
  final String projectionString=parserText.substring(parserGetCurrentPosition(),upperBound).trim();
  if (projectionString.length() > 0 && !projectionString.equals("*")) {
    projections=new LinkedHashMap<String,Object>();
    final List<String> items=OStringSerializerHelper.smartSplit(projectionString,',');
    String fieldName;
    int beginPos;
    int endPos;
    for (    String projection : items) {
      projection=projection.trim();
      if (projections == null)       throw new OCommandSQLParsingException("Projection not allowed with FLATTEN() operator");
      fieldName=null;
      endPos=projection.toUpperCase(Locale.ENGLISH).indexOf(KEYWORD_AS);
      if (endPos > -1) {
        fieldName=projection.substring(endPos + KEYWORD_AS.length()).trim();
        projection=projection.substring(0,endPos).trim();
        if (projections.containsKey(fieldName))         throw new OCommandSQLParsingException("Field '" + fieldName + "' is duplicated in current SELECT, choose a different name");
      }
 else {
        beginPos=projection.charAt(0) == '@' ? 1 : 0;
        endPos=extractProjectionNameSubstringEndPosition(projection);
        fieldName=endPos > -1 ? projection.substring(beginPos,endPos) : projection.substring(beginPos);
        fieldName=OStringSerializerHelper.getStringContent(fieldName);
        for (int fieldIndex=2; projections.containsKey(fieldName); ++fieldIndex)         fieldName+=fieldIndex;
      }
      if (projection.toUpperCase(Locale.ENGLISH).startsWith("FLATTEN(")) {
        List<String> pars=OStringSerializerHelper.getParameters(projection);
        if (pars.size() != 1)         throw new OCommandSQLParsingException("FLATTEN operator expects the field name as parameter. Example FLATTEN( out )");
        flattenTarget=OSQLHelper.parseValue(this,pars.get(0).trim(),context);
        projections=null;
        if (!anyFunctionAggregates && flattenTarget instanceof OSQLFunctionRuntime && ((OSQLFunctionRuntime)flattenTarget).aggregateResults())         anyFunctionAggregates=true;
        continue;
      }
      projectionValue=OSQLHelper.parseValue(this,projection,context);
      projections.put(fieldName,projectionValue);
      if (!anyFunctionAggregates && projectionValue instanceof OSQLFunctionRuntime && ((OSQLFunctionRuntime)projectionValue).aggregateResults())       anyFunctionAggregates=true;
    }
  }
  if (upperBound < parserText.length() - 1)   parserSetCurrentPosition(upperBound);
 else   parserSetEndOfText();
  return parserGetCurrentPosition();
}
