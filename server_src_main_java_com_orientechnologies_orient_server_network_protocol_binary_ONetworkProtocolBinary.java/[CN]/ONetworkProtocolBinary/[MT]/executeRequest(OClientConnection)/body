{
  try {
switch (requestType) {
case OChannelBinaryProtocol.REQUEST_SHUTDOWN:
      shutdownConnection(connection);
    break;
case OChannelBinaryProtocol.REQUEST_CONNECT:
  connect(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_LIST:
listDatabases(connection);
break;
case OChannelBinaryProtocol.REQUEST_SERVER_INFO:
serverInfo(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_OPEN:
openDatabase(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_REOPEN:
reopenDatabase(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_RELOAD:
reloadDatabase(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_CREATE:
createDatabase(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_CLOSE:
closeDatabase(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_EXIST:
existsDatabase(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_DROP:
dropDatabase(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_SIZE:
sizeDatabase(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_COUNTRECORDS:
countDatabaseRecords(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_COPY:
copyDatabase(connection);
break;
case OChannelBinaryProtocol.REQUEST_REPLICATION:
replicationDatabase(connection);
break;
case OChannelBinaryProtocol.REQUEST_CLUSTER:
distributedCluster(connection);
break;
case OChannelBinaryProtocol.REQUEST_DATACLUSTER_COUNT:
countClusters(connection);
break;
case OChannelBinaryProtocol.REQUEST_DATACLUSTER_DATARANGE:
rangeCluster(connection);
break;
case OChannelBinaryProtocol.REQUEST_DATACLUSTER_ADD:
addCluster(connection);
break;
case OChannelBinaryProtocol.REQUEST_DATACLUSTER_DROP:
removeCluster(connection);
break;
case OChannelBinaryProtocol.REQUEST_RECORD_METADATA:
readRecordMetadata(connection);
break;
case OChannelBinaryProtocol.REQUEST_RECORD_LOAD:
readRecord(connection);
break;
case OChannelBinaryProtocol.REQUEST_RECORD_LOAD_IF_VERSION_NOT_LATEST:
readRecordIfVersionIsNotLatest(connection);
break;
case OChannelBinaryProtocol.REQUEST_RECORD_CREATE:
createRecord(connection);
break;
case OChannelBinaryProtocol.REQUEST_RECORD_UPDATE:
updateRecord(connection);
break;
case OChannelBinaryProtocol.REQUEST_RECORD_DELETE:
deleteRecord(connection);
break;
case OChannelBinaryProtocol.REQUEST_RECORD_HIDE:
hideRecord(connection);
break;
case OChannelBinaryProtocol.REQUEST_POSITIONS_HIGHER:
higherPositions(connection);
break;
case OChannelBinaryProtocol.REQUEST_POSITIONS_CEILING:
ceilingPositions(connection);
break;
case OChannelBinaryProtocol.REQUEST_POSITIONS_LOWER:
lowerPositions(connection);
break;
case OChannelBinaryProtocol.REQUEST_POSITIONS_FLOOR:
floorPositions(connection);
break;
case OChannelBinaryProtocol.REQUEST_COUNT:
throw new UnsupportedOperationException("Operation OChannelBinaryProtocol.REQUEST_COUNT has been deprecated");
case OChannelBinaryProtocol.REQUEST_COMMAND:
command(connection);
break;
case OChannelBinaryProtocol.REQUEST_TX_COMMIT:
commit(connection);
break;
case OChannelBinaryProtocol.REQUEST_CONFIG_GET:
configGet(connection);
break;
case OChannelBinaryProtocol.REQUEST_CONFIG_SET:
configSet(connection);
break;
case OChannelBinaryProtocol.REQUEST_CONFIG_LIST:
configList(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_FREEZE:
freezeDatabase(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_RELEASE:
releaseDatabase(connection);
break;
case OChannelBinaryProtocol.REQUEST_RECORD_CLEAN_OUT:
cleanOutRecord(connection);
break;
case OChannelBinaryProtocol.REQUEST_CREATE_SBTREE_BONSAI:
createSBTreeBonsai(connection);
break;
case OChannelBinaryProtocol.REQUEST_SBTREE_BONSAI_GET:
sbTreeBonsaiGet(connection);
break;
case OChannelBinaryProtocol.REQUEST_SBTREE_BONSAI_FIRST_KEY:
sbTreeBonsaiFirstKey(connection);
break;
case OChannelBinaryProtocol.REQUEST_SBTREE_BONSAI_GET_ENTRIES_MAJOR:
sbTreeBonsaiGetEntriesMajor(connection);
break;
case OChannelBinaryProtocol.REQUEST_RIDBAG_GET_SIZE:
ridBagSize(connection);
break;
case OChannelBinaryProtocol.REQUEST_INCREMENTAL_BACKUP:
incrementalBackup(connection);
break;
case OChannelBinaryProtocol.DISTRIBUTED_REQUEST:
executeDistributedRequest(connection);
break;
case OChannelBinaryProtocol.DISTRIBUTED_RESPONSE:
executeDistributedResponse(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_IMPORT:
importDatabase(connection);
break;
default :
setDataCommandInfo(connection,"Command not supported");
return false;
}
return true;
}
 catch (RuntimeException e) {
if (connection != null && connection.getDatabase() != null) {
final OSBTreeCollectionManager collectionManager=connection.getDatabase().getSbTreeCollectionManager();
if (collectionManager != null) collectionManager.clearChangedIds();
}
throw e;
}
}
