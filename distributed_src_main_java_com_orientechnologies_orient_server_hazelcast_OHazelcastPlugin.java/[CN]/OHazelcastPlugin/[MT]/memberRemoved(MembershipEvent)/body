{
  if (hazelcastInstance == null || !hazelcastInstance.getLifecycleService().isRunning())   return;
  try {
    updateLastClusterChange();
    final Member member=iEvent.getMember();
    final String nodeLeftName=getNodeName(member);
    if (nodeLeftName != null) {
      final int nodeLeftId=getNodeIdByName(nodeLeftName);
      closeRemoteServer(nodeLeftName);
      for (      ODistributedLifecycleListener l : listeners)       try {
        l.onNodeLeft(nodeLeftName);
      }
 catch (      Exception e) {
      }
      if (messageService != null)       for (      String dbName : messageService.getDatabases())       messageService.getDatabase(dbName).handleUnreachableNode(nodeLeftId);
      final HashSet<String> entriesToRemove=new HashSet<String>();
      final Map<String,Object> map=getConfigurationMap();
      for (Iterator<String> it=map.keySet().iterator(); it.hasNext(); ) {
        final String n=it.next();
        if (n.startsWith(CONFIG_DBSTATUS_PREFIX)) {
          final String part=n.substring(CONFIG_DBSTATUS_PREFIX.length());
          final int pos=part.indexOf(".");
          if (pos > -1) {
            if (part.substring(0,pos).equals(nodeLeftName)) {
              ODistributedServerLog.debug(this,nodeName,null,DIRECTION.NONE,"removing dbstatus for the node %s that just left: %s",nodeLeftName,n);
              entriesToRemove.add(n);
            }
          }
        }
      }
      for (      String entry : entriesToRemove) {
        map.remove(entry);
      }
      activeNodes.remove(nodeLeftName);
      ODistributedServerLog.warn(this,nodeLeftName,null,DIRECTION.NONE,"node removed id=%s name=%s",member,nodeLeftName);
      if (nodeLeftName.startsWith("ext:")) {
        final List<String> registeredNodes=getRegisteredNodes();
        ODistributedServerLog.error(this,nodeName,null,DIRECTION.NONE,"removed node id=%s name=%s has not being recognized. Remove the node manually (registeredNodes=%s)",member,nodeLeftName,registeredNodes);
      }
      reassignOwnClusters(nodeLeftName);
      if (messageService != null)       messageService.handleUnreachableNode(nodeLeftName);
    }
    serverInstance.getClientConnectionManager().pushDistribCfg2Clients(getClusterConfiguration());
  }
 catch (  HazelcastInstanceNotActiveException e) {
    OLogManager.instance().error(this,"Hazelcast is not running");
  }
catch (  RetryableHazelcastException e) {
    OLogManager.instance().error(this,"Hazelcast is not running");
  }
}
