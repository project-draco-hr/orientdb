{
  List<Thread> threads=new ArrayList<Thread>();
  int threadCount=8;
  final int recordsPerThread=20;
  long records=threadCount * recordsPerThread;
  try {
    for (int t=0; t < threadCount; t++) {
      Thread thread=new Thread(){
        @Override public void run(){
          for (int i=0; i < recordsPerThread; i++) {
            OrientGraph graph=graphFactory.getTx();
            try {
              Vertex v1=graph.addVertex(null);
              v1.setProperty("name","b");
              graph.commit();
            }
 catch (            Exception ex) {
              try {
                graph.rollback();
              }
 catch (              Exception ex1) {
                System.err.println("rollback exception! " + ex);
              }
              System.err.println("operation exception! " + ex);
              ex.printStackTrace(System.err);
            }
 finally {
              graph.shutdown();
            }
          }
        }
      }
;
      threads.add(thread);
      thread.start();
    }
  }
 catch (  Exception ex) {
    System.err.println("instance exception! " + ex);
    System.out.println("instance exception! " + ex);
    ex.printStackTrace(System.err);
  }
 finally {
    for (    Thread t : threads) {
      t.join();
    }
  }
  OrientGraph graph=graphFactory.getTx();
  long actualRecords=graph.countVertices();
  if (actualRecords != records) {
    System.out.println("Count of records on server does not equal to expected count of records. Try to reproduce it next 10 times");
    int reproduced=0;
    while (true) {
      if (graph.countVertices() != records)       reproduced++;
 else       break;
      if (reproduced == 10) {
        System.out.println("Test goes in forever loop to investigate reason of this error.");
        while (true)         ;
      }
    }
    Assert.fail();
  }
  graph.shutdown();
}
