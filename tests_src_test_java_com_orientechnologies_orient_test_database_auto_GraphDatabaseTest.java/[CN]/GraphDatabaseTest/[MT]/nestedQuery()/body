{
  if (url.startsWith("remote:"))   return;
  Vertex countryVertex1=database.addVertex(null,"name","UK","area","Europe","code","2");
  Vertex cityVertex1=database.addVertex(null,"name","leicester","lat","52.64640","long","-1.13159");
  Vertex cityVertex2=database.addVertex(null,"name","manchester","lat","53.47497","long","-2.25769");
  database.addEdge(null,countryVertex1,cityVertex1,"owns");
  database.addEdge(null,countryVertex1,cityVertex2,"owns");
  database.commit();
  String subquery="select out('owns') from V where name = 'UK'";
  List<OIdentifiable> result=database.getRawGraph().query(new OSQLSynchQuery<ODocument>(subquery));
  Assert.assertEquals(result.size(),1);
  Assert.assertEquals(((Collection)((ODocument)result.get(0)).field("out")).size(),2);
  subquery="select expand(out('owns')) from V where name = 'UK'";
  result=database.getRawGraph().query(new OSQLSynchQuery<ODocument>(subquery));
  Assert.assertEquals(result.size(),2);
  for (int i=0; i < result.size(); i++) {
    System.out.println("uno: " + result.get(i));
    Assert.assertTrue(((ODocument)result.get(i).getRecord()).containsField("lat"));
  }
  String query="select name, lat, long, distance(lat,long,51.5,0.08) as distance from (select expand(out('owns')) from V where name = 'UK') order by distance";
  result=database.getRawGraph().query(new OSQLSynchQuery<ODocument>(query));
  Assert.assertEquals(result.size(),2);
  for (int i=0; i < result.size(); i++) {
    System.out.println("dos: " + result.get(i));
    Assert.assertTrue(((ODocument)result.get(i).getRecord()).containsField("lat"));
    Assert.assertTrue(((ODocument)result.get(i).getRecord()).containsField("distance"));
  }
}
