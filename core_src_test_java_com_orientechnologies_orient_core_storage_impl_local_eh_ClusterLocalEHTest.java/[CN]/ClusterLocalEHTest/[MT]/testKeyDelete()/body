{
  for (int i=0; i < KEYS_COUNT; i++) {
    final ONodeId nodeId=ONodeId.valueOf(i).shiftLeft(128);
    final OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionNodeId(nodeId));
    extendibleHashingCluster.addPhysicalPosition(position);
  }
  for (int i=0; i < KEYS_COUNT; i++) {
    if (i % 3 == 0) {
      final ONodeId nodeId=ONodeId.valueOf(i).shiftLeft(128);
      final OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionNodeId(nodeId));
      extendibleHashingCluster.removePhysicalPosition(position.clusterPosition);
    }
  }
  for (int i=0; i < KEYS_COUNT; i++) {
    if (i % 3 == 0) {
      final ONodeId nodeId=ONodeId.valueOf(i).shiftLeft(128);
      final OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionNodeId(nodeId));
      Assert.assertNull(extendibleHashingCluster.getPhysicalPosition(position));
    }
 else {
      final ONodeId nodeId=ONodeId.valueOf(i).shiftLeft(128);
      final OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionNodeId(nodeId));
      Assert.assertNotNull(extendibleHashingCluster.getPhysicalPosition(position));
    }
  }
}
