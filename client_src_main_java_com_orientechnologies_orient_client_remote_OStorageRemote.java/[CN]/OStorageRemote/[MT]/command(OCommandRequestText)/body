{
  checkConnection();
  if (!(iCommand instanceof OSerializableStream))   throw new OCommandExecutionException("Can't serialize the command to being executed to the server side.");
  OSerializableStream command=iCommand;
  Object result=null;
  do {
    boolean locked=lock.acquireExclusiveLock();
    OStorageRemoteThreadLocal.INSTANCE.set(Boolean.TRUE);
    try {
      final OCommandRequestText aquery=(OCommandRequestText)iCommand;
      final boolean asynch=iCommand instanceof OCommandRequestAsynch;
      final int reqId;
      try {
        reqId=beginRequest(OChannelBinaryProtocol.REQUEST_COMMAND);
        network.writeByte((byte)(asynch ? 'a' : 's'));
        network.writeBytes(OStreamSerializerAnyStreamable.INSTANCE.toStream(iCommand.getDatabase(),command));
      }
  finally {
        endRequest();
      }
      try {
        beginResponse(reqId);
        if (asynch) {
          byte status;
          while ((status=network.readByte()) > 0) {
            ORecordSchemaAware<?> record=(ORecordSchemaAware<?>)readRecordFromNetwork(iCommand.getDatabase());
            if (record == null)             break;
switch (status) {
case 1:
              try {
                if (!aquery.getResultListener().result(record)) {
                  while (network.in.available() > 0)                   network.in.read();
                  break;
                }
              }
 catch (              Throwable t) {
                t.printStackTrace();
              }
            break;
case 2:
          cache.pushRecord(record.getIdentity().toString(),new ORawBuffer(record.toStream(),record.getVersion(),record.getRecordType()));
      }
    }
  }
 else {
    final byte type=network.readByte();
switch (type) {
case 'n':
      result=null;
    break;
case 'r':
  result=readRecordFromNetwork(iCommand.getDatabase());
break;
case 'a':
result=OStreamSerializerAnyRuntime.INSTANCE.fromStream(iCommand.getDatabase(),network.readBytes());
break;
}
}
break;
}
  finally {
endResponse();
}
}
 catch (Exception e) {
handleException("Error on executing command: " + iCommand,e);
}
 finally {
OStorageRemoteThreadLocal.INSTANCE.set(Boolean.FALSE);
lock.releaseExclusiveLock(locked);
}
}
 while (true);
return result;
}
