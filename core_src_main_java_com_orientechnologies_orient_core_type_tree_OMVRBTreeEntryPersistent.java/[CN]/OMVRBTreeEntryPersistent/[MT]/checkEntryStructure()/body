{
  if (!tree.isRuntimeCheckEnabled())   return;
  if (parentRid == null)   OLogManager.instance().error(this,"checkEntryStructure: Node %s has parentRid null!\n",this);
  if (leftRid == null)   OLogManager.instance().error(this,"checkEntryStructure: Node %s has leftRid null!\n",this);
  if (rightRid == null)   OLogManager.instance().error(this,"checkEntryStructure: Node %s has rightRid null!\n",this);
  if (this == left || record.getIdentity().isValid() && record.getIdentity().equals(leftRid))   OLogManager.instance().error(this,"checkEntryStructure: Node %s has left that points to itself!\n",this);
  if (this == right || record.getIdentity().isValid() && record.getIdentity().equals(rightRid))   OLogManager.instance().error(this,"checkEntryStructure: Node %s has right that points to itself!\n",this);
  if (left != null && left == right)   OLogManager.instance().error(this,"checkEntryStructure: Node %s has left and right equals!\n",this);
  if (left != null) {
    if (!left.record.getIdentity().equals(leftRid))     OLogManager.instance().error(this,"checkEntryStructure: Wrong left node loaded: " + leftRid);
  }
  if (right != null) {
    if (!right.record.getIdentity().equals(rightRid))     OLogManager.instance().error(this,"checkEntryStructure: Wrong right node loaded: " + rightRid);
  }
}
