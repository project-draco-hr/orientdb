{
  if (iRecord == null)   throw new OSerializationException("Expected a record but was null");
  if (!(iRecord instanceof ODocument))   throw new OSerializationException("Cannot marshall a record of type " + iRecord.getClass().getSimpleName());
  final ODocument record=(ODocument)iRecord;
  if (iMarshalledRecords != null)   if (iMarshalledRecords.contains(record)) {
    return iOutput;
  }
 else   iMarshalledRecords.add(record);
  if (!iOnlyDelta && record.getSchemaClass() != null) {
    iOutput.append(record.getSchemaClass().getStreamableName());
    iOutput.append(OStringSerializerHelper.CLASS_SEPARATOR);
  }
  OProperty prop;
  OType type;
  OClass linkedClass;
  OType linkedType;
  String fieldClassName;
  int i=0;
  final String[] fieldNames=iOnlyDelta && record.isTrackingChanges() ? record.getDirtyFields() : record.fieldNames();
  if (iObjHandler == null && ODatabaseRecordThreadLocal.INSTANCE.isDefined())   iObjHandler=ODatabaseRecordThreadLocal.INSTANCE.get();
  for (  String fieldName : fieldNames) {
    Object fieldValue=record.rawField(fieldName);
    if (i > 0)     iOutput.append(OStringSerializerHelper.RECORD_SEPARATOR);
    prop=record.getSchemaClass() != null ? record.getSchemaClass().getProperty(fieldName) : null;
    fieldClassName=getClassName(fieldValue);
    type=record.fieldType(fieldName);
    linkedClass=null;
    linkedType=null;
    if (prop != null) {
      type=prop.getType();
      linkedClass=prop.getLinkedClass();
      linkedType=prop.getLinkedType();
    }
 else     if (fieldValue != null) {
      if (type == null) {
        if (fieldValue.getClass() == byte[].class)         type=OType.BINARY;
 else         if (ODatabaseRecordThreadLocal.INSTANCE.isDefined() && fieldValue instanceof ORecord<?>) {
          if (type == null)           if (fieldValue instanceof ODocument && ((ODocument)fieldValue).hasOwners())           type=OType.EMBEDDED;
 else           type=OType.LINK;
          linkedClass=getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(),fieldClassName);
        }
 else         if (fieldValue instanceof ORID)         type=OType.LINK;
 else         if (ODatabaseRecordThreadLocal.INSTANCE.isDefined() && ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject)ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner()).getEntityManager().getEntityClass(fieldClassName) != null) {
          type=OType.LINK;
          linkedClass=getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(),fieldClassName);
        }
 else         if (fieldValue instanceof Date)         type=OType.DATETIME;
 else         if (fieldValue instanceof String)         type=OType.STRING;
 else         if (fieldValue instanceof Integer || fieldValue instanceof BigInteger)         type=OType.INTEGER;
 else         if (fieldValue instanceof Long)         type=OType.LONG;
 else         if (fieldValue instanceof Float)         type=OType.FLOAT;
 else         if (fieldValue instanceof Short)         type=OType.SHORT;
 else         if (fieldValue instanceof Byte)         type=OType.BYTE;
 else         if (fieldValue instanceof Double)         type=OType.DOUBLE;
 else         if (fieldValue instanceof BigDecimal)         type=OType.DECIMAL;
      }
      if (fieldValue instanceof OMultiCollectionIterator<?>) {
        type=((OMultiCollectionIterator<?>)fieldValue).isEmbedded() ? OType.EMBEDDEDLIST : OType.LINKLIST;
        linkedType=((OMultiCollectionIterator<?>)fieldValue).isEmbedded() ? OType.EMBEDDED : OType.LINK;
      }
 else       if (fieldValue instanceof Collection<?> || fieldValue.getClass().isArray()) {
        final int size=OMultiValue.getSize(fieldValue);
        Boolean autoConvertLinks=null;
        if (fieldValue instanceof ORecordLazyMultiValue) {
          autoConvertLinks=((ORecordLazyMultiValue)fieldValue).isAutoConvertToRecord();
          if (autoConvertLinks)           ((ORecordLazyMultiValue)fieldValue).setAutoConvertToRecord(false);
        }
        if (autoDetectCollectionType)         if (size > 0) {
          final Object firstValue=OMultiValue.getFirstValue(fieldValue);
          if (firstValue != null) {
            if (firstValue instanceof ORID) {
              linkedClass=null;
              linkedType=OType.LINK;
              if (fieldValue instanceof Set<?>)               type=OType.LINKSET;
 else               type=OType.LINKLIST;
            }
 else             if (ODatabaseRecordThreadLocal.INSTANCE.isDefined() && (firstValue instanceof ODocument && !((ODocument)firstValue).isEmbedded()) && (firstValue instanceof ORecord<?> || (ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject)ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner()).getEntityManager().getEntityClass(getClassName(firstValue)) != null))) {
              linkedClass=getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(),getClassName(firstValue));
              if (type == null) {
                linkedType=OType.LINK;
                if (fieldValue instanceof Set<?>)                 type=OType.LINKSET;
 else                 type=OType.LINKLIST;
              }
 else               linkedType=OType.EMBEDDED;
            }
 else {
              if (firstValue instanceof ODocument && ((((ODocument)firstValue).hasOwners()) || type == OType.EMBEDDEDSET || type == OType.EMBEDDEDLIST || type == OType.EMBEDDEDMAP))               linkedType=OType.EMBEDDED;
 else               if (firstValue instanceof Enum<?>)               linkedType=OType.STRING;
 else {
                linkedType=OType.getTypeByClass(firstValue.getClass());
                if (linkedType != OType.LINK)                 linkedType=null;
              }
              if (type == null)               if (fieldValue instanceof OMVRBTreeRIDSet)               type=OType.LINKSET;
 else               if (fieldValue instanceof Set<?>)               type=OType.EMBEDDEDSET;
 else               type=OType.EMBEDDEDLIST;
            }
          }
        }
 else         if (type == null)         type=OType.EMBEDDEDLIST;
        if (fieldValue instanceof ORecordLazyMultiValue && autoConvertLinks) {
          ((ORecordLazyMultiValue)fieldValue).setAutoConvertToRecord(true);
        }
      }
 else       if (fieldValue instanceof Map<?,?> && type == null) {
        final int size=OMultiValue.getSize(fieldValue);
        Boolean autoConvertLinks=null;
        if (fieldValue instanceof ORecordLazyMap) {
          autoConvertLinks=((ORecordLazyMap)fieldValue).isAutoConvertToRecord();
          if (autoConvertLinks)           ((ORecordLazyMap)fieldValue).setAutoConvertToRecord(false);
        }
        if (size > 0) {
          final Object firstValue=OMultiValue.getFirstValue(fieldValue);
          if (firstValue != null) {
            if (ODatabaseRecordThreadLocal.INSTANCE.isDefined() && (firstValue instanceof ODocument && !((ODocument)firstValue).isEmbedded()) && (firstValue instanceof ORecord<?> || (ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject)ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner()).getEntityManager().getEntityClass(getClassName(firstValue)) != null))) {
              linkedClass=getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(),getClassName(firstValue));
              linkedType=OType.LINK;
              type=OType.LINKMAP;
            }
          }
        }
        if (type == null)         type=OType.EMBEDDEDMAP;
        if (fieldValue instanceof ORecordLazyMap && autoConvertLinks)         ((ORecordLazyMap)fieldValue).setAutoConvertToRecord(true);
      }
    }
    if (type == OType.TRANSIENT)     continue;
    if (type == null)     type=OType.EMBEDDED;
    iOutput.append(fieldName);
    iOutput.append(FIELD_VALUE_SEPARATOR);
    fieldToStream((ODocument)iRecord,iOutput,iObjHandler,type,linkedClass,linkedType,fieldName,fieldValue,iMarshalledRecords,true);
    i++;
  }
  if (iMarshalledRecords != null)   iMarshalledRecords.remove(record);
  final float overSize;
  if (record.getSchemaClass() != null)   overSize=record.getSchemaClass().getOverSize();
 else   overSize=0;
  final int newSize;
  if (record.hasOwners())   newSize=iOutput.length();
 else   if (record.getSize() == iOutput.length())   newSize=record.getSize();
 else   if (record.getSize() > iOutput.length() && !OGlobalConfiguration.RECORD_DOWNSIZING_ENABLED.getValueAsBoolean()) {
    newSize=record.getSize();
  }
 else   if (overSize > 0) {
    newSize=(int)(iOutput.length() * overSize);
  }
 else   newSize=iOutput.length();
  if (newSize > iOutput.length()) {
    iOutput.ensureCapacity(newSize);
    for (int b=iOutput.length(); b < newSize; ++b)     iOutput.append(' ');
  }
  return iOutput;
}
