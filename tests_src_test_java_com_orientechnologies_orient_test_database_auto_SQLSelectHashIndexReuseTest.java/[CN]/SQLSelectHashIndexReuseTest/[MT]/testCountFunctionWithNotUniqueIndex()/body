{
  long oldIndexUsage=profiler.getCounter("db.demo.query.indexUsed");
  long oldcompositeIndexUsed=profiler.getCounter("db.demo.query.compositeIndexUsed");
  OClass klazz=database.getMetadata().getSchema().getOrCreateClass("CountFunctionWithNotUniqueHashIndex");
  if (!klazz.existsProperty("a")) {
    klazz.createProperty("a",OType.STRING);
    klazz.createIndex("CountFunctionWithNotUniqueHashIndex_A","NOTUNIQUE_HASH_INDEX","a");
  }
  ODocument doc=database.newInstance("CountFunctionWithNotUniqueHashIndex").field("a","a").field("b","b").save();
  ODocument result=(ODocument)database.query(new OSQLSynchQuery<ODocument>("select count(*) from CountFunctionWithNotUniqueHashIndex where a = 'a' and b = 'b'")).get(0);
  Assert.assertEquals(result.field("count",Long.class),1L);
  Assert.assertEquals(profiler.getCounter("db.demo.query.indexUsed"),oldIndexUsage + 1);
  Assert.assertEquals(profiler.getCounter("db.demo.query.compositeIndexUsed"),oldcompositeIndexUsed);
  doc.delete();
}
