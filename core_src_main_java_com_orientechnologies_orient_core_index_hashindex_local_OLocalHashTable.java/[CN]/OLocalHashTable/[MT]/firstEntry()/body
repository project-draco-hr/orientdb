{
  atomicOperationsManager.acquireReadLock(this);
  try {
    acquireSharedLock();
    try {
      BucketPath bucketPath=getBucket(HASH_CODE_MIN_VALUE);
      long bucketPointer=directory.getNodePointer(bucketPath.nodeIndex,bucketPath.itemIndex);
      int fileLevel=getFileLevel(bucketPointer);
      long pageIndex=getPageIndex(bucketPointer);
      OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
      OCacheEntry cacheEntry=loadPageEntry(pageIndex,fileLevel,atomicOperation);
      try {
        OHashIndexBucket<K,V> bucket=new OHashIndexBucket<K,V>(cacheEntry,keySerializer,valueSerializer,keyTypes,getChangesTree(atomicOperation,cacheEntry));
        while (bucket.size() == 0) {
          bucketPath=nextBucketToFind(bucketPath,bucket.getDepth());
          if (bucketPath == null)           return null;
          releasePage(atomicOperation,cacheEntry,diskCache);
          final long nextPointer=directory.getNodePointer(bucketPath.nodeIndex,bucketPath.itemIndex + bucketPath.hashMapOffset);
          fileLevel=getFileLevel(nextPointer);
          pageIndex=getPageIndex(nextPointer);
          cacheEntry=loadPageEntry(pageIndex,fileLevel,atomicOperation);
          bucket=new OHashIndexBucket<K,V>(cacheEntry,keySerializer,valueSerializer,keyTypes,getChangesTree(atomicOperation,cacheEntry));
        }
        return bucket.getEntry(0);
      }
  finally {
        releasePage(atomicOperation,cacheEntry,diskCache);
      }
    }
  finally {
      releaseSharedLock();
    }
  }
 catch (  IOException ioe) {
    throw new OIndexException("Exception during data read",ioe);
  }
 finally {
    atomicOperationsManager.releaseReadLock(this);
  }
}
