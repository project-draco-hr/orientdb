{
  if (!parserOptionalKeyword(KEYWORD_SELECT))   return -1;
  int upperBound=OStringSerializerHelper.getLowerIndexOfKeywords(parserTextUpperCase,parserGetCurrentPosition(),KEYWORD_FROM,KEYWORD_LET);
  if (upperBound == -1)   upperBound=parserText.length();
  int lastRealPositionProjection=-1;
  int currPos=parserGetCurrentPosition();
  if (currPos == -1)   return -1;
  final String projectionString=parserText.substring(currPos,upperBound);
  if (projectionString.trim().length() > 0) {
    projections=new LinkedHashMap<String,Object>();
    projectionDefinition=new LinkedHashMap<String,String>();
    final List<String> items=OStringSerializerHelper.smartSplit(projectionString,',');
    int endPos;
    for (    String projectionItem : items) {
      String projection=OStringSerializerHelper.smartTrim(projectionItem.trim(),true,true);
      if (projectionDefinition == null)       throw new OCommandSQLParsingException("Projection not allowed with FLATTEN() and EXPAND() operators");
      final List<String> words=OStringSerializerHelper.smartSplit(projection,' ');
      String fieldName;
      if (words.size() > 1 && words.get(1).trim().equalsIgnoreCase(KEYWORD_AS)) {
        if (words.size() < 3)         throw new OCommandSQLParsingException("Found 'AS' without alias");
        fieldName=words.get(2).trim();
        if (projectionDefinition.containsKey(fieldName))         throw new OCommandSQLParsingException("Field '" + fieldName + "' is duplicated in current SELECT, choose a different name");
        projection=words.get(0).trim();
        if (words.size() > 3)         lastRealPositionProjection=projectionString.indexOf(words.get(3));
 else         lastRealPositionProjection+=projectionItem.length() + 1;
      }
 else {
        projection=words.get(0);
        fieldName=projection;
        lastRealPositionProjection=projectionString.indexOf(fieldName) + fieldName.length() + 1;
        if (fieldName.charAt(0) == '@')         fieldName=fieldName.substring(1);
        endPos=extractProjectionNameSubstringEndPosition(fieldName);
        if (endPos > -1)         fieldName=fieldName.substring(0,endPos);
        for (int fieldIndex=2; projectionDefinition.containsKey(fieldName); ++fieldIndex)         fieldName+=fieldIndex;
      }
      final String p=upperCase(projection);
      if (p.startsWith("FLATTEN(") || p.startsWith("EXPAND(")) {
        if (p.startsWith("FLATTEN("))         OLogManager.instance().debug(this,"FLATTEN() operator has been replaced by EXPAND()");
        List<String> pars=OStringSerializerHelper.getParameters(projection);
        if (pars.size() != 1)         throw new OCommandSQLParsingException("EXPAND/FLATTEN operators expects the field name as parameter. Example EXPAND( out )");
        expandTarget=OSQLHelper.parseValue(this,pars.get(0).trim(),context);
        projectionDefinition=null;
        projections=null;
        if (groupedResult == null && expandTarget instanceof OSQLFunctionRuntime && ((OSQLFunctionRuntime)expandTarget).aggregateResults())         groupedResult=new LinkedHashMap<Object,ORuntimeResult>();
        continue;
      }
      fieldName=OStringSerializerHelper.getStringContent(fieldName);
      projectionDefinition.put(fieldName,projection);
    }
    if (projectionDefinition != null && (projectionDefinition.size() > 1 || !projectionDefinition.values().iterator().next().equals("*"))) {
      projections=createProjectionFromDefinition();
      for (      Object p : projections.values()) {
        if (groupedResult == null && p instanceof OSQLFunctionRuntime && ((OSQLFunctionRuntime)p).aggregateResults()) {
          getProjectionGroup(null);
          break;
        }
      }
    }
 else {
      projectionDefinition=null;
      projections=null;
    }
  }
  if (upperBound < parserText.length() - 1)   parserSetCurrentPosition(upperBound);
 else   if (lastRealPositionProjection > -1)   parserMoveCurrentPosition(lastRealPositionProjection);
 else   parserSetEndOfText();
  return parserGetCurrentPosition();
}
