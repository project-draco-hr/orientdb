{
  long hashCode=hashCode(fileName,filePosition);
  int index=index(hashCode);
  LRUEntry lruEntry=entries[index];
  LRUEntry prevEntry=null;
  while (lruEntry != null && (lruEntry.hashCode != hashCode || !lruEntry.fileName.equals(fileName) || lruEntry.filePosition != filePosition)) {
    prevEntry=lruEntry;
    lruEntry=lruEntry.next;
  }
  if (lruEntry == null) {
    lruEntry=new LRUEntry();
    lruEntry.filePosition=filePosition;
    lruEntry.fileName=fileName;
    lruEntry.hashCode=hashCode;
    if (prevEntry == null)     entries[index]=lruEntry;
 else     prevEntry.next=lruEntry;
    size++;
  }
  lruEntry.dataPointer=dataPointer;
  lruEntry.isDirty=isDirty;
  LRUEntry before=lruEntry.before;
  LRUEntry after=lruEntry.after;
  if (before != null)   before.after=after;
  if (after != null)   after.before=before;
  if (head == null) {
    head=lruEntry;
    tail=lruEntry;
  }
 else {
    tail.after=lruEntry;
    lruEntry.before=tail;
    tail=lruEntry;
  }
  if (size >= nextThreshold)   rehash();
  return lruEntry;
}
