{
  this.manager=manager;
  this.responsesByRequestIds=new ConcurrentHashMap<Long,ODistributedResponseManager>();
  for (int i=0; i < responseTimeMetrics.length; ++i)   responseTimeMetrics[i]=-1;
  final String queueName=getResponseQueueName(manager.getLocalNodeName());
  nodeResponseQueue=getQueue(queueName);
  if (ODistributedServerLog.isDebugEnabled())   ODistributedServerLog.debug(this,getLocalNodeNameAndThread(),null,DIRECTION.NONE,"listening for incoming responses on queue: %s",queueName);
  checkForPendingMessages(nodeResponseQueue,queueName,false);
  asynchMessageManager=new TimerTask(){
    @Override public void run(){
      purgePendingMessages();
    }
  }
;
  responseThread=new Thread(new Runnable(){
    @Override public void run(){
      Thread.currentThread().setName("OrientDB Node Response " + queueName);
      while (!Thread.interrupted()) {
        String senderNode=null;
        ODistributedResponse message=null;
        try {
          message=nodeResponseQueue.take();
          if (message != null) {
            senderNode=message.getSenderNodeName();
            final long responseTime=dispatchResponseToThread(message);
            if (responseTime > -1)             collectMetric(responseTime);
          }
        }
 catch (        InterruptedException e) {
          Thread.interrupted();
          break;
        }
catch (        Throwable e) {
          ODistributedServerLog.error(this,manager.getLocalNodeName(),senderNode,DIRECTION.IN,"error on reading distributed response",e,message != null ? message.getPayload() : "-");
        }
      }
    }
  }
);
  responseThread.setDaemon(true);
  responseThread.start();
}
