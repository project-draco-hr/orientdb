{
  database=OObjectDatabasePool.global().acquire(url,"admin","admin");
  try {
    JavaSimpleArraysTestClass javaObj=database.newInstance(JavaSimpleArraysTestClass.class);
    Assert.assertEquals(javaObj.getText()[0],"initTest");
    String[] textArray=new String[10];
    EnumTest[] enumerationArray=new EnumTest[10];
    int[] intArray=new int[10];
    long[] longArray=new long[10];
    double[] doubleArray=new double[10];
    float[] floatArray=new float[10];
    byte[] byteArray=new byte[10];
    boolean[] booleanArray=new boolean[10];
    Date[] dateArray=new Date[10];
    Calendar cal=Calendar.getInstance();
    cal.set(Calendar.SECOND,0);
    cal.set(Calendar.MINUTE,0);
    cal.set(Calendar.MILLISECOND,0);
    cal.set(Calendar.HOUR_OF_DAY,0);
    cal.set(Calendar.YEAR,1900);
    cal.set(Calendar.MONTH,Calendar.JANUARY);
    for (int i=0; i < 10; i++) {
      textArray[i]=i + "";
      intArray[i]=i;
      longArray[i]=(long)i;
      doubleArray[i]=(double)i;
      floatArray[i]=(float)i;
      byteArray[i]=(byte)i;
      booleanArray[i]=(i % 2 == 0);
      enumerationArray[i]=(i % 2 == 0) ? EnumTest.ENUM2 : ((i % 3 == 0) ? EnumTest.ENUM3 : EnumTest.ENUM1);
      cal.set(Calendar.DAY_OF_MONTH,(i + 1));
      dateArray[i]=cal.getTime();
    }
    javaObj.setText(textArray);
    javaObj.setByteSimple(byteArray);
    javaObj.setDateField(dateArray);
    javaObj.setDoubleSimple(doubleArray);
    javaObj.setEnumeration(enumerationArray);
    javaObj.setFlagSimple(booleanArray);
    javaObj.setFloatSimple(floatArray);
    javaObj.setLongSimple(longArray);
    javaObj.setNumberSimple(intArray);
    ODocument doc=database.getRecordByUserObject(javaObj,false);
    Assert.assertNotNull(doc.field("text"));
    Assert.assertNotNull(doc.field("enumeration"));
    Assert.assertNotNull(doc.field("numberSimple"));
    Assert.assertNotNull(doc.field("longSimple"));
    Assert.assertNotNull(doc.field("doubleSimple"));
    Assert.assertNotNull(doc.field("floatSimple"));
    Assert.assertNotNull(doc.field("byteSimple"));
    Assert.assertNotNull(doc.field("flagSimple"));
    Assert.assertNotNull(doc.field("dateField"));
    JavaSimpleArraysTestClass savedJavaObj=database.save(javaObj);
    ORID id=database.getIdentity(savedJavaObj);
    database.close();
    database=OObjectDatabasePool.global().acquire(url,"admin","admin");
    JavaSimpleArraysTestClass loadedJavaObj=database.load(id);
    doc=database.getRecordByUserObject(loadedJavaObj,false);
    Assert.assertNotNull(doc.field("text"));
    Assert.assertNotNull(doc.field("enumeration"));
    Assert.assertNotNull(doc.field("numberSimple"));
    Assert.assertNotNull(doc.field("longSimple"));
    Assert.assertNotNull(doc.field("doubleSimple"));
    Assert.assertNotNull(doc.field("floatSimple"));
    Assert.assertNotNull(doc.field("byteSimple"));
    Assert.assertNotNull(doc.field("flagSimple"));
    Assert.assertNotNull(doc.field("dateField"));
    Assert.assertEquals(loadedJavaObj.getText().length,10);
    Assert.assertEquals(loadedJavaObj.getNumberSimple().length,10);
    Assert.assertEquals(loadedJavaObj.getLongSimple().length,10);
    Assert.assertEquals(loadedJavaObj.getDoubleSimple().length,10);
    Assert.assertEquals(loadedJavaObj.getFloatSimple().length,10);
    Assert.assertEquals(loadedJavaObj.getByteSimple().length,10);
    Assert.assertEquals(loadedJavaObj.getFlagSimple().length,10);
    Assert.assertEquals(loadedJavaObj.getEnumeration().length,10);
    Assert.assertEquals(loadedJavaObj.getDateField().length,10);
    for (int i=0; i < 10; i++) {
      Assert.assertEquals(loadedJavaObj.getText()[i],i + "");
      Assert.assertEquals(loadedJavaObj.getNumberSimple()[i],i);
      Assert.assertEquals(loadedJavaObj.getLongSimple()[i],(long)i);
      Assert.assertEquals(loadedJavaObj.getDoubleSimple()[i],(double)i);
      Assert.assertEquals(loadedJavaObj.getFloatSimple()[i],(float)i);
      Assert.assertEquals(loadedJavaObj.getByteSimple()[i],(byte)i);
      Assert.assertEquals(loadedJavaObj.getFlagSimple()[i],(i % 2 == 0));
      EnumTest enumCheck=(i % 2 == 0) ? EnumTest.ENUM2 : ((i % 3 == 0) ? EnumTest.ENUM3 : EnumTest.ENUM1);
      Assert.assertEquals(loadedJavaObj.getEnumeration()[i],enumCheck);
      cal.set(Calendar.DAY_OF_MONTH,(i + 1));
      Assert.assertEquals(loadedJavaObj.getDateField()[i],cal.getTime());
    }
    for (int i=0; i < 10; i++) {
      int j=i + 10;
      textArray[i]=j + "";
      intArray[i]=j;
      longArray[i]=(long)j;
      doubleArray[i]=(double)j;
      floatArray[i]=(float)j;
      byteArray[i]=(byte)j;
      booleanArray[i]=(j % 2 == 0);
      enumerationArray[i]=(j % 2 == 0) ? EnumTest.ENUM2 : ((j % 3 == 0) ? EnumTest.ENUM3 : EnumTest.ENUM1);
      cal.set(Calendar.DAY_OF_MONTH,(j + 1));
      dateArray[i]=cal.getTime();
    }
    loadedJavaObj.setText(textArray);
    loadedJavaObj.setByteSimple(byteArray);
    loadedJavaObj.setDateField(dateArray);
    loadedJavaObj.setDoubleSimple(doubleArray);
    loadedJavaObj.setEnumeration(enumerationArray);
    loadedJavaObj.setFlagSimple(booleanArray);
    loadedJavaObj.setFloatSimple(floatArray);
    loadedJavaObj.setLongSimple(longArray);
    loadedJavaObj.setNumberSimple(intArray);
    doc=database.getRecordByUserObject(javaObj,false);
    Assert.assertNotNull(doc.field("text"));
    Assert.assertNotNull(doc.field("enumeration"));
    Assert.assertNotNull(doc.field("numberSimple"));
    Assert.assertNotNull(doc.field("longSimple"));
    Assert.assertNotNull(doc.field("doubleSimple"));
    Assert.assertNotNull(doc.field("floatSimple"));
    Assert.assertNotNull(doc.field("byteSimple"));
    Assert.assertNotNull(doc.field("flagSimple"));
    Assert.assertNotNull(doc.field("dateField"));
    loadedJavaObj=database.save(loadedJavaObj);
    database.close();
    database=OObjectDatabasePool.global().acquire(url,"admin","admin");
    loadedJavaObj=database.load(id);
    doc=database.getRecordByUserObject(loadedJavaObj,false);
    Assert.assertNotNull(doc.field("text"));
    Assert.assertNotNull(doc.field("enumeration"));
    Assert.assertNotNull(doc.field("numberSimple"));
    Assert.assertNotNull(doc.field("longSimple"));
    Assert.assertNotNull(doc.field("doubleSimple"));
    Assert.assertNotNull(doc.field("floatSimple"));
    Assert.assertNotNull(doc.field("byteSimple"));
    Assert.assertNotNull(doc.field("flagSimple"));
    Assert.assertNotNull(doc.field("dateField"));
    Assert.assertEquals(loadedJavaObj.getText().length,10);
    Assert.assertEquals(loadedJavaObj.getNumberSimple().length,10);
    Assert.assertEquals(loadedJavaObj.getLongSimple().length,10);
    Assert.assertEquals(loadedJavaObj.getDoubleSimple().length,10);
    Assert.assertEquals(loadedJavaObj.getFloatSimple().length,10);
    Assert.assertEquals(loadedJavaObj.getByteSimple().length,10);
    Assert.assertEquals(loadedJavaObj.getFlagSimple().length,10);
    Assert.assertEquals(loadedJavaObj.getEnumeration().length,10);
    Assert.assertEquals(loadedJavaObj.getDateField().length,10);
    for (int i=0; i < 10; i++) {
      int j=i + 10;
      Assert.assertEquals(loadedJavaObj.getText()[i],j + "");
      Assert.assertEquals(loadedJavaObj.getNumberSimple()[i],j);
      Assert.assertEquals(loadedJavaObj.getLongSimple()[i],(long)j);
      Assert.assertEquals(loadedJavaObj.getDoubleSimple()[i],(double)j);
      Assert.assertEquals(loadedJavaObj.getFloatSimple()[i],(float)j);
      Assert.assertEquals(loadedJavaObj.getByteSimple()[i],(byte)j);
      Assert.assertEquals(loadedJavaObj.getFlagSimple()[i],(j % 2 == 0));
      EnumTest enumCheck=(j % 2 == 0) ? EnumTest.ENUM2 : ((j % 3 == 0) ? EnumTest.ENUM3 : EnumTest.ENUM1);
      Assert.assertEquals(loadedJavaObj.getEnumeration()[i],enumCheck);
      cal.set(Calendar.DAY_OF_MONTH,(j + 1));
      Assert.assertEquals(loadedJavaObj.getDateField()[i],cal.getTime());
    }
  }
  finally {
    database.close();
  }
}
