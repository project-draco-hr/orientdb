{
  OSessionStoragePerformanceStatistic sessionStoragePerformanceStatistic=new OSessionStoragePerformanceStatistic(100,new OSessionStoragePerformanceStatistic.NanoTimer(){
    private long counter=0;
    @Override public long getNano(){
      return counter+=100;
    }
  }
,-1);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getCacheHits(),-1);
  for (int i=0; i < 50; i++) {
    sessionStoragePerformanceStatistic.startComponentOperation("c1po");
    sessionStoragePerformanceStatistic.startComponentOperation("c1po");
    sessionStoragePerformanceStatistic.incrementPageAccessOnCacheLevel(i % 2 == 0);
    sessionStoragePerformanceStatistic.startComponentOperation("c2po");
    sessionStoragePerformanceStatistic.incrementPageAccessOnCacheLevel(true);
    sessionStoragePerformanceStatistic.completeComponentOperation();
    sessionStoragePerformanceStatistic.completeComponentOperation();
    sessionStoragePerformanceStatistic.completeComponentOperation();
  }
  for (int i=0; i < 50; i++) {
    sessionStoragePerformanceStatistic.incrementPageAccessOnCacheLevel(false);
  }
  Assert.assertEquals(sessionStoragePerformanceStatistic.getCacheHits(),50);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getCacheHits(null),50);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getCacheHits("c1po"),75);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getCacheHits("c2po"),100);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getCacheHits("c3po"),-1);
  final ODocument doc=sessionStoragePerformanceStatistic.toDocument();
  Assert.assertEquals(doc.field("cacheHits"),50);
  final ODocument docC1PO=doc.<Map<String,ODocument>>field("dataByComponent").get("c1po");
  Assert.assertEquals(docC1PO.field("cacheHits"),75);
  final ODocument docC2PO=doc.<Map<String,ODocument>>field("dataByComponent").get("c2po");
  Assert.assertEquals(docC2PO.field("cacheHits"),100);
}
