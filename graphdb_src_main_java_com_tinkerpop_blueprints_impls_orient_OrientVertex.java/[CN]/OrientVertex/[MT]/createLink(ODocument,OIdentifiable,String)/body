{
  final Object out;
  Object found=iFromVertex.field(iFieldName);
  final OClass linkClass=iFromVertex.getSchemaClass();
  if (linkClass == null)   throw new IllegalArgumentException("Class ot found in source vertex: " + iFromVertex);
  final OProperty prop=linkClass.getProperty(iFieldName);
  if (found == null) {
    if (prop == null || prop.getType().equals(OType.LINK) || "true".equalsIgnoreCase(prop.getCustom("ordered")))     out=iTo;
 else     if (prop.getType().equals(OType.LINKBAG)) {
      final ORidBag bag=new ORidBag();
      bag.add(iTo);
      out=bag;
    }
 else     if (prop.getType().equals(OType.LINKLIST)) {
      final Collection coll=new OTrackedList<Object>(iFromVertex);
      coll.add(iTo);
      out=coll;
    }
 else     throw new IllegalStateException("Type of field provided in schema '" + prop.getType() + " can not be used for link creation.");
  }
 else   if (found instanceof OIdentifiable) {
    if (prop != null && prop.getType().equals(OType.LINK))     throw new IllegalStateException("Type of field provided in schema '" + prop.getType() + " can not be used for creation to hold several links.");
    if (prop != null && "true".equalsIgnoreCase(prop.getCustom("ordered"))) {
      final Collection coll=new OTrackedList<Object>(iFromVertex);
      coll.add(found);
      coll.add(iTo);
      out=coll;
    }
 else {
      final ORidBag bag=new ORidBag();
      bag.add((OIdentifiable)found);
      bag.add(iTo);
      out=bag;
    }
  }
 else   if (found instanceof ORidBag) {
    out=null;
    ((ORidBag)found).add(iTo);
  }
 else   if (found instanceof Collection<?>) {
    out=null;
    ((Collection<Object>)found).add(iTo);
  }
 else   throw new IllegalStateException("Relationship content is invalid on field " + iFieldName + ". Found: "+ found);
  if (out != null)   iFromVertex.field(iFieldName,out);
  return out;
}
