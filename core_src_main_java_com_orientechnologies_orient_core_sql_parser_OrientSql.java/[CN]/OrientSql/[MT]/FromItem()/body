{
  OFromItem jjtn000=new OFromItem(JJTFROMITEM);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  try {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INTEGER_LITERAL:
case 118:
      Rid();
    break;
case LBRACKET:
  jj_consume_token(LBRACKET);
Rid();
label_11: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
  ;
break;
default :
jj_la1[54]=jj_gen;
break label_11;
}
jj_consume_token(COMMA);
Rid();
}
jj_consume_token(RBRACKET);
break;
case CLUSTER_IDENTIFIER:
Cluster();
break;
case INDEX_IDENTIFIER:
case INDEXVALUES_IDENTIFIER:
case INDEXVALUESASC_IDENTIFIER:
case INDEXVALUESDESC_IDENTIFIER:
IndexIdentifier();
break;
case METADATA_IDENTIFIER:
MetadataIdentifier();
break;
case SET:
case ORDER:
case GROUP:
case OFFSET:
case IN:
case KEY:
case IDENTIFIER:
Identifier();
break;
case LPAREN:
jj_consume_token(LPAREN);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SELECT:
SelectStatement();
break;
case TRAVERSE:
TraverseStatement();
break;
default :
jj_la1[55]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jj_consume_token(RPAREN);
break;
default :
jj_la1[56]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
}
