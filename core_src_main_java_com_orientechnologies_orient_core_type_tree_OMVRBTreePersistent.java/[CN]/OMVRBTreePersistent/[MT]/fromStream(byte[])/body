{
  final long timer=OProfiler.getInstance().startChrono();
  final ORID rootRid=new ORecordId();
  try {
    final OMemoryStream stream=new OMemoryStream(iStream);
    byte protocolVersion=stream.peek();
    if (protocolVersion != -1) {
      stream.getAsByte();
      if (protocolVersion != CURRENT_PROTOCOL_VERSION)       throw new OSerializationException("The index has been created with a previous version of OrientDB. Soft transitions between version is a featured supported since 0.9.25. In order to use it with this version of OrientDB you need to export and import your database. " + protocolVersion + "<->"+ CURRENT_PROTOCOL_VERSION);
    }
    rootRid.fromStream(stream.getAsByteArrayFixed(ORecordId.PERSISTENT_SIZE));
    size=stream.getAsInteger();
    if (protocolVersion == -1)     lastPageSize=stream.getAsShort();
 else     lastPageSize=stream.getAsInteger();
    serializerFromStream(stream);
    if (rootRid.isValid())     root=loadEntry(null,rootRid);
    return this;
  }
 catch (  Exception e) {
    OLogManager.instance().error(this,"Error on unmarshalling OMVRBTreePersistent object from record: %s",e,OSerializationException.class,rootRid);
  }
 finally {
    OProfiler.getInstance().stopChrono("OMVRBTreePersistent.fromStream",timer);
  }
  return this;
}
