{
  if (!force && !onDelete)   return;
  if (status == STATUS.CLOSED)   return;
  final long timer=Orient.instance().getProfiler().startChrono();
  stateLock.acquireWriteLock();
  try {
    if (status == STATUS.CLOSED)     return;
    status=STATUS.CLOSING;
    if (!onDelete)     makeFullCheckpoint();
    preCloseSteps();
    try {
      storagePerformanceStatistic.unregisterMBean();
    }
 catch (    Exception e) {
      OLogManager.instance().error(this,"Error during of unregister of MBean for storage performance statistic",e);
    }
    sbTreeCollectionManager.close();
    closeClusters(onDelete);
    closeIndexes(onDelete);
    if (configuration != null)     configuration.close();
    super.close(force,onDelete);
    if (writeCache != null)     writeCache.removeLowDiskSpaceListener(this);
    if (writeAheadLog != null)     writeAheadLog.removeFullCheckpointListener(this);
    if (readCache != null)     if (!onDelete)     readCache.closeStorage(writeCache);
 else     readCache.deleteStorage(writeCache);
    if (writeAheadLog != null) {
      writeAheadLog.close();
      if (onDelete)       writeAheadLog.delete();
    }
    postCloseSteps(onDelete);
    if (atomicOperationsManager != null)     try {
      atomicOperationsManager.unregisterMBean();
    }
 catch (    Exception e) {
      OLogManager.instance().error(this,"MBean for atomic opeations manager cannot be unregistered",e);
    }
    status=STATUS.CLOSED;
  }
 catch (  IOException e) {
    final String message="Error on closing of storage '" + name;
    OLogManager.instance().error(this,message,e);
    throw OException.wrapException(new OStorageException(message),e);
  }
 finally {
    Orient.instance().getProfiler().stopChrono("db." + name + ".close","Close a database",timer,"db.*.close");
    stateLock.releaseWriteLock();
  }
}
