{
  final List<String> parts=OStringSerializerHelper.smartSplit(iText,'.');
  setRoot(iQueryToParse,parts.get(0));
  if (parts.size() > 1) {
    operationsChain=new ArrayList<OPair<OSQLMethod,Object[]>>();
    for (int i=1; i < parts.size(); ++i) {
      String part=parts.get(i);
      String partUpperCase=part.toLowerCase(Locale.ENGLISH);
      if (part.indexOf('(') > -1) {
        boolean operatorFound=false;
        for (        OSQLMethod op : getAllMethods())         if (partUpperCase.startsWith(op.getName() + "(")) {
          final Object[] arguments;
          if (op.getMaxParams() > 0) {
            arguments=OStringSerializerHelper.getParameters(part).toArray();
            if (arguments.length < op.getMinParams() || arguments.length > op.getMaxParams())             throw new OQueryParsingException(iQueryToParse.parserText,"Syntax error: field operator '" + op.getName() + "' needs "+ (op.getMinParams() == op.getMaxParams() ? op.getMinParams() : op.getMinParams() + "-" + op.getMaxParams())+ " argument(s) while has been received "+ arguments.length,0);
          }
 else {
            arguments=null;
          }
          operationsChain.add(new OPair<OSQLMethod,Object[]>(op,arguments));
          operatorFound=true;
          break;
        }
        if (!operatorFound)         throw new OQueryParsingException(iQueryToParse.parserText,"Syntax error: field operator not recognized between the supported ones: " + Arrays.toString(getAllMethodNames()),0);
      }
 else {
        operationsChain.add(new OPair<OSQLMethod,Object[]>(getMethod(OSQLMethodField.NAME),new Object[]{part}));
      }
    }
  }
}
