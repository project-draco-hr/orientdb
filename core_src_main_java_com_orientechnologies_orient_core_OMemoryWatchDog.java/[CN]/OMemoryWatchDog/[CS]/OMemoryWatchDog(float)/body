{
  OMemoryWatchDog.setPercentageUsageThreshold(iThreshold);
  final MemoryMXBean memBean=ManagementFactory.getMemoryMXBean();
  final NotificationEmitter memEmitter=(NotificationEmitter)memBean;
  memEmitter.addNotificationListener(new NotificationListener(){
    public void handleNotification(    Notification n,    Object hb){
      if (n.getType().equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED)) {
        alertTimes++;
        final long maxMemory=tenuredGenPool.getUsage().getMax();
        long usedMemory=tenuredGenPool.getUsage().getUsed();
        long freeMemory=maxMemory - usedMemory;
        OLogManager.instance().debug(this,"Low memory %s%% (used %s of %s), calling listeners to free memory in soft way...",freeMemory * 100 / maxMemory,OFileUtils.getSizeAsString(usedMemory),OFileUtils.getSizeAsString(maxMemory));
        final long timer=OProfiler.getInstance().startChrono();
        for (        Listener listener : listeners) {
          try {
            listener.memoryUsageLow(TYPE.JVM,usedMemory,maxMemory);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
        System.gc();
        try {
          Thread.sleep(400);
        }
 catch (        InterruptedException e) {
        }
        freeMemory=Runtime.getRuntime().freeMemory();
        usedMemory=maxMemory - freeMemory;
        final long threshold=(long)(maxMemory * (1 - OGlobalConfiguration.MEMORY_OPTIMIZE_THRESHOLD.getValueAsFloat()));
        if (freeMemory < threshold) {
          OLogManager.instance().info(this,"Low memory %s%% (used %s of %s) while the threshold is %s, calling listeners to free memory in hard way...",usedMemory * 100 / maxMemory,OFileUtils.getSizeAsString(usedMemory),OFileUtils.getSizeAsString(maxMemory),OFileUtils.getSizeAsString(threshold));
          for (          Listener listener : listeners) {
            try {
              listener.memoryUsageCritical(TYPE.JVM,usedMemory,maxMemory);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
        OProfiler.getInstance().stopChrono("OMemoryWatchDog.freeResources",timer);
      }
    }
  }
,null,null);
  OProfiler.getInstance().registerHookValue("memory.alerts",new OProfilerHookValue(){
    public Object getValue(){
      return alertTimes;
    }
  }
);
}
