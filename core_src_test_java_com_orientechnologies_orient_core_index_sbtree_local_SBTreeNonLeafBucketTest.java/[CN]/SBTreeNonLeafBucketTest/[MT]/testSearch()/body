{
  long seed=System.currentTimeMillis();
  System.out.println("testSearch seed : " + seed);
  TreeSet<Long> keys=new TreeSet<Long>();
  Random random=new Random(seed);
  while (keys.size() < 2 * OSBTreeBucket.MAX_PAGE_SIZE_BYTES / OLongSerializer.LONG_SIZE) {
    keys.add(random.nextLong());
  }
  ODirectMemoryPointer pointer=new ODirectMemoryPointer(OSBTreeBucket.MAX_PAGE_SIZE_BYTES);
  OSBTreeBucket<Long,OIdentifiable> treeBucket=new OSBTreeBucket<Long,OIdentifiable>(pointer,false,OLongSerializer.INSTANCE,null,OLinkSerializer.INSTANCE,ODurablePage.TrackMode.FULL);
  int index=0;
  Map<Long,Integer> keyIndexMap=new HashMap<Long,Integer>();
  for (  Long key : keys) {
    if (!treeBucket.addEntry(index,new OSBTreeBucket.SBTreeEntry<Long,OIdentifiable>(random.nextInt(Integer.MAX_VALUE),random.nextInt(Integer.MAX_VALUE),key,null),true))     break;
    keyIndexMap.put(key,index);
    index++;
  }
  Assert.assertEquals(treeBucket.size(),keyIndexMap.size());
  for (  Map.Entry<Long,Integer> keyIndexEntry : keyIndexMap.entrySet()) {
    int bucketIndex=treeBucket.find(keyIndexEntry.getKey());
    Assert.assertEquals(bucketIndex,(int)keyIndexEntry.getValue());
  }
  long prevRight=-1;
  for (int i=0; i < treeBucket.size(); i++) {
    OSBTreeBucket.SBTreeEntry<Long,OIdentifiable> entry=treeBucket.getEntry(i);
    if (prevRight > 0)     Assert.assertEquals(entry.leftChild,prevRight);
    prevRight=entry.rightChild;
  }
  long prevLeft=-1;
  for (int i=treeBucket.size() - 1; i >= 0; i--) {
    OSBTreeBucket.SBTreeEntry<Long,OIdentifiable> entry=treeBucket.getEntry(i);
    if (prevLeft > 0)     Assert.assertEquals(entry.rightChild,prevLeft);
    prevLeft=entry.leftChild;
  }
  pointer.free();
}
