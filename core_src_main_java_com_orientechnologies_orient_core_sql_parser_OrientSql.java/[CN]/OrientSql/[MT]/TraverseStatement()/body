{
  OTraverseStatement jjtn000=new OTraverseStatement(JJTTRAVERSESTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  try {
    jj_consume_token(TRAVERSE);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case VALUES:
case SET:
case NULL:
case ORDER:
case GROUP:
case OFFSET:
case THIS:
case RECORD_ATTRIBUTE:
case INTEGER_LITERAL:
case FLOATING_POINT_LITERAL:
case CHARACTER_LITERAL:
case STRING_LITERAL:
case LPAREN:
case LBRACKET:
case HOOK:
case COLON:
case MINUS:
case STAR:
case IN:
case KEY:
case IDENTIFIER:
      Projection();
    break;
default :
  jj_la1[15]=jj_gen;
;
}
jj_consume_token(FROM);
FromClause();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case WHILE:
jj_consume_token(WHILE);
WhereClause();
break;
default :
jj_la1[16]=jj_gen;
;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
}
