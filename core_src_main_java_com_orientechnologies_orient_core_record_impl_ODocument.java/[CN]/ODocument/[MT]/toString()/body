{
  TO_STRING_DEPTH.get().increment();
  try {
    if (TO_STRING_DEPTH.get().intValue() > 1)     return "<recursion:rid=" + (_recordId != null ? _recordId : "null") + ">";
    final boolean saveDirtyStatus=_dirty;
    final boolean oldUpdateContent=_contentChanged;
    try {
      final StringBuilder buffer=new StringBuilder(128);
      checkForFields();
      final OClass _clazz=getImmutableSchemaClass();
      if (_clazz != null)       buffer.append(_clazz.getStreamableName());
      if (_recordId != null) {
        if (_recordId.isValid())         buffer.append(_recordId);
      }
      boolean first=true;
      for (      Entry<String,ODocumentEntry> f : _fields.entrySet()) {
        buffer.append(first ? '{' : ',');
        buffer.append(f.getKey());
        buffer.append(':');
        if (f.getValue().value == null)         buffer.append("null");
 else         if (f.getValue().value instanceof Collection<?> || f.getValue().value.getClass().isArray()) {
          buffer.append('[');
          buffer.append(OMultiValue.getSize(f.getValue().value));
          buffer.append(']');
        }
 else         if (f.getValue().value instanceof ORecord) {
          final ORecord record=(ORecord)f.getValue().value;
          if (record.getIdentity().isValid())           record.getIdentity().toString(buffer);
 else           buffer.append(record.toString());
        }
 else         buffer.append(f.getValue().value);
        if (first)         first=false;
      }
      if (!first)       buffer.append('}');
      if (_recordId != null && _recordId.isValid()) {
        buffer.append(" v");
        buffer.append(_recordVersion);
      }
      return buffer.toString();
    }
  finally {
      _dirty=saveDirtyStatus;
      _contentChanged=oldUpdateContent;
    }
  }
  finally {
    TO_STRING_DEPTH.get().decrement();
  }
}
