{
  if (iFieldValue.equals("null"))   return null;
  if (iFieldName != null)   if (iRecord.getSchemaClass() != null) {
    final OProperty p=iRecord.getSchemaClass().getProperty(iFieldName);
    if (p != null) {
      iType=p.getType();
      iLinkedType=p.getLinkedType();
    }
  }
  if (iType == null && iFieldTypes != null && iFieldTypes.containsKey(iFieldName))   iType=ORecordSerializerStringAbstract.getType(iFieldValue,iFieldTypes.get(iFieldName));
  if (iFieldValue.startsWith("{") && iFieldValue.endsWith("}")) {
    iFieldValueAsString=iFieldValue.substring(1,iFieldValue.length() - 1);
    final String[] fields=OStringParser.getWords(iFieldValueAsString,":,",true);
    if (fields == null || fields.length == 0)     return new HashMap<String,Object>();
    if (iNoMap || hasTypeField(fields)) {
      final ORecordInternal<?> recordInternal=fromString(iFieldValue,new ODocument(),null,iOptions,false);
      if (iType != null && iType.isLink()) {
      }
 else       if (recordInternal instanceof ODocument)       ((ODocument)recordInternal).addOwner(iRecord);
      return recordInternal;
    }
 else {
      if (fields.length % 2 == 1)       throw new OSerializationException("Bad JSON format on map. Expected pairs of field:value but received '" + iFieldValueAsString + "'");
      final Map<String,Object> embeddedMap=new LinkedHashMap<String,Object>();
      for (int i=0; i < fields.length; i+=2) {
        iFieldName=fields[i];
        if (iFieldName.length() >= 2)         iFieldName=iFieldName.substring(1,iFieldName.length() - 1);
        iFieldValue=fields[i + 1];
        iFieldValueAsString=OStringSerializerHelper.getStringContent(iFieldValue);
        embeddedMap.put(iFieldName,getValue(iRecord,null,iFieldValue,iFieldValueAsString,iLinkedType,null,iFieldTypes,iNoMap,iOptions));
      }
      return embeddedMap;
    }
  }
 else   if (iFieldValue.startsWith("[") && iFieldValue.endsWith("]")) {
    final Collection<?> embeddedCollection;
    final ORidBag ridBag;
    if (iType == OType.LINKSET) {
      embeddedCollection=new OMVRBTreeRIDSet(iRecord);
      ridBag=null;
    }
 else     if (iType == OType.EMBEDDEDSET) {
      embeddedCollection=new OTrackedSet<Object>(iRecord);
      ridBag=null;
    }
 else     if (iType == OType.LINKLIST) {
      embeddedCollection=new ORecordLazyList(iRecord);
      ridBag=null;
    }
 else     if (iType == OType.LINKBAG) {
      embeddedCollection=null;
      ridBag=new ORidBag();
    }
 else {
      embeddedCollection=new OTrackedList<Object>(iRecord);
      ridBag=null;
    }
    iFieldValue=iFieldValue.substring(1,iFieldValue.length() - 1);
    if (!iFieldValue.isEmpty()) {
      List<String> items=OStringSerializerHelper.smartSplit(iFieldValue,',');
      Object collectionItem;
      for (      String item : items) {
        iFieldValue=item.trim();
        if (!(iLinkedType == OType.DATE || iLinkedType == OType.BYTE || iLinkedType == OType.INTEGER || iLinkedType == OType.LONG || iLinkedType == OType.DATETIME || iLinkedType == OType.DECIMAL || iLinkedType == OType.DOUBLE || iLinkedType == OType.FLOAT))         iFieldValueAsString=iFieldValue.length() >= 2 ? iFieldValue.substring(1,iFieldValue.length() - 1) : iFieldValue;
 else         iFieldValueAsString=iFieldValue;
        if (ridBag != null)         collectionItem=getValue(iRecord,null,iFieldValue,iFieldValueAsString,OType.LINK,null,iFieldTypes,iNoMap,iOptions);
 else         collectionItem=getValue(iRecord,null,iFieldValue,iFieldValueAsString,iLinkedType,null,iFieldTypes,iNoMap,iOptions);
        if (iType != null && iType.isLink()) {
        }
 else         if (collectionItem instanceof ODocument && iRecord instanceof ODocument)         ((ODocument)collectionItem).addOwner(iRecord);
        if (collectionItem instanceof String && ((String)collectionItem).length() == 0)         continue;
        if (embeddedCollection != null)         ((Collection<Object>)embeddedCollection).add(collectionItem);
 else         ridBag.add((OIdentifiable)collectionItem);
      }
    }
    return embeddedCollection != null ? embeddedCollection : ridBag;
  }
  if (iType == null)   if (iFieldValue.charAt(0) != '\"' && iFieldValue.charAt(0) != '\'') {
    if (iFieldValue.equalsIgnoreCase("false") || iFieldValue.equalsIgnoreCase("true"))     iType=OType.BOOLEAN;
 else {
      Character c=null;
      if (iFieldTypes != null) {
        c=iFieldTypes.get(iFieldName);
        if (c != null)         iType=ORecordSerializerStringAbstract.getType(iFieldValue + c);
      }
      if (c == null && !iFieldValue.isEmpty()) {
        if (iFieldValue.charAt(0) == ORID.PREFIX && iFieldValue.contains(":"))         iType=OType.LINK;
 else         if (OStringSerializerHelper.contains(iFieldValue,'.')) {
          final Double v=new Double(OStringSerializerHelper.getStringContent(iFieldValue));
          if (v.doubleValue() > 0) {
            if (v.compareTo(MAX_FLOAT) <= 0)             return v.floatValue();
          }
 else           if (v.compareTo(MIN_FLOAT) >= 0)           return v.floatValue();
          return v;
        }
 else {
          final Long v=new Long(OStringSerializerHelper.getStringContent(iFieldValue));
          if (v.longValue() > 0) {
            if (v.compareTo(MAX_INT) <= 0)             return v.intValue();
          }
 else           if (v.compareTo(MIN_INT) >= 0)           return v.intValue();
          return v;
        }
      }
    }
  }
 else   if (iFieldValue.startsWith("{") && iFieldValue.endsWith("}"))   iType=OType.EMBEDDED;
 else {
    if (iFieldValueAsString.length() >= 4 && iFieldValueAsString.charAt(0) == ORID.PREFIX && iFieldValueAsString.contains(":")) {
      final List<String> parts=OStringSerializerHelper.split(iFieldValueAsString,1,-1,':');
      if (parts.size() == 2)       try {
        Short.parseShort(parts.get(0));
        if (parts.get(1).matches("\\d+")) {
          iType=OType.LINK;
        }
      }
 catch (      Exception e) {
      }
    }
    if (iFieldTypes != null) {
      Character c=null;
      c=iFieldTypes.get(iFieldName);
      if (c != null)       iType=ORecordSerializerStringAbstract.getType(iFieldValueAsString,c);
    }
    if (iType == null) {
      if (iFieldValueAsString.length() == ODateHelper.getDateFormat().length())       try {
        return ODateHelper.getDateFormatInstance().parseObject(iFieldValueAsString);
      }
 catch (      Exception e) {
      }
      if (iFieldValueAsString.length() == ODateHelper.getDateTimeFormat().length())       try {
        return ODateHelper.getDateTimeFormatInstance().parseObject(iFieldValueAsString);
      }
 catch (      Exception e) {
      }
      iType=OType.STRING;
    }
  }
  if (iType != null) switch (iType) {
case STRING:
    return decodeJSON(iFieldValueAsString);
case LINK:
  final int pos=iFieldValueAsString.indexOf('@');
if (pos > -1) return new ODocument(iFieldValueAsString.substring(1,pos),new ORecordId(iFieldValueAsString.substring(pos + 1)));
 else {
  return new ORecordId(iFieldValueAsString);
}
case EMBEDDED:
return fromString(iFieldValueAsString);
case DATE:
if (iFieldValueAsString == null || iFieldValueAsString.equals("")) return null;
try {
return Long.parseLong(iFieldValueAsString);
}
 catch (NumberFormatException e) {
try {
return ODateHelper.getDateFormatInstance().parseObject(iFieldValueAsString);
}
 catch (ParseException ex) {
throw new OSerializationException("Unable to unmarshall date (format=" + ODateHelper.getDateFormat() + ") : "+ iFieldValueAsString,e);
}
}
case DATETIME:
if (iFieldValueAsString == null || iFieldValueAsString.equals("")) return null;
try {
return Long.parseLong(iFieldValueAsString);
}
 catch (NumberFormatException e) {
try {
return ODateHelper.getDateTimeFormatInstance().parseObject(iFieldValueAsString);
}
 catch (ParseException ex) {
throw new OSerializationException("Unable to unmarshall datetime (format=" + ODateHelper.getDateTimeFormat() + ") : "+ iFieldValueAsString,e);
}
}
case BINARY:
return OStringSerializerHelper.fieldTypeFromStream(iRecord,iType,iFieldValueAsString);
default :
return OStringSerializerHelper.fieldTypeFromStream(iRecord,iType,iFieldValue);
}
return iFieldValueAsString;
}
