{
  final int delay=OGlobalConfiguration.SERVER_CHANNEL_CLEAN_DELAY.getValueAsInteger();
  Orient.getTimer().schedule(new TimerTask(){
    @Override public void run(){
      acquireExclusiveLock();
      try {
        final HashMap<Integer,OClientConnection> localConnections=new HashMap<Integer,OClientConnection>(connections);
        for (        Entry<Integer,OClientConnection> entry : localConnections.entrySet()) {
          final Socket socket=entry.getValue().protocol.getChannel().socket;
          if (socket == null || socket.isClosed() || socket.isInputShutdown()) {
            OLogManager.instance().debug(this,"[OClientConnectionManager] found and removed pending closed channel %d (%s)",entry.getKey(),socket);
            try {
              entry.getValue().close();
            }
 catch (            Exception e) {
            }
            connections.remove(entry.getKey());
          }
        }
      }
  finally {
        releaseExclusiveLock();
      }
    }
  }
,delay,delay);
  Orient.instance().getProfiler().registerHookValue("server.connections.actives","Number of active network connections",METRIC_TYPE.COUNTER,new OProfilerHookValue(){
    public Object getValue(){
      return metricActiveConnections;
    }
  }
);
}
