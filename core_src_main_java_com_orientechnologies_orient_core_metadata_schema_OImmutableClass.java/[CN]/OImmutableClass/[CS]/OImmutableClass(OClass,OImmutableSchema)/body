{
  isAbstract=oClass.isAbstract();
  strictMode=oClass.isStrictMode();
  this.schema=schema;
  if (oClass.getSuperClass() != null)   superClass=oClass.getSuperClass().getName();
 else   superClass=null;
  name=oClass.getName();
  streamAbleName=oClass.getStreamableName();
  clusterSelection=oClass.getClusterSelection();
  defaultClusterId=oClass.getDefaultClusterId();
  clusterIds=oClass.getClusterIds();
  polymorphicClusterIds=oClass.getPolymorphicClusterIds();
  baseClasses=new ArrayList<String>();
  for (  OClass baseClass : oClass.getBaseClasses())   baseClasses.add(baseClass.getName());
  overSize=oClass.getOverSize();
  classOverSize=oClass.getClassOverSize();
  shortName=oClass.getShortName();
  javaClass=oClass.getJavaClass();
  properties=new HashMap<String,OProperty>();
  Map<String,OProperty> propertyMap=oClass.propertiesMap();
  for (  Map.Entry<String,OProperty> propertyEntry : propertyMap.entrySet())   properties.put(propertyEntry.getKey().toLowerCase(),new OImmutableProperty(propertyEntry.getValue()));
  customFields=new HashMap<String,String>();
  for (  String key : oClass.getCustomKeys())   customFields.put(key,oClass.getCustom(key));
}
