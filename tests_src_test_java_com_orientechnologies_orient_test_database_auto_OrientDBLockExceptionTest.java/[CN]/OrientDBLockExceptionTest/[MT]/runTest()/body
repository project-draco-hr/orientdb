{
  OrientBaseGraph graph=new OrientGraph("plocal:./testdb");
  OClass clazz=graph.getVertexType(className);
  if (clazz == null) {
    graph.createVertexType(className);
    graph.createEdgeType("Connected");
    graph.createKeyIndex(keyName,Vertex.class,new Parameter("class",className));
  }
  Set<String> keys=graph.getIndexedKeys(Vertex.class,true);
  System.out.println("Keys = " + keys);
  graph.shutdown();
  List<Future<Void>> futureList=new ArrayList<Future<Void>>();
  ExecutorService executorService=Executors.newFixedThreadPool(10);
  for (int i=0; i < 2; i++) {
    Future<Void> future=executorService.submit(new WorkerThread(i));
    futureList.add(future);
  }
  for (  Future<Void> f : futureList) {
    try {
      f.get();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
catch (    ExecutionException e) {
      e.printStackTrace();
    }
  }
  graph=new OrientGraph("plocal:./testdb");
  System.out.println("Adding links");
  for (int i=0; i < 9; i++) {
    Iterable<Vertex> srcNodes=graph.getVertices("Employee.fName","name-0-" + i);
    Iterable<Vertex> srcNodes1=graph.getVertices("Employee.fName","name-1-" + i);
    for (    Vertex source : srcNodes) {
      for (      Vertex destination : srcNodes1) {
        System.out.println("*********** Adding edges....");
        OrientEdge edge=(OrientEdge)((OrientVertex)source).addEdge("Connected",destination);
        edge.setProperty("test","test");
        graph.commit();
      }
    }
  }
  graph.shutdown();
  executorService.shutdown();
  System.out.println("Processing done");
}
