{
  try {
    startTimer(iTarget.getClass().getSimpleName());
    cyclesElapsed=0;
    long previousLapTimerElapsed=0;
    long lapTimerElapsed=0;
    int delta;
    lapTimerElapsed=System.nanoTime();
    for (cyclesDone=0; cyclesDone < cycles; ++cyclesDone) {
      iTarget.beforeCycle();
      iTarget.cycle();
      iTarget.afterCycle();
      if (cycles > DUMP_PERCENT && (cyclesDone + 1) % (cycles / DUMP_PERCENT) == 0) {
        lapTimerElapsed=(System.nanoTime() - lapTimerElapsed) / 1000000;
        cyclesElapsed+=lapTimerElapsed;
        delta=(int)(previousLapTimerElapsed > 0 ? lapTimerElapsed * 100 / previousLapTimerElapsed - 100 : 0);
        System.out.print(String.format("\n%3d%% lap elapsed: %7dms, total: %7dms, delta: %+3d%%, forecast: %7dms",(cyclesDone + 1) * 100 / cycles,lapTimerElapsed,cyclesElapsed,delta,cyclesElapsed * cycles / cyclesDone));
        previousLapTimerElapsed=lapTimerElapsed;
        lapTimerElapsed=System.nanoTime();
      }
    }
    return takeTimer();
  }
 catch (  Throwable t) {
    System.err.println("Exception caught when executing CYCLE test: " + iTarget.getClass().getSimpleName());
    t.printStackTrace();
  }
  return -1;
}
