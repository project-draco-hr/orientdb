{
  jsonReader.readNext(OJSONReader.BEGIN_OBJECT);
  String id=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"@id\"").readString(OJSONReader.COMMA_SEPARATOR);
  int version=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"@ver\"").readInteger(OJSONReader.COMMA_SEPARATOR);
  char type=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"@type\"").readString(OJSONReader.COMMA_SEPARATOR).charAt(0);
switch (type) {
case 'b':
    if (record == null || !(record instanceof ORecordBytes))     record=new ORecordBytes(database);
 else     record.reset();
  break;
case 'v':
if (record == null || !(record instanceof ODocument)) record=new ODocument(database);
 else record.reset();
if (jsonReader.getValue().equals("\"@class\"")) {
((ODocument)record).setClassName(jsonReader.readString(OJSONReader.COMMA_SEPARATOR));
jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);
}
break;
case 'c':
if (record == null || !(record instanceof ORecordColumn)) record=new ORecordColumn(database);
 else record.reset();
break;
case 'f':
if (record == null || !(record instanceof ORecordFlat)) record=new ORecordFlat(database);
 else record.reset();
break;
default :
throw new OSchemaException("Error: unsupported record type: " + type);
}
String value=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"value\"").readString(OJSONReader.END_OBJECT,true);
record.fromJSON(value);
record.setVersion(version);
rid.fromString(id);
if (rid.clusterPosition < database.countClusterElements(rid.clusterId)) {
record.setIdentity(rid);
if (record instanceof ORecordBytes) ((ODatabaseRecord<ORecordBytes>)database.getUnderlying()).save((ORecordBytes)record);
 else if (record instanceof ORecordFlat) ((ODatabaseRecord<ORecordFlat>)database.getUnderlying()).save((ORecordFlat)record);
 else if (record instanceof ODocument) ((ODocument)record).save();
}
 else {
String clusterName=database.getClusterNameById(rid.clusterId);
record.setIdentity(-1,-1);
if (record instanceof ORecordBytes) ((ODatabaseRecord<ORecordBytes>)database.getUnderlying()).save((ORecordBytes)record,clusterName);
 else if (record instanceof ORecordFlat) ((ODatabaseRecord<ORecordInternal<?>>)database.getUnderlying()).save(record,clusterName);
 else if (record instanceof ODocument) ((ODatabaseRecord<ORecordInternal<?>>)database.getUnderlying()).save(record,clusterName);
}
if (!record.getIdentity().toString().equals(id)) throw new OSchemaException("Imported record '" + record.getIdentity() + "' has rid different from the original: "+ id);
jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
}
