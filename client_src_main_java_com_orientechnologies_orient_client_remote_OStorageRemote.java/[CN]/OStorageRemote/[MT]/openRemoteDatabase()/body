{
  minPool=OGlobalConfiguration.CLIENT_CHANNEL_MIN_POOL.getValueAsInteger();
  maxPool=OGlobalConfiguration.CLIENT_CHANNEL_MAX_POOL.getValueAsInteger();
  connectionDbType=ODatabaseDocument.TYPE;
  if (connectionOptions != null && connectionOptions.size() > 0) {
    if (connectionOptions.containsKey(PARAM_MIN_POOL))     minPool=Integer.parseInt(connectionOptions.get(PARAM_MIN_POOL).toString());
    if (connectionOptions.containsKey(PARAM_MAX_POOL))     maxPool=Integer.parseInt(connectionOptions.get(PARAM_MAX_POOL).toString());
    if (connectionOptions.containsKey(PARAM_DB_TYPE))     connectionDbType=connectionOptions.get(PARAM_DB_TYPE).toString();
  }
  setSessionId(-1);
  createConnectionPool();
  while (!networkPool.isEmpty()) {
    try {
      OChannelBinaryClient network=null;
      try {
        network=beginRequest(OChannelBinaryProtocol.REQUEST_DB_OPEN);
        sendClientInfo(network);
        network.writeString(name);
        if (network.getSrvProtocolVersion() >= 8)         network.writeString(connectionDbType);
        network.writeString(connectionUserName);
        network.writeString(connectionUserPassword);
      }
  finally {
        endRequest(network);
      }
      final int sessionId;
      try {
        beginResponse(network);
        sessionId=network.readInt();
        setSessionId(sessionId);
        OLogManager.instance().debug(null,"Client connected with session id: " + sessionId);
        readDatabaseInformation(network);
        clusterConfiguration=new ODocument(network.readBytes());
        if (clientConfiguration != null) {
          final List<ODocument> members=clusterConfiguration.field("cluster[members]");
          if (members != null) {
            for (            ODocument m : members)             if (m != null && !serverURLs.contains((String)m.field("id"))) {
              for (              Map<String,Object> listener : ((Collection<Map<String,Object>>)m.field("listeners"))) {
                if (((String)listener.get("protocol")).equals("ONetworkProtocolBinary")) {
                  String url=(String)listener.get("listen");
                  if (!serverURLs.contains(url))                   serverURLs.add(url);
                }
              }
            }
          }
        }
        defaultClusterId=clusterMap.get(OStorage.CLUSTER_DEFAULT_NAME).getId();
        status=STATUS.OPEN;
        return;
      }
  finally {
        endResponse(network);
      }
    }
 catch (    Exception e) {
      handleException("Cannot create a connection to remote server address(es): " + serverURLs,e);
    }
  }
  throw new OStorageException("Cannot create a connection to remote server address(es): " + serverURLs);
}
