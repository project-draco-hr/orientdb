{
  configuration.setValue(OGlobalConfiguration.NETWORK_SOCKET_TIMEOUT,iTimeout);
  channel=new OChannelBinaryClient(networkAddress,networkPort,configuration);
  OChannelBinaryProtocol.checkProtocolVersion(channel);
  OLogManager.instance().warn(this,"Joining the server node %s:%d to the cluster...",networkAddress,networkPort);
  clientTxId=serialClientId.decrementAndGet();
  channel.writeByte(OChannelDistributedProtocol.REQUEST_DISTRIBUTED_CONNECT);
  channel.writeInt(clientTxId);
  channel.writeString(iClusterName);
  channel.writeBytes(iSecurityKey.getEncoded());
  channel.flush();
  channel.readStatus();
  final List<OServerNodeDatabaseEntry> servers=new ArrayList<OServerNodeDatabaseEntry>(databases.values());
  for (  OServerNodeDatabaseEntry entry : servers) {
    try {
      channel.writeByte(OChannelDistributedProtocol.REQUEST_DISTRIBUTED_DB_OPEN);
      channel.writeInt(clientTxId);
      channel.writeString(entry.databaseName);
      channel.writeString(entry.userName);
      channel.writeString(entry.userPassword);
      channel.flush();
      channel.readStatus();
      entry.sessionId=channel.readInt();
      final long version=channel.readLong();
      if (version != entry.version) {
        OLogManager.instance().warn(this,"Remote database '" + entry.databaseName + "' has different version than Leader node ("+ entry.version+ ") and remote ("+ version+ "). Removing database from shared list.");
        databases.remove(entry.databaseName);
      }
 else       sendConfiguration(entry.databaseName);
    }
 catch (    Exception e) {
      databases.remove(entry.databaseName);
      OLogManager.instance().warn(this,"Database '" + entry.databaseName + "' is not present on remote server. Removing database from shared list.");
    }
  }
  if (status == STATUS.CONNECTING)   OLogManager.instance().info(this,"Server node %s:%d has joined the cluster",networkAddress,networkPort);
 else   OLogManager.instance().info(this,"Server node %s:%d has re-joined the cluster after %d secs",networkAddress,networkPort,(System.currentTimeMillis() - lastHeartBeat) / 1000);
  lastHeartBeat=System.currentTimeMillis();
}
