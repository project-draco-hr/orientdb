{
  if (iValue.length() == 0)   return null;
  final char firstChar=iValue.charAt(0);
  if (firstChar == ORID.PREFIX)   return OType.LINK;
 else   if (firstChar == '\'' || firstChar == '"')   return OType.STRING;
 else   if (firstChar == OStringSerializerHelper.BINARY_BEGINEND)   return OType.BINARY;
 else   if (firstChar == OStringSerializerHelper.EMBEDDED_BEGIN)   return OType.EMBEDDED;
 else   if (firstChar == OStringSerializerHelper.LINK)   return OType.LINK;
 else   if (firstChar == OStringSerializerHelper.COLLECTION_BEGIN)   return OType.EMBEDDEDLIST;
 else   if (firstChar == OStringSerializerHelper.MAP_BEGIN)   return OType.EMBEDDEDMAP;
 else   if (firstChar == OStringSerializerHelper.CUSTOM_TYPE)   return OType.CUSTOM;
  if (iValue.equalsIgnoreCase("true") || iValue.equalsIgnoreCase("false"))   return OType.BOOLEAN;
  boolean integer=true;
  for (int index=0; index < iValue.length(); ++index) {
    final char c=iValue.charAt(index);
    if (c < '0' || c > '9')     if ((index == 0 && (c == '+' || c == '-')))     continue;
 else     if (c == DECIMAL_SEPARATOR)     integer=false;
 else {
      if (index > 0)       if (!integer && c == 'E') {
        if (index < iValue.length()) {
          if (iValue.charAt(index + 1) == '-')           index++;
          continue;
        }
      }
 else       if (c == 'f')       return OType.FLOAT;
 else       if (c == 'c')       return OType.DECIMAL;
 else       if (c == 'l')       return OType.LONG;
 else       if (c == 'd')       return OType.DOUBLE;
 else       if (c == 'b')       return OType.BYTE;
 else       if (c == 'a')       return OType.DATE;
 else       if (c == 't')       return OType.DATETIME;
 else       if (c == 's')       return OType.SHORT;
      return OType.STRING;
    }
  }
  if (integer) {
    final int numberLength=iValue.length();
    if (numberLength > MAX_INTEGER_DIGITS || (numberLength == MAX_INTEGER_DIGITS && iValue.compareTo(MAX_INTEGER_AS_STRING) > 0))     return OType.LONG;
  }
  return integer ? OType.INTEGER : OType.FLOAT;
}
