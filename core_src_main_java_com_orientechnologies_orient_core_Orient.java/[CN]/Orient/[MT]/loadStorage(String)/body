{
  if (iURL == null || iURL.length() == 0)   throw new IllegalArgumentException("URL missed");
  if (iURL.endsWith("/"))   iURL=iURL.substring(0,iURL.length() - 1);
  iURL=iURL.replace("//","/");
  int pos=iURL.indexOf(':');
  if (pos <= 0)   throw new OConfigurationException("Error in database URL: the engine was not specified. Syntax is: " + URL_SYNTAX + ". URL was: "+ iURL);
  final String engineName=iURL.substring(0,pos);
  engineLock.readLock().lock();
  try {
    final OEngine engine=engines.get(engineName.toLowerCase());
    if (engine == null)     throw new OConfigurationException("Error on opening database: the engine '" + engineName + "' was not found. URL was: "+ iURL+ ". Registered engines are: "+ engines.keySet());
    iURL=iURL.substring(pos + 1);
    pos=iURL.indexOf('?');
    Map<String,String> parameters=null;
    String dbPath=null;
    if (pos > 0) {
      dbPath=iURL.substring(0,pos);
      iURL=iURL.substring(pos + 1);
      parameters=new HashMap<String,String>();
      String[] pairs=iURL.split("&");
      String[] kv;
      for (      String pair : pairs) {
        kv=pair.split("=");
        if (kv.length < 2)         throw new OConfigurationException("Error on opening database: parameter has no value. Syntax is: " + URL_SYNTAX + ". URL was: "+ iURL);
        parameters.put(kv[0],kv[1]);
      }
    }
 else     dbPath=iURL;
    final String dbName=registerDatabaseByPath ? dbPath : OIOUtils.getRelativePathIfAny(dbPath,null);
    OStorage storage;
    if (engine.isShared()) {
      storage=storages.get(dbName);
      if (storage == null) {
        storage=engine.createStorage(dbPath,parameters);
        final OStorage oldStorage=storages.putIfAbsent(dbName,storage);
        if (oldStorage != null)         storage=oldStorage;
      }
    }
 else {
      storage=engine.createStorage(dbPath,parameters);
      storages.put(dbName + "__" + serialId.incrementAndGet(),storage);
    }
    for (    OOrientListener l : browseListeners())     l.onStorageRegistered(storage);
    return storage;
  }
  finally {
    engineLock.readLock().unlock();
  }
}
