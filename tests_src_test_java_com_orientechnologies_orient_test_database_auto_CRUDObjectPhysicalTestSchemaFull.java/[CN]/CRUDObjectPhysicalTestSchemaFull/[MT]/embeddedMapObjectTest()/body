{
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.HOUR_OF_DAY,0);
  cal.set(Calendar.MINUTE,0);
  cal.set(Calendar.SECOND,0);
  cal.set(Calendar.MILLISECOND,0);
  Map<String,Object> relatives=new HashMap<String,Object>();
  relatives.put("father","Mike");
  relatives.put("mother","Julia");
  relatives.put("number",10);
  relatives.put("date",cal.getTime());
  JavaComplexTestClass p=database.newInstance(JavaComplexTestClass.class);
  p.setName("Chuck");
  p.getMapObject().put("father","Mike");
  p.getMapObject().put("mother","Julia");
  p.getMapObject().put("number",10);
  p.getMapObject().put("date",cal.getTime());
  for (  String referenceRelativ : relatives.keySet()) {
    Assert.assertEquals(relatives.get(referenceRelativ),p.getMapObject().get(referenceRelativ));
  }
  p.getMapObject().keySet().size();
  database.save(p);
  ORID rid=database.getIdentity(p);
  database.close();
  database=OObjectDatabasePool.global().acquire(url,"admin","admin");
  JavaComplexTestClass loaded=database.load(rid);
  Assert.assertNotNull(loaded.getMapObject());
  for (  String referenceRelativ : relatives.keySet()) {
    Assert.assertEquals(relatives.get(referenceRelativ),loaded.getMapObject().get(referenceRelativ));
  }
  loaded.getMapObject().keySet().size();
  loaded.getMapObject().put("brother","Nike");
  relatives.put("brother","Nike");
  database.save(loaded);
  for (  String referenceRelativ : relatives.keySet()) {
    Assert.assertEquals(relatives.get(referenceRelativ),loaded.getMapObject().get(referenceRelativ));
  }
  loaded.getMapObject().keySet().size();
  database.close();
  database=OObjectDatabasePool.global().acquire(url,"admin","admin");
  loaded=database.load(rid);
  Assert.assertNotNull(loaded.getMapObject());
  for (  String referenceRelativ : relatives.keySet()) {
    Assert.assertEquals(relatives.get(referenceRelativ),loaded.getMapObject().get(referenceRelativ));
  }
  database.delete(loaded);
  p=database.newInstance(JavaComplexTestClass.class);
  p.setName("Chuck");
  p.setMapObject(relatives);
  for (  String referenceRelativ : relatives.keySet()) {
    Assert.assertEquals(relatives.get(referenceRelativ),p.getMapObject().get(referenceRelativ));
  }
  database.save(p);
  p.getMapObject().keySet().size();
  rid=database.getIdentity(p);
  database.close();
  database=OObjectDatabasePool.global().acquire(url,"admin","admin");
  loaded=database.load(rid);
  Assert.assertNotNull(loaded.getMapObject());
  for (  String referenceRelativ : relatives.keySet()) {
    Assert.assertEquals(relatives.get(referenceRelativ),loaded.getMapObject().get(referenceRelativ));
  }
  loaded.getMapObject().keySet().size();
  loaded.getMapObject().put("brother","Nike");
  relatives.put("brother","Nike");
  database.save(loaded);
  for (  String referenceRelativ : relatives.keySet()) {
    Assert.assertEquals(relatives.get(referenceRelativ),loaded.getMapObject().get(referenceRelativ));
  }
  loaded.getMapObject().keySet().size();
  database.close();
  database=OObjectDatabasePool.global().acquire(url,"admin","admin");
  loaded=database.load(rid);
  Assert.assertNotNull(loaded.getMapObject());
  for (  String referenceRelativ : relatives.keySet()) {
    Assert.assertEquals(relatives.get(referenceRelativ),loaded.getMapObject().get(referenceRelativ));
  }
  loaded.getMapObject().keySet().size();
  database.delete(loaded);
  p=new JavaComplexTestClass();
  p.setName("Chuck");
  p.setMapObject(relatives);
  for (  String referenceRelativ : relatives.keySet()) {
    Assert.assertEquals(relatives.get(referenceRelativ),p.getMapObject().get(referenceRelativ));
  }
  p=database.save(p);
  p.getMapObject().keySet().size();
  rid=database.getIdentity(p);
  database.close();
  database=OObjectDatabasePool.global().acquire(url,"admin","admin");
  loaded=database.load(rid);
  Assert.assertNotNull(loaded.getMapObject());
  for (  String referenceRelativ : relatives.keySet()) {
    Assert.assertEquals(relatives.get(referenceRelativ),loaded.getMapObject().get(referenceRelativ));
  }
  loaded.getMapObject().keySet().size();
  loaded.getMapObject().put("brother","Nike");
  relatives.put("brother","Nike");
  database.save(loaded);
  for (  String referenceRelativ : relatives.keySet()) {
    Assert.assertEquals(relatives.get(referenceRelativ),loaded.getMapObject().get(referenceRelativ));
  }
  database.close();
  database=OObjectDatabasePool.global().acquire(url,"admin","admin");
  loaded=database.load(rid);
  loaded.getMapObject().keySet().size();
  Assert.assertNotNull(loaded.getMapObject());
  for (  String referenceRelativ : relatives.keySet()) {
    Assert.assertEquals(relatives.get(referenceRelativ),loaded.getMapObject().get(referenceRelativ));
  }
  database.delete(loaded);
}
