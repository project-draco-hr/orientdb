{
  flush();
  if (!commitExecutor.isShutdown()) {
    commitExecutor.shutdown();
    try {
      if (!commitExecutor.awaitTermination(5,TimeUnit.MINUTES))       throw new OWriteCacheException("Background data flush task cannot be stopped.");
    }
 catch (    InterruptedException e) {
      OLogManager.instance().error(this,"Data flush thread was interrupted");
      Thread.interrupted();
      throw OException.wrapException(new OWriteCacheException("Data flush thread was interrupted"),e);
    }
  }
  final List<Long> result=new ArrayList<Long>();
  filesLock.acquireWriteLock();
  try {
    final Collection<Integer> intIds=nameIdMap.values();
    for (    Integer intId : intIds) {
      if (intId < 0)       continue;
      final long fileId=composeFileId(id,intId);
      final OFileClassic fileClassic=files.remove(fileId);
      fileClassic.close();
      result.add(fileId);
    }
    if (nameIdMapHolder != null) {
      nameIdMapHolder.setLength(0);
      for (      Map.Entry<String,Integer> entry : nameIdMap.entrySet()) {
        writeNameIdEntry(new NameFileIdEntry(entry.getKey(),entry.getValue()),false);
      }
      nameIdMapHolder.getFD().sync();
      nameIdMapHolder.close();
    }
    nameIdMap.clear();
    final long[] ds=new long[result.size()];
    int counter=0;
    for (    long id : result) {
      ds[counter]=id;
      counter++;
    }
    return ds;
  }
  finally {
    filesLock.releaseWriteLock();
  }
}
