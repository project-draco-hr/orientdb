{
  long[] level=new long[OLocalHashTable.MAX_LEVEL_SIZE];
  for (int n=0; n < ODirectoryFirstPage.NODES_PER_PAGE; n++) {
    for (int i=0; i < level.length; i++)     level[i]=i + n * 100;
    directory.addNewNode((byte)5,(byte)6,(byte)7,level);
  }
  for (int n=0; n < ODirectoryPage.NODES_PER_PAGE; n++) {
    for (int i=0; i < level.length; i++)     level[i]=i + n * 100;
    directory.addNewNode((byte)5,(byte)6,(byte)7,level);
  }
  for (int n=0; n < ODirectoryPage.NODES_PER_PAGE; n++) {
    for (int i=0; i < level.length; i++)     level[i]=i + n * 100;
    directory.addNewNode((byte)5,(byte)6,(byte)7,level);
  }
  directory.deleteNode(ODirectoryFirstPage.NODES_PER_PAGE + ODirectoryPage.NODES_PER_PAGE - 1);
  for (int i=0; i < level.length; i++)   level[i]=i + 1000;
  int index=directory.addNewNode((byte)8,(byte)9,(byte)10,level);
  Assert.assertEquals(index,ODirectoryFirstPage.NODES_PER_PAGE + ODirectoryPage.NODES_PER_PAGE - 1);
  directory.setMaxLeftChildDepth(index - 1,(byte)10);
  directory.setMaxRightChildDepth(index - 1,(byte)11);
  directory.setNodeLocalDepth(index - 1,(byte)12);
  for (int i=0; i < level.length; i++)   directory.setNodePointer(index - 1,i,i + 2000);
  directory.setMaxLeftChildDepth(index + 1,(byte)13);
  directory.setMaxRightChildDepth(index + 1,(byte)14);
  directory.setNodeLocalDepth(index + 1,(byte)15);
  for (int i=0; i < level.length; i++)   directory.setNodePointer(index + 1,i,i + 3000);
  Assert.assertEquals(directory.getMaxLeftChildDepth(index - 1),10);
  Assert.assertEquals(directory.getMaxRightChildDepth(index - 1),11);
  Assert.assertEquals(directory.getNodeLocalDepth(index - 1),12);
  for (int i=0; i < level.length; i++)   Assert.assertEquals(directory.getNodePointer(index - 1,i),i + 2000);
  Assert.assertEquals(directory.getMaxLeftChildDepth(index),8);
  Assert.assertEquals(directory.getMaxRightChildDepth(index),9);
  Assert.assertEquals(directory.getNodeLocalDepth(index),10);
  for (int i=0; i < level.length; i++)   Assert.assertEquals(directory.getNodePointer(index,i),i + 1000);
  Assert.assertEquals(directory.getMaxLeftChildDepth(index + 1),13);
  Assert.assertEquals(directory.getMaxRightChildDepth(index + 1),14);
  Assert.assertEquals(directory.getNodeLocalDepth(index + 1),15);
  for (int i=0; i < level.length; i++)   Assert.assertEquals(directory.getNodePointer(index + 1,i),i + 3000);
}
