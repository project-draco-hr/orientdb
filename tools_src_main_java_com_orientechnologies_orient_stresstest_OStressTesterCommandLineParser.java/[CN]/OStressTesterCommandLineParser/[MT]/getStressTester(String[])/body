{
  final Map<String,String> options=checkOptions(readOptions(args));
  final String dbName=TEMP_DATABASE_NAME + new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
  final OStressTester.OMode mode=OStressTester.OMode.valueOf(options.get(OPTION_MODE).toUpperCase());
  String rootPassword=options.get(OPTION_ROOT_PASSWORD);
  final String resultOutputFile=options.get(OPTION_OUTPUT_FILE);
  String plocalPath=options.get(OPTION_PLOCAL_PATH);
  final int operationsPerTransaction=getNumber(options.get(OPTION_TRANSACTIONS),"transactions");
  final int threadsNumber=getNumber(options.get(OPTION_CONCURRENCY),"concurrency");
  final String remoteIp=options.get(OPTION_REMOTE_IP);
  final String workloadCfg=options.get(OPTION_WORKLOAD);
  final boolean keepDatabaseAfterTest=options.get(OPTION_KEEP_DATABASE_AFTER_TEST) != null ? Boolean.parseBoolean(options.get(OPTION_KEEP_DATABASE_AFTER_TEST)) : false;
  int remotePort=2424;
  if (plocalPath != null) {
    if (plocalPath.endsWith(File.separator)) {
      plocalPath=plocalPath.substring(0,plocalPath.length() - File.separator.length());
    }
    File plocalFile=new File(plocalPath);
    if (!plocalFile.exists()) {
      throw new IllegalArgumentException(String.format(COMMAND_LINE_PARSER_NOT_EXISTING_PLOCAL_PATH,plocalPath));
    }
    if (!plocalFile.canWrite()) {
      throw new IllegalArgumentException(String.format(COMMAND_LINE_PARSER_NO_WRITE_PERMISSION_PLOCAL_PATH,plocalPath));
    }
    if (!plocalFile.isDirectory()) {
      throw new IllegalArgumentException(String.format(COMMAND_LINE_PARSER_PLOCAL_PATH_IS_NOT_DIRECTORY,plocalPath));
    }
  }
  if (resultOutputFile != null) {
    File outputFile=new File(resultOutputFile);
    if (outputFile.exists()) {
      outputFile.delete();
    }
    File parentFile=outputFile.getParentFile();
    if (parentFile == null) {
      parentFile=new File(".");
    }
    if (!parentFile.exists()) {
      throw new IllegalArgumentException(String.format(COMMAND_LINE_PARSER_NOT_EXISTING_OUTPUT_DIRECTORY,parentFile.getAbsoluteFile()));
    }
    if (!parentFile.canWrite()) {
      throw new IllegalArgumentException(String.format(COMMAND_LINE_PARSER_NO_WRITE_PERMISSION_OUTPUT_FILE,parentFile.getAbsoluteFile()));
    }
  }
  if (options.get(OPTION_REMOTE_PORT) != null) {
    remotePort=getNumber(options.get(OPTION_REMOTE_PORT),"remotePort");
    if (remotePort > 65535) {
      throw new IllegalArgumentException(String.format(COMMAND_LINE_PARSER_INVALID_REMOTE_PORT_NUMBER,remotePort));
    }
  }
  if (mode == OStressTester.OMode.DISTRIBUTED) {
    throw new IllegalArgumentException(String.format("OMode [%s] not yet supported.",mode));
  }
  if (mode == OStressTester.OMode.REMOTE && remoteIp == null) {
    throw new IllegalArgumentException(COMMAND_LINE_PARSER_MISSING_REMOTE_IP);
  }
  if (rootPassword == null && mode == OStressTester.OMode.REMOTE) {
    Console console=System.console();
    if (console != null) {
      rootPassword=String.valueOf(console.readPassword(String.format(CONSOLE_REMOTE_PASSWORD_PROMPT,remoteIp,remotePort)));
    }
 else {
      throw new Exception(ERROR_OPENING_CONSOLE);
    }
  }
  final List<OWorkload> workloads=parseWorkloads(workloadCfg);
  final ODatabaseIdentifier databaseIdentifier=new ODatabaseIdentifier(mode,dbName,rootPassword,remoteIp,remotePort,plocalPath);
  return new OStressTester(workloads,databaseIdentifier,threadsNumber,operationsPerTransaction,resultOutputFile,keepDatabaseAfterTest);
}
