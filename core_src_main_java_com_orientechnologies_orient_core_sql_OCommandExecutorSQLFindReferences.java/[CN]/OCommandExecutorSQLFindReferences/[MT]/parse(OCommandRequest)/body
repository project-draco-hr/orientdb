{
  final OCommandRequestText textRequest=(OCommandRequestText)iRequest;
  String queryText=textRequest.getText();
  String originalQuery=queryText;
  try {
    queryText=preParse(queryText,iRequest);
    textRequest.setText(queryText);
    init((OCommandRequestText)iRequest);
    parserRequiredKeyword(KEYWORD_FIND);
    parserRequiredKeyword(KEYWORD_REFERENCES);
    final String target=parserRequiredWord(true,"Expected <target>"," =><,\r\n");
    if (target.charAt(0) == '(') {
      subQuery=new StringBuilder();
      parserSetCurrentPosition(OStringSerializerHelper.getEmbedded(parserText,parserGetPreviousPosition(),-1,subQuery));
    }
 else {
      try {
        final ORecordId rid=new ORecordId(target);
        if (!rid.isValid())         throwParsingException("Record ID " + target + " is not valid");
        recordIds.add(rid);
      }
 catch (      IllegalArgumentException iae) {
        throw new OCommandSQLParsingException("Error reading record Id",parserText,parserGetPreviousPosition());
      }
    }
    parserSkipWhiteSpaces();
    classList=parserOptionalWord(true);
    if (classList != null) {
      classList=parserTextUpperCase.substring(parserGetPreviousPosition());
      if (!classList.startsWith("[") || !classList.endsWith("]")) {
        throwParsingException("Class list must be contained in []");
      }
      classList=classList.substring(1,classList.length() - 1);
    }
    return this;
  }
  finally {
    textRequest.setText(originalQuery);
  }
}
