{
  Map<String,String> options=checkOptions(readOptions(args));
  String dbName=OConstants.TEMP_DATABASE_NAME + new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
  OMode mode=OMode.valueOf(options.get(OConstants.OPTION_MODE).toUpperCase());
  String rootPassword=options.get(OConstants.OPTION_ROOT_PASSWORD);
  String resultOutputFile=options.get(OConstants.OPTION_OUTPUT_FILE);
  String plocalPath=options.get(OConstants.OPTION_PLOCAL_PATH);
  int iterationsNumber=getNumber(options.get(OConstants.OPTION_ITERATIONS),"iterations");
  int operationsPerTransaction=getNumber(options.get(OConstants.OPTION_TRANSACTIONS),"transactions");
  int threadsNumber=getNumber(options.get(OConstants.OPTION_THREADS),"threads");
  OOperationsSet operationsSet=new OOperationsSet(options.get(OConstants.OPTION_OPERATIONS),threadsNumber,iterationsNumber);
  String remoteIp=options.get(OConstants.OPTION_REMOTE_IP);
  int remotePort=2424;
  if (plocalPath != null) {
    if (plocalPath.endsWith(File.separator)) {
      plocalPath=plocalPath.substring(0,plocalPath.length() - File.separator.length());
    }
    File plocalFile=new File(plocalPath);
    if (!plocalFile.exists()) {
      throw new OInitException(String.format(OErrorMessages.COMMAND_LINE_PARSER_NOT_EXISTING_PLOCAL_PATH,plocalPath));
    }
    if (!plocalFile.canWrite()) {
      throw new OInitException(String.format(OErrorMessages.COMMAND_LINE_PARSER_NO_WRITE_PERMISSION_PLOCAL_PATH,plocalPath));
    }
    if (!plocalFile.isDirectory()) {
      throw new OInitException(String.format(OErrorMessages.COMMAND_LINE_PARSER_PLOCAL_PATH_IS_NOT_DIRECTORY,plocalPath));
    }
  }
  if (resultOutputFile != null) {
    File outputFile=new File(resultOutputFile);
    if (outputFile.exists()) {
      throw new OInitException(String.format(OErrorMessages.COMMAND_LINE_PARSER_EXISTING_OUTPUT_FILE,resultOutputFile));
    }
    File parentFile=outputFile.getParentFile();
    if (parentFile == null) {
      parentFile=new File(".");
    }
    if (!parentFile.exists()) {
      throw new OInitException(String.format(OErrorMessages.COMMAND_LINE_PARSER_NOT_EXISTING_OUTPUT_DIRECTORY,parentFile.getAbsoluteFile()));
    }
    if (!parentFile.canWrite()) {
      throw new OInitException(String.format(OErrorMessages.COMMAND_LINE_PARSER_NO_WRITE_PERMISSION_OUTPUT_FILE,parentFile.getAbsoluteFile()));
    }
  }
  if (operationsPerTransaction > operationsSet.getNumberOfCreates()) {
    throw new OInitException(String.format(OErrorMessages.COMMAND_LINE_PARSER_TX_GREATER_THAN_CREATES,operationsPerTransaction,operationsSet.getNumberOfCreates()));
  }
  if (options.get(OConstants.OPTION_REMOTE_PORT) != null) {
    remotePort=getNumber(options.get(OConstants.OPTION_REMOTE_PORT),"remotePort");
    if (remotePort > 65535) {
      throw new OInitException(String.format(OErrorMessages.COMMAND_LINE_PARSER_INVALID_REMOTE_PORT_NUMBER,remotePort));
    }
  }
  if (mode == OMode.DISTRIBUTED) {
    throw new OInitException(String.format("OMode [%s] not yet supported.",mode));
  }
  if (mode == OMode.REMOTE && remoteIp == null) {
    throw new OInitException(OErrorMessages.COMMAND_LINE_PARSER_MISSING_REMOTE_IP);
  }
  if (rootPassword == null && mode == OMode.REMOTE) {
    Console console=System.console();
    if (console != null) {
      rootPassword=String.valueOf(console.readPassword(String.format(OConstants.CONSOLE_REMOTE_PASSWORD_PROMPT,remoteIp,remotePort)));
    }
 else {
      throw new Exception(OErrorMessages.ERROR_OPENING_CONSOLE);
    }
  }
  ODatabaseIdentifier databaseIdentifier=new ODatabaseIdentifier(mode,dbName,rootPassword,remoteIp,remotePort,plocalPath);
  return new OStressTester(databaseIdentifier,operationsSet,iterationsNumber,threadsNumber,operationsPerTransaction,resultOutputFile);
}
