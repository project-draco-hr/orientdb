{
  init((OCommandRequestText)iRequest);
  final StringBuilder word=new StringBuilder();
  int oldPos=0;
  int pos=nextWord(parserText,parserTextUpperCase,oldPos,word,true);
  if (pos == -1 || !word.toString().equals(KEYWORD_CREATE))   throw new OCommandSQLParsingException("Keyword " + KEYWORD_CREATE + " not found. Use "+ getSyntax(),parserText,oldPos);
  oldPos=pos;
  pos=nextWord(parserText,parserTextUpperCase,oldPos,word,true);
  if (pos == -1 || !word.toString().equals(KEYWORD_INDEX))   throw new OCommandSQLParsingException("Keyword " + KEYWORD_INDEX + " not found. Use "+ getSyntax(),parserText,oldPos);
  oldPos=pos;
  pos=nextWord(parserText,parserTextUpperCase,oldPos,word,false);
  if (pos == -1)   throw new OCommandSQLParsingException("Expected index name. Use " + getSyntax(),parserText,oldPos);
  indexName=word.toString();
  oldPos=pos;
  pos=nextWord(parserText,parserTextUpperCase,oldPos,word,true);
  if (pos == -1)   throw new OCommandSQLParsingException("Index type requested. Use " + getSyntax(),parserText,oldPos + 1);
  if (word.toString().equals(KEYWORD_ON)) {
    oldPos=pos;
    pos=nextWord(parserText,parserTextUpperCase,oldPos,word,true);
    if (pos == -1)     throw new OCommandSQLParsingException("Expected class name. Use " + getSyntax(),parserText,oldPos);
    oldPos=pos;
    oClass=findClass(word.toString());
    if (oClass == null)     throw new OCommandExecutionException("Class " + word + " not found");
    pos=parserTextUpperCase.indexOf(")");
    if (pos == -1) {
      throw new OCommandSQLParsingException("No right bracket found. Use " + getSyntax(),parserText,oldPos);
    }
    final String props=parserText.substring(oldPos,pos).trim().substring(1);
    List<String> propList=new ArrayList<String>();
    for (    String propToIndex : props.trim().split("\\s*,\\s*")) {
      checkMapIndexSpecifier(propToIndex,parserText,oldPos);
      propList.add(propToIndex);
    }
    fields=new String[propList.size()];
    propList.toArray(fields);
    oldPos=pos + 1;
    pos=nextWord(parserText,parserTextUpperCase,oldPos,word,true);
    if (pos == -1)     throw new OCommandSQLParsingException("Index type requested. Use " + getSyntax(),parserText,oldPos + 1);
  }
 else {
    if (indexName.indexOf('.') > 0) {
      final String[] parts=indexName.split("\\.");
      oClass=findClass(parts[0]);
      if (oClass == null)       throw new OCommandExecutionException("Class " + parts[0] + " not found");
      fields=new String[]{parts[1]};
    }
  }
  indexType=OClass.INDEX_TYPE.valueOf(word.toString());
  if (indexType == null)   throw new OCommandSQLParsingException("Index type is null",parserText,oldPos);
  oldPos=pos;
  final int configPos=parserTextUpperCase.indexOf(KEYWORD_METADATA,oldPos);
  if (configPos > -1) {
    final String configString=parserText.substring(configPos + KEYWORD_METADATA.length()).trim();
    metadataDoc=new ODocument().fromJSON(configString);
  }
  pos=nextWord(parserText,parserTextUpperCase,oldPos,word,true);
  if (pos != -1 && !word.toString().equalsIgnoreCase("NULL") && !word.toString().equalsIgnoreCase(KEYWORD_METADATA)) {
    final String typesString;
    if (configPos > -1)     typesString=parserTextUpperCase.substring(oldPos,configPos).trim();
 else     typesString=parserTextUpperCase.substring(oldPos).trim();
    if (word.toString().equalsIgnoreCase("RUNTIME")) {
      oldPos=pos;
      pos=nextWord(parserText,parserTextUpperCase,oldPos,word,true);
      serializerKeyId=Byte.parseByte(word.toString());
    }
 else {
      ArrayList<OType> keyTypeList=new ArrayList<OType>();
      for (      String typeName : typesString.split("\\s*,\\s*")) {
        keyTypeList.add(OType.valueOf(typeName));
      }
      keyTypes=new OType[keyTypeList.size()];
      keyTypeList.toArray(keyTypes);
      if (fields != null && fields.length != 0 && fields.length != keyTypes.length) {
        throw new OCommandSQLParsingException("Count of fields does not match with count of property types. " + "Fields: " + Arrays.toString(fields) + "; Types: "+ Arrays.toString(keyTypes),parserText,oldPos);
      }
    }
  }
  return this;
}
