{
  super.beforeClass();
  final OSchema schema=database.getMetadata().getSchema();
  if (schema.existsClass("classIndexManagerTestClass"))   schema.dropClass("classIndexManagerTestClass");
  if (schema.existsClass("classIndexManagerTestClassTwo"))   schema.dropClass("classIndexManagerTestClassTwo");
  if (schema.existsClass("classIndexManagerTestSuperClass"))   schema.dropClass("classIndexManagerTestSuperClass");
  if (schema.existsClass("classIndexManagerTestCompositeCollectionClass"))   schema.dropClass("classIndexManagerTestCompositeCollectionClass");
  final OClass superClass=schema.createClass("classIndexManagerTestSuperClass");
  final OProperty propertyZero=superClass.createProperty("prop0",OType.STRING);
  superClass.createIndex("classIndexManagerTestSuperClass.prop0",OClass.INDEX_TYPE.UNIQUE.toString(),null,new ODocument().fields("ignoreNullValues",true),new String[]{"prop0"});
  final OClass oClass=schema.createClass("classIndexManagerTestClass",superClass);
  final OProperty propOne=oClass.createProperty("prop1",OType.STRING);
  oClass.createIndex("classIndexManagerTestClass.prop1",OClass.INDEX_TYPE.UNIQUE.toString(),null,new ODocument().fields("ignoreNullValues",true),new String[]{"prop1"});
  final OProperty propTwo=oClass.createProperty("prop2",OType.INTEGER);
  propTwo.createIndex(OClass.INDEX_TYPE.NOTUNIQUE);
  oClass.createProperty("prop3",OType.BOOLEAN);
  final OProperty propFour=oClass.createProperty("prop4",OType.EMBEDDEDLIST,OType.STRING);
  propFour.createIndex(OClass.INDEX_TYPE.NOTUNIQUE);
  oClass.createProperty("prop5",OType.EMBEDDEDMAP,OType.STRING);
  oClass.createIndex("classIndexManagerTestIndexByKey",OClass.INDEX_TYPE.NOTUNIQUE,"prop5");
  oClass.createIndex("classIndexManagerTestIndexByValue",OClass.INDEX_TYPE.NOTUNIQUE,"prop5 by value");
  final OProperty propSix=oClass.createProperty("prop6",OType.EMBEDDEDSET,OType.STRING);
  propSix.createIndex(OClass.INDEX_TYPE.NOTUNIQUE);
  oClass.createIndex("classIndexManagerComposite",OClass.INDEX_TYPE.UNIQUE.toString(),null,new ODocument().fields("ignoreNullValues",true),new String[]{"prop1","prop2"});
  final OClass oClassTwo=schema.createClass("classIndexManagerTestClassTwo");
  oClassTwo.createProperty("prop1",OType.STRING);
  oClassTwo.createProperty("prop2",OType.INTEGER);
  final OClass compositeCollectionClass=schema.createClass("classIndexManagerTestCompositeCollectionClass");
  compositeCollectionClass.createProperty("prop1",OType.STRING);
  compositeCollectionClass.createProperty("prop2",OType.EMBEDDEDLIST,OType.INTEGER);
  compositeCollectionClass.createIndex("classIndexManagerTestIndexValueAndCollection",OClass.INDEX_TYPE.UNIQUE.toString(),null,new ODocument().fields("ignoreNullValues",true),new String[]{"prop1","prop2"});
  oClass.createIndex("classIndexManagerTestIndexOnPropertiesFromClassAndSuperclass",OClass.INDEX_TYPE.UNIQUE.toString(),null,new ODocument().fields("ignoreNullValues",true),new String[]{"prop0","prop1"});
  schema.reload();
  database.close();
}
