{
  LinkedList<PagePathItemUnit> path=new LinkedList<PagePathItemUnit>();
  long bucketIndex=ROOT_INDEX;
  OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,bucketIndex,false);
  int itemIndex=0;
  OSBTreeBucket<K,V> bucket=new OSBTreeBucket<K,V>(cacheEntry,keySerializer,keyTypes,valueSerializer,getChangesTree(atomicOperation,cacheEntry));
  try {
    while (true) {
      if (!bucket.isLeaf()) {
        if (bucket.isEmpty() || itemIndex > bucket.size()) {
          if (!path.isEmpty()) {
            PagePathItemUnit pagePathItemUnit=path.removeLast();
            bucketIndex=pagePathItemUnit.pageIndex;
            itemIndex=pagePathItemUnit.itemIndex + 1;
          }
 else           return null;
        }
 else {
          path.add(new PagePathItemUnit(bucketIndex,itemIndex));
          if (itemIndex < bucket.size()) {
            OSBTreeBucket.SBTreeEntry<K,V> entry=bucket.getEntry(itemIndex);
            bucketIndex=entry.leftChild;
          }
 else {
            OSBTreeBucket.SBTreeEntry<K,V> entry=bucket.getEntry(itemIndex - 1);
            bucketIndex=entry.rightChild;
          }
          itemIndex=0;
        }
      }
 else {
        if (bucket.isEmpty()) {
          if (!path.isEmpty()) {
            PagePathItemUnit pagePathItemUnit=path.removeLast();
            bucketIndex=pagePathItemUnit.pageIndex;
            itemIndex=pagePathItemUnit.itemIndex + 1;
          }
 else           return null;
        }
 else {
          final ArrayList<Long> resultPath=new ArrayList<Long>(path.size() + 1);
          for (          PagePathItemUnit pathItemUnit : path)           resultPath.add(pathItemUnit.pageIndex);
          resultPath.add(bucketIndex);
          return new BucketSearchResult(0,resultPath);
        }
      }
      releasePage(atomicOperation,cacheEntry);
      cacheEntry=loadPage(atomicOperation,fileId,bucketIndex,false);
      bucket=new OSBTreeBucket<K,V>(cacheEntry,keySerializer,keyTypes,valueSerializer,getChangesTree(atomicOperation,cacheEntry));
    }
  }
  finally {
    releasePage(atomicOperation,cacheEntry);
  }
}
