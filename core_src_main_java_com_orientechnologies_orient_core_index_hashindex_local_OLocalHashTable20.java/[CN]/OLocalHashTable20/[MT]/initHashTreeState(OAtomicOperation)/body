{
  for (long pageIndex=0; pageIndex < MAX_LEVEL_SIZE; pageIndex++) {
    final OCacheEntry cacheEntry=loadPageEntry(pageIndex,0,atomicOperation);
    cacheEntry.acquireExclusiveLock();
    try {
      final OHashIndexBucket<K,V> emptyBucket=new OHashIndexBucket<K,V>(MAX_LEVEL_DEPTH,cacheEntry,keySerializer,valueSerializer,keyTypes,getChangesTree(atomicOperation,cacheEntry));
    }
  finally {
      cacheEntry.releaseExclusiveLock();
      releasePage(atomicOperation,cacheEntry);
    }
  }
  final long[] rootTree=new long[MAX_LEVEL_SIZE];
  for (int i=0; i < MAX_LEVEL_SIZE; i++)   rootTree[i]=createBucketPointer(i,0);
  directory.clear();
  directory.addNewNode((byte)0,(byte)0,(byte)MAX_LEVEL_DEPTH,rootTree);
  OCacheEntry hashStateEntry=loadPage(atomicOperation,fileStateId,hashStateEntryIndex,true);
  hashStateEntry.acquireExclusiveLock();
  try {
    OHashIndexFileLevelMetadataPage metadataPage=new OHashIndexFileLevelMetadataPage(hashStateEntry,getChangesTree(atomicOperation,hashStateEntry),false);
    metadataPage.setBucketsCount(0,MAX_LEVEL_SIZE);
    metadataPage.setRecordsCount(0);
  }
  finally {
    hashStateEntry.releaseExclusiveLock();
    releasePage(atomicOperation,hashStateEntry);
  }
}
