{
  if (!groupResponsesByResult || request.getTask().getQuorumType() == OCommandDistributedReplicateRequest.QUORUM_TYPE.NONE)   return null;
  if (dManager.getNodeStatus() != ODistributedServerManager.NODE_STATUS.ONLINE)   return null;
  final int bestResponsesGroupIndex=getBestResponsesGroup();
  final List<ODistributedResponse> bestResponsesGroup=responseGroups.get(bestResponsesGroupIndex);
  final int maxCoherentResponses=bestResponsesGroup.size();
  final int conflicts=getExpectedResponses() - (maxCoherentResponses);
  if (isMinimumQuorumReached()) {
    if (responseGroups.size() == 1)     return null;
    if (checkNoWinnerCase(bestResponsesGroup))     return null;
    if (fixNodesInConflict(bestResponsesGroup,conflicts))     return null;
  }
  ODistributedServerLog.warn(this,dManager.getLocalNodeName(),null,DIRECTION.NONE,"Detected %d node(s) in timeout or in conflict and quorum (%d) has not been reached, rolling back changes for request (%s)",conflicts,quorum,request);
  if (ODistributedServerLog.isDebugEnabled())   ODistributedServerLog.debug(this,dManager.getLocalNodeName(),null,DIRECTION.NONE,composeConflictMessage());
  if (!undoRequest()) {
    return null;
  }
  for (  Object r : responses.values()) {
    if (r instanceof ODistributedRecordLockedException)     throw (ODistributedRecordLockedException)r;
 else     if (r instanceof OConcurrentCreateException)     throw (OConcurrentCreateException)r;
  }
  final Object goodResponsePayload=bestResponsesGroup.isEmpty() ? null : bestResponsesGroup.get(0).getPayload();
  if (goodResponsePayload instanceof RuntimeException)   return (RuntimeException)goodResponsePayload;
 else   if (goodResponsePayload instanceof Throwable)   return OException.wrapException(new ODistributedException(composeConflictMessage()),(Throwable)goodResponsePayload);
 else {
    if (responseGroups.size() <= 2) {
      for (int i=0; i < responseGroups.size(); ++i) {
        if (i == bestResponsesGroupIndex)         continue;
        final List<ODistributedResponse> badResponses=responseGroups.get(i);
        if (badResponses.get(0).getPayload() instanceof RuntimeException)         return (RuntimeException)badResponses.get(0).getPayload();
      }
    }
    return new ODistributedOperationException(composeConflictMessage());
  }
}
