{
  currentLine++;
  final long now=System.currentTimeMillis();
  if (now - lastDump >= data.dumpProgressEvery) {
    dumpProgress(db,template);
    lastDump=now;
  }
  ODocument record=new ODocument(template.getClassName());
  context.setVariable("currentRecord",record);
  context.setVariable("currentLine",currentLine);
  context.setVariable("warnings",warnings);
  context.setVariable("errors",errors);
  try {
    final List<String> fields=OStringSerializerHelper.smartSplit(thisLine,new char[]{data.separator.charAt(0)},0,-1,false,false,false,false);
    if (!template.hasSubTemplates() && fields.size() < template.getMandatoryFields()) {
      OLogManager.instance().info(this,"* Error on row %d: found %d fields in row but template has %d mandatory fields configured. Skipped it. Row:\n%s",currentLine,fields.size(),template.getMandatoryFields(),thisLine);
      errors++;
      return;
    }
    final Iterator<String> fieldValuesIterator=fields.iterator();
    parseFields(db,template,cls,record,template.getFieldNames().iterator(),fieldValuesIterator);
    for (    Entry<OSQLPredicate,OImporterConfiguration> sub : template.getSubTemplates().entrySet()) {
      final Object res=sub.getKey().evaluate(record,null,null);
      if (res != null && res instanceof Boolean && ((Boolean)res)) {
        final OImporterConfiguration subTemplate=sub.getValue();
        parseFields(db,subTemplate,cls,record,subTemplate.getFieldNames().iterator(),fieldValuesIterator);
        AtomicInteger current=recordSubTemplate.get(sub.getKey());
        if (current == null) {
          current=new AtomicInteger();
          recordSubTemplate.put(sub.getKey(),current);
        }
 else         current.incrementAndGet();
      }
    }
    recordsCreated++;
    if (lookupQuery != null) {
      List<OIdentifiable> existent=db.query(lookupQuery,record.field(template.getKey().getKey()));
      if (existent != null && !existent.isEmpty()) {
        final ODocument current=existent.get(0).getRecord();
        for (        String fieldName : record.fieldNames()) {
          Object fieldValue=record.field(fieldName);
          final OSQLPredicate condition=template.getOverwriteIf().get(fieldName);
          if (condition != null) {
            final Object result=condition.evaluate(current,null,context);
            if (result != null && result instanceof Boolean && !((Boolean)result))             continue;
          }
          final Object oldValue=current.field(fieldName);
          if (oldValue != null) {
            if (oldValue instanceof Collection<?>) {
              if (fieldValue instanceof Collection<?>)               if (!OMultiValue.equals((Collection<Object>)oldValue,(Collection<Object>)fieldValue))               ((Collection<Object>)oldValue).addAll((Collection<? extends Object>)fieldValue);
 else               continue;
 else {
                ((Collection<Object>)oldValue).add(fieldValue);
                fieldValue=oldValue;
              }
            }
          }
          current.field(fieldName,fieldValue);
        }
        record=current;
        context.setVariable("currentRecord",record);
        recordsCreated--;
        recordsUpdated++;
      }
    }
    template.getImplementation().onBeforeLine(db,context);
    record.unpin();
    if (template.isSave())     try {
      record.save();
    }
 catch (    Exception e) {
      OLogManager.instance().error(this,"Error on saving record: " + e);
      throw e;
    }
    recordsImportedInFile++;
    recordsImported++;
    warnings=(Integer)context.getVariable("warnings");
    errors=(Integer)context.getVariable("errors");
    template.getImplementation().onAfterLine(db,context);
  }
 catch (  Exception e) {
    OLogManager.instance().error(this,"Error on importing line, continue with the rest of the file",e);
    errors++;
  }
}
