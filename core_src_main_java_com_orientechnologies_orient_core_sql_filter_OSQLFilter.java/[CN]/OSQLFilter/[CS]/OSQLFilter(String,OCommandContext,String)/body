{
  super();
  context=iContext;
  parserText=iText;
  parserTextUpperCase=iText.toUpperCase();
  try {
    if (extractTargets()) {
      if (parserOptionalKeyword(OCommandExecutorSQLAbstract.KEYWORD_LET,OCommandExecutorSQLAbstract.KEYWORD_LIMIT,OCommandExecutorSQLSelect.KEYWORD_ORDER,OCommandExecutorSQLSelect.KEYWORD_SKIP,iFilterKeyword,OCommandExecutorSQLSelect.KEYWORD_WHERE)) {
        boolean continueParsing=true;
        if (parserGetLastWord().equals(OCommandExecutorSQLAbstract.KEYWORD_LET)) {
          extractLet(iFilterKeyword);
          continueParsing=parserOptionalKeyword(OCommandExecutorSQLAbstract.KEYWORD_LIMIT,OCommandExecutorSQLSelect.KEYWORD_ORDER,OCommandExecutorSQLSelect.KEYWORD_SKIP,iFilterKeyword,OCommandExecutorSQLSelect.KEYWORD_WHERE);
        }
        if (continueParsing) {
          if (parserGetLastWord().equals(iFilterKeyword) || parserGetLastWord().equals(OCommandExecutorSQLSelect.KEYWORD_WHERE)) {
            if (!iFilterKeyword.equals(OCommandExecutorSQLSelect.KEYWORD_WHERE) && parserGetLastWord().equals(OCommandExecutorSQLSelect.KEYWORD_WHERE))             warnDeprecatedWhere();
            final int lastPos=parserGetCurrentPosition();
            final String lastText=parserText;
            final String lastTextUpperCase=parserTextUpperCase;
            text(parserText.substring(lastPos));
            parserText=lastText;
            parserTextUpperCase=lastTextUpperCase;
            parserMoveCurrentPosition(lastPos);
          }
 else           parserGoBack();
        }
 else         parserGoBack();
      }
    }
  }
 catch (  OQueryParsingException e) {
    if (e.getText() == null)     throw new OQueryParsingException("Error on parsing query",parserText,parserGetCurrentPosition(),e);
    throw e;
  }
catch (  Throwable t) {
    throw new OQueryParsingException("Error on parsing query",parserText,parserGetCurrentPosition(),t);
  }
}
