{
  database.getMetadata().getIndexManager().reload();
  database.begin();
  final OIndex<?> index=database.getMetadata().getIndexManager().getIndex("idxTxAwareMultiValueGetTest");
  Assert.assertTrue(index instanceof OIndexTxAwareMultiValue);
  final int clusterId=database.getDefaultClusterId();
  final List<OClusterPosition> positions=getValidPositions(clusterId);
  index.put(1,new ORecordId(clusterId,positions.get(0)));
  index.put(1,new ORecordId(clusterId,positions.get(1)));
  index.put(2,new ORecordId(clusterId,positions.get(2)));
  database.commit();
  Assert.assertNull(database.getTransaction().getIndexChanges("idxTxAwareMultiValueGetTest"));
  Assert.assertEquals(((OIndexTxAwareMultiValue)index).get(1).size(),2);
  Assert.assertEquals(((OIndexTxAwareMultiValue)index).get(2).size(),1);
  database.begin();
  index.put(2,new ORecordId(clusterId,OClusterPositionFactory.INSTANCE.valueOf(3)));
  Assert.assertNotNull(database.getTransaction().getIndexChanges("idxTxAwareMultiValueGetTest"));
  Assert.assertEquals(((OIndexTxAwareMultiValue)index).get(2).size(),2);
  database.rollback();
  Assert.assertNull(database.getTransaction().getIndexChanges("idxTxAwareMultiValueGetTest"));
  Assert.assertEquals(((OIndexTxAwareMultiValue)index).get(1).size(),2);
  Assert.assertEquals(((OIndexTxAwareMultiValue)index).get(2).size(),1);
}
