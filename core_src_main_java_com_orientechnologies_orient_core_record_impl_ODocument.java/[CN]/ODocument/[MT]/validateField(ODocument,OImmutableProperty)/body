{
  final Object fieldValue;
  ODocumentEntry entry=iRecord._fields.get(p.getName());
  if (entry != null && entry.exist()) {
    fieldValue=entry.value;
    if (p.isNotNull() && fieldValue == null)     throw new OValidationException("The field '" + p.getFullName() + "' cannot be null, record: "+ iRecord);
    if (fieldValue != null && p.getRegexp() != null && p.getType().equals(OType.STRING)) {
      if (!((String)fieldValue).matches(p.getRegexp()))       throw new OValidationException("The field '" + p.getFullName() + "' does not match the regular expression '"+ p.getRegexp()+ "'. Field value is: "+ fieldValue+ ", record: "+ iRecord);
    }
  }
 else {
    if (p.isMandatory()) {
      throw new OValidationException("The field '" + p.getFullName() + "' is mandatory, but not found on record: "+ iRecord);
    }
    fieldValue=null;
  }
  final OType type=p.getType();
  if (fieldValue != null && type != null) {
switch (type) {
case LINK:
      validateLink(p,fieldValue,false);
    break;
case LINKLIST:
  if (!(fieldValue instanceof List))   throw new OValidationException("The field '" + p.getFullName() + "' has been declared as LINKLIST but an incompatible type is used. Value: "+ fieldValue);
validateLinkCollection(p,(Collection<Object>)fieldValue,entry);
break;
case LINKSET:
if (!(fieldValue instanceof Set)) throw new OValidationException("The field '" + p.getFullName() + "' has been declared as LINKSET but an incompatible type is used. Value: "+ fieldValue);
validateLinkCollection(p,(Collection<Object>)fieldValue,entry);
break;
case LINKMAP:
if (!(fieldValue instanceof Map)) throw new OValidationException("The field '" + p.getFullName() + "' has been declared as LINKMAP but an incompatible type is used. Value: "+ fieldValue);
validateLinkCollection(p,((Map<?,Object>)fieldValue).values(),entry);
break;
case LINKBAG:
if (!(fieldValue instanceof ORidBag)) throw new OValidationException("The field '" + p.getFullName() + "' has been declared as LINKBAG but an incompatible type is used. Value: "+ fieldValue);
validateLinkCollection(p,(Iterable<Object>)fieldValue,entry);
break;
case EMBEDDED:
validateEmbedded(p,fieldValue);
break;
case EMBEDDEDLIST:
if (!(fieldValue instanceof List)) throw new OValidationException("The field '" + p.getFullName() + "' has been declared as EMBEDDEDLIST but an incompatible type is used. Value: "+ fieldValue);
if (p.getLinkedClass() != null) {
for (Object item : ((List<?>)fieldValue)) validateEmbedded(p,item);
}
 else if (p.getLinkedType() != null) {
for (Object item : ((List<?>)fieldValue)) validateType(p,item);
}
break;
case EMBEDDEDSET:
if (!(fieldValue instanceof Set)) throw new OValidationException("The field '" + p.getFullName() + "' has been declared as EMBEDDEDSET but an incompatible type is used. Value: "+ fieldValue);
if (p.getLinkedClass() != null) {
for (Object item : ((Set<?>)fieldValue)) validateEmbedded(p,item);
}
 else if (p.getLinkedType() != null) {
for (Object item : ((Set<?>)fieldValue)) validateType(p,item);
}
break;
case EMBEDDEDMAP:
if (!(fieldValue instanceof Map)) throw new OValidationException("The field '" + p.getFullName() + "' has been declared as EMBEDDEDMAP but an incompatible type is used. Value: "+ fieldValue);
if (p.getLinkedClass() != null) {
for (Entry<?,?> colleEntry : ((Map<?,?>)fieldValue).entrySet()) validateEmbedded(p,colleEntry.getValue());
}
 else if (p.getLinkedType() != null) {
for (Entry<?,?> collEntry : ((Map<?,?>)fieldValue).entrySet()) validateType(p,collEntry.getValue());
}
break;
}
}
if (p.getMin() != null && fieldValue != null) {
final String min=p.getMin();
if (p.getMinComparable().compareTo(fieldValue) > 0) {
switch (p.getType()) {
case STRING:
throw new OValidationException("The field '" + p.getFullName() + "' contains fewer characters than "+ min+ " requested");
case DATE:
case DATETIME:
throw new OValidationException("The field '" + p.getFullName() + "' contains the date "+ fieldValue+ " which precedes the first acceptable date ("+ min+ ")");
case BINARY:
throw new OValidationException("The field '" + p.getFullName() + "' contains fewer bytes than "+ min+ " requested");
case EMBEDDEDLIST:
case EMBEDDEDSET:
case LINKLIST:
case LINKSET:
case EMBEDDEDMAP:
case LINKMAP:
throw new OValidationException("The field '" + p.getFullName() + "' contains fewer items than "+ min+ " requested");
default :
throw new OValidationException("The field '" + p.getFullName() + "' is less than "+ min);
}
}
}
if (p.getMaxComparable() != null && fieldValue != null) {
final String max=p.getMax();
if (p.getMaxComparable().compareTo(fieldValue) < 0) {
switch (p.getType()) {
case STRING:
throw new OValidationException("The field '" + p.getFullName() + "' contains more characters than "+ max+ " requested");
case DATE:
case DATETIME:
throw new OValidationException("The field '" + p.getFullName() + "' contains the date "+ fieldValue+ " which is after the last acceptable date ("+ max+ ")");
case BINARY:
throw new OValidationException("The field '" + p.getFullName() + "' contains more bytes than "+ max+ " requested");
case EMBEDDEDLIST:
case EMBEDDEDSET:
case LINKLIST:
case LINKSET:
case EMBEDDEDMAP:
case LINKMAP:
throw new OValidationException("The field '" + p.getFullName() + "' contains more items than "+ max+ " requested");
default :
throw new OValidationException("The field '" + p.getFullName() + "' is greater than "+ max);
}
}
}
if (p.isReadonly() && !ORecordVersionHelper.isTombstone(iRecord.getVersion())) {
if (entry != null && (entry.changed || entry.timeLine != null) && !entry.created) {
Object orgVal=entry.original;
boolean simple=fieldValue != null ? OType.isSimpleType(fieldValue) : OType.isSimpleType(orgVal);
if ((simple) || (fieldValue != null && orgVal == null) || (fieldValue == null && orgVal != null)|| (fieldValue != null && !fieldValue.equals(orgVal))) throw new OValidationException("The field '" + p.getFullName() + "' is immutable and cannot be altered. Field value is: "+ entry.value);
}
}
}
