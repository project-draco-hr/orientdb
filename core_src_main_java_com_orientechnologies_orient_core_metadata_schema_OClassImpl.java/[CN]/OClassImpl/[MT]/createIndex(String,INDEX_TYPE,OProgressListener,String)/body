{
  if (!(INDEX_TYPE.DICTIONARY.equals(iType) || INDEX_TYPE.FULLTEXT.equals(iType) || INDEX_TYPE.NOTUNIQUE.equals(iType)|| INDEX_TYPE.UNIQUE.equals(iType)))   throw new OIndexException("Index of this type (" + iType + ") can not be used in class indexes.");
  if (fields.length == 0)   throw new OIndexException("List of fields to index can not be empty.");
  if (fields.length > 1 && INDEX_TYPE.FULLTEXT.equals(iType))   throw new OIndexException(INDEX_TYPE.FULLTEXT + " indexes can not be used as composite ones.");
  final Set<String> existingFieldNames=properties.keySet();
  final List<String> fieldsToIndex=new LinkedList<String>();
  for (  final String fieldName : fields) {
    final String normalizedFiledName=fieldName.toLowerCase();
    if (!existingFieldNames.contains(normalizedFiledName))     throw new OIndexException("Index with name : '" + iName + "' can not be created on class : '"+ name+ "' because field: '"+ fieldName+ "' is absent in class definition.");
    fieldsToIndex.add(fieldName);
  }
  final OIndexDefinition indexDefinition;
  if (fieldsToIndex.size() == 1)   indexDefinition=new OPropertyIndexDefinition(name,fieldsToIndex.get(0),calculateIndexType(properties.get(fieldsToIndex.get(0).toLowerCase())));
 else {
    final OCompositeIndexDefinition compositeIndex=new OCompositeIndexDefinition(name);
    for (    final String fieldName : fieldsToIndex) {
      final OType propertyType=properties.get(fieldName.toLowerCase()).getType();
      if (propertyType.equals(OType.EMBEDDEDLIST) || propertyType.equals(OType.EMBEDDEDSET) || propertyType.equals(OType.LINKSET)|| propertyType.equals(OType.LINKSET))       throw new OIndexException("Collections are not supported in composite indexes");
      final OPropertyIndexDefinition propertyIndex=new OPropertyIndexDefinition(name,fieldName,propertyType);
      compositeIndex.addIndex(propertyIndex);
    }
    indexDefinition=compositeIndex;
  }
  final OIndex<?> index=getDatabase().getMetadata().getIndexManager().createIndex(iName,iType.toString(),indexDefinition,clusterIds,iProgressListener);
  return index;
}
