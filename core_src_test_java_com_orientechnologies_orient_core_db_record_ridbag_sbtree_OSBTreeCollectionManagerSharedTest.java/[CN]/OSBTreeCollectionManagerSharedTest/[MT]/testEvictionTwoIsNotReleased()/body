{
  List<OSBTreeBonsai<OIdentifiable,Integer>> createdTrees=new ArrayList<OSBTreeBonsai<OIdentifiable,Integer>>();
  for (int i=0; i < 10; i++) {
    OSBTreeBonsai<OIdentifiable,Integer> tree=sbTreeCollectionManager.createAndLoadTree(databaseDocumentTx.getDefaultClusterId());
    createdTrees.add(tree);
    sbTreeCollectionManager.releaseSBTree(new OBonsaiCollectionPointer(tree.getFileId(),tree.getRootBucketPointer()));
  }
  Assert.assertEquals(sbTreeCollectionManager.size(),10);
  for (int i=0; i < 10; i++) {
    final OSBTreeBonsai<OIdentifiable,Integer> createdTree=createdTrees.get(i);
    final OBonsaiCollectionPointer collectionPointer=new OBonsaiCollectionPointer(createdTree.getFileId(),createdTree.getRootBucketPointer());
    OSBTreeBonsai<OIdentifiable,Integer> cachedTree=sbTreeCollectionManager.loadSBTree(collectionPointer);
    Assert.assertSame(cachedTree,createdTree);
    if (i > 1)     sbTreeCollectionManager.releaseSBTree(collectionPointer);
  }
  OSBTreeBonsai<OIdentifiable,Integer> tree=sbTreeCollectionManager.createAndLoadTree(databaseDocumentTx.getDefaultClusterId());
  sbTreeCollectionManager.releaseSBTree(new OBonsaiCollectionPointer(tree.getFileId(),tree.getRootBucketPointer()));
  Assert.assertEquals(sbTreeCollectionManager.size(),8);
  for (int i=9; i >= 5; i--) {
    OSBTreeBonsai<OIdentifiable,Integer> createdTree=createdTrees.get(i);
    final OBonsaiCollectionPointer collectionPointer=new OBonsaiCollectionPointer(createdTree.getFileId(),createdTree.getRootBucketPointer());
    OSBTreeBonsai<OIdentifiable,Integer> cachedTree=sbTreeCollectionManager.loadSBTree(collectionPointer);
    Assert.assertSame(cachedTree,createdTree);
    sbTreeCollectionManager.releaseSBTree(collectionPointer);
  }
  for (int i=4; i >= 2; i--) {
    OSBTreeBonsai<OIdentifiable,Integer> createdTree=createdTrees.get(i);
    final OBonsaiCollectionPointer collectionPointer=new OBonsaiCollectionPointer(createdTree.getFileId(),createdTree.getRootBucketPointer());
    OSBTreeBonsai<OIdentifiable,Integer> cachedTree=sbTreeCollectionManager.loadSBTree(collectionPointer);
    Assert.assertNotSame(cachedTree,createdTree);
    sbTreeCollectionManager.releaseSBTree(collectionPointer);
  }
  for (int i=4; i >= 2; i--) {
    OSBTreeBonsai<OIdentifiable,Integer> createdTree=createdTrees.get(i);
    final OBonsaiCollectionPointer collectionPointer=new OBonsaiCollectionPointer(createdTree.getFileId(),createdTree.getRootBucketPointer());
    OSBTreeBonsai<OIdentifiable,Integer> cachedTree=sbTreeCollectionManager.loadSBTree(collectionPointer);
    Assert.assertNotSame(cachedTree,createdTree);
    sbTreeCollectionManager.releaseSBTree(collectionPointer);
  }
  for (int i=4; i >= 2; i--) {
    OSBTreeBonsai<OIdentifiable,Integer> createdTree=createdTrees.get(i);
    final OBonsaiCollectionPointer collectionPointer=new OBonsaiCollectionPointer(createdTree.getFileId(),createdTree.getRootBucketPointer());
    OSBTreeBonsai<OIdentifiable,Integer> cachedTree=sbTreeCollectionManager.loadSBTree(collectionPointer);
    Assert.assertNotSame(cachedTree,createdTree);
    sbTreeCollectionManager.releaseSBTree(collectionPointer);
  }
}
