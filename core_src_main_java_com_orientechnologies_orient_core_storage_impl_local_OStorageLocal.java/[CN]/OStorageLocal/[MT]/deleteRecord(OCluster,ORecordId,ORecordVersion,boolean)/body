{
  final long timer=Orient.instance().getProfiler().startChrono();
  lock.acquireExclusiveLock();
  try {
    lockManager.acquireLock(Thread.currentThread(),iRid,LOCK.EXCLUSIVE);
    try {
      final OPhysicalPosition ppos=iClusterSegment.getPhysicalPosition(new OPhysicalPosition(iRid.clusterPosition));
      if (!checkForRecordValidity(ppos))       return null;
      if (iVersion.getCounter() > -1 && !ppos.recordVersion.equals(iVersion))       if (OFastConcurrentModificationException.enabled())       throw OFastConcurrentModificationException.instance();
 else       throw new OConcurrentModificationException(iRid,ppos.recordVersion,iVersion,ORecordOperation.DELETED);
      if (ppos.dataSegmentPos > -1)       getDataSegmentById(ppos.dataSegmentId).deleteRecord(ppos.dataSegmentPos);
      if (useTombstones)       iClusterSegment.updateVersion(iRid.clusterPosition,ORecordVersion.TOMBSTONE);
 else       iClusterSegment.removePhysicalPosition(iRid.clusterPosition);
      return ppos;
    }
  finally {
      lockManager.releaseLock(Thread.currentThread(),iRid,LOCK.EXCLUSIVE);
    }
  }
 catch (  IOException e) {
    OLogManager.instance().error(this,"Error on deleting record " + iRid + "( cluster: "+ iClusterSegment+ ")",e);
  }
 finally {
    lock.releaseExclusiveLock();
    Orient.instance().getProfiler().stopChrono(PROFILER_DELETE_RECORD,"Delete a record from local database",timer,"db.*.deleteRecord");
  }
  return null;
}
