{
  checkOpeness();
  checkIfActive();
  if (!record.isDirty())   return (RET)record;
  final ORecordId rid=(ORecordId)record.getIdentity();
  if (rid == null)   throw new ODatabaseException("Cannot create record because it has no identity. Probably is not a regular record or contains projections of fields rather than a full record");
  record.setInternalStatus(ORecordElement.STATUS.MARSHALLING);
  try {
    byte[] stream=null;
    final OStorageOperationResult<Integer> operationResult;
    getMetadata().makeThreadLocalSchemaSnapshot();
    if (record instanceof ODocument)     ODocumentInternal.checkClass((ODocument)record,this);
    ORecordSerializationContext.pushContext();
    final boolean isNew=forceCreate || rid.isNew();
    try {
      final ORecordHook.TYPE triggerType;
      if (isNew) {
        ORecordInternal.onBeforeIdentityChanged(record);
        int id=assignAndCheckCluster(record,clusterName);
        clusterName=getClusterNameById(id);
        checkSecurity(ORule.ResourceGeneric.CLUSTER,ORole.PERMISSION_CREATE,clusterName);
        triggerType=ORecordHook.TYPE.BEFORE_CREATE;
      }
 else {
        clusterName=getClusterNameById(record.getIdentity().getClusterId());
        checkSecurity(ORule.ResourceGeneric.CLUSTER,ORole.PERMISSION_UPDATE,clusterName);
        triggerType=ORecordHook.TYPE.BEFORE_UPDATE;
      }
      stream=record.toStream();
      final ORecordHook.RESULT hookResult=callbackHooks(triggerType,record);
      if (hookResult == ORecordHook.RESULT.RECORD_CHANGED) {
        if (record instanceof ODocument)         ((ODocument)record).validate();
        stream=updateStream(record);
      }
 else       if (hookResult == ORecordHook.RESULT.SKIP_IO)       return (RET)record;
 else       if (hookResult == ORecordHook.RESULT.RECORD_REPLACED)       return (RET)OHookReplacedRecordThreadLocal.INSTANCE.get();
      ORecordSaveThreadLocal.setLast(record);
      try {
        boolean updateContent=ORecordInternal.isContentChanged(record);
        byte[] content=(stream == null) ? OCommonConst.EMPTY_BYTE_ARRAY : stream;
        byte recordType=ORecordInternal.getRecordType(record);
        final int modeIndex=mode.ordinal();
        Orient.instance().getRecordFactoryManager().getRecordTypeClass(recordType);
        if (forceCreate || ORecordId.isNew(rid.clusterPosition)) {
          final OStorageOperationResult<OPhysicalPosition> ppos=storage.createRecord(rid,content,ver,recordType,modeIndex,(ORecordCallback<Long>)recordCreatedCallback);
          operationResult=new OStorageOperationResult<Integer>(ppos.getResult().recordVersion,ppos.isMoved());
        }
 else {
          operationResult=storage.updateRecord(rid,updateContent,content,ver,recordType,modeIndex,recordUpdatedCallback);
        }
        final int version=operationResult.getResult();
        if (isNew) {
          ((ORecordId)record.getIdentity()).copyFrom(rid);
          ORecordInternal.onAfterIdentityChanged(record);
        }
        if (operationResult.getModifiedRecordContent() != null)         stream=operationResult.getModifiedRecordContent();
        ORecordInternal.fill(record,rid,version,stream,false);
        callbackHookSuccess(record,isNew,stream,operationResult);
      }
 catch (      Exception t) {
        callbackHookFailure(record,isNew,stream);
        throw t;
      }
    }
  finally {
      callbackHookFinalize(record,isNew,stream);
      ORecordSerializationContext.pullContext();
      getMetadata().clearThreadLocalSchemaSnapshot();
      ORecordSaveThreadLocal.removeLast();
    }
    if (stream != null && stream.length > 0 && !operationResult.isMoved())     getLocalCache().updateRecord(record);
  }
 catch (  OException e) {
    throw e;
  }
catch (  Exception t) {
    if (!ORecordId.isValid(record.getIdentity().getClusterPosition()))     throw OException.wrapException(new ODatabaseException("Error on saving record in cluster #" + record.getIdentity().getClusterId()),t);
 else     throw OException.wrapException(new ODatabaseException("Error on saving record " + record.getIdentity()),t);
  }
 finally {
    record.setInternalStatus(ORecordElement.STATUS.LOADED);
  }
  return (RET)record;
}
