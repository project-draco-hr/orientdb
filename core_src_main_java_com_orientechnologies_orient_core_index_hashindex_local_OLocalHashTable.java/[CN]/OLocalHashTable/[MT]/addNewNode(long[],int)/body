{
  diskCache.loadPinnedPage(hashStateEntry);
  final OCachePointer hashStatePointer=hashStateEntry.getCachePointer();
  hashStatePointer.acquireExclusiveLock();
  try {
    OHashIndexFileLevelMetadataPage metadataPage=new OHashIndexFileLevelMetadataPage(hashStatePointer.getDataPointer(),ODurablePage.TrackMode.NONE,false);
    int hashTreeTombstone=metadataPage.getHashTreeTombstone();
    if (hashTreeTombstone >= 0) {
      long[] tombstone=hashTree[hashTreeTombstone];
      hashTree[hashTreeTombstone]=newNode;
      nodesMetadata[hashTreeTombstone]=new OHashTreeNodeMetadata((byte)0,(byte)0,(byte)nodeLocalDepth);
      final int nodeIndex=hashTreeTombstone;
      if (tombstone != null)       hashTreeTombstone=(int)tombstone[0];
 else       hashTreeTombstone=-1;
      metadataPage.setHashTreeTombstone(hashTreeTombstone);
      hashStateEntry.markDirty();
      return nodeIndex;
    }
    int hashTreeSize=metadataPage.getHashTreeSize();
    if (hashTreeSize >= hashTree.length) {
      long[][] newHashTree=new long[hashTree.length << 1][];
      System.arraycopy(hashTree,0,newHashTree,0,hashTree.length);
      hashTree=newHashTree;
      OHashTreeNodeMetadata[] newNodeMetadata=new OHashTreeNodeMetadata[nodesMetadata.length << 1];
      System.arraycopy(nodesMetadata,0,newNodeMetadata,0,nodesMetadata.length);
      nodesMetadata=newNodeMetadata;
    }
    hashTree[hashTreeSize]=newNode;
    nodesMetadata[hashTreeSize]=new OHashTreeNodeMetadata((byte)0,(byte)0,(byte)nodeLocalDepth);
    hashTreeSize++;
    metadataPage.setHashTreeSize(hashTreeSize);
    hashStateEntry.markDirty();
    return hashTreeSize - 1;
  }
  finally {
    hashStatePointer.releaseExclusiveLock();
    diskCache.release(hashStateEntry);
  }
}
