{
  NavigableSet<Integer> keys=new TreeSet<Integer>();
  long seed=System.currentTimeMillis();
  System.out.println("testKeyDeleteRandomGaussian seed : " + seed);
  MersenneTwisterFast random=new MersenneTwisterFast(seed);
  while (keys.size() < KEYS_COUNT) {
    int key=(int)(random.nextGaussian() * Integer.MAX_VALUE / 2 + Integer.MAX_VALUE);
    if (key < 0)     continue;
    sbTree.put(key,new ORecordId(key % 32000,OClusterPositionFactory.INSTANCE.valueOf(key)));
    keys.add(key);
    Assert.assertEquals(sbTree.get(key),new ORecordId(key % 32000,OClusterPositionFactory.INSTANCE.valueOf(key)));
  }
  Iterator<Integer> keysIterator=keys.iterator();
  while (keysIterator.hasNext()) {
    int key=keysIterator.next();
    if (key % 3 == 0) {
      sbTree.remove(key);
      keysIterator.remove();
    }
  }
  Assert.assertEquals(sbTree.firstKey(),keys.first());
  Assert.assertEquals(sbTree.lastKey(),keys.last());
  for (  int key : keys) {
    if (key % 3 == 0) {
      Assert.assertNull(sbTree.get(key));
    }
 else {
      Assert.assertEquals(sbTree.get(key),new ORecordId(key % 32000,OClusterPositionFactory.INSTANCE.valueOf(key)));
    }
  }
}
