{
  final long freeListPage=bucketToSplit.getValuesFreeListFirstIndex();
  final long treeSize=bucketToSplit.getTreeSize();
  final List<OSBTreeBucket.SBTreeEntry<K,V>> leftEntries=new ArrayList<OSBTreeBucket.SBTreeEntry<K,V>>(indexToSplit);
  for (int i=0; i < indexToSplit; i++)   leftEntries.add(bucketToSplit.getEntry(i));
  OCacheEntry leftBucketEntry=addPage(atomicOperation,fileId,diskCache);
  OCacheEntry rightBucketEntry=addPage(atomicOperation,fileId,diskCache);
  leftBucketEntry.acquireExclusiveLock();
  try {
    OSBTreeBucket<K,V> newLeftBucket=new OSBTreeBucket<K,V>(leftBucketEntry,splitLeaf,keySerializer,keyTypes,valueSerializer,getChangesTree(atomicOperation,leftBucketEntry));
    newLeftBucket.addAll(leftEntries);
    if (splitLeaf)     newLeftBucket.setRightSibling(rightBucketEntry.getPageIndex());
  }
  finally {
    leftBucketEntry.releaseExclusiveLock();
    releasePage(atomicOperation,leftBucketEntry,diskCache);
  }
  rightBucketEntry.acquireExclusiveLock();
  try {
    OSBTreeBucket<K,V> newRightBucket=new OSBTreeBucket<K,V>(rightBucketEntry,splitLeaf,keySerializer,keyTypes,valueSerializer,getChangesTree(atomicOperation,rightBucketEntry));
    newRightBucket.addAll(rightEntries);
    if (splitLeaf)     newRightBucket.setLeftSibling(leftBucketEntry.getPageIndex());
  }
  finally {
    rightBucketEntry.releaseExclusiveLock();
    releasePage(atomicOperation,rightBucketEntry,diskCache);
  }
  bucketToSplit=new OSBTreeBucket<K,V>(bucketEntry,false,keySerializer,keyTypes,valueSerializer,getChangesTree(atomicOperation,bucketEntry));
  bucketToSplit.setTreeSize(treeSize);
  bucketToSplit.setValuesFreeListFirstIndex(freeListPage);
  bucketToSplit.addEntry(0,new OSBTreeBucket.SBTreeEntry<K,V>(leftBucketEntry.getPageIndex(),rightBucketEntry.getPageIndex(),separationKey,null),true);
  ArrayList<Long> resultPath=new ArrayList<Long>(path.subList(0,path.size() - 1));
  if (comparator.compare(keyToInsert,separationKey) < 0) {
    resultPath.add(leftBucketEntry.getPageIndex());
    return new BucketSearchResult(keyIndex,resultPath);
  }
  resultPath.add(rightBucketEntry.getPageIndex());
  if (splitLeaf)   return new BucketSearchResult(keyIndex - indexToSplit,resultPath);
  return new BucketSearchResult(keyIndex - indexToSplit - 1,resultPath);
}
