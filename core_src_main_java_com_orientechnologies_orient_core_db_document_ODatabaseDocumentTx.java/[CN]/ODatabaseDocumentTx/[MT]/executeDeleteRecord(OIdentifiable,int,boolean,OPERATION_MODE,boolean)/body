{
  checkOpeness();
  checkIfActive();
  final ORecordId rid=(ORecordId)record.getIdentity();
  if (rid == null)   throw new ODatabaseException("Cannot delete record because it has no identity. Probably was created from scratch or contains projections of fields rather than a full record");
  if (!rid.isValid())   return;
  record=record.getRecord();
  if (record == null)   return;
  checkSecurity(ORule.ResourceGeneric.CLUSTER,ORole.PERMISSION_DELETE,getClusterNameById(rid.clusterId));
  ORecordSerializationContext.pushContext();
  getMetadata().makeThreadLocalSchemaSnapshot();
  try {
    if (record instanceof ODocument) {
      ODocumentInternal.checkClass((ODocument)record,this);
    }
    try {
      ORecord rec=record.getRecord();
      if (rec != null)       callbackHooks(ORecordHook.TYPE.BEFORE_DELETE,rec);
      final OStorageOperationResult<Boolean> operationResult;
      try {
        if (prohibitTombstones) {
          final boolean result=storage.cleanOutRecord(rid,iVersion,iMode.ordinal(),null);
          if (!result && iRequired)           throw new ORecordNotFoundException("The record with id " + rid + " was not found");
          operationResult=new OStorageOperationResult<Boolean>(result);
        }
 else {
          final OStorageOperationResult<Boolean> result=storage.deleteRecord(rid,iVersion,iMode.ordinal(),null);
          if (!result.getResult() && iRequired)           throw new ORecordNotFoundException("The record with id " + rid + " was not found");
          operationResult=new OStorageOperationResult<Boolean>(result.getResult());
        }
        if (!operationResult.isMoved() && rec != null)         callbackHooks(ORecordHook.TYPE.AFTER_DELETE,rec);
 else         if (rec != null)         callbackHooks(ORecordHook.TYPE.DELETE_REPLICATED,rec);
      }
 catch (      Exception t) {
        callbackHooks(ORecordHook.TYPE.DELETE_FAILED,rec);
        throw t;
      }
      clearDocumentTracking(rec);
      if (!operationResult.isMoved()) {
        getLocalCache().deleteRecord(rid);
      }
    }
 catch (    OException e) {
      throw e;
    }
catch (    Exception t) {
      throw OException.wrapException(new ODatabaseException("Error on deleting record in cluster #" + record.getIdentity().getClusterId()),t);
    }
  }
  finally {
    ORecordSerializationContext.pullContext();
    getMetadata().clearThreadLocalSchemaSnapshot();
  }
}
