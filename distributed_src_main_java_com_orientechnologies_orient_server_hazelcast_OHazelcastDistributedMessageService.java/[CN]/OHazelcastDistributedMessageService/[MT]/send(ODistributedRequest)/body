{
  final Thread currentThread=Thread.currentThread();
  final long threadId=currentThread.getId();
  final ArrayBlockingQueue<ODistributedResponse> responseQueue=getInternalThreadQueue(threadId);
  final String databaseName=iRequest.getDatabaseName();
  final String clusterName=iRequest.getClusterName();
  final ODistributedConfiguration cfg=manager.getDatabaseConfiguration(databaseName);
  final ODistributedPartitioningStrategy strategy=manager.getPartitioningStrategy(cfg.getPartitionStrategy(clusterName));
  final ODistributedPartition partition=strategy.getPartition(manager,databaseName,clusterName);
  final Set<String> nodes=partition.getNodes();
  final IQueue<ODistributedRequest>[] reqQueues=getRequestQueues(databaseName,nodes);
  final int queueSize=nodes.size();
  final int quorum=iRequest.getPayload().isWriteOperation() ? cfg.getWriteQuorum(clusterName) : queueSize;
  iRequest.setSenderNodeName(manager.getLocalNodeName());
  iRequest.setSenderThreadId(threadId);
  try {
    requestLock.lock();
    try {
      iRequest.assignUniqueId(manager.getRunId(),manager.incrementDistributedSerial(databaseName));
      ODistributedServerLog.debug(this,getLocalNodeNameAndThread(),nodes.toString(),DIRECTION.OUT,"request %s",iRequest.getPayload());
      for (      IQueue<ODistributedRequest> queue : reqQueues) {
        queue.offer(iRequest,OGlobalConfiguration.DISTRIBUTED_QUEUE_TIMEOUT.getValueAsLong(),TimeUnit.MILLISECONDS);
      }
      Orient.instance().getProfiler().updateCounter("distributed.replication.msgSent","Number of replication messages sent from current node",+1);
    }
  finally {
      requestLock.unlock();
    }
    final ODistributedResponse firstResponse=collectResponses(iRequest,quorum,nodes,responseQueue);
    return firstResponse;
  }
 catch (  Throwable e) {
    throw new ODistributedException("Error on sending distributed request against " + databaseName + (clusterName != null ? ":" + clusterName : ""),e);
  }
}
