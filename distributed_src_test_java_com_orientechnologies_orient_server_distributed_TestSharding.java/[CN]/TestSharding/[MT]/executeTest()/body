{
  try {
    OrientGraphFactory factory=new OrientGraphFactory("plocal:target/server0/databases/" + getDatabaseName());
    OrientGraphNoTx graphNoTx=factory.getNoTx();
    try {
      final OrientVertexType clientType=graphNoTx.createVertexType("Client");
      for (int i=0; i < serverInstance.size(); ++i)       clientType.addCluster("client_" + i);
      graphNoTx.createVertexType("Product");
      graphNoTx.createEdgeType("Buy");
    }
  finally {
      graphNoTx.shutdown();
    }
    final OrientVertex product;
    final OrientGraph graph=factory.getTx();
    try {
      product=graph.addVertex("class:Product");
      vertices=new OrientVertex[serverInstance.size()];
      for (int i=0; i < vertices.length; ++i) {
        vertices[i]=graph.addVertex("class:Client,cluster:client_" + i);
        final int clId=vertices[i].getIdentity().getClusterId();
        Assert.assertEquals("Error on assigning cluster client_" + i,clId,graph.getRawGraph().getClusterIdByName("client_" + i));
        vertices[i].setProperty("name","shard_" + i);
        vertices[i].setProperty("amount",i * 10000);
        System.out.println("Create vertex, class: " + vertices[i].getLabel() + ", cluster: "+ clId+ " -> "+ vertices[i].getRecord());
        vertices[i].addEdge("Buy",product);
      }
    }
  finally {
      graph.shutdown();
    }
    for (int server=0; server < vertices.length; ++server) {
      OrientGraphFactory f=new OrientGraphFactory("plocal:target/server" + server + "/databases/"+ getDatabaseName());
      OrientGraphNoTx g=f.getNoTx();
      try {
        for (int cluster=0; cluster < vertices.length; ++cluster) {
          final String query="select from cluster:client_" + cluster;
          Iterable<OrientVertex> result=g.command(new OCommandSQL(query)).execute();
          Assert.assertTrue("Error on query against 'cluster_" + cluster + "' on server '"+ server+ "': "+ query,result.iterator().hasNext());
          OrientVertex v=result.iterator().next();
          Assert.assertEquals("Returned vertices name property is != shard_" + cluster + " on server "+ server,"shard_" + cluster,v.getProperty("name"));
          final Iterable<Vertex> outV=v.getVertices(Direction.OUT,"Buy");
          Assert.assertTrue(outV.iterator().hasNext());
          Assert.assertEquals(outV.iterator().next(),product);
        }
      }
  finally {
        graph.shutdown();
      }
    }
    for (int server=0; server < vertices.length; ++server) {
      OrientGraphFactory f=new OrientGraphFactory("plocal:target/server" + 0 + "/databases/"+ getDatabaseName());
      OrientGraphNoTx g=f.getNoTx();
      try {
        Iterable<OrientVertex> result=g.command(new OCommandSQL("select sum(amount) from ( select from Client )")).execute();
        int count=0;
        for (        OrientVertex v : result) {
          System.out.println("select sum(amount) from ( select from Client ) -> " + v.getRecord());
          count++;
        }
        Assert.assertEquals("Returned wrong vertices count on server " + server,1,count);
      }
  finally {
        g.shutdown();
      }
    }
    for (int server=0; server < vertices.length; ++server) {
      OrientGraphFactory f=new OrientGraphFactory("plocal:target/server" + server + "/databases/"+ getDatabaseName());
      OrientGraphNoTx g=f.getNoTx();
      try {
        Iterable<OrientVertex> result=g.command(new OCommandSQL("select from Client")).execute();
        int count=0;
        for (        OrientVertex v : result) {
          count++;
          final Iterable<Vertex> outV=v.getVertices(Direction.OUT,"Buy");
          Assert.assertTrue(outV.iterator().hasNext());
          Assert.assertEquals(outV.iterator().next(),product);
        }
        Assert.assertEquals("Returned wrong vertices count on server " + server,3,count);
      }
  finally {
        g.shutdown();
      }
    }
    for (int server=0; server < vertices.length; ++server) {
      OrientGraphFactory f=new OrientGraphFactory("plocal:target/server" + server + "/databases/"+ getDatabaseName());
      OrientGraphNoTx g=f.getNoTx();
      try {
        Iterable<OrientVertex> result=g.command(new OCommandSQL("select max(amount), avg(amount), sum(amount) from Client")).execute();
        int count=0;
        for (        OrientVertex v : result) {
          System.out.println("select max(amount), avg(amount), sum(amount) from Client -> " + v.getRecord());
          count++;
        }
        Assert.assertEquals("Returned wrong vertices count on server " + server,1,count);
      }
  finally {
        g.shutdown();
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Thread.sleep(10000);
    throw e;
  }
}
