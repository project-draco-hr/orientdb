{
  long pageIndex=ROOT_INDEX;
  final ArrayList<Long> path=new ArrayList<Long>();
  while (true) {
    if (path.size() > MAX_PATH_LENGTH)     throw new OSBTreeException("We reached max level of depth of SBTree but still found nothing, seems like tree is in corrupted state. You should rebuild index related to given query.");
    path.add(pageIndex);
    final OCacheEntry bucketEntry=loadPage(atomicOperation,fileId,pageIndex,false);
    final OSBTreeBucket.SBTreeEntry<K,V> entry;
    try {
      final OSBTreeBucket<K,V> keyBucket=new OSBTreeBucket<K,V>(bucketEntry,keySerializer,keyTypes,valueSerializer,getChangesTree(atomicOperation,bucketEntry));
      final int index=keyBucket.find(key);
      if (keyBucket.isLeaf())       return new BucketSearchResult(index,path);
      if (index >= 0)       entry=keyBucket.getEntry(index);
 else {
        final int insertionIndex=-index - 1;
        if (insertionIndex >= keyBucket.size())         entry=keyBucket.getEntry(insertionIndex - 1);
 else         entry=keyBucket.getEntry(insertionIndex);
      }
    }
  finally {
      releasePage(atomicOperation,bucketEntry);
    }
    if (comparator.compare(key,entry.key) >= 0)     pageIndex=entry.rightChild;
 else     pageIndex=entry.leftChild;
  }
}
