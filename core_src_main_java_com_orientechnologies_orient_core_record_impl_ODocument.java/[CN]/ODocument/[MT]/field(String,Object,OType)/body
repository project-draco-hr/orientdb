{
  if ("@class".equals(iFieldName)) {
    setClassName(iPropertyValue.toString());
    return this;
  }
 else   if ("@rid".equals(iFieldName)) {
    _recordId.fromString(iPropertyValue.toString());
    return this;
  }
  final int lastSep=_allowChainedAccess ? iFieldName.lastIndexOf('.') : -1;
  if (lastSep > -1) {
    final Object subObject=field(iFieldName.substring(0,lastSep));
    if (subObject != null) {
      final String subFieldName=iFieldName.substring(lastSep + 1);
      if (subObject instanceof ODocument) {
        ((ODocument)subObject).field(subFieldName,iPropertyValue);
        return (ODocument)(((ODocument)subObject).isEmbedded() ? this : subObject);
      }
 else       if (subObject instanceof Map<?,?>)       ((Map<String,Object>)subObject).put(subFieldName,iPropertyValue);
 else       if (OMultiValue.isMultiValue(subObject)) {
        for (        Object subObjectItem : OMultiValue.getMultiValueIterable(subObject)) {
          if (subObjectItem instanceof ODocument) {
            if (!((ODocument)subObjectItem).isEmbedded())             throw new IllegalArgumentException("Property '" + iFieldName + "' points to linked collection of items. You can only change embedded documents in this way");
            ((ODocument)subObjectItem).field(subFieldName,iPropertyValue);
          }
 else           if (subObjectItem instanceof Map<?,?>) {
            ((Map<String,Object>)subObjectItem).put(subFieldName,iPropertyValue);
          }
        }
        return this;
      }
    }
    return null;
  }
  iFieldName=checkFieldName(iFieldName);
  checkForLoading();
  checkForFields();
  ODocumentEntry entry=_fields.get(iFieldName);
  final boolean knownProperty;
  final Object oldValue;
  final OType oldType;
  if (entry == null) {
    entry=new ODocumentEntry();
    _size++;
    _fields.put(iFieldName,entry);
    entry.setCreated(true);
    knownProperty=false;
    oldValue=null;
    oldType=null;
  }
 else {
    knownProperty=entry.exist();
    oldValue=entry.value;
    oldType=entry.type;
  }
  if (knownProperty)   if (iPropertyValue == null) {
    if (oldValue == null)     return this;
  }
 else {
    try {
      if (iPropertyValue.equals(oldValue)) {
        if (iFieldType == null || iFieldType.length == 0 || iFieldType[0] == oldType) {
          if (!(iPropertyValue instanceof ORecordElement))           setDirty();
          return this;
        }
      }
    }
 catch (    Exception e) {
      OLogManager.instance().warn(this,"Error on checking the value of property %s against the record %s",e,iFieldName,getIdentity());
    }
  }
  OType fieldType=deriveFieldType(iFieldName,entry,iFieldType);
  if (oldValue instanceof ORidBag) {
    final ORidBag ridBag=(ORidBag)oldValue;
    ridBag.setOwner(null);
  }
 else   if (oldValue instanceof ODocument) {
    ODocumentInternal.removeOwner((ODocument)oldValue,this);
  }
  if (iPropertyValue != null) {
    if (fieldType != null) {
      iPropertyValue=ODocumentHelper.convertField(this,iFieldName,fieldType.getDefaultJavaType(),iPropertyValue);
      if (fieldType.equals(OType.EMBEDDED) && iPropertyValue instanceof ODocument) {
        final ODocument embeddedDocument=(ODocument)iPropertyValue;
        ODocumentInternal.addOwner(embeddedDocument,this);
      }
    }
 else     if (iPropertyValue instanceof Enum)     iPropertyValue=iPropertyValue.toString();
    if (iPropertyValue instanceof ORidBag) {
      final ORidBag ridBag=(ORidBag)iPropertyValue;
      ridBag.setOwner(null);
      ridBag.setOwner(this);
    }
  }
  if (oldType != fieldType && oldType != null) {
    if (iPropertyValue == null || fieldType != null || oldType != OType.getTypeByValue(iPropertyValue))     entry.type=fieldType;
  }
  removeCollectionChangeListener(entry,oldValue);
  removeCollectionTimeLine(entry);
  entry.value=iPropertyValue;
  if (!entry.exist()) {
    entry.setExist(true);
    _size++;
  }
  addCollectionChangeListener(iFieldName,entry,iPropertyValue);
  if (_status != STATUS.UNMARSHALLING) {
    setDirty();
    if (!entry.isChanged()) {
      entry.original=oldValue;
      entry.setChanged(true);
    }
  }
  return this;
}
