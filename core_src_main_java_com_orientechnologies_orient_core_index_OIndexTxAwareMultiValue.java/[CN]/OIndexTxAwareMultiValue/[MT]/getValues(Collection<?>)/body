{
  final Collection<?> keys=new ArrayList<Object>(iKeys);
  final Set<OIdentifiable> result=new TreeSet<OIdentifiable>();
  final Set<Object> keysToRemove=new TreeSet<Object>();
  final OTransactionIndexChanges indexChanges=database.getTransaction().getIndexChanges(delegate.getName());
  if (indexChanges == null) {
    result.addAll(super.getValues(keys));
    return result;
  }
  for (  final Object key : keys) {
    final Set<OIdentifiable> keyResult;
    if (!indexChanges.cleared)     if (indexChanges.containsChangesPerKey(key))     keyResult=new TreeSet<OIdentifiable>(super.get(key));
 else     continue;
 else     keyResult=new TreeSet<OIdentifiable>();
    keysToRemove.add(key);
    filterIndexChanges(indexChanges,key,keyResult);
    result.addAll(keyResult);
  }
  keys.removeAll(keysToRemove);
  if (!keys.isEmpty())   result.addAll(super.getValues(keys));
  return result;
}
