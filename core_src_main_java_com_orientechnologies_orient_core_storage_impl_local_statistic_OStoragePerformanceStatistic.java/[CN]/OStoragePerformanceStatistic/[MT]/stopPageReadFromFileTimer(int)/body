{
  final Deque<Long> stamps=tlTimeStumps.get();
  if (stamps.size() > 0) {
    final long endTs=nanoTimer.getNano();
    final long timeDiff=endTs - stamps.pop();
    final PerformanceCounters pf=performanceCounters.get();
    if (pf != null) {
      final AtomicReference<OTimeCounter> readSpeedFromFile=pf.readSpeedFromFile;
      OTimeCounter oldReadSpeedFromFile=readSpeedFromFile.get();
      OTimeCounter newReadSpeedFromFile=new OTimeCounter(oldReadSpeedFromFile.getTime() + timeDiff,oldReadSpeedFromFile.getCounter() + readPages);
      while (!readSpeedFromFile.compareAndSet(oldReadSpeedFromFile,newReadSpeedFromFile)) {
        oldReadSpeedFromFile=readSpeedFromFile.get();
        newReadSpeedFromFile=new OTimeCounter(oldReadSpeedFromFile.getTime() + timeDiff,oldReadSpeedFromFile.getCounter() + readPages);
      }
    }
  }
}
