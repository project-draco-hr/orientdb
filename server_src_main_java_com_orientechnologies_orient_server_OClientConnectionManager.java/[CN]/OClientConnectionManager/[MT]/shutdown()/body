{
  timerTask.cancel();
  final Iterator<Entry<Integer,OClientConnection>> iterator=connections.entrySet().iterator();
  while (iterator.hasNext()) {
    final Entry<Integer,OClientConnection> entry=iterator.next();
    final ONetworkProtocol protocol=entry.getValue().getProtocol();
    if (protocol != null)     protocol.sendShutdown();
    OLogManager.instance().debug(this,"Sending shutdown to thread %s",protocol);
    OCommandRequestText command=entry.getValue().getData().command;
    if (command != null && command.isIdempotent()) {
      protocol.interrupt();
    }
 else {
      if (protocol instanceof ONetworkProtocolBinary && ((ONetworkProtocolBinary)protocol).getRequestType() == OChannelBinaryProtocol.REQUEST_SHUTDOWN) {
        continue;
      }
      final Socket socket;
      if (protocol == null || protocol.getChannel() == null)       socket=null;
 else       socket=protocol.getChannel().socket;
      if (socket != null && !socket.isClosed() && !socket.isInputShutdown()) {
        try {
          OLogManager.instance().debug(this,"Closing input socket of thread %s",protocol);
          socket.shutdownInput();
        }
 catch (        IOException e) {
          OLogManager.instance().debug(this,"Error on closing connection of %s client during shutdown",e,entry.getValue().getRemoteAddress());
        }
      }
      if (protocol.isAlive()) {
        if (protocol instanceof ONetworkProtocolBinary && ((ONetworkProtocolBinary)protocol).getRequestType() == -1) {
          try {
            OLogManager.instance().debug(this,"Closing socket of thread %s",protocol);
            protocol.getChannel().close();
          }
 catch (          Exception e) {
            OLogManager.instance().debug(this,"Error during chanel close at shutdown",e);
          }
          OLogManager.instance().debug(this,"Sending interrupt signal to thread %s",protocol);
          protocol.interrupt();
        }
      }
    }
  }
}
