{
  final OModifiableBoolean shutdownFlag=new OModifiableBoolean();
  ODatabaseDocumentInternal curDb=ODatabaseRecordThreadLocal.INSTANCE.get();
  final OrientBaseGraph graph=OGraphCommandExecutorSQLFactory.getGraph(false,shutdownFlag);
  try {
    final ORecord record=iCurrentRecord != null ? iCurrentRecord.getRecord() : null;
    final OShortestPathContext ctx=new OShortestPathContext();
    Object source=iParams[0];
    if (OMultiValue.isMultiValue(source)) {
      if (OMultiValue.getSize(source) > 1)       throw new IllegalArgumentException("Only one sourceVertex is allowed");
      source=OMultiValue.getFirstValue(source);
    }
    ctx.sourceVertex=graph.getVertex(OSQLHelper.getValue(source,record,iContext));
    Object dest=iParams[1];
    if (OMultiValue.isMultiValue(dest)) {
      if (OMultiValue.getSize(dest) > 1)       throw new IllegalArgumentException("Only one destinationVertex is allowed");
      dest=OMultiValue.getFirstValue(dest);
    }
    ctx.destinationVertex=graph.getVertex(OSQLHelper.getValue(dest,record,iContext));
    if (ctx.sourceVertex.equals(ctx.destinationVertex)) {
      final List<ORID> result=new ArrayList<ORID>(1);
      result.add(ctx.destinationVertex.getIdentity());
      return result;
    }
    if (iParams.length > 2 && iParams[2] != null) {
      ctx.directionLeft=Direction.valueOf(iParams[2].toString().toUpperCase());
    }
    if (ctx.directionLeft == Direction.OUT) {
      ctx.directionRight=Direction.IN;
    }
 else     if (ctx.directionLeft == Direction.IN) {
      ctx.directionRight=Direction.OUT;
    }
    ctx.edgeType=null;
    if (iParams.length > 3) {
      ctx.edgeType=iParams[3] == null ? null : "" + iParams[3];
    }
    ctx.edgeTypeParam=new String[]{ctx.edgeType};
    ctx.queueLeft.add(ctx.sourceVertex);
    ctx.leftVisited.add(ctx.sourceVertex.getIdentity());
    ctx.queueRight.add(ctx.destinationVertex);
    ctx.rightVisited.add(ctx.destinationVertex.getIdentity());
    while (true) {
      if (ctx.queueLeft.isEmpty() || ctx.queueRight.isEmpty())       break;
      if (Thread.interrupted())       throw new OCommandExecutionException("The shortestPath() function has been interrupted");
      if (!iContext.checkTimeout())       break;
      List<ORID> neighborIdentity;
      if (ctx.queueLeft.size() <= ctx.queueRight.size()) {
        neighborIdentity=walkLeft(ctx);
        if (neighborIdentity != null)         return neighborIdentity;
        if (ctx.queueLeft.isEmpty())         break;
        neighborIdentity=walkRight(ctx);
        if (neighborIdentity != null)         return neighborIdentity;
      }
 else {
        neighborIdentity=walkRight(ctx);
        if (neighborIdentity != null)         return neighborIdentity;
        if (ctx.queueRight.isEmpty())         break;
        neighborIdentity=walkLeft(ctx);
        if (neighborIdentity != null)         return neighborIdentity;
      }
    }
    return new ArrayList<ORID>();
  }
  finally {
    if (shutdownFlag.getValue())     graph.shutdown(false);
    ODatabaseRecordThreadLocal.INSTANCE.set(curDb);
  }
}
