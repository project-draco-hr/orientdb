{
  if (record == null)   return 1;
  if (this == tree.getRoot() || record.isDirty() && !iForceDirty)   return 0;
  boolean isEntryPoint=false;
  for (  OMVRBTreeEntryPersistent<K,V> entryPoint : pTree.entryPoints) {
    if (entryPoint == this) {
      isEntryPoint=true;
      break;
    }
  }
  int totalDisconnected=0;
  if (!isEntryPoint) {
    if (pTree.cache.remove(record.getIdentity()) == null)     OLogManager.instance().debug(this,"Can't find current node into the cache. Is the cache invalid?");
    totalDisconnected=1;
    if (tree.isDebug()) {
      final StringBuilder spaces=new StringBuilder();
      for (int i=0; i < iLevel + 3; ++i)       spaces.append(" ");
      System.out.printf("\n%sDisconnected tree node %s with parent %s, left %s, right %s (%s)...",spaces,this,parentRid,leftRid,rightRid,System.identityHashCode(this));
    }
    keys=null;
    if (inStream != null) {
      inStream.close();
      values=null;
      inStream=null;
    }
    serializedKeys=null;
    serializedValues=null;
    pTree=null;
    record=null;
    size=0;
  }
  if (parent != null) {
    if (parent.left == this) {
      parent.left=null;
    }
 else     if (parent.right == this) {
      parent.right=null;
    }
 else     OLogManager.instance().warn(this,"Current node's parent doesn't link it correctly");
    parent=null;
  }
  if (left != null) {
    left.parent=null;
    int disconnected=left.disconnect(iForceDirty,iLevel + 1);
    if (disconnected > 0) {
      totalDisconnected+=disconnected;
      left=null;
    }
  }
  if (right != null) {
    right.parent=null;
    int disconnected=right.disconnect(iForceDirty,iLevel + 1);
    if (disconnected > 0) {
      totalDisconnected+=disconnected;
      right=null;
    }
  }
  return totalDisconnected;
}
