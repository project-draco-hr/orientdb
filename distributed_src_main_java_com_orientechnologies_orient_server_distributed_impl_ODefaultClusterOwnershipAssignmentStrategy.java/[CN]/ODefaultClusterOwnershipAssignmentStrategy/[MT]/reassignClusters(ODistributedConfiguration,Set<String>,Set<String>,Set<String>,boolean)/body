{
  int targetClustersPerNode=clusterNames.size() / availableNodes.size();
  if (targetClustersPerNode == 0 || clusterNames.size() % availableNodes.size() > 0)   targetClustersPerNode+=1;
  final List<OPair<String,List<String>>> nodeOwners=new ArrayList<OPair<String,List<String>>>(availableNodes.size());
  for (  String server : availableNodes) {
    final List<String> ownedClusters=cfg.getOwnedClustersByServer(clusterNames,server);
    for (Iterator<String> it=ownedClusters.iterator(); it.hasNext(); ) {
      final String cluster=it.next();
      if (cfg.getConfiguredClusterOwner(cluster) != null)       it.remove();
    }
    nodeOwners.add(new OPair<String,List<String>>(server,ownedClusters));
  }
  Collections.sort(nodeOwners,new Comparator<OPair<String,List<String>>>(){
    @Override public int compare(    OPair<String,List<String>> o1,    OPair<String,List<String>> o2){
      return o2.getValue().size() - o1.getValue().size();
    }
  }
);
  final Map<String,String> clusterToAssignOwnership=new HashMap<String,String>();
  for (  OPair<String,List<String>> owner : nodeOwners) {
    final String server=owner.getKey();
    final List<String> ownedClusters=owner.getValue();
    if (rebalance && ownedClusters.size() > targetClustersPerNode) {
      while (ownedClusters.size() > targetClustersPerNode) {
        clustersOfClassToReassign.add(ownedClusters.remove(ownedClusters.size() - 1));
      }
    }
 else     if (ownedClusters.size() < targetClustersPerNode) {
      while (ownedClusters.size() < targetClustersPerNode && !clustersOfClassToReassign.isEmpty()) {
        final Iterator<String> it=clustersOfClassToReassign.iterator();
        boolean reassigned=false;
        while (it.hasNext()) {
          final String cluster=it.next();
          final List<String> serverPerClusterList=cfg.getServers(cluster);
          if (serverPerClusterList != null && serverPerClusterList.contains(server)) {
            it.remove();
            clusterToAssignOwnership.put(cluster,server);
            ownedClusters.add(cluster);
            reassigned=true;
            break;
          }
        }
        if (!reassigned)         break;
      }
    }
  }
  return clusterToAssignOwnership;
}
