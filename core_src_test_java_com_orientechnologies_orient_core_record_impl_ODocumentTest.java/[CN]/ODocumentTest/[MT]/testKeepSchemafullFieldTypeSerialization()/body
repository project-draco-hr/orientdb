{
  ODatabaseDocumentTx db=new ODatabaseDocumentTx("memory:" + ODocumentTest.class.getSimpleName());
  db.create();
  try {
    OClass clazz=db.getMetadata().getSchema().createClass("Test");
    clazz.createProperty("integer",OType.INTEGER);
    clazz.createProperty("link",OType.LINK);
    clazz.createProperty("string",OType.STRING);
    clazz.createProperty("binary",OType.BINARY);
    ODocument doc=new ODocument(clazz);
    doc.field("integer",10);
    doc.field("link",new ORecordId(1,new OClusterPositionLong(2)));
    doc.field("string","string");
    doc.field("binary",new byte[]{30});
    assertEquals(doc.fieldType("integer"),OType.INTEGER);
    assertEquals(doc.fieldType("link"),OType.LINK);
    assertEquals(doc.fieldType("string"),OType.STRING);
    assertEquals(doc.fieldType("binary"),OType.BINARY);
    ORecordSerializer ser=ODatabaseDocumentTx.getDefaultSerializer();
    byte[] bytes=ser.toStream(doc,false);
    doc=new ODocument();
    ser.fromStream(bytes,doc,null);
    assertEquals(doc.fieldType("integer"),OType.INTEGER);
    assertEquals(doc.fieldType("string"),OType.STRING);
    assertEquals(doc.fieldType("binary"),OType.BINARY);
    assertEquals(doc.fieldType("link"),OType.LINK);
  }
  finally {
    db.drop();
  }
}
