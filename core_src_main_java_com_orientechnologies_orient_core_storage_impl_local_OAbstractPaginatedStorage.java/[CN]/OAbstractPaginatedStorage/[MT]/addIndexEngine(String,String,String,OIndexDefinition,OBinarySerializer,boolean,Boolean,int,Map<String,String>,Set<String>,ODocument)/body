{
  checkOpeness();
  stateLock.acquireWriteLock();
  try {
    checkOpeness();
    checkLowDiskSpaceAndFullCheckpointRequests();
    final String originalName=engineName;
    engineName=engineName.toLowerCase(configuration.getLocaleInstance());
    if (indexEngineNameMap.containsKey(engineName))     throw new OIndexException("Index with name " + engineName + " already exists");
    makeStorageDirty();
    final OBinarySerializer keySerializer=determineKeySerializer(indexDefinition);
    final int keySize=determineKeySize(indexDefinition);
    final OType[] keyTypes=indexDefinition != null ? indexDefinition.getTypes() : null;
    final boolean nullValuesSupport=indexDefinition != null && !indexDefinition.isNullValuesIgnored();
    final byte serializerId;
    if (valueSerializer != null)     serializerId=valueSerializer.getId();
 else     serializerId=-1;
    final OIndexEngine engine=OIndexes.createIndexEngine(originalName,algorithm,indexType,durableInNonTxMode,this,version,engineProperties,metadata);
    engine.create(valueSerializer,isAutomatic,keyTypes,nullValuesSupport,keySerializer,keySize,clustersToIndex,engineProperties,metadata);
    indexEngineNameMap.put(engineName,engine);
    indexEngines.add(engine);
    final OStorageConfiguration.IndexEngineData engineData=new OStorageConfiguration.IndexEngineData(originalName,algorithm,indexType,durableInNonTxMode,version,serializerId,keySerializer.getId(),isAutomatic,keyTypes,nullValuesSupport,keySize,engineProperties);
    configuration.addIndexEngine(engineName,engineData);
    return indexEngines.size() - 1;
  }
 catch (  IOException e) {
    throw OException.wrapException(new OStorageException("Cannot add index engine " + engineName + " in storage."),e);
  }
 finally {
    stateLock.releaseWriteLock();
  }
}
