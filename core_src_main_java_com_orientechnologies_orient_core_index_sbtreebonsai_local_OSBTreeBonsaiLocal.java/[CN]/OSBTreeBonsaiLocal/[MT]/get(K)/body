{
  final OSessionStoragePerformanceStatistic statistic=performanceStatisticManager.getSessionPerformanceStatistic();
  startOperation();
  if (statistic != null)   statistic.startRidBagEntryReadTimer();
  try {
    atomicOperationsManager.acquireReadLock(this);
    try {
      final Lock lock=fileLockManager.acquireSharedLock(fileId);
      try {
        OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
        BucketSearchResult bucketSearchResult=findBucket(key,atomicOperation);
        if (bucketSearchResult.itemIndex < 0)         return null;
        OBonsaiBucketPointer bucketPointer=bucketSearchResult.getLastPathItem();
        OCacheEntry keyBucketCacheEntry=loadPage(atomicOperation,fileId,bucketPointer.getPageIndex(),false);
        try {
          OSBTreeBonsaiBucket<K,V> keyBucket=new OSBTreeBonsaiBucket<K,V>(keyBucketCacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChanges(atomicOperation,keyBucketCacheEntry),this);
          return keyBucket.getEntry(bucketSearchResult.itemIndex).value;
        }
  finally {
          releasePage(atomicOperation,keyBucketCacheEntry);
        }
      }
  finally {
        lock.unlock();
      }
    }
 catch (    IOException e) {
      throw OException.wrapException(new OSBTreeBonsaiLocalException("Error during retrieving  of sbtree with name " + getName(),this),e);
    }
 finally {
      atomicOperationsManager.releaseReadLock(this);
    }
  }
  finally {
    if (statistic != null)     statistic.stopRidBagEntryReadTimer(1);
    completeOperation();
  }
}
