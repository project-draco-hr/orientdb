{
  if (enginePool != null)   return;
  enginePool=new OResourcePool<Object,ScriptEngine>(maxEngines,new OResourcePoolListener<Object,ScriptEngine>(){
    @Override public ScriptEngine createNewResource(    Object iKey,    Object... iAdditionalArgs){
      try {
        return getGroovyEngine();
      }
 catch (      Throwable e) {
        throw new OConfigurationException("Error on loading Gremlin engine",e);
      }
    }
    @Override public boolean reuseResource(    Object iKey,    Object[] iAdditionalArgs,    ScriptEngine iReusedEngine){
      iReusedEngine.getBindings(ScriptContext.ENGINE_SCOPE).clear();
      return true;
    }
  }
);
  graphPool=new OResourcePool<OGraphDatabase,OrientGraph>(maxGraphs,new OResourcePoolListener<OGraphDatabase,OrientGraph>(){
    @Override public OrientGraph createNewResource(    final OGraphDatabase iKey,    final Object... iAdditionalArgs){
      return new OrientGraph(iKey);
    }
    @Override public boolean reuseResource(    final OGraphDatabase iKey,    final Object[] iAdditionalArgs,    final OrientGraph iReusedGraph){
      iReusedGraph.reuse(iKey);
      return true;
    }
  }
);
}
