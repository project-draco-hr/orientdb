{
  final long timer=PROFILER.startChrono();
  if (buffer.length() > 0 && getDatabase().getTransaction().isActive() && buffer.indexOf("-") > -1) {
    lazyUnmarshall();
    buffer.setLength(0);
  }
  tree.saveAllNewEntries();
  if (buffer.length() == 0)   try {
    if (isEmbeddedStreaming()) {
      marshalling=true;
      buffer.append(OStringSerializerHelper.SET_BEGIN);
      boolean first=true;
      for (      OIdentifiable rid : tree.keySet()) {
        if (rid instanceof ORecord) {
          final ORecord record=(ORecord)rid;
          if (record.isDirty())           record.save();
        }
        if (!first)         buffer.append(OStringSerializerHelper.COLLECTION_SEPARATOR);
 else         first=false;
        rid.getIdentity().toString(buffer);
      }
      final IdentityHashMap<ORecord,Object> tempRIDs=tree.getTemporaryEntries();
      if (tempRIDs != null && !tempRIDs.isEmpty())       for (      ORecord rec : tempRIDs.keySet()) {
        if (!first)         buffer.append(OStringSerializerHelper.COLLECTION_SEPARATOR);
 else         first=false;
        rec.getIdentity().toString(buffer);
      }
      buffer.append(OStringSerializerHelper.SET_END);
    }
 else {
      marshalling=true;
      buffer.append(OStringSerializerHelper.EMBEDDED_BEGIN);
      buffer.append(new String(toDocument().toStream()));
      buffer.append(OStringSerializerHelper.EMBEDDED_END);
    }
  }
  finally {
    marshalling=false;
    PROFILER.stopChrono(PROFILER.getProcessMetric("mvrbtree.toStream"),"Serialize a MVRBTreeRID",timer);
  }
  iBuffer.append(buffer);
  return this;
}
