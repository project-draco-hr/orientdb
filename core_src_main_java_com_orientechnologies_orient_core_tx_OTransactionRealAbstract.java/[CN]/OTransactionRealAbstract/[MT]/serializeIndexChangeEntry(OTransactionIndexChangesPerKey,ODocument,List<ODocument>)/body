{
  final String key;
  final ODocument keyContainer=new ODocument();
  try {
    if (entry.key != null) {
      if (entry.key instanceof OCompositeKey) {
        final List<Object> keys=((OCompositeKey)entry.key).getKeys();
        keyContainer.field("key",keys,OType.EMBEDDEDLIST);
        keyContainer.field("binary",false);
      }
 else       if (!(entry.key instanceof ORecordElement) && (entry.key instanceof OSerializableStream)) {
        keyContainer.field("key",OStreamSerializerAnyStreamable.INSTANCE.toStream(entry.key),OType.BINARY);
        keyContainer.field("binary",true);
      }
 else {
        keyContainer.field("key",entry.key);
        keyContainer.field("binary",false);
      }
      key=ORecordSerializerSchemaAware2CSV.INSTANCE.toString(keyContainer,null,false).toString();
    }
 else     key="*";
  }
 catch (  IOException ioe) {
    throw new OTransactionException("Error during index changes serialization. ",ioe);
  }
  final List<ODocument> operations=new ArrayList<ODocument>();
  if (entry.entries != null && !entry.entries.isEmpty()) {
    for (    OTransactionIndexEntry e : entry.entries) {
      final ODocument changeDoc=new ODocument().addOwner(indexDoc).setAllowChainedAccess(false);
      changeDoc.field("o",e.operation.ordinal());
      if (e.value instanceof ORecord<?> && e.value.getIdentity().isNew()) {
        final ORecord<?> saved=temp2persistent.get(e.value.getIdentity());
        if (saved != null)         e.value=saved;
 else         ((ORecord<?>)e.value).save();
      }
      changeDoc.field("v",e.value != null ? e.value.getIdentity() : null);
      operations.add(changeDoc);
    }
  }
  entries.add(new ODocument().addOwner(indexDoc).setAllowChainedAccess(false).field("k",OStringSerializerHelper.encode(key)).field("ops",operations,OType.EMBEDDEDLIST));
}
