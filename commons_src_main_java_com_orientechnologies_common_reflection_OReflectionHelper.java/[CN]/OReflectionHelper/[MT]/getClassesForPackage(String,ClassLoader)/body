{
  final List<Class<?>> classes=new ArrayList<Class<?>>();
  final ArrayList<File> directories=new ArrayList<File>();
  try {
    final String packageUrl=iPackageName.replace('.','/');
    Enumeration<URL> resources=iClassLoader.getResources(packageUrl);
    if (!resources.hasMoreElements()) {
      resources=iClassLoader.getResources(packageUrl + CLASS_EXTENSION);
      if (resources.hasMoreElements()) {
        throw new IllegalArgumentException(iPackageName + " does not appear to be a valid package but a class");
      }
    }
 else {
      while (resources.hasMoreElements()) {
        final URL res=resources.nextElement();
        if (res.getProtocol().equalsIgnoreCase("jar")) {
          final JarURLConnection conn=(JarURLConnection)res.openConnection();
          final JarFile jar=conn.getJarFile();
          for (          JarEntry e : Collections.list(jar.entries())) {
            if (e.getName().startsWith(iPackageName.replace('.','/')) && e.getName().endsWith(CLASS_EXTENSION) && !e.getName().contains("$")) {
              final String className=e.getName().replace("/",".").substring(0,e.getName().length() - 6);
              classes.add(Class.forName(className,true,iClassLoader));
            }
          }
        }
 else         directories.add(new File(URLDecoder.decode(res.getPath(),"UTF-8")));
      }
    }
  }
 catch (  NullPointerException x) {
    throw new ClassNotFoundException(iPackageName + " does not appear to be " + "a valid package (Null pointer exception)");
  }
catch (  UnsupportedEncodingException encex) {
    throw new ClassNotFoundException(iPackageName + " does not appear to be " + "a valid package (Unsupported encoding)");
  }
catch (  IOException ioex) {
    throw new ClassNotFoundException("IOException was thrown when trying " + "to get all resources for " + iPackageName);
  }
  for (  File directory : directories) {
    if (directory.exists()) {
      File[] files=directory.listFiles();
      for (      File file : files) {
        if (file.isDirectory()) {
          classes.addAll(findClasses(file,iPackageName));
        }
 else {
          String className;
          if (file.getName().endsWith(CLASS_EXTENSION)) {
            className=file.getName().substring(0,file.getName().length() - CLASS_EXTENSION.length());
            classes.add(Class.forName(iPackageName + '.' + className));
          }
        }
      }
    }
 else {
      throw new ClassNotFoundException(iPackageName + " (" + directory.getPath()+ ") does not appear to be a valid package");
    }
  }
  return classes;
}
