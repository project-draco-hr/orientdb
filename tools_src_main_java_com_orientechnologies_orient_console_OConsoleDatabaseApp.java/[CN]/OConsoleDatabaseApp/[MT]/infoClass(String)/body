{
  checkForDatabase();
  final OClass cls=currentDatabase.getMetadata().getImmutableSchemaSnapshot().getClass(iClassName);
  if (cls == null) {
    message("\n! Class '" + iClassName + "' does not exist in the database '"+ currentDatabaseName+ "'");
    return;
  }
  message("\nCLASS '" + cls.getName() + "'\n");
  final long count=currentDatabase.countClass(cls.getName(),false);
  message("\nRecords..............: " + count);
  if (cls.getShortName() != null)   message("\nAlias................: " + cls.getShortName());
  if (cls.hasSuperClasses())   message("\nSuper classes........: " + Arrays.toString(cls.getSuperClassesNames().toArray()));
  message("\nDefault cluster......: " + currentDatabase.getClusterNameById(cls.getDefaultClusterId()) + " (id="+ cls.getDefaultClusterId()+ ")");
  final StringBuilder clusters=new StringBuilder();
  for (  int clId : cls.getClusterIds()) {
    if (clusters.length() > 0)     clusters.append(", ");
    clusters.append(currentDatabase.getClusterNameById(clId));
    clusters.append("(");
    clusters.append(clId);
    clusters.append(")");
  }
  message("\nSupported clusters...: " + clusters.toString());
  message("\nCluster selection....: " + cls.getClusterSelection().getName());
  message("\nOversize.............: " + cls.getClassOverSize());
  if (!cls.getSubclasses().isEmpty()) {
    message("\nSubclasses.........: ");
    int i=0;
    for (    OClass c : cls.getSubclasses()) {
      if (i > 0)       message(", ");
      message(c.getName());
      ++i;
    }
    out.println();
  }
  if (cls.properties().size() > 0) {
    message("\n\nPROPERTIES");
    message("\n-------------------------------+-------------+-------------------------------+-----------+----------+----------+-----------+-----------+----------+");
    message("\n NAME                          | TYPE        | LINKED TYPE/CLASS             | MANDATORY | READONLY | NOT NULL |    MIN    |    MAX    | COLLATE  |");
    message("\n-------------------------------+-------------+-------------------------------+-----------+----------+----------+-----------+-----------+----------+");
    for (    final OProperty p : cls.properties()) {
      try {
        message("\n %-30s| %-12s| %-30s| %-10s| %-9s| %-9s| %-10s| %-10s| %-9s|",p.getName(),p.getType(),p.getLinkedClass() != null ? p.getLinkedClass() : p.getLinkedType(),p.isMandatory(),p.isReadonly(),p.isNotNull(),p.getMin() != null ? p.getMin() : "",p.getMax() != null ? p.getMax() : "",p.getCollate() != null ? p.getCollate().getName() : "");
      }
 catch (      Exception ignored) {
      }
    }
    message("\n-------------------------------+-------------+-------------------------------+-----------+----------+----------+-----------+-----------+----------+");
  }
  final Set<OIndex<?>> indexes=cls.getClassIndexes();
  if (!indexes.isEmpty()) {
    message("\n\nINDEXES (" + indexes.size() + " altogether)");
    message("\n-------------------------------+----------------+");
    message("\n NAME                          | PROPERTIES     |");
    message("\n-------------------------------+----------------+");
    for (    final OIndex<?> index : indexes) {
      final OIndexDefinition indexDefinition=index.getDefinition();
      if (indexDefinition != null) {
        final List<String> fields=indexDefinition.getFields();
        message("\n %-30s| %-15s|",index.getName(),fields.get(0) + (fields.size() > 1 ? " (+)" : ""));
        for (int i=1; i < fields.size(); i++) {
          if (i < fields.size() - 1)           message("\n %-30s| %-15s|","",fields.get(i) + " (+)");
 else           message("\n %-30s| %-15s|","",fields.get(i));
        }
      }
 else {
        message("\n %-30s| %-15s|",index.getName(),"");
      }
    }
    message("\n-------------------------------+----------------+");
  }
  if (cls.getCustomKeys().size() > 0) {
    message("\n\nCUSTOM ATTRIBUTES");
    message("\n-------------------------------+-----------------------------------------+");
    message("\n NAME                          | VALUE                                   |");
    message("\n-------------------------------+-----------------------------------------+");
    for (    final String k : cls.getCustomKeys()) {
      try {
        message("\n %-30s| %-40s|",k,cls.getCustom(k));
      }
 catch (      Exception ignored) {
      }
    }
    message("\n-------------------------------+-----------------------------------------+");
  }
}
