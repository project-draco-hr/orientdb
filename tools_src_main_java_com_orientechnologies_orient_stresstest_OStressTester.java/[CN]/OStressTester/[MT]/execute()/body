{
  int returnCode=0;
  OLogManager.instance().setConsoleLevel("SEVERE");
  ODatabaseUtils.createDatabase(databaseIdentifier);
  System.out.println(String.format("Created database [%s].",databaseIdentifier.getUrl()));
  try {
    for (    OWorkload workload : workloads) {
      consoleProgressWriter=new OConsoleProgressWriter(workload);
      consoleProgressWriter.start();
      consoleProgressWriter.printMessage(String.format("\nStarting workload %s (concurrencyLevel=%d)...",workload.getName(),settings.threadsNumber));
      final long startTime=System.currentTimeMillis();
      workload.execute(settings.threadsNumber,databaseIdentifier);
      final long endTime=System.currentTimeMillis();
      consoleProgressWriter.sendShutdown();
      System.out.println(String.format("\n- Total execution time: %.3f secs",((float)(endTime - startTime) / 1000f)));
      System.out.println(workload.getFinalResult());
      if (settings.checkDatabase && workload instanceof OCheckWorkload) {
        System.out.println(String.format("- Checking database..."));
        ((OCheckWorkload)workload).check(databaseIdentifier);
        System.out.println(String.format("- Check completed"));
      }
    }
    if (settings.resultOutputFile != null)     writeFile();
  }
 catch (  Exception ex) {
    System.err.println("\nAn error has occurred while running the stress test: " + ex.getMessage());
    returnCode=1;
  }
 finally {
    if (settings.keepDatabaseAfterTest || databaseIdentifier.getMode() == OMode.MEMORY)     consoleProgressWriter.printMessage(String.format("\nDatabase is available on [%s].",databaseIdentifier.getUrl()));
 else {
      ODatabaseUtils.dropDatabase(databaseIdentifier);
      consoleProgressWriter.printMessage(String.format("\nDropped database [%s].",databaseIdentifier.getUrl()));
    }
  }
  return returnCode;
}
