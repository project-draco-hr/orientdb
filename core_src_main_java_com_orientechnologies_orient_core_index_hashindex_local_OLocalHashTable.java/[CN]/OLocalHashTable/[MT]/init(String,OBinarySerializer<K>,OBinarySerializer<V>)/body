{
  acquireExclusiveLock();
  try {
    this.name=name;
    this.keySerializer=keySerializer;
    this.valueSerializer=valueSerializer;
    final OStorageFileConfiguration metadataConfiguration=new OStorageFileConfiguration(null,OStorageVariableParser.DB_PATH_VARIABLE + '/' + name+ metadataConfigurationFileExtension,OFileFactory.MMAP,"0","50%");
    final OStorageFileConfiguration treeStateConfiguration=new OStorageFileConfiguration(null,OStorageVariableParser.DB_PATH_VARIABLE + '/' + name+ treeStateFileExtension,OFileFactory.MMAP,"0","50%");
    metadataStore=new OEHFileMetadataStore(storage,metadataConfiguration);
    treeStateStore=new OEHTreeStateStore(storage,treeStateConfiguration);
    metadataStore.create(-1);
    treeStateStore.create(-1);
    metadataStore.setRecordsCount(size);
    treeStateStore.setHashTreeSize(hashTreeSize);
    treeStateStore.setHashTreeTombstone(hashTreeTombstone);
    treeStateStore.setBucketTombstonePointer(bucketTombstonePointer);
    filesMetadata[0]=createFileMetadata(0);
    initHashTreeState();
  }
 catch (  IOException e) {
    throw new OIndexException("Error during local hash table creation.",e);
  }
 finally {
    releaseExclusiveLock();
  }
}
