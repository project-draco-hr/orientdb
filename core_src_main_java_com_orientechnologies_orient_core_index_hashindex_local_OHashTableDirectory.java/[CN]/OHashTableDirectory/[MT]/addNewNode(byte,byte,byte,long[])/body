{
  int nodeIndex;
  acquireExclusiveLock();
  startAtomicOperation();
  try {
    diskCache.loadPinnedPage(firstEntry);
    firstEntry.acquireExclusiveLock();
    try {
      ODirectoryFirstPage firstPage=new ODirectoryFirstPage(firstEntry,getTrackMode(),firstEntry);
      final int tombstone=firstPage.getTombstone();
      if (tombstone >= 0)       nodeIndex=tombstone;
 else {
        nodeIndex=firstPage.getTreeSize();
        firstPage.setTreeSize(nodeIndex + 1);
      }
      if (nodeIndex < ODirectoryFirstPage.NODES_PER_PAGE) {
        final int localNodeIndex=nodeIndex;
        firstPage.setMaxLeftChildDepth(localNodeIndex,maxLeftChildDepth);
        firstPage.setMaxRightChildDepth(localNodeIndex,maxRightChildDepth);
        firstPage.setNodeLocalDepth(localNodeIndex,nodeLocalDepth);
        if (tombstone >= 0)         firstPage.setTombstone((int)firstPage.getPointer(nodeIndex,0));
        for (int i=0; i < newNode.length; i++)         firstPage.setPointer(localNodeIndex,i,newNode[i]);
      }
 else {
        final int pageIndex=(nodeIndex - ODirectoryFirstPage.NODES_PER_PAGE) / ODirectoryPage.NODES_PER_PAGE;
        final int localLevel=(nodeIndex - ODirectoryFirstPage.NODES_PER_PAGE) % ODirectoryPage.NODES_PER_PAGE;
        boolean newPage=false;
        while (entries.size() <= pageIndex) {
          OCacheEntry cacheEntry=diskCache.load(fileId,entries.size() + 1,true);
          diskCache.pinPage(cacheEntry);
          diskCache.release(cacheEntry);
          entries.add(cacheEntry);
          newPage=true;
        }
        OCacheEntry cacheEntry=entries.get(pageIndex);
        diskCache.loadPinnedPage(cacheEntry);
        cacheEntry.acquireExclusiveLock();
        try {
          ODirectoryPage page=new ODirectoryPage(cacheEntry,ODurablePage.TrackMode.NONE,cacheEntry);
          page.setMaxLeftChildDepth(localLevel,maxLeftChildDepth);
          page.setMaxRightChildDepth(localLevel,maxRightChildDepth);
          page.setNodeLocalDepth(localLevel,nodeLocalDepth);
          if (tombstone >= 0)           firstPage.setTombstone((int)page.getPointer(localLevel,0));
          for (int i=0; i < newNode.length; i++)           page.setPointer(localLevel,i,newNode[i]);
          cacheEntry.markDirty();
          logPageChanges(page,cacheEntry.getFileId(),firstEntry.getPageIndex(),newPage);
        }
  finally {
          cacheEntry.releaseExclusiveLock();
          diskCache.release(cacheEntry);
        }
      }
      logPageChanges(firstPage,firstEntry.getFileId(),firstEntry.getPageIndex(),false);
    }
  finally {
      firstEntry.releaseExclusiveLock();
      diskCache.release(firstEntry);
    }
    endAtomicOperation(false);
  }
 catch (  IOException e) {
    endAtomicOperation(true);
    throw e;
  }
catch (  Throwable e) {
    endAtomicOperation(true);
    throw new OStorageException(null,e);
  }
 finally {
    releaseExclusiveLock();
  }
  return nodeIndex;
}
