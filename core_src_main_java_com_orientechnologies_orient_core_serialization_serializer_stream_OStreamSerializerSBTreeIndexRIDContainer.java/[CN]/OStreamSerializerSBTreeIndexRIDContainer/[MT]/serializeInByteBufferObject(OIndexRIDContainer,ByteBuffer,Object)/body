{
  final int offset=buffer.position();
  buffer.position(offset + FILE_ID_OFFSET);
  LONG_SERIALIZER.serializeInByteBuffer(object.getFileId(),buffer);
  final boolean embedded=object.isEmbedded();
  final boolean durable=object.isDurableNonTxMode();
  buffer.position(offset + EMBEDDED_OFFSET);
  BOOLEAN_SERIALIZER.serializeInByteBuffer(embedded,buffer);
  buffer.position(offset + DURABLE_OFFSET);
  BOOLEAN_SERIALIZER.serializeInByteBufferObject(durable,buffer);
  if (embedded) {
    buffer.position(offset + EMBEDDED_SIZE_OFFSET);
    INT_SERIALIZER.serializeInByteBuffer(object.size(),buffer);
    final int p=offset + EMBEDDED_VALUES_OFFSET;
    buffer.position(p);
    for (    OIdentifiable ids : object) {
      LINK_SERIALIZER.serializeInByteBufferObject(ids,buffer);
    }
  }
 else {
    final OIndexRIDContainerSBTree underlying=(OIndexRIDContainerSBTree)object.getUnderlying();
    final OBonsaiBucketPointer rootPointer=underlying.getRootPointer();
    buffer.position(offset + SBTREE_ROOTINDEX_OFFSET);
    LONG_SERIALIZER.serializeInByteBuffer(rootPointer.getPageIndex(),buffer);
    buffer.position(offset + SBTREE_ROOTOFFSET_OFFSET);
    INT_SERIALIZER.serializeInByteBuffer(rootPointer.getPageOffset(),buffer);
  }
}
