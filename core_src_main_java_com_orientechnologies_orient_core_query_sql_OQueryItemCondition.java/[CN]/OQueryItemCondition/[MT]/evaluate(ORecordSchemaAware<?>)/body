{
  Object l=evaluate(iRecord,left);
  Object r=evaluate(iRecord,right);
  Object[] convertedValues=checkForConversion(l,r);
  if (convertedValues != null) {
    l=convertedValues[0];
    r=convertedValues[1];
  }
switch (operator) {
case EQUALS:
    if (l == null || r == null)     return false;
  return l.equals(r);
case NOT_EQUALS:
if (l == null || r == null) return false;
return !l.equals(r);
case MINOR:
if (l == null || r == null) return false;
return ((Comparable)l).compareTo(r) < 0;
case MINOR_EQUALS:
if (l == null || r == null) return false;
return ((Comparable)l).compareTo(r) <= 0;
case MAJOR:
if (l == null || r == null) return false;
return ((Comparable)l).compareTo(r) > 0;
case MAJOR_EQUALS:
if (l == null || r == null) return false;
return ((Comparable)l).compareTo(r) >= 0;
case AND:
if (l == null) return false;
return (Boolean)l && (Boolean)r;
case OR:
if (l == null) return false;
return (Boolean)l || (Boolean)r;
case NOT:
if (l == null) return false;
return !(Boolean)l;
case LIKE:
if (l == null || r == null) return false;
return OQueryHelper.like(l.toString(),r.toString());
case MATCHES:
if (l == null || r == null) return false;
return l.toString().matches((String)r);
case IS:
return l == r;
case IN:
if (l == null || r == null) return false;
if (l instanceof Collection<?>) {
Collection<Object> collection=(Collection<Object>)l;
for (Object o : collection) {
if (r.equals(o)) return true;
}
}
 else if (r instanceof Collection<?>) {
Collection<Object> collection=(Collection<Object>)r;
for (Object o : collection) {
if (l.equals(o)) return true;
}
}
return false;
case CONTAINS:
if (l == null || r == null) return false;
if (l instanceof Collection<?>) {
Collection<ORecordSchemaAware<?>> collection=(Collection<ORecordSchemaAware<?>>)l;
for (ORecordSchemaAware<?> o : collection) {
if ((Boolean)evaluate(o,right) == Boolean.TRUE) return true;
}
}
 else if (r instanceof Collection<?>) {
Collection<ORecordSchemaAware<?>> collection=(Collection<ORecordSchemaAware<?>>)r;
for (ORecordSchemaAware<?> o : collection) {
if ((Boolean)evaluate(o,left) == Boolean.TRUE) return true;
}
}
return false;
case CONTAINSALL:
if (l == null || r == null) return false;
if (l instanceof Collection<?>) {
Collection<ORecordSchemaAware<?>> collection=(Collection<ORecordSchemaAware<?>>)l;
Boolean result;
for (ORecordSchemaAware<?> o : collection) {
result=(Boolean)evaluate(o,right);
if (result == Boolean.FALSE) return false;
}
}
 else if (r instanceof Collection<?>) {
Collection<ORecordSchemaAware<?>> collection=(Collection<ORecordSchemaAware<?>>)r;
Boolean result;
for (ORecordSchemaAware<?> o : collection) {
result=(Boolean)evaluate(o,left);
if (result == Boolean.FALSE) return false;
}
}
return true;
}
return null;
}
