{
  stateLock.acquireReadLock();
  try {
    if (status == STATUS.OPEN)     return;
  }
  finally {
    stateLock.releaseReadLock();
  }
  stateLock.acquireWriteLock();
  try {
    if (status == STATUS.OPEN)     return;
    if (!exists())     throw new OStorageException("Cannot open the storage '" + name + "' because it does not exist in path: "+ url);
    configuration.load(iProperties);
    componentsFactory=new OCurrentStorageComponentsFactory(configuration);
    preOpenSteps();
    initWalAndDiskCache();
    atomicOperationsManager=new OAtomicOperationsManager(this);
    try {
      atomicOperationsManager.registerMBean();
    }
 catch (    Exception e) {
      OLogManager.instance().error(this,"MBean for atomic operations manager cannot be registered",e);
    }
    restoreIfNeeded();
    int pos;
    addDefaultClusters();
    for (int i=0; i < configuration.clusters.size(); ++i) {
      final OStorageClusterConfiguration clusterConfig=configuration.clusters.get(i);
      if (clusterConfig != null) {
        pos=createClusterFromConfig(clusterConfig);
        try {
          if (pos == -1) {
            clusters.get(i).open();
          }
 else {
            if (clusterConfig.getName().equals(CLUSTER_DEFAULT_NAME))             defaultClusterId=pos;
            clusters.get(pos).open();
          }
        }
 catch (        FileNotFoundException e) {
          OLogManager.instance().warn(this,"Error on loading cluster '" + clusters.get(i).getName() + "' ("+ i+ "): file not found. It will be excluded from current database '"+ getName()+ "'.");
          clusterMap.remove(clusters.get(i).getName().toLowerCase(configuration.getLocaleInstance()));
          setCluster(i,null);
        }
      }
 else {
        setCluster(i,null);
      }
    }
    if (OGlobalConfiguration.STORAGE_MAKE_FULL_CHECKPOINT_AFTER_OPEN.getValueAsBoolean())     makeFullCheckpoint();
    writeCache.startFuzzyCheckpoints();
    status=STATUS.OPEN;
  }
 catch (  Exception e) {
    for (    OCluster c : clusters) {
      try {
        c.close(false);
      }
 catch (      IOException e1) {
        OLogManager.instance().error(this,"Cannot close cluster after exception on open");
      }
    }
    status=STATUS.CLOSED;
    throw new OStorageException("Cannot open local storage '" + url + "' with mode="+ mode,e);
  }
 finally {
    stateLock.releaseWriteLock();
  }
}
