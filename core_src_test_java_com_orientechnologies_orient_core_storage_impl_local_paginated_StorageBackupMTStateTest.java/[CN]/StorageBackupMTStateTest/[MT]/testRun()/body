{
  String buildDirectory=System.getProperty("buildDirectory",".");
  String dbDirectory=buildDirectory + File.separator + StorageBackupMTStateTest.class.getSimpleName();
  System.out.println("Clean up old data");
  OFileUtils.deleteRecursively(new File(dbDirectory));
  final String backedUpDbDirectory=buildDirectory + File.separator + StorageBackupMTStateTest.class.getSimpleName()+ "BackUp";
  OFileUtils.deleteRecursively(new File(backedUpDbDirectory));
  backupDir=new File(buildDirectory,StorageBackupMTStateTest.class.getSimpleName() + "BackupDir");
  OFileUtils.deleteRecursively(backupDir);
  if (!backupDir.exists())   Assert.assertTrue(backupDir.mkdirs());
  dbURL="plocal:" + dbDirectory;
  System.out.println("Create database");
  ODatabaseDocumentTx databaseDocumentTx=new ODatabaseDocumentTx(dbURL);
  databaseDocumentTx.create();
  System.out.println("Create schema");
  final OSchema schema=databaseDocumentTx.getMetadata().getSchema();
  for (int i=0; i < 3; i++) {
    createClass(schema);
  }
  databaseDocumentTx.close();
  pool=new OPartitionedDatabasePool(dbURL,"admin","admin");
  System.out.println("Start insertion");
  final ExecutorService executor=Executors.newSingleThreadExecutor();
  final ScheduledExecutorService backupExecutor=Executors.newSingleThreadScheduledExecutor();
  backupExecutor.scheduleWithFixedDelay(new IncrementalBackupThread(),1,1,TimeUnit.MINUTES);
  List<Future<Void>> futures=new ArrayList<Future<Void>>();
  futures.add(executor.submit(new NonTxInserter()));
  futures.add(executor.submit(new NonTxInserter()));
  futures.add(executor.submit(new TxInserter()));
  futures.add(executor.submit(new TxInserter()));
  int k=0;
  while (k < 10) {
    Thread.sleep(30 * 1000);
    k++;
    System.out.println(k * 0.5 + " minutes...");
  }
  stop=true;
  for (  Future<Void> future : futures)   future.get();
  backupExecutor.shutdown();
  backupExecutor.awaitTermination(15,TimeUnit.MINUTES);
  System.out.println("Stop insertion ");
  pool.close();
  databaseDocumentTx=new ODatabaseDocumentTx(dbURL);
  databaseDocumentTx.open("admin","admin");
  databaseDocumentTx.incrementalBackup(backupDir.getAbsolutePath());
  OStorage storage=databaseDocumentTx.getStorage();
  databaseDocumentTx.close();
  storage.close(true,false);
  System.out.println("Create backup database");
  final ODatabaseDocumentTx backedUpDb=new ODatabaseDocumentTx("plocal:" + backedUpDbDirectory);
  backedUpDb.create();
  System.out.println("Restore database");
  backedUpDb.incrementalRestore(backupDir.getAbsolutePath());
  final OStorage backupStorage=backedUpDb.getStorage();
  backedUpDb.close();
  backupStorage.close(true,false);
  System.out.println("Compare databases");
  final ODatabaseCompare compare=new ODatabaseCompare("plocal:" + dbDirectory,"plocal:" + backedUpDbDirectory,"admin","admin",new OCommandOutputListener(){
    @Override public void onMessage(    String iText){
      System.out.println(iText);
    }
  }
);
  Assert.assertTrue(compare.compare());
  System.out.println("Drop databases and backup directory");
  databaseDocumentTx.open("admin","admin");
  databaseDocumentTx.drop();
  backedUpDb.open("admin","admin");
  backedUpDb.drop();
  OFileUtils.deleteRecursively(backupDir);
}
