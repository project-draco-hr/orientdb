{
  blockSize=OGlobalConfiguration.FILE_MMAP_BLOCK_SIZE.getValueAsInteger();
  maxMemory=OGlobalConfiguration.FILE_MMAP_MAX_MEMORY.getValueAsLong();
  setOverlapStrategy(OGlobalConfiguration.FILE_MMAP_OVERLAP_STRATEGY.getValueAsInteger());
  OProfiler.getInstance().registerHookValue("system.file.mmap.totalMemory",new OProfilerHookValue(){
    public Object getValue(){
      return totalMemory;
    }
  }
);
  OProfiler.getInstance().registerHookValue("system.file.mmap.maxMemory",new OProfilerHookValue(){
    public Object getValue(){
      return maxMemory;
    }
  }
);
  OProfiler.getInstance().registerHookValue("system.file.mmap.blockSize",new OProfilerHookValue(){
    public Object getValue(){
      return blockSize;
    }
  }
);
  OProfiler.getInstance().registerHookValue("system.file.mmap.blocks",new OProfilerHookValue(){
    public Object getValue(){
      lock.readLock().lock();
      try {
        return bufferPoolLRU.size();
      }
  finally {
        lock.readLock().unlock();
      }
    }
  }
);
  OProfiler.getInstance().registerHookValue("system.file.mmap.alloc.strategy",new OProfilerHookValue(){
    public Object getValue(){
      return lastStrategy;
    }
  }
);
  OProfiler.getInstance().registerHookValue("system.file.mmap.overlap.strategy",new OProfilerHookValue(){
    public Object getValue(){
      return overlapStrategy;
    }
  }
);
}
