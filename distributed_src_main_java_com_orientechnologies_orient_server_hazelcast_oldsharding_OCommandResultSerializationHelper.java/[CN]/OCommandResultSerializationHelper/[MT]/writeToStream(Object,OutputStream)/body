{
  if (result == null) {
    stream.write(NULL_MARKER);
  }
 else   if (result instanceof OIdentifiable) {
    stream.write(RECORD_MARKER);
    writeIdentifiable((OIdentifiable)result,stream);
  }
 else   if (result instanceof Collection<?>) {
    final Collection<OIdentifiable> list=(Collection<OIdentifiable>)result;
    stream.write(COLLECTION_MARKER);
    stream.write(OBinaryProtocol.int2bytes(list.size()));
    for (    OIdentifiable o : list) {
      writeIdentifiable(o,stream);
    }
  }
 else   if (result instanceof Integer) {
    stream.write(INTEGER_MARKER);
    stream.write(OBinaryProtocol.int2bytes((Integer)result));
  }
 else   if (result instanceof Long) {
    stream.write(LONG_MARKER);
    stream.write(OBinaryProtocol.long2bytes((Long)result));
  }
 else   if (result instanceof Boolean) {
    stream.write(BOOLEAN_MARKER);
    stream.write(((Boolean)result) ? 1 : 0);
  }
 else   if (result instanceof OHazelcastResultListener.EndOfResult) {
    stream.write(END_MARKER);
    stream.write(OBinaryProtocol.long2bytes(((OHazelcastResultListener.EndOfResult)result).getNodeId()));
  }
 else {
    stream.write(OTHER_MARKER);
    final StringBuilder value=new StringBuilder();
    ORecordSerializerStringAbstract.fieldTypeToString(value,OType.getTypeByClass(result.getClass()),result);
    final byte[] bytes=value.toString().getBytes();
    stream.write(OBinaryProtocol.int2bytes(bytes.length));
    stream.write(bytes);
  }
}
