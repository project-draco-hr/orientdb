{
  jumpWhiteSpaces();
  int nextPosition;
  int endPosition=textUpperCase.indexOf(OCommandExecutorSQLAbstract.KEYWORD_WHERE,currentPos);
  if (endPosition == -1) {
    endPosition=text.length();
    nextPosition=endPosition;
  }
 else   nextPosition=endPosition + OCommandExecutorSQLAbstract.KEYWORD_WHERE.length();
  final String txt=textUpperCase.substring(currentPos,endPosition);
  if (Character.isDigit(txt.charAt(0))) {
    targetRecords=new ArrayList<String>();
    targetRecords.add(text);
  }
 else   if (txt.charAt(0) == OStringSerializerHelper.COLLECTION_BEGIN) {
    targetRecords=OStringSerializerHelper.getCollection(txt);
  }
 else {
    final List<String> items=OStringSerializerHelper.split(txt,',');
    if (items == null || items.size() == 0)     throw new OQueryParsingException("No clusters found after " + OCommandExecutorSQLAbstract.KEYWORD_FROM,text,0);
    String[] words;
    String subjectName;
    String alias;
    String subjectToMatch;
    for (    String i : items) {
      words=i.split(" ");
      if (words != null && words.length > 1) {
        subjectName=words[0].trim();
        alias=words[1].trim();
      }
 else {
        subjectName=i.trim();
        alias=subjectName;
      }
      subjectToMatch=subjectName;
      if (subjectToMatch.startsWith(OCommandExecutorSQLAbstract.CLUSTER_PREFIX)) {
        if (targetClusters == null)         targetClusters=new HashMap<String,String>();
        targetClusters.put(subjectName.substring(OCommandExecutorSQLAbstract.CLUSTER_PREFIX.length()),alias);
      }
 else {
        if (subjectToMatch.startsWith(OCommandExecutorSQLAbstract.CLASS_PREFIX))         subjectName=subjectName.substring(OCommandExecutorSQLAbstract.CLASS_PREFIX.length());
        if (targetClasses == null)         targetClasses=new HashMap<String,String>();
        targetClasses.put(subjectName,alias);
      }
    }
  }
  currentPos=nextPosition;
  return nextPosition < text.length();
}
