{
  for (int i=0; i < 100; i++) {
    int upperBorder=keyValues.lastKey() + 5000;
    int fromKey;
    if (upperBorder > 0)     fromKey=random.nextInt(upperBorder);
 else     fromKey=random.nextInt(Integer.MAX_VALUE);
    if (random.nextBoolean()) {
      Integer includedKey=keyValues.ceilingKey(fromKey);
      if (includedKey != null)       fromKey=includedKey;
 else       fromKey=keyValues.floorKey(fromKey);
    }
    final OSBTree.OSBTreeCursor<Integer,OIdentifiable> cursor=sbTree.iterateEntriesMajor(fromKey,keyInclusive,ascSortOrder);
    Iterator<Map.Entry<Integer,ORID>> iterator;
    if (ascSortOrder)     iterator=keyValues.tailMap(fromKey,keyInclusive).entrySet().iterator();
 else     iterator=keyValues.descendingMap().subMap(keyValues.lastKey(),true,fromKey,keyInclusive).entrySet().iterator();
    while (iterator.hasNext()) {
      final Map.Entry<Integer,OIdentifiable> indexEntry=cursor.next(-1);
      final Map.Entry<Integer,ORID> entry=iterator.next();
      Assert.assertEquals(indexEntry.getKey(),entry.getKey());
      Assert.assertEquals(indexEntry.getValue(),entry.getValue());
    }
    Assert.assertFalse(iterator.hasNext());
    Assert.assertNull(cursor.next(-1));
  }
}
