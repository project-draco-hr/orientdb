{
  for (  OMMapBufferEntry e : buffersLRU) {
    if (iFile.equals(e.file) && iBeginOffset >= e.beginOffset && iBeginOffset + iSize <= e.beginOffset + e.size) {
      OProfiler.getInstance().updateCounter("OMMapManager.usePage",1);
      return e;
    }
  }
  int bufferSize=iForce ? iSize : iSize <= DEF_BLOCK_SIZE ? DEF_BLOCK_SIZE : iSize;
  if (iBeginOffset + bufferSize > iFile.getFileSize())   bufferSize=iFile.getFileSize() - iBeginOffset;
  if (bufferSize <= 0)   throw new IllegalArgumentException("Invalid range requested for file " + iFile + ". Requested "+ iSize+ " bytes from the address "+ iBeginOffset+ " while the total file size is "+ iFile.getFileSize());
  totalMemory+=bufferSize;
  OMMapBufferEntry entry=null;
  do {
    if (totalMemory > maxMemory) {
      int pagesUnloaded=0;
      for (Iterator<OMMapBufferEntry> it=buffersLRU.descendingIterator(); it.hasNext(); ) {
        entry=it.next();
        if (!entry.pin) {
          for (int i=0; i < FORCE_RETRY; ++i) {
            try {
              entry.buffer.force();
            }
 catch (            Exception e) {
              OLogManager.instance().debug(entry.buffer,"Can't write memory buffer to disk. Retrying (" + (i + 1) + "/"+ FORCE_RETRY+ ")...");
              try {
                System.gc();
                Thread.sleep(FORCE_DELAY);
              }
 catch (              InterruptedException e1) {
              }
            }
          }
          entry.buffer.force();
          it.remove();
          pagesUnloaded++;
          entry.buffer=null;
          totalMemory-=entry.size;
          if (totalMemory < maxMemory)           break;
        }
      }
      OProfiler.getInstance().updateCounter("OMMapManager.pagesUnloaded",pagesUnloaded);
    }
    try {
      entry=mapBuffer(iFile,iBeginOffset,bufferSize);
    }
 catch (    Exception e) {
      maxMemory=maxMemory * 90 / 100;
      OLogManager.instance().warn(OMMapManager.class,"Memory mapping error, try to reduce max memory to %d and retry...",maxMemory);
    }
  }
 while (entry == null && maxMemory > MIN_MEMORY);
  if (entry == null)   throw new OIOException("You can't access to the file portion " + iBeginOffset + "-"+ iBeginOffset+ iSize+ " bytes");
  buffersLRU.addFirst(entry);
  return entry;
}
