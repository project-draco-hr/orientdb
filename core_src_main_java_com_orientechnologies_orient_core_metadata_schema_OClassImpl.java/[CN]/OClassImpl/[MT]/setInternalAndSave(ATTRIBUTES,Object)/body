{
  if (attribute == null)   throw new IllegalArgumentException("attribute is null");
  final String stringValue=iValue != null ? iValue.toString() : null;
  final boolean isNull=stringValue == null || stringValue.equalsIgnoreCase("NULL");
switch (attribute) {
case NAME:
    setNameInternal(stringValue);
  break;
case SHORTNAME:
setShortNameInternal(isNull ? null : stringValue);
break;
case SUPERCLASS:
setSuperClassInternal(isNull ? null : getDatabase().getMetadata().getSchema().getClass(stringValue));
break;
case OVERSIZE:
setOverSizeInternal(Float.parseFloat(stringValue.replace(',','.')));
break;
case STRICTMODE:
setStrictModeInternal(Boolean.parseBoolean(stringValue));
break;
case ABSTRACT:
setAbstractInternal(Boolean.parseBoolean(stringValue));
break;
case ADDCLUSTER:
{
int clId=getClusterId(stringValue);
if (clId == NOT_EXISTENT_CLUSTER_ID) throw new IllegalArgumentException("Cluster id '" + stringValue + "' cannot be added");
addClusterIdInternal(clId);
break;
}
case REMOVECLUSTER:
{
int clId=getClusterId(stringValue);
if (clId == NOT_EXISTENT_CLUSTER_ID) throw new IllegalArgumentException("Cluster id '" + stringValue + "' cannot be removed");
removeClusterIdInternal(clId);
break;
}
case CUSTOM:
if (iValue.toString().indexOf("=") == -1) {
if (iValue.toString().equalsIgnoreCase("clear")) {
clearCustomInternal();
}
 else throw new IllegalArgumentException("Syntax error: expected <name> = <value> or clear, instead found: " + iValue);
}
 else {
final List<String> words=OStringSerializerHelper.smartSplit(iValue.toString(),'=');
setCustomInternal(words.get(0).trim(),words.get(1).trim());
}
break;
}
saveInternal();
}
