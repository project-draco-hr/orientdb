{
  checkConnection();
  final OPhysicalPosition ppos=new OPhysicalPosition(iDataSegmentId,-1,iRecordType);
  do {
    try {
      final OChannelBinaryClient network=beginRequest(OChannelBinaryProtocol.REQUEST_RECORD_CREATE);
      try {
        if (network.getSrvProtocolVersion() >= 10)         network.writeInt(iDataSegmentId);
        network.writeShort((short)iRid.clusterId);
        network.writeBytes(iContent);
        network.writeByte(iRecordType);
        network.writeByte((byte)iMode);
      }
  finally {
        endRequest(network);
      }
      if (iMode == 1)       return ppos;
      if (iCallback == null)       try {
        beginResponse(network);
        iRid.clusterPosition=network.readLong();
        ppos.clusterPosition=iRid.clusterPosition;
        if (network.getSrvProtocolVersion() >= 11)         ppos.recordVersion=network.readInt();
 else         ppos.recordVersion=0;
        return ppos;
      }
  finally {
        endResponse(network);
      }
 else {
        Callable<Object> response=new Callable<Object>(){
          public Object call() throws Exception {
            final Long result;
            try {
              beginResponse(network);
              result=network.readLong();
            }
  finally {
              endResponse(network);
            }
            iCallback.call(result);
            return null;
          }
        }
;
        asynchExecutor.submit(new FutureTask<Object>(response));
      }
    }
 catch (    Exception e) {
      handleException("Error on create record in cluster: " + iRid.clusterId,e);
    }
  }
 while (true);
}
