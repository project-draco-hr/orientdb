{
  final Set<OIndex<?>> indexes=oClass.getClassIndexes();
  final Set<OIndexDefinition> expectedIndexDefinitions=new HashSet<OIndexDefinition>();
  final OCompositeIndexDefinition compositeIndexOne=new OCompositeIndexDefinition("ClassIndexTestClass");
  compositeIndexOne.addIndex(new OPropertyIndexDefinition("ClassIndexTestClass","fOne",OType.INTEGER));
  compositeIndexOne.addIndex(new OPropertyIndexDefinition("ClassIndexTestClass","fTwo",OType.STRING));
  expectedIndexDefinitions.add(compositeIndexOne);
  final OCompositeIndexDefinition compositeIndexTwo=new OCompositeIndexDefinition("ClassIndexTestClass");
  compositeIndexTwo.addIndex(new OPropertyIndexDefinition("ClassIndexTestClass","fOne",OType.INTEGER));
  compositeIndexTwo.addIndex(new OPropertyIndexDefinition("ClassIndexTestClass","fTwo",OType.STRING));
  compositeIndexTwo.addIndex(new OPropertyIndexDefinition("ClassIndexTestClass","fThree",OType.BOOLEAN));
  expectedIndexDefinitions.add(compositeIndexTwo);
  final OPropertyIndexDefinition propertyIndex=new OPropertyIndexDefinition("ClassIndexTestClass","fOne",OType.INTEGER);
  expectedIndexDefinitions.add(propertyIndex);
  final OPropertyMapIndexDefinition propertyMapIndexDefinition=new OPropertyMapIndexDefinition("ClassIndexTestClass","fEmbeddedMap",OType.STRING,OPropertyMapIndexDefinition.INDEX_BY.KEY);
  expectedIndexDefinitions.add(propertyMapIndexDefinition);
  final OPropertyMapIndexDefinition propertyMapByValueIndexDefinition=new OPropertyMapIndexDefinition("ClassIndexTestClass","fEmbeddedMap",OType.INTEGER,OPropertyMapIndexDefinition.INDEX_BY.VALUE);
  expectedIndexDefinitions.add(propertyMapByValueIndexDefinition);
  assertEquals(indexes.size(),6);
  for (  final OIndex index : indexes) {
    assertTrue(expectedIndexDefinitions.contains(index.getDefinition()));
  }
}
