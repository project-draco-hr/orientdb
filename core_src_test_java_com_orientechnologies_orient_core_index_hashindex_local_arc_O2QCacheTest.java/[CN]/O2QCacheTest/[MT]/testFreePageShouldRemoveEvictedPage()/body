{
  long fileId=buffer.openFile(fileConfiguration,".tst");
  long[] pointers;
  pointers=new long[16];
  byte[][] content=new byte[2][];
  for (int i=0; i < 2; i++) {
    pointers[i]=buffer.loadAndLockForRead(fileId,i);
    content[i]=directMemory.get(pointers[i],8);
    buffer.releaseReadLock(fileId,i);
  }
  for (int i=0; i < 16; i++) {
    pointers[i]=buffer.loadAndLockForWrite(fileId,i);
    directMemory.set(pointers[i],new byte[]{(byte)i,1,2,seed,4,5,6,7},8);
    buffer.releaseWriteLock(fileId,i);
  }
  Map evictedPages=buffer.getEvictedPages();
  int size=evictedPages.size();
  buffer.freePage(fileId,0);
  Assert.assertEquals(evictedPages.size(),size - 1);
  buffer.freePage(fileId,1);
  Assert.assertEquals(evictedPages.size(),size - 2);
  buffer.flushBuffer();
  for (int i=0; i < 2; i++) {
    assertFile(i,content[i]);
  }
  for (int i=2; i < 16; i++) {
    assertFile(i,new byte[]{(byte)i,1,2,seed,4,5,6,7});
  }
}
