{
  final OModifiableInteger increment=new OModifiableInteger();
  OSessionStoragePerformanceStatistic sessionStoragePerformanceStatistic=new OSessionStoragePerformanceStatistic(100,new OSessionStoragePerformanceStatistic.NanoTimer(){
    private long counter=0;
    @Override public long getNano(){
      return counter+=increment.getValue();
    }
  }
,-1);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesWrittenInCache(),0);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getWriteSpeedInCacheInPages(),-1);
  sessionStoragePerformanceStatistic.startCommitTimer();
  for (int i=0; i < 50; i++) {
    increment.setValue(50);
    sessionStoragePerformanceStatistic.startComponentOperation("c1po");
    sessionStoragePerformanceStatistic.startComponentOperation("c1po");
    sessionStoragePerformanceStatistic.startPageWriteInCacheTimer();
    sessionStoragePerformanceStatistic.stopPageWriteInCacheTimer();
    increment.setValue(150);
    sessionStoragePerformanceStatistic.startComponentOperation("c2po");
    sessionStoragePerformanceStatistic.startPageWriteInCacheTimer();
    sessionStoragePerformanceStatistic.stopPageWriteInCacheTimer();
    sessionStoragePerformanceStatistic.completeComponentOperation();
    sessionStoragePerformanceStatistic.completeComponentOperation();
    sessionStoragePerformanceStatistic.completeComponentOperation();
  }
  increment.setValue(100);
  for (int i=0; i < 50; i++) {
    sessionStoragePerformanceStatistic.startPageWriteInCacheTimer();
    sessionStoragePerformanceStatistic.stopPageWriteInCacheTimer();
  }
  sessionStoragePerformanceStatistic.stopCommitTimer();
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesWrittenInCache(),150);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesWrittenInCache(null),150);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesWrittenInCache("c1po"),100);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesWrittenInCache("c2po"),50);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesWrittenInCache("c3po"),-1);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getWriteSpeedInCacheInPages(),10000000);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getWriteSpeedInCacheInPages(null),10000000);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getWriteSpeedInCacheInPages("c1po"),10000000);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getWriteSpeedInCacheInPages("c2po"),6666666);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getWriteSpeedInCacheInPages("c3po"),-1);
  ODocument doc=sessionStoragePerformanceStatistic.toDocument();
  Assert.assertEquals(doc.field("amountOfPagesWrittenInCache"),150L);
  Assert.assertEquals(doc.field("writeSpeedInCacheInPages"),10000000L);
  final ODocument docC1PO=doc.<Map<String,ODocument>>field("dataByComponent").get("c1po");
  Assert.assertEquals(docC1PO.field("amountOfPagesWrittenInCache"),100L);
  Assert.assertEquals(docC1PO.field("writeSpeedInCacheInPages"),10000000L);
  final ODocument docC2PO=doc.<Map<String,ODocument>>field("dataByComponent").get("c2po");
  Assert.assertEquals(docC2PO.field("amountOfPagesWrittenInCache"),50L);
  Assert.assertEquals(docC2PO.field("writeSpeedInCacheInPages"),6666666L);
}
