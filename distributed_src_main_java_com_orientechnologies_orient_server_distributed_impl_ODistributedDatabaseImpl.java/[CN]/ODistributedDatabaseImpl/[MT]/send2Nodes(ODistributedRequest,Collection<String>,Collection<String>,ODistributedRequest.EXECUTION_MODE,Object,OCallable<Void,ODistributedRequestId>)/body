{
  boolean afterSendCallBackCalled=false;
  try {
    checkForServerOnline(iRequest);
    final String databaseName=iRequest.getDatabaseName();
    if (iNodes.isEmpty()) {
      ODistributedServerLog.error(this,localNodeName,null,DIRECTION.OUT,"No nodes configured for database '%s' request: %s",databaseName,iRequest);
      throw new ODistributedException("No nodes configured for partition '" + databaseName + "' request: "+ iRequest);
    }
    final ODistributedConfiguration cfg=manager.getDatabaseConfiguration(databaseName);
    final ORemoteTask task=iRequest.getTask();
    final boolean checkNodesAreOnline=task.isNodeOnlineRequired();
    final Set<String> nodesConcurToTheQuorum=manager.getDistributedStrategy().getNodesConcurInQuorum(manager,cfg,iRequest,iNodes,localResult);
    final int availableNodes=manager.getAvailableNodes(iNodes,databaseName);
    final int expectedResponses=localResult != null ? availableNodes + 1 : availableNodes;
    final int quorum=calculateQuorum(task.getQuorumType(),iClusterNames,cfg,expectedResponses,nodesConcurToTheQuorum.size(),checkNodesAreOnline,localNodeName);
    final boolean groupByResponse;
    if (task.getResultStrategy() == OAbstractRemoteTask.RESULT_STRATEGY.UNION) {
      groupByResponse=false;
    }
 else {
      groupByResponse=true;
    }
    final boolean waitLocalNode=waitForLocalNode(cfg,iClusterNames,iNodes);
    final ODistributedResponseManager currentResponseMgr=new ODistributedResponseManager(manager,iRequest,iNodes,nodesConcurToTheQuorum,expectedResponses,quorum,waitLocalNode,task.getSynchronousTimeout(expectedResponses),task.getTotalTimeout(availableNodes),groupByResponse);
    if (localResult != null)     currentResponseMgr.setLocalResult(localNodeName,(Serializable)localResult);
    if (!(iNodes instanceof List))     iNodes=new ArrayList<String>(iNodes);
    Collections.sort((List<String>)iNodes);
    msgService.registerRequest(iRequest.getId().getMessageId(),currentResponseMgr);
    if (ODistributedServerLog.isDebugEnabled())     ODistributedServerLog.debug(this,localNodeName,iNodes.toString(),DIRECTION.OUT,"Sending request %s...",iRequest);
    for (    String node : iNodes) {
      try {
        final ORemoteServerController remoteServer=manager.getRemoteServer(node);
        remoteServer.sendRequest(iRequest);
      }
 catch (      Throwable e) {
        String reason=e.getMessage();
        if (e instanceof ODistributedException && e.getCause() instanceof IOException) {
          reason=e.getCause().getMessage();
          manager.closeRemoteServer(node);
        }
 else         if (e instanceof OSecurityAccessException) {
          manager.closeRemoteServer(node);
          try {
            final ORemoteServerController remoteServer=manager.getRemoteServer(node);
            remoteServer.sendRequest(iRequest);
            continue;
          }
 catch (          Throwable ex) {
          }
        }
        if (!manager.isNodeAvailable(node))         ODistributedServerLog.debug(this,localNodeName,node,ODistributedServerLog.DIRECTION.OUT,"Error on sending distributed request %s. The target node is not available. Active nodes: %s",e,iRequest,manager.getAvailableNodeNames(databaseName));
 else         ODistributedServerLog.error(this,localNodeName,node,ODistributedServerLog.DIRECTION.OUT,"Error on sending distributed request %s (%s). Active nodes: %s",iRequest,reason,manager.getAvailableNodeNames(databaseName));
      }
    }
    if (ODistributedServerLog.isDebugEnabled())     ODistributedServerLog.debug(this,localNodeName,iNodes.toString(),DIRECTION.OUT,"Sent request %s",iRequest);
    Orient.instance().getProfiler().updateCounter("distributed.db." + databaseName + ".msgSent","Number of replication messages sent from current node",+1,"distributed.db.*.msgSent");
    afterSendCallBackCalled=true;
    if (iAfterSentCallback != null)     iAfterSentCallback.call(iRequest.getId());
    if (iExecutionMode == ODistributedRequest.EXECUTION_MODE.RESPONSE)     return waitForResponse(iRequest,currentResponseMgr);
    return null;
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw OException.wrapException(new ODistributedException("Error on executing distributed request (" + iRequest + ") against database '"+ databaseName+ (iClusterNames != null ? "." + iClusterNames : "")+ "' to nodes "+ iNodes),e);
  }
 finally {
    if (iAfterSentCallback != null && !afterSendCallBackCalled)     iAfterSentCallback.call(iRequest.getId());
  }
}
