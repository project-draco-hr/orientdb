{
  final OrientBaseGraph graph=getGraph();
  if (!isLightweight())   checkClass();
  graph.setCurrentGraphInThreadLocal();
  graph.autoStartTransaction();
  for (  final Index<? extends Element> index : graph.getIndices()) {
    if (Edge.class.isAssignableFrom(index.getIndexClass())) {
      OrientIndex<OrientEdge> idx=(OrientIndex<OrientEdge>)index;
      idx.removeElement(this);
    }
  }
  final OIdentifiable inVertexEdge=vIn != null ? vIn : rawElement;
  final String edgeClassName=OrientBaseGraph.encodeClassName(getLabel());
  final boolean useVertexFieldsForEdgeLabels=settings.isUseVertexFieldsForEdgeLabels();
  final OIdentifiable outVertex=getOutVertex();
  ODocument outVertexRecord=null;
  boolean outVertexChanged=false;
  if (outVertex != null) {
    outVertexRecord=outVertex.getRecord();
    final String outFieldName=OrientVertex.getConnectionFieldName(Direction.OUT,edgeClassName,useVertexFieldsForEdgeLabels);
    outVertexChanged=dropEdgeFromVertex(inVertexEdge,outVertexRecord,outFieldName,outVertexRecord.field(outFieldName));
  }
  final OIdentifiable outVertexEdge=vOut != null ? vOut : rawElement;
  final OIdentifiable inVertex=getInVertex();
  ODocument inVertexRecord=null;
  boolean inVertexChanged=false;
  if (inVertex != null) {
    inVertexRecord=inVertex.getRecord();
    final String inFieldName=OrientVertex.getConnectionFieldName(Direction.IN,edgeClassName,useVertexFieldsForEdgeLabels);
    inVertexChanged=dropEdgeFromVertex(outVertexEdge,inVertexRecord,inFieldName,inVertexRecord.field(inFieldName));
  }
  if (outVertexChanged)   outVertexRecord.save();
  if (inVertexChanged)   inVertexRecord.save();
  if (rawElement != null)   super.remove();
}
