{
  checkOpeness();
  ((OMetadataInternal)getMetadata()).makeThreadLocalSchemaSnapshot();
  ORecordSerializationContext.pushContext();
  try {
    checkSecurity(ORule.ResourceGeneric.CLUSTER,ORole.PERMISSION_READ,getClusterNameById(rid.getClusterId()));
    ORecord record=getTransaction().getRecord(rid);
    if (record == OTransactionRealAbstract.DELETED_RECORD)     return null;
    if (record == null && !ignoreCache)     record=getLocalCache().findRecord(rid);
    if (record != null) {
      if (iRecord != null) {
        iRecord.fromStream(record.toStream());
        iRecord.getRecordVersion().copyFrom(record.getRecordVersion());
        record=iRecord;
      }
      OFetchHelper.checkFetchPlanValid(fetchPlan);
      if (callbackHooks(ORecordHook.TYPE.BEFORE_READ,record) == ORecordHook.RESULT.SKIP)       return null;
      if (record.getInternalStatus() == ORecordElement.STATUS.NOT_LOADED)       record.reload();
      if (lockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_SHARED_LOCK) {
        OLogManager.instance().warn(this,"You use depricated record locking strategy : %s it may lead to deadlocks " + lockingStrategy);
        record.lock(false);
      }
 else       if (lockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_EXCLUSIVE_LOCK) {
        OLogManager.instance().warn(this,"You use depricated record locking strategy : %s it may lead to deadlocks " + lockingStrategy);
        record.lock(true);
      }
      callbackHooks(ORecordHook.TYPE.AFTER_READ,record);
      return (RET)record;
    }
    final ORawBuffer recordBuffer;
    if (!rid.isValid())     recordBuffer=null;
 else {
      OFetchHelper.checkFetchPlanValid(fetchPlan);
      ORecordVersion version;
      if (iRecord != null)       version=iRecord.getRecordVersion();
 else       if (recordVersion != null)       version=recordVersion;
 else       version=new OSimpleVersion(-1);
      recordBuffer=recordReader.readRecord(storage,rid,fetchPlan,ignoreCache,version);
    }
    if (recordBuffer == null)     return null;
    if (iRecord == null || ORecordInternal.getRecordType(iRecord) != recordBuffer.recordType)     iRecord=Orient.instance().getRecordFactoryManager().newInstance(recordBuffer.recordType);
    ORecordInternal.fill(iRecord,rid,recordBuffer.version,recordBuffer.buffer,false);
    if (iRecord.getRecordVersion().isTombstone())     return (RET)iRecord;
    if (callbackHooks(ORecordHook.TYPE.BEFORE_READ,iRecord) == ORecordHook.RESULT.SKIP)     return null;
    iRecord.fromStream(recordBuffer.buffer);
    callbackHooks(ORecordHook.TYPE.AFTER_READ,iRecord);
    if (!ignoreCache)     getLocalCache().updateRecord(iRecord);
    return (RET)iRecord;
  }
 catch (  OOfflineClusterException t) {
    throw t;
  }
catch (  Throwable t) {
    if (rid.isTemporary())     throw new ODatabaseException("Error on retrieving record using temporary RecordId: " + rid,t);
 else     throw new ODatabaseException("Error on retrieving record " + rid + " (cluster: "+ storage.getPhysicalClusterNameById(rid.clusterId)+ ")",t);
  }
 finally {
    ORecordSerializationContext.pullContext();
    ((OMetadataInternal)getMetadata()).clearThreadLocalSchemaSnapshot();
  }
}
