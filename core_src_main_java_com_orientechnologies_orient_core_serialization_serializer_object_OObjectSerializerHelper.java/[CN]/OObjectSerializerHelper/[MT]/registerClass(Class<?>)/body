{
synchronized (classes) {
    if (classes.containsKey(iClass.getName()))     return classes.get(iClass.getName());
    List<Field> properties=new ArrayList<Field>();
    classes.put(iClass.getName(),properties);
    String fieldName;
    int fieldModifier;
    OBind bindAnnotation;
    boolean autoBinding;
    for (Class<?> currentClass=iClass; currentClass != Object.class; ) {
      for (      Field f : currentClass.getDeclaredFields()) {
        fieldModifier=f.getModifiers();
        if (Modifier.isStatic(fieldModifier) || Modifier.isNative(fieldModifier) || Modifier.isTransient(fieldModifier))         continue;
        properties.add(f);
        fieldName=f.getName();
        bindAnnotation=f.getAnnotation(OBind.class);
        autoBinding=bindAnnotation == null || bindAnnotation.mode() == MODES.AUTO;
        if (autoBinding)         try {
          String getterName="get" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);
          Method m=currentClass.getMethod(getterName,NO_ARGS);
          getters.put(iClass.getName() + "." + fieldName,m);
        }
 catch (        Exception e) {
          registerFieldGetter(iClass,fieldName,f);
        }
 else         registerFieldGetter(iClass,fieldName,f);
        if (autoBinding)         try {
          String getterName="set" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);
          Method m=currentClass.getMethod(getterName,f.getType());
          setters.put(iClass.getName() + "." + fieldName,m);
        }
 catch (        Exception e) {
          registerFieldSetter(iClass,fieldName,f);
        }
 else         registerFieldSetter(iClass,fieldName,f);
      }
      for (      Method m : currentClass.getDeclaredMethods()) {
        if (m.getAnnotation(PostConstruct.class) != null)         initMethods.put(iClass.getName(),m);
      }
      currentClass=currentClass.getSuperclass();
      if (currentClass.equals(ODocument.class))       currentClass=Object.class;
    }
    return properties;
  }
}
