{
  OSelectWithoutTargetStatement jjtn000=new OSelectWithoutTargetStatement(JJTSELECTWITHOUTTARGETSTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  validationStats.add(0,new ValidationStats());
  try {
    jj_consume_token(SELECT);
    jjtn000.projection=Projection();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LET:
      jjtn000.letClause=LetClause();
    break;
default :
  jj_la1[9]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case UNWIND:
jjtn000.unwind=Unwind();
break;
default :
jj_la1[10]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIMIT:
case SKIP2:
case OFFSET:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SKIP2:
case OFFSET:
jjtn000.skip=Skip();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIMIT:
jjtn000.limit=Limit();
break;
default :
jj_la1[11]=jj_gen;
;
}
break;
case LIMIT:
jjtn000.limit=Limit();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SKIP2:
case OFFSET:
jjtn000.skip=Skip();
break;
default :
jj_la1[12]=jj_gen;
;
}
break;
default :
jj_la1[13]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[14]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case FETCHPLAN:
jjtn000.fetchPlan=FetchPlan();
break;
default :
jj_la1[15]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TIMEOUT:
jjtn000.timeout=Timeout();
break;
default :
jj_la1[16]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LOCK:
jj_consume_token(LOCK);
jj_consume_token(RECORD);
jjtn000.lockRecord=true;
break;
default :
jj_la1[17]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PARALLEL:
jj_consume_token(PARALLEL);
jjtn000.parallel=true;
break;
default :
jj_la1[18]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case NOCACHE:
jj_consume_token(NOCACHE);
jjtn000.noCache=true;
break;
default :
jj_la1[19]=jj_gen;
;
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
jjtn000.validate(validationStats.remove(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
