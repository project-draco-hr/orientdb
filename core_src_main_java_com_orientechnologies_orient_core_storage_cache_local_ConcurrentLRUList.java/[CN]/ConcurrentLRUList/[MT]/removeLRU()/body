{
  ListNode current=headReference;
  boolean removed=false;
  LRUEntry currentEntry=null;
  int inUseCounter=0;
  do {
    while (current.isDummy || (currentEntry=current.entry) == null || (isInUse(currentEntry.entry))) {
      if (currentEntry != null && isInUse(currentEntry.entry))       inUseCounter++;
      ListNode next=current.next.get();
      if (next == null) {
        if (cache.size() == inUseCounter)         return null;
        current=headReference;
        inUseCounter=0;
        continue;
      }
      current=next;
    }
    if (cache.remove(currentEntry.key,currentEntry)) {
      currentEntry.removeLock.writeLock().lock();
      try {
        currentEntry.removed=true;
        ListNode node=currentEntry.listNode.get();
        currentEntry.listNode.lazySet(null);
        addToTrash(node);
        removed=true;
      }
  finally {
        currentEntry.removeLock.writeLock().unlock();
      }
    }
 else {
      current=headReference;
      inUseCounter=0;
    }
  }
 while (!removed);
  purge();
  return currentEntry.entry;
}
