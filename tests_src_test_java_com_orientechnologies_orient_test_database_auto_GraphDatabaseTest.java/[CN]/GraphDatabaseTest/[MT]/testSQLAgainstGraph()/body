{
  Vertex tom=database.addVertex(null,"name","Tom");
  Vertex ferrari=database.addVertex("class:GraphCar","brand","Ferrari");
  Vertex maserati=database.addVertex("class:GraphCar","brand","Maserati");
  Vertex porsche=database.addVertex("class:GraphCar","brand","Porsche");
  database.addEdge(null,tom,ferrari,"drives");
  database.addEdge(null,tom,maserati,"drives");
  database.addEdge(null,tom,porsche,"owns");
  database.commit();
  Assert.assertNotNull(database.getVertex(tom).getEdges(Direction.OUT,"drives"));
  Assert.assertEquals(database.getVertex(tom).countEdges(Direction.OUT,"drives"),2);
  List<ODocument> result=database.getRawGraph().query(new OSQLSynchQuery<ODocument>("select out_[in.@class = 'GraphCar'].in_ from V where name = 'Tom'"));
  Assert.assertEquals(result.size(),1);
  result=database.getRawGraph().query(new OSQLSynchQuery<ODocument>("select out_[label='drives'][in.brand = 'Ferrari'].in_ from V where name = 'Tom'"));
  Assert.assertEquals(result.size(),1);
  result=database.getRawGraph().query(new OSQLSynchQuery<ODocument>("select out_[in.brand = 'Ferrari'].in_ from V where name = 'Tom'"));
  Assert.assertEquals(result.size(),1);
}
