{
  URL locationUrl=getClass().getClassLoader().getResource("apache-aries/file1/META-INF/persistence.xml");
  Collection<? extends PersistenceUnitInfo> parsedUnits=PersistenceXmlUtil.parse(locationUrl);
  assertNotNull("Persistence units shouldn't be null.",parsedUnits);
  assertEquals("An incorrect number of persistence units has been returned.",4,parsedUnits.size());
  Iterator<? extends PersistenceUnitInfo> iterator=parsedUnits.iterator();
  assertPersistenceUnit(iterator.next(),new Rule[]{new Rule("The schema version was incorrect","1.0","getPersistenceXMLSchemaVersion"),new Rule("The unit name was incorrect","alpha","getPersistenceUnitName"),new Rule("The transaction type was incorrect",null,"getTransactionType"),new Rule("The provider class name was incorrect",null,"getPersistenceProviderClassName"),new Rule("One or more mapping files were specified",EMPTY_LIST,"getMappingFileNames"),new Rule("One or more jar files were specified",EMPTY_LIST,"getJarFileUrls"),new Rule("One or more managed classes were specified",EMPTY_LIST,"getManagedClassNames"),new Rule("We should not exclude any classes",false,"excludeUnlistedClasses")});
  assertPersistenceUnit(iterator.next(),new Rule[]{new Rule("The schema version was incorrect","1.0","getPersistenceXMLSchemaVersion"),new Rule("The unit name was incorrect","bravo","getPersistenceUnitName"),new Rule("The transaction type was incorrect",JTA,"getTransactionType"),new Rule("The provider class name was incorrect","bravo.persistence.provider","getPersistenceProviderClassName"),new Rule("Incorrect mapping files were listed",asList("bravoMappingFile1.xml","bravoMappingFile2.xml"),"getMappingFileNames"),new Rule("Incorrect jar URLs were listed",asURLList("bravoJarFile1.jar","bravoJarFile2.jar"),"getJarFileUrls"),new Rule("Incorrect managed classes were listed",asList("bravoClass1","bravoClass2"),"getManagedClassNames"),new Rule("We should not exclude any classes",true,"excludeUnlistedClasses"),new Rule("The properties should never be null",asProperty("some.prop","prop.value","some.other.prop","another.prop.value"),"getProperties")});
  assertPersistenceUnit(iterator.next(),new Rule[]{new Rule("The schema version was incorrect","1.0","getPersistenceXMLSchemaVersion"),new Rule("The unit name was incorrect","charlie","getPersistenceUnitName"),new Rule("The transaction type was incorrect",PersistenceUnitTransactionType.RESOURCE_LOCAL,"getTransactionType"),new Rule("The provider class name was incorrect","charlie.persistence.provider","getPersistenceProviderClassName"),new Rule("One or more mapping files were specified",EMPTY_LIST,"getMappingFileNames"),new Rule("One or more jar files were specified",EMPTY_LIST,"getJarFileUrls"),new Rule("One or more managed classes were specified",EMPTY_LIST,"getManagedClassNames"),new Rule("We should not exclude any classes",true,"excludeUnlistedClasses")});
  assertPersistenceUnit(iterator.next(),new Rule[]{new Rule("The schema version was incorrect","1.0","getPersistenceXMLSchemaVersion"),new Rule("The unit name was incorrect","delta","getPersistenceUnitName"),new Rule("The transaction type was incorrect",PersistenceUnitTransactionType.RESOURCE_LOCAL,"getTransactionType"),new Rule("The provider class name was incorrect","delta.persistence.provider","getPersistenceProviderClassName"),new Rule("One or more mapping files were specified",EMPTY_LIST,"getMappingFileNames"),new Rule("One or more jar files were specified",EMPTY_LIST,"getJarFileUrls"),new Rule("One or more managed classes were specified",EMPTY_LIST,"getManagedClassNames"),new Rule("We should not exclude any classes",false,"excludeUnlistedClasses")});
}
