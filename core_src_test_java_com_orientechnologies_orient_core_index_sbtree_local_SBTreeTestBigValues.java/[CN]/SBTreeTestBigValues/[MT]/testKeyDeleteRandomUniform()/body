{
  NavigableSet<Integer> keys=new TreeSet<Integer>();
  for (int i=0; i < KEYS_COUNT; i++) {
    sbTree.put(i,createValue(i,OSBTreeValuePage.MAX_BINARY_VALUE_SIZE + 4));
    keys.add(i);
    doReset();
  }
  Iterator<Integer> keysIterator=keys.iterator();
  while (keysIterator.hasNext()) {
    int key=keysIterator.next();
    if (key % 3 == 0) {
      sbTree.remove(key);
      keysIterator.remove();
    }
    doReset();
  }
  Assert.assertEquals(sbTree.firstKey(),keys.first());
  doReset();
  Assert.assertEquals(sbTree.lastKey(),keys.last());
  doReset();
  for (  int key : keys) {
    if (key % 3 == 0) {
      Assert.assertNull(sbTree.get(key));
    }
 else {
      Assert.assertEquals(sbTree.get(key),createValue(key,OSBTreeValuePage.MAX_BINARY_VALUE_SIZE + 4));
    }
    doReset();
  }
}
