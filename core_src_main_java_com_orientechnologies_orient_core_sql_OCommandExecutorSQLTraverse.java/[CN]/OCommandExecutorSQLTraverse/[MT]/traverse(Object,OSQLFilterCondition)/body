{
  if (!(iTarget instanceof OIdentifiable))   return;
  final ORecord<?> record=((OIdentifiable)iTarget).getRecord();
  if (!(record instanceof ODocument))   return;
  final ODocument target=(ODocument)record;
  if (((OTraverseContext)context).traversed.contains(target.getIdentity()))   return;
  if (target.getInternalStatus() == ORecordElement.STATUS.NOT_LOADED)   try {
    target.load();
  }
 catch (  final ORecordNotFoundException e) {
    return;
  }
  if (iCondition != null) {
    final Object conditionResult=iCondition.evaluate(target,context);
    if (conditionResult != Boolean.TRUE)     return;
  }
  addResult(target);
  ((OTraverseContext)context).traversed.add(target.getIdentity());
  ((OTraverseContext)context).history.add(target.getIdentity());
  try {
    for (    String cfgField : fields) {
      if ("*".equals(cfgField) || OSQLFilterItemFieldAll.FULL_NAME.equals(cfgField) || OSQLFilterItemFieldAny.FULL_NAME.equals(cfgField)) {
        for (        final String fieldName : target.fieldNames())         traverseField(target,fieldName,iCondition);
      }
 else {
        final int pos=cfgField.indexOf('.');
        if (pos > -1) {
          final OClass cls=target.getSchemaClass();
          if (cls == null)           continue;
          final String className=cfgField.substring(0,pos);
          if (!cls.isSubClassOf(className))           continue;
          cfgField=cfgField.substring(pos + 1);
        }
        traverseField(target,cfgField,iCondition);
      }
    }
  }
  finally {
    ((OTraverseContext)context).history.remove(((OTraverseContext)context).history.size() - 1);
  }
}
