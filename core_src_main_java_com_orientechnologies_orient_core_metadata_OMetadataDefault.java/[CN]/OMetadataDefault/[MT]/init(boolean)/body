{
  final ODatabaseDocumentInternal database=getDatabase();
  schemaClusterId=database.getClusterIdByName(CLUSTER_INTERNAL_NAME);
  schema=new OSchemaProxy(database.getStorage().getResource(OSchema.class.getSimpleName(),new Callable<OSchemaShared>(){
    public OSchemaShared call(){
      ODatabaseDocumentInternal database=getDatabase();
      final OSchemaShared instance=new OSchemaShared(database.getStorageVersions().classesAreDetectedByClusterId());
      if (iLoad)       instance.load();
      return instance;
    }
  }
),database);
  indexManager=new OIndexManagerProxy(database.getStorage().getResource(OIndexManager.class.getSimpleName(),new Callable<OIndexManager>(){
    public OIndexManager call(){
      OIndexManager instance;
      if (database.getStorage() instanceof OStorageProxy)       instance=new OIndexManagerRemote(database);
 else       instance=new OIndexManagerShared(database);
      if (iLoad)       try {
        instance.load();
      }
 catch (      Exception e) {
        OLogManager.instance().error(this,"[OMetadata] Error on loading index manager, reset index configuration",e);
        instance.create();
      }
      return instance;
    }
  }
),database);
  security=new OSecurityProxy(database.getStorage().getResource(OSecurity.class.getSimpleName(),new Callable<OSecurityShared>(){
    public OSecurityShared call(){
      final OSecurityShared instance=new OSecurityShared();
      if (iLoad) {
        security=instance;
        instance.load();
      }
      return instance;
    }
  }
),database);
  commandCache=database.getStorage().getResource(OCommandCache.class.getSimpleName(),new Callable<OCommandCache>(){
    public OCommandCache call(){
      return new OCommandCacheSoftRefs(database.getName());
    }
  }
);
  final Class<? extends OSecurity> securityClass=(Class<? extends OSecurity>)database.getProperty(ODatabase.OPTIONS.SECURITY.toString());
  if (securityClass != null)   try {
    final OSecurity wrapped=security;
    security=securityClass.getDeclaredConstructor(OSecurity.class,ODatabaseDocumentInternal.class).newInstance(wrapped,database);
  }
 catch (  Exception e) {
    throw new OSecurityException("Cannot install custom security implementation (" + securityClass + ")",e);
  }
  functionLibrary=new OFunctionLibraryProxy(database.getStorage().getResource(OFunctionLibrary.class.getSimpleName(),new Callable<OFunctionLibrary>(){
    public OFunctionLibrary call(){
      final OFunctionLibraryImpl instance=new OFunctionLibraryImpl();
      if (iLoad && !(database.getStorage() instanceof OStorageProxy))       instance.load();
      return instance;
    }
  }
),database);
  sequenceLibrary=new OSequenceLibraryProxy(database.getStorage().getResource(OSequenceLibrary.class.getSimpleName(),new Callable<OSequenceLibrary>(){
    @Override public OSequenceLibrary call() throws Exception {
      final OSequenceLibraryImpl instance=new OSequenceLibraryImpl();
      if (iLoad) {
        instance.load();
      }
      return instance;
    }
  }
),database);
  scheduler=new OSchedulerListenerProxy(database.getStorage().getResource(OSchedulerListener.class.getSimpleName(),new Callable<OSchedulerListener>(){
    public OSchedulerListener call(){
      final OSchedulerListenerImpl instance=new OSchedulerListenerImpl();
      if (iLoad && !(database.getStorage() instanceof OStorageProxy))       instance.load();
      return instance;
    }
  }
),database);
}
