{
  int firsIndex=-1;
  int secondIndex=-1;
  int thirdIndex=-1;
  long[] level=new long[OLocalHashTable.MAX_LEVEL_SIZE];
  for (int n=0; n < ODirectoryFirstPage.NODES_PER_PAGE; n++) {
    for (int i=0; i < level.length; i++)     level[i]=i + n * 100;
    int index=directory.addNewNode((byte)5,(byte)6,(byte)7,level);
    if (firsIndex < 0)     firsIndex=index;
  }
  for (int n=0; n < ODirectoryPage.NODES_PER_PAGE; n++) {
    for (int i=0; i < level.length; i++)     level[i]=i + n * 100;
    int index=directory.addNewNode((byte)5,(byte)6,(byte)7,level);
    if (secondIndex < 0)     secondIndex=index;
  }
  for (int n=0; n < ODirectoryPage.NODES_PER_PAGE; n++) {
    for (int i=0; i < level.length; i++)     level[i]=i + n * 100;
    int index=directory.addNewNode((byte)5,(byte)6,(byte)7,level);
    if (thirdIndex < 0)     thirdIndex=index;
  }
  Assert.assertEquals(firsIndex,0);
  Assert.assertEquals(secondIndex,ODirectoryFirstPage.NODES_PER_PAGE);
  Assert.assertEquals(thirdIndex,ODirectoryFirstPage.NODES_PER_PAGE + ODirectoryPage.NODES_PER_PAGE);
  directory.deleteNode(secondIndex);
  directory.deleteNode(firsIndex);
  directory.deleteNode(thirdIndex);
  for (int i=0; i < level.length; i++)   level[i]=i + 1000;
  int index=directory.addNewNode((byte)8,(byte)9,(byte)10,level);
  Assert.assertEquals(index,thirdIndex);
  for (int i=0; i < level.length; i++)   level[i]=i + 2000;
  index=directory.addNewNode((byte)11,(byte)12,(byte)13,level);
  Assert.assertEquals(index,firsIndex);
  for (int i=0; i < level.length; i++)   level[i]=i + 3000;
  index=directory.addNewNode((byte)14,(byte)15,(byte)16,level);
  Assert.assertEquals(index,secondIndex);
  for (int i=0; i < level.length; i++)   level[i]=i + 4000;
  index=directory.addNewNode((byte)17,(byte)18,(byte)19,level);
  Assert.assertEquals(index,ODirectoryFirstPage.NODES_PER_PAGE + 2 * ODirectoryPage.NODES_PER_PAGE);
  Assert.assertEquals(directory.getMaxLeftChildDepth(thirdIndex),8);
  Assert.assertEquals(directory.getMaxRightChildDepth(thirdIndex),9);
  Assert.assertEquals(directory.getNodeLocalDepth(thirdIndex),10);
  for (int i=0; i < level.length; i++)   Assert.assertEquals(directory.getNodePointer(thirdIndex,i),i + 1000);
  Assert.assertEquals(directory.getMaxLeftChildDepth(firsIndex),11);
  Assert.assertEquals(directory.getMaxRightChildDepth(firsIndex),12);
  Assert.assertEquals(directory.getNodeLocalDepth(firsIndex),13);
  for (int i=0; i < level.length; i++)   Assert.assertEquals(directory.getNodePointer(firsIndex,i),i + 2000);
  Assert.assertEquals(directory.getMaxLeftChildDepth(secondIndex),14);
  Assert.assertEquals(directory.getMaxRightChildDepth(secondIndex),15);
  Assert.assertEquals(directory.getNodeLocalDepth(secondIndex),16);
  for (int i=0; i < level.length; i++)   Assert.assertEquals(directory.getNodePointer(secondIndex,i),i + 3000);
  final int lastIndex=ODirectoryFirstPage.NODES_PER_PAGE + 2 * ODirectoryPage.NODES_PER_PAGE;
  Assert.assertEquals(directory.getMaxLeftChildDepth(lastIndex),17);
  Assert.assertEquals(directory.getMaxRightChildDepth(lastIndex),18);
  Assert.assertEquals(directory.getNodeLocalDepth(lastIndex),19);
  for (int i=0; i < level.length; i++)   Assert.assertEquals(directory.getNodePointer(lastIndex,i),i + 4000);
}
