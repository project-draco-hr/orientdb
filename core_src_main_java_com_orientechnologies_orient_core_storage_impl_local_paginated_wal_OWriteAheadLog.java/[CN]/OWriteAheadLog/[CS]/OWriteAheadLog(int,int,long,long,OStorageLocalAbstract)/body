{
  this.maxPagesCacheSize=maxPagesCacheSize;
  this.commitDelay=commitDelay;
  this.maxSegmentSize=maxSegmentSize;
  this.maxLogSize=maxLogSize;
  this.storage=storage;
  try {
    this.walLocation=new File(calculateWalPath(this.storage));
    File[] walFiles=this.walLocation.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return validateName(name);
      }
    }
);
    if (walFiles == null)     walFiles=new File[0];
    if (walFiles.length == 0) {
      LogSegment logSegment=new LogSegment(new File(this.walLocation,getSegmentName(0)),maxPagesCacheSize);
      logSegment.init();
      logSegment.startFlush();
      logSegments.add(logSegment);
      logSize=0;
      flushedLsn=null;
    }
 else {
      for (      File walFile : walFiles) {
        LogSegment logSegment=new LogSegment(walFile,maxPagesCacheSize);
        logSegment.init();
        logSegments.add(logSegment);
        logSize+=logSegment.filledUpTo();
      }
      Collections.sort(logSegments);
      logSegments.get(logSegments.size() - 1).startFlush();
      flushedLsn=readFlushedLSN();
    }
    masterRecordFile=new File(walLocation,this.storage.getName() + MASTER_RECORD_EXTENSION);
    masterRecordLSNHolder=new RandomAccessFile(masterRecordFile,"rws");
    if (masterRecordLSNHolder.length() > 0) {
      firstMasterRecord=readMasterRecord(this.storage.getName(),0);
      secondMasterRecord=readMasterRecord(this.storage.getName(),1);
      if (firstMasterRecord == null) {
        useFirstMasterRecord=true;
        lastCheckpoint=secondMasterRecord;
      }
 else       if (secondMasterRecord == null) {
        useFirstMasterRecord=false;
        lastCheckpoint=firstMasterRecord;
      }
 else {
        if (firstMasterRecord.compareTo(secondMasterRecord) >= 0) {
          lastCheckpoint=firstMasterRecord;
          useFirstMasterRecord=false;
        }
 else {
          lastCheckpoint=secondMasterRecord;
          useFirstMasterRecord=true;
        }
      }
    }
    fixMasterRecords();
  }
 catch (  FileNotFoundException e) {
    OLogManager.instance().error(this,"Error during file initialization for storage %s",e,this.storage.getName());
    throw new IllegalStateException("Error during file initialization for storage " + this.storage.getName(),e);
  }
}
