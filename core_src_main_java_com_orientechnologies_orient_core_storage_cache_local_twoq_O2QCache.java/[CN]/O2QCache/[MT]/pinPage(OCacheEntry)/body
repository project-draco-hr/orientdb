{
  Lock fileLock;
  Lock pageLock;
  MemoryData memoryData=memoryDataContainer.get();
  if ((100 * (memoryData.pinnedPages + 1)) / memoryData.maxSize > percentOfPinnedPages) {
    if (pinnedPagesWarningsCache < MAX_PERCENT_OF_PINED_PAGES) {
      pinnedPagesWarningCounter.increment();
      final long warnings=pinnedPagesWarningCounter.get();
      if (warnings < MAX_PERCENT_OF_PINED_PAGES) {
        pinnedPagesWarningsCache=(int)warnings;
        OLogManager.instance().warn(this,"Maximum amount of pinned pages is reached , given page " + cacheEntry + " will not be marked as pinned which may lead to performance degradation. You may consider to increase percent of pined pages "+ "by changing of property "+ OGlobalConfiguration.DISK_CACHE_PINNED_PAGES.getKey());
      }
    }
    return;
  }
  cacheLock.acquireReadLock();
  try {
    fileLock=fileLockManager.acquireSharedLock(cacheEntry.getFileId());
    try {
      pageLock=pageLockManager.acquireExclusiveLock(new PageKey(cacheEntry.getFileId(),cacheEntry.getPageIndex()));
      try {
        remove(cacheEntry.getFileId(),cacheEntry.getPageIndex());
        pinnedPages.put(new PinnedPage(cacheEntry.getFileId(),cacheEntry.getPageIndex()),cacheEntry);
      }
  finally {
        pageLockManager.releaseLock(pageLock);
      }
    }
  finally {
      fileLockManager.releaseLock(fileLock);
    }
  }
  finally {
    cacheLock.releaseReadLock();
  }
  MemoryData newMemoryData=new MemoryData(memoryData.maxSize,memoryData.pinnedPages + 1);
  while (!memoryDataContainer.compareAndSet(memoryData,newMemoryData)) {
    memoryData=memoryDataContainer.get();
    newMemoryData=new MemoryData(memoryData.maxSize,memoryData.pinnedPages + 1);
  }
  removeColdestPagesIfNeeded();
}
