{
  startOperation();
  try {
    final OAtomicOperation atomicOperation;
    try {
      atomicOperation=startAtomicOperation(false);
    }
 catch (    IOException e) {
      throw OException.wrapException(new OSBTreeBonsaiLocalException("Error during sbtree deletion",this),e);
    }
    final Lock lock=fileLockManager.acquireExclusiveLock(fileId);
    try {
      final Queue<OBonsaiBucketPointer> subTreesToDelete=new LinkedList<OBonsaiBucketPointer>();
      subTreesToDelete.add(rootBucketPointer);
      recycleSubTrees(subTreesToDelete,atomicOperation);
      endAtomicOperation(false,null);
    }
 catch (    Exception e) {
      rollback(e);
      throw OException.wrapException(new OSBTreeBonsaiLocalException("Error during delete of sbtree with name " + getName(),this),e);
    }
 finally {
      lock.unlock();
    }
  }
  finally {
    completeOperation();
  }
}
