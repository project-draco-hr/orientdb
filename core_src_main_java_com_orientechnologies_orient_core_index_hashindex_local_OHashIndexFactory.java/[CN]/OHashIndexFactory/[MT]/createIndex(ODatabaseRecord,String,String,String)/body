{
  if (valueContainerAlgorithm == null) {
    if (OClass.INDEX_TYPE.NOTUNIQUE.toString().equals(indexType) || OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX.toString().equals(indexType) || OClass.INDEX_TYPE.FULLTEXT_HASH_INDEX.toString().equals(indexType)|| OClass.INDEX_TYPE.FULLTEXT.toString().equals(indexType))     valueContainerAlgorithm=ODefaultIndexFactory.MVRBTREE_VALUE_CONTAINER;
 else     valueContainerAlgorithm=ODefaultIndexFactory.NONE_VALUE_CONTAINER;
  }
  if (valueContainerAlgorithm.equals(ODefaultIndexFactory.MVRBTREE_VALUE_CONTAINER) && OGlobalConfiguration.INDEX_NOTUNIQUE_USE_SBTREE_CONTAINER_BY_DEFAULT.getValueAsBoolean()) {
    OLogManager.instance().warn(this,"Index was created using %s as values container. " + "This container is deprecated and is not supported any more. To avoid this message please drop and recreate indexes or perform DB export/import.",valueContainerAlgorithm);
  }
  OStorage storage=database.getStorage();
  OIndexEngine indexEngine;
  final String storageType=storage.getType();
  if (storageType.equals("memory"))   indexEngine=new OMemoryHashMapIndexEngine();
 else   if (storageType.equals("local") || storageType.equals("plocal"))   indexEngine=new OLocalHashTableIndexEngine();
 else   if (storageType.equals("distributed"))   indexEngine=new OLocalHashTableIndexEngine();
 else   if (storageType.equals("remote"))   indexEngine=new ORemoteIndexEngine();
 else   throw new OIndexException("Unsupported storage type : " + storageType);
  if (OClass.INDEX_TYPE.UNIQUE_HASH_INDEX.toString().equals(indexType))   return new OIndexUnique(indexType,algorithm,indexEngine,valueContainerAlgorithm);
 else   if (OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX.toString().equals(indexType))   return new OIndexNotUnique(indexType,algorithm,indexEngine,valueContainerAlgorithm);
 else   if (OClass.INDEX_TYPE.FULLTEXT_HASH_INDEX.toString().equals(indexType))   return new OIndexFullText(indexType,algorithm,indexEngine,valueContainerAlgorithm);
 else   if (OClass.INDEX_TYPE.DICTIONARY_HASH_INDEX.toString().equals(indexType))   return new OIndexDictionary(indexType,algorithm,indexEngine,valueContainerAlgorithm);
  throw new OConfigurationException("Unsupported type : " + indexType);
}
