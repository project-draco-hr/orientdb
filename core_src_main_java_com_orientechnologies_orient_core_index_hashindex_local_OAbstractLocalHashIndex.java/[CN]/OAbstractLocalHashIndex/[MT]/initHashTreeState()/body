{
  final OHashIndexBucket emptyBucket=new OHashIndexBucket(maxLevelDepth);
  bucketFile.allocateSpace(OHashIndexBucket.MAX_BUCKET_SIZE_BYTES * maxLevelSize);
  for (long filePosition=0; filePosition < OHashIndexBucket.MAX_BUCKET_SIZE_BYTES * maxLevelSize; filePosition+=OHashIndexBucket.MAX_BUCKET_SIZE_BYTES)   saveBucket(filePosition,emptyBucket);
  final long[] rootTree=new long[maxLevelSize];
  bucketsSizes=new int[maxLevelSize];
  bucketsCount=maxLevelSize;
  for (int i=0; i < maxLevelSize; i++) {
    rootTree[i]=createBucketPointer(i * OHashIndexBucket.MAX_BUCKET_SIZE_BYTES);
    bucketsSizes[i]=emptyBucket.getDataBufferLength();
  }
  hashTree=new long[1][];
  hashTree[0]=rootTree;
  nodesMetadata=new OEHNodeMetadata[1];
  nodesMetadata[0]=new OEHNodeMetadata((byte)0,(byte)0,(byte)maxLevelDepth);
  size=0;
  hashTreeSize=1;
}
