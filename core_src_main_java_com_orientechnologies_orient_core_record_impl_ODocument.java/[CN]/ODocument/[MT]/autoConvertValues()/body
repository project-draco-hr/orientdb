{
  OClass clazz=getImmutableSchemaClass();
  if (clazz != null) {
    for (    OProperty prop : clazz.properties()) {
      OType type=prop.getType();
      OType linkedType=prop.getLinkedType();
      if (linkedType == null)       continue;
      Object value=field(prop.getName());
      if (value == null)       continue;
      if (type == OType.EMBEDDEDLIST) {
        List<Object> list=new OTrackedList<Object>(this);
        Collection<Object> values=(Collection<Object>)value;
        for (        Object object : values) {
          list.add(OType.convert(object,linkedType.getDefaultJavaType()));
        }
        field(prop.getName(),list);
      }
 else       if (type == OType.EMBEDDEDMAP) {
        Map<Object,Object> map=new OTrackedMap<Object>(this);
        Map<Object,Object> values=(Map<Object,Object>)value;
        for (        Entry<Object,Object> object : values.entrySet()) {
          map.put(object.getKey(),OType.convert(object.getValue(),linkedType.getDefaultJavaType()));
        }
        field(prop.getName(),map);
      }
 else       if (type == OType.EMBEDDEDSET && linkedType != null) {
        Set<Object> list=new OTrackedSet<Object>(this);
        Collection<Object> values=(Collection<Object>)value;
        for (        Object object : values) {
          list.add(OType.convert(object,linkedType.getDefaultJavaType()));
        }
        field(prop.getName(),list);
      }
    }
  }
}
