{
  acquireSharedLock();
  try {
    OAtomicOperation atomicOperation=storage.getAtomicOperationsManager().getCurrentOperation();
    BucketSearchResult bucketSearchResult=findBucket(key,atomicOperation);
    if (bucketSearchResult.itemIndex < 0)     return null;
    OBonsaiBucketPointer bucketPointer=bucketSearchResult.getLastPathItem();
    OCacheEntry keyBucketCacheEntry=loadPage(atomicOperation,fileId,bucketPointer.getPageIndex(),false,diskCache);
    try {
      OSBTreeBonsaiBucket<K,V> keyBucket=new OSBTreeBonsaiBucket<K,V>(keyBucketCacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChangesTree(atomicOperation,keyBucketCacheEntry));
      return keyBucket.getEntry(bucketSearchResult.itemIndex).value;
    }
  finally {
      releasePage(atomicOperation,keyBucketCacheEntry,diskCache);
    }
  }
 catch (  IOException e) {
    throw new OSBTreeException("Error during retrieving  of sbtree with name " + name,e);
  }
 finally {
    releaseSharedLock();
  }
}
