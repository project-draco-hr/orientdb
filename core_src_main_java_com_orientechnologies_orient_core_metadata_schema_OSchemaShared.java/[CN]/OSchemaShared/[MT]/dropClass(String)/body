{
  acquireSchemaWriteLock();
  try {
    if (getDatabase().getTransaction().isActive())     throw new IllegalStateException("Cannot drop a class inside a transaction");
    if (className == null)     throw new IllegalArgumentException("Class name is null");
    getDatabase().checkSecurity(ODatabaseSecurityResources.SCHEMA,ORole.PERMISSION_DELETE);
    final String key=className.toLowerCase();
    OClass cls=classes.get(key);
    if (cls == null)     throw new OSchemaException("Class " + className + " was not found in current database");
    if (!cls.getBaseClasses().isEmpty())     throw new OSchemaException("Class " + className + " cannot be dropped because it has sub classes. Remove the dependencies before trying to drop it again");
    final ODatabaseRecord db=getDatabase();
    final OStorage storage=db.getStorage();
    final StringBuilder cmd=new StringBuilder("drop class ");
    cmd.append(className);
    if (isDistributedCommand()) {
      final OAutoshardedStorage autoshardedStorage=(OAutoshardedStorage)storage;
      OCommandSQL commandSQL=new OCommandSQL(cmd.toString());
      commandSQL.addExcludedNode(autoshardedStorage.getNodeId());
      db.command(commandSQL).execute();
      dropClassInternal(className);
    }
 else     if (storage instanceof OStorageProxy) {
      final OCommandSQL commandSQL=new OCommandSQL(cmd.toString());
      db.command(commandSQL).execute();
      reload();
    }
 else     dropClassInternal(className);
  }
  finally {
    releaseSchemaWriteLock();
  }
}
