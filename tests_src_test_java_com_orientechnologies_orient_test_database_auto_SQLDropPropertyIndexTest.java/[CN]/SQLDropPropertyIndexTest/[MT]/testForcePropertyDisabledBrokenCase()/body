{
  database.command(new OCommandSQL("CREATE INDEX DropPropertyIndexCompositeIndex ON DropPropertyIndexTestClass (prop1, prop2) UNIQUE")).execute();
  try {
    database.command(new OCommandSQL("DROP PROPERTY DropPropertyIndextestclaSS.proP1")).execute();
    Assert.fail();
  }
 catch (  OResponseProcessingException e) {
    Assert.assertTrue(e.getCause() instanceof OCommandExecutionException);
    OCommandExecutionException exception=(OCommandExecutionException)e.getCause();
    Assert.assertEquals(exception.getMessage(),"Property used in indexes (" + "DropPropertyIndexCompositeIndex" + "). Please drop these indexes before removing property or use FORCE parameter.");
  }
catch (  OCommandExecutionException e) {
    Assert.assertEquals(e.getMessage(),"Property used in indexes (" + "DropPropertyIndexCompositeIndex" + "). Please drop these indexes before removing property or use FORCE parameter.");
  }
  database.getMetadata().getIndexManager().reload();
  final OIndex<?> index=database.getMetadata().getSchema().getClass("DropPropertyIndexTestClass").getClassIndex("DropPropertyIndexCompositeIndex");
  Assert.assertNotNull(index);
  final OIndexDefinition indexDefinition=index.getDefinition();
  Assert.assertTrue(indexDefinition instanceof OCompositeIndexDefinition);
  Assert.assertEquals(indexDefinition.getFields(),Arrays.asList("prop1","prop2"));
  Assert.assertEquals(indexDefinition.getTypes(),new OType[]{EXPECTED_PROP1_TYPE,EXPECTED_PROP2_TYPE});
  Assert.assertEquals(index.getType(),"UNIQUE");
}
