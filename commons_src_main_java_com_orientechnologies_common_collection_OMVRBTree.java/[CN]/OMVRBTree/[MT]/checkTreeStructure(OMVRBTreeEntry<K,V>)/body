{
  if (!runtimeCheckEnabled || iRootNode == null)   return;
  int currPageIndex=pageIndex;
  OMVRBTreeEntry<K,V> prevNode=null;
  int i=0;
  for (OMVRBTreeEntry<K,V> e=iRootNode.getFirstInMemory(); e != null; e=e.getNextInMemory()) {
    if (e.getSize() == 0)     OLogManager.instance().error(this,"[OMVRBTree.checkTreeStructure] Node %s has 0 items\n",e);
    if (prevNode != null) {
      if (prevNode.getTree() == null)       OLogManager.instance().error(this,"[OMVRBTree.checkTreeStructure] Freed record %d found in memory\n",i);
      if (((Comparable<K>)e.getFirstKey()).compareTo((e.getLastKey())) > 0) {
        OLogManager.instance().error(this,"[OMVRBTree.checkTreeStructure] begin key is > than last key\n",e.getFirstKey(),e.getLastKey());
        printInMemoryStructure(iRootNode);
      }
      if (((Comparable<K>)e.getFirstKey()).compareTo((prevNode.getLastKey())) < 0) {
        OLogManager.instance().error(this,"[OMVRBTree.checkTreeStructure] Node %s starts with a key minor than the last key of the previous node %s\n",e,prevNode);
        printInMemoryStructure(e.getParentInMemory() != null ? e.getParentInMemory() : e);
      }
    }
    if (e.getLeftInMemory() != null && e.getLeftInMemory() == e) {
      OLogManager.instance().error(this,"[OMVRBTree.checkTreeStructure] Node %s has left that points to itself!\n",e);
      printInMemoryStructure(iRootNode);
    }
    if (e.getRightInMemory() != null && e.getRightInMemory() == e) {
      OLogManager.instance().error(this,"[OMVRBTree.checkTreeStructure] Node %s has right that points to itself!\n",e);
      printInMemoryStructure(iRootNode);
    }
    if (e.getLeftInMemory() != null && e.getLeftInMemory() == e.getRightInMemory()) {
      OLogManager.instance().error(this,"[OMVRBTree.checkTreeStructure] Node %s has left and right equals!\n",e);
      printInMemoryStructure(iRootNode);
    }
    if (e.getParentInMemory() != null && e.getParentInMemory().getRightInMemory() != e && e.getParentInMemory().getLeftInMemory() != e) {
      OLogManager.instance().error(this,"[OMVRBTree.checkTreeStructure] Node %s is the children of node %s but the cross-reference is missed!\n",e,e.getParentInMemory());
      printInMemoryStructure(iRootNode);
    }
    prevNode=e;
    ++i;
  }
  if (colorOf(root) != BLACK) {
    OLogManager.instance().error(this,"[OMVRBTree.checkTreeStructure] Root node %s color is not BLACK !\n",root);
    printInMemoryStructure(root);
  }
  int blackPathLength=1;
  OMVRBTreeEntry<K,V> node=root;
  while (node != null) {
    node=node.getLeft();
    if (colorOf(node) == BLACK) {
      blackPathLength++;
    }
  }
  checkLeafPath(blackPathLength,root,0);
  checkRedNodesContainOnlyBlackLeaves(root.getLeft(),root);
  checkRedNodesContainOnlyBlackLeaves(root.getRight(),root);
  pageIndex=currPageIndex;
}
