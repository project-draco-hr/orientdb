{
  final Collection<?> keys=new ArrayList<Object>(iKeys);
  final Set<ODocument> result=new ODocumentFieldsHashSet();
  final OTransactionIndexChanges indexChanges=database.getTransaction().getIndexChanges(delegate.getName());
  if (indexChanges == null) {
    result.addAll(super.getEntries(keys));
    return result;
  }
  final Set<Object> keysToRemove=new HashSet<Object>();
  final Map<Object,OIdentifiable> keyValueEntries=new HashMap<Object,OIdentifiable>();
  for (  final Object key : keys) {
    if (indexChanges.cleared)     keysToRemove.add(key);
    keyValueEntries.put(key,null);
  }
  final Map<Object,OIdentifiable> keyResult=filterIndexChanges(indexChanges,keyValueEntries,keysToRemove);
  for (  Map.Entry<Object,OIdentifiable> keyResultEntry : keyResult.entrySet()) {
    final ODocument document=new ODocument();
    document.field("key",keyResultEntry.getKey());
    document.field("rid",keyResultEntry.getValue().getIdentity());
    document.unsetDirty();
    result.add(document);
  }
  keys.removeAll(keysToRemove);
  if (!keys.isEmpty())   result.addAll(super.getEntries(keys));
  return result;
}
