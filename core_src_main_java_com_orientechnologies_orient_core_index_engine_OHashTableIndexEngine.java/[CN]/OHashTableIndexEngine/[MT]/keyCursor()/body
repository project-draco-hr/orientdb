{
  return new OIndexKeyCursor(){
    private int nextEntriesIndex;
    private OHashIndexBucket.Entry<Object,Object>[] entries;
{
      OHashIndexBucket.Entry<Object,Object> firstEntry=hashTable.firstEntry();
      if (firstEntry == null)       entries=OCommonConst.EMPTY_BUCKET_ENTRY_ARRAY;
 else       entries=hashTable.ceilingEntries(firstEntry.key);
    }
    @Override public Object next(    int prefetchSize){
      if (entries.length == 0) {
        return null;
      }
      final OHashIndexBucket.Entry<Object,Object> bucketEntry=entries[nextEntriesIndex];
      nextEntriesIndex++;
      if (nextEntriesIndex >= entries.length) {
        entries=hashTable.higherEntries(entries[entries.length - 1].key);
        nextEntriesIndex=0;
      }
      return bucketEntry.key;
    }
  }
;
}
