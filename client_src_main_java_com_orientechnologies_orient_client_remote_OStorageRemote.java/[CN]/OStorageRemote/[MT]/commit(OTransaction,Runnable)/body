{
  networkOperation(new OStorageRemoteOperation<Void>(){
    @Override public Void execute(    OChannelBinaryAsynchClient network,    OStorageRemoteSession session) throws IOException {
      final List<ORecordOperation> committedEntries=new ArrayList<ORecordOperation>();
      try {
        session.commandExecuting=true;
        try {
          beginRequest(network,OChannelBinaryProtocol.REQUEST_TX_COMMIT,session);
          network.writeInt(iTx.getId());
          network.writeByte((byte)(iTx.isUsingLog() ? 1 : 0));
          for (          ORecordOperation txEntry : iTx.getAllRecordEntries()) {
            commitEntry(network,txEntry);
          }
          network.writeByte((byte)0);
          network.writeBytes(iTx.getIndexChanges().toStream());
        }
  finally {
          endRequest(network);
        }
        try {
          beginResponse(network,session);
          final int createdRecords=network.readInt();
          ORecordId currentRid;
          ORecordId createdRid;
          for (int i=0; i < createdRecords; i++) {
            currentRid=network.readRID();
            createdRid=network.readRID();
            iTx.updateIdentityAfterCommit(currentRid,createdRid);
          }
          final int updatedRecords=network.readInt();
          for (int i=0; i < updatedRecords; ++i) {
            final ORecordId rid=network.readRID();
            final int v=network.readVersion();
            final byte[] updateContent=network.getSrvProtocolVersion() >= 37 ? network.readBytes() : null;
            final ORecordOperation rop=iTx.getRecordEntry(rid);
            if (rop != null) {
              if (updateContent != null && updateContent.length > 0)               ORecordInternal.fill(rop.getRecord(),rop.getRecord().getIdentity(),v,updateContent,false);
 else               ORecordInternal.setVersion(rop.getRecord(),v);
            }
          }
          if (network.getSrvProtocolVersion() >= 20)           readCollectionChanges(network,ODatabaseRecordThreadLocal.INSTANCE.get().getSbTreeCollectionManager());
        }
  finally {
          endResponse(network);
        }
        committedEntries.clear();
        for (        ORecordOperation txEntry : iTx.getAllRecordEntries())         ORecordInternal.unsetDirty(txEntry.getRecord());
        OTransactionAbstract.updateCacheFromEntries(iTx,iTx.getAllRecordEntries(),false);
        return null;
      }
  finally {
        session.commandExecuting=false;
      }
    }
  }
,"Error on commit");
  return null;
}
