{
  super(name,filePath,mode);
  File f=new File(url);
  if (f.exists() || !exists(f.getParent())) {
    storagePath=OSystemVariableResolver.resolveSystemVariables(OFileUtils.getPath(new File(url).getPath()));
  }
 else {
    storagePath=OSystemVariableResolver.resolveSystemVariables(OFileUtils.getPath(new File(url).getParent()));
  }
  storagePath=OIOUtils.getPathFromDatabaseName(storagePath);
  variableParser=new OStorageVariableParser(storagePath);
  configuration=new OStorageConfigurationSegment(this);
  DELETE_MAX_RETRIES=OGlobalConfiguration.FILE_MMAP_FORCE_RETRY.getValueAsInteger();
  DELETE_WAIT_TIME=OGlobalConfiguration.FILE_MMAP_FORCE_DELAY.getValueAsInteger();
  final ODirectMemory directMemory=ODirectMemoryFactory.INSTANCE.directMemory();
  if (OGlobalConfiguration.USE_WAL.getValueAsBoolean()) {
    writeAheadLog=new OWriteAheadLog(this);
    final int fuzzyCheckpointDelay=OGlobalConfiguration.WAL_FUZZY_CHECKPOINT_INTERVAL.getValueAsInteger();
    fuzzyCheckpointExecutor.scheduleWithFixedDelay(new Runnable(){
      @Override public void run(){
        try {
          makeFuzzyCheckpoint();
        }
 catch (        Throwable e) {
          OLogManager.instance().error(this,"Error during background fuzzy checkpoint creation for storage " + name,e);
        }
      }
    }
,fuzzyCheckpointDelay,fuzzyCheckpointDelay,TimeUnit.SECONDS);
  }
 else   writeAheadLog=null;
  diskCache=new O2QCache(OGlobalConfiguration.DISK_CACHE_SIZE.getValueAsLong() * ONE_KB * ONE_KB,OGlobalConfiguration.DISK_CACHE_WRITE_QUEUE_LENGTH.getValueAsInteger(),directMemory,writeAheadLog,OGlobalConfiguration.DISK_CACHE_PAGE_SIZE.getValueAsInteger() * ONE_KB,this,false);
}
