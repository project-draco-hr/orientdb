{
  if (userName == null)   userName=OUser.ADMIN;
  if (userPassword == null)   userPassword=OUser.ADMIN;
  if (storageType == null) {
    if (databaseURL.startsWith(OEngineRemote.NAME + ":"))     throw new IllegalArgumentException("Missing storage type for remote database");
    int pos=databaseURL.indexOf(":");
    if (pos == -1)     throw new IllegalArgumentException("Invalid URL");
    storageType=databaseURL.substring(0,pos);
  }
  if (databaseType == null)   databaseType="graph";
  message("\nCreating database [" + databaseURL + "] using the storage type ["+ storageType+ "]...");
  currentDatabaseUserName=userName;
  currentDatabaseUserPassword=userPassword;
  if (databaseURL.startsWith(OEngineRemote.NAME)) {
    final String dbURL=databaseURL.substring(OEngineRemote.NAME.length() + 1);
    OServerAdmin serverAdmin=new OServerAdmin(dbURL).connect(userName,userPassword);
    serverAdmin.createDatabase(serverAdmin.getStorageName(),databaseType,storageType,backupPath).close();
    connect(databaseURL,OUser.ADMIN,OUser.ADMIN);
  }
 else {
    if (storageType != null) {
      if (!databaseURL.toLowerCase().startsWith(storageType.toLowerCase()))       throw new IllegalArgumentException("Storage type '" + storageType + "' is different by storage type in URL");
    }
    currentDatabase=new ODatabaseDocumentTx(databaseURL);
    if (options != null) {
      final List<String> kvOptions=OStringSerializerHelper.smartSplit(options,',',false);
      for (      String option : kvOptions) {
        final String[] values=option.split("=");
        if (values.length != 2)         throw new IllegalArgumentException("Options must have in th format -<option>=<value>[,-<option>=<value>]*");
        if ("-encryption".equalsIgnoreCase(values[0]))         currentDatabase.setProperty(OGlobalConfiguration.STORAGE_ENCRYPTION_METHOD.getKey(),values[1]);
 else         if ("-compression".equalsIgnoreCase(values[0]))         currentDatabase.setProperty(OGlobalConfiguration.STORAGE_COMPRESSION_METHOD.getKey(),values[1]);
 else         currentDatabase.setProperty(values[0],values[1]);
      }
    }
    if (backupPath == null)     currentDatabase.create();
 else     currentDatabase.create(backupPath);
    currentDatabaseName=currentDatabase.getName();
  }
  message("\nDatabase created successfully.");
  message("\n\nCurrent database is: " + databaseURL);
}
