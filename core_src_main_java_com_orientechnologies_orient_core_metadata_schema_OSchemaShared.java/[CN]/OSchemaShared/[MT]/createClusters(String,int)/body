{
  className=className.toLowerCase();
  final ODatabaseDocumentInternal database=getDatabase();
  int[] clusterIds;
  if (minimumClusters == 0) {
    if (internalClasses.contains(className.toLowerCase())) {
      minimumClusters=1;
    }
 else {
      final int cpus=Runtime.getRuntime().availableProcessors();
      minimumClusters=cpus > 64 ? 64 : cpus;
    }
  }
  clusterIds=new int[minimumClusters];
  int firstDynamicCluster=0;
  clusterIds[0]=database.getClusterIdByName(className);
  if (clusterIds[0] == -1) {
    clusterIds[0]=database.addCluster(className);
    firstDynamicCluster=1;
  }
  for (int i=1; i < minimumClusters; ++i) {
    final int suffix=i + firstDynamicCluster;
    clusterIds[i]=database.getClusterIdByName(className + "_" + suffix);
    if (clusterIds[i] == -1)     clusterIds[i]=database.addCluster(className + "_" + suffix);
  }
  return clusterIds;
}
