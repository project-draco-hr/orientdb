{
  if (result.isEmpty())   return;
  final Queue<Node> processedNodes=new ArrayDeque<Node>();
  for (  Node activeNode : result) {
    int activeStart=activeNode.start;
    final Iterator<Node> pNodesIterator=processedNodes.iterator();
    while (pNodesIterator.hasNext()) {
      final Node pNode=pNodesIterator.next();
      if (pNode.end > activeStart && pNode.version > activeNode.version)       activeStart=pNode.end;
      if (pNode.end <= activeNode.start)       pNodesIterator.remove();
    }
    processedNodes.add(activeNode);
    if (activeStart >= activeNode.end)     continue;
    final int deltaStart=activeStart - start;
    final int vStart;
    if (deltaStart > 0)     vStart=start + deltaStart;
 else     vStart=start;
    int vLength;
    if (deltaStart > 0)     vLength=(activeNode.end - activeStart);
 else     vLength=(activeNode.end - activeStart) + deltaStart;
    final int vEnd=vLength + vStart;
    if (vEnd > end)     vLength=vLength - (vEnd - end);
    if (vLength <= 0)     continue;
    System.arraycopy(activeNode.value,deltaStart >= 0 ? activeStart - activeNode.start : activeStart - activeNode.start - deltaStart,values,deltaStart >= 0 ? deltaStart : 0,vLength);
  }
}
