{
  final OLinearHashingBucket bucket=file.get(bucketNumber);
  for (int i=0; i < bucket.size; i++) {
    if (value.clusterPosition.equals(bucket.keys[i])) {
      return false;
    }
  }
  bucket.keys[bucket.size]=value.clusterPosition;
  bucket.values[bucket.size]=value;
  bucket.size++;
  final int positionInIndex;
  final OLinearHashingIndex indexToUse;
  if (mainBucket) {
    positionInIndex=bucketNumber;
    indexToUse=primaryIndex;
  }
 else {
    positionInIndex=pageIndicator.getRealPosInSecondaryIndex(bucketNumber);
    indexToUse=secondaryIndex;
  }
  int displacement=indexToUse.changeDisplacementAfterInsertion(positionInIndex,bucket.size);
  if (bucket.size == OLinearHashingBucket.BUCKET_MAX_SIZE && displacement > 253) {
    throw new IllegalStateException("if bucket size is max displacement can't be greater than 253");
  }
  if (displacement <= 253) {
    indexToUse.updateSignature(positionInIndex,bucket.keys,bucket.size);
  }
  return true;
}
