{
  try {
    stm=conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
    stm.setFetchSize(fetchSize);
    if (queryCount != null) {
      final ResultSet countRs=stm.executeQuery(query);
      try {
        if (countRs != null && countRs.next())         total=countRs.getInt(1);
      }
  finally {
        if (countRs != null)         try {
          countRs.close();
        }
 catch (        SQLException e) {
        }
      }
    }
    rs=stm.executeQuery(query);
    rsColumns=rs.getMetaData().getColumnCount();
    columnNames=new ArrayList<String>(rsColumns);
    columnTypes=new ArrayList<OType>(rsColumns);
    for (int i=1; i <= rsColumns; ++i) {
      final String colName=rs.getMetaData().getColumnName(i);
      columnNames.add(colName);
      OType type=OType.ANY;
      final int sqlType=rs.getMetaData().getColumnType(i);
switch (sqlType) {
case Types.BIT:
case Types.BOOLEAN:
        type=OType.BOOLEAN;
      break;
case Types.SMALLINT:
    type=OType.SHORT;
  break;
case Types.INTEGER:
type=OType.INTEGER;
break;
case Types.FLOAT:
type=OType.FLOAT;
break;
case Types.DOUBLE:
type=OType.DOUBLE;
break;
case Types.BIGINT:
type=OType.LONG;
break;
case Types.DECIMAL:
type=OType.DECIMAL;
break;
case Types.DATE:
type=OType.DATE;
break;
case Types.TIMESTAMP:
type=OType.DATETIME;
break;
case Types.VARCHAR:
case Types.LONGNVARCHAR:
case Types.LONGVARCHAR:
type=OType.STRING;
break;
case Types.BINARY:
case Types.BLOB:
type=OType.BINARY;
break;
case Types.CHAR:
case Types.TINYINT:
type=OType.BYTE;
break;
}
columnTypes.add(type);
}
}
 catch (SQLException e) {
throw new OExtractorException("[JDBC extractor] error on executing query '" + query + "'",e);
}
}
