{
  rwSpinLock.acquireWriteLock();
  modificationCounter.get().increment();
  try {
    final Integer schemaVersion=(Integer)document.field("schemaVersion");
    if (schemaVersion == null) {
      OLogManager.instance().error(this,"Database's schema is empty! Recreating the system classes and allow the opening of the database but double check the integrity of the database");
      return;
    }
 else     if (schemaVersion != CURRENT_VERSION_NUMBER && VERSION_NUMBER_V4 != schemaVersion) {
      throw new OConfigurationException("Database schema is different. Please export your old database with the previous version of OrientDB and reimport it using the current one.");
    }
    properties.clear();
    propertiesByNameType.clear();
    List<ODocument> globalProperties=document.field("globalProperties");
    if (globalProperties != null) {
      for (      ODocument oDocument : globalProperties) {
        OGlobalPropertyImpl prop=new OGlobalPropertyImpl();
        prop.fromDocument(oDocument);
        ensurePropertiesSize(prop.getId());
        properties.set(prop.getId(),prop);
        propertiesByNameType.put(prop.getName() + "|" + prop.getType().name(),prop);
      }
    }
    clustersToClasses.clear();
    final Map<String,OClass> newClasses=new HashMap<String,OClass>();
    OClassImpl cls;
    Collection<ODocument> storedClasses=document.field("classes");
    for (    ODocument c : storedClasses) {
      cls=new OClassImpl(this,c);
      cls.fromStream();
      if (classes.containsKey(cls.getName().toLowerCase())) {
        cls=(OClassImpl)classes.get(cls.getName().toLowerCase());
        cls.fromStream(c);
      }
      newClasses.put(cls.getName().toLowerCase(),cls);
      if (cls.getShortName() != null)       newClasses.put(cls.getShortName().toLowerCase(),cls);
      addClusterClassMap(cls);
    }
    classes.clear();
    classes.putAll(newClasses);
    String superClassName;
    OClass superClass;
    for (    ODocument c : storedClasses) {
      superClassName=c.field("superClass");
      if (superClassName != null) {
        cls=(OClassImpl)classes.get(((String)c.field("name")).toLowerCase());
        superClass=classes.get(superClassName.toLowerCase());
        if (superClass == null)         throw new OConfigurationException("Super class '" + superClassName + "' was declared in class '"+ cls.getName()+ "' but was not found in schema. Remove the dependency or create the class to continue.");
        cls.setSuperClassInternal(superClass);
      }
    }
    if (schemaVersion == VERSION_NUMBER_V4) {
      if (getDatabase().getStorage().getUnderlying() instanceof OStorageEmbedded)       saveInternal();
    }
  }
  finally {
    version++;
    modificationCounter.get().decrement();
    rwSpinLock.releaseWriteLock();
  }
}
