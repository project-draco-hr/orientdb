{
  getDatabase().checkSecurity(ODatabaseSecurityResources.COMMAND,ORole.PERMISSION_CREATE);
  init(iRequest.getText());
  final StringBuilder word=new StringBuilder();
  int oldPos=0;
  int pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
  if (pos == -1 || !word.toString().equals(KEYWORD_CREATE))   throw new OCommandSQLParsingException("Keyword " + KEYWORD_CREATE + " not found",text,oldPos);
  oldPos=pos;
  pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
  if (pos == -1 || !word.toString().equals(KEYWORD_INDEX))   throw new OCommandSQLParsingException("Keyword " + KEYWORD_INDEX + " not found",text,oldPos);
  oldPos=pos;
  pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,false);
  if (pos == -1)   throw new OCommandSQLParsingException("Expected index name",text,oldPos);
  indexName=word.toString();
  final int namePos=oldPos;
  oldPos=pos;
  pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
  if (pos == -1)   throw new OCommandSQLParsingException("Index type requested",text,oldPos + 1);
  if (word.toString().equals(KEYWORD_ON)) {
    if (indexName.contains(".")) {
      throw new OCommandSQLParsingException("Index name cannot contain '.' character",text,namePos);
    }
    oldPos=pos;
    pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
    if (pos == -1)     throw new OCommandSQLParsingException("Expected class name",text,oldPos);
    oldPos=pos;
    oClass=findClass(word.toString());
    if (oClass == null)     throw new OCommandExecutionException("Class " + word + " not found");
    pos=textUpperCase.indexOf(")");
    if (pos == -1) {
      throw new OCommandSQLParsingException("No right bracket found",text,oldPos);
    }
    final String props=textUpperCase.substring(oldPos,pos).trim().substring(1);
    List<String> propList=new ArrayList<String>();
    final List<OType> typeList=new ArrayList<OType>();
    for (    String propToIndex : props.trim().split("\\s*,\\s*")) {
      checkMapIndexSpecifier(propToIndex,text,oldPos);
      final String propName=propToIndex.split("\\s+")[0];
      final OProperty property=oClass.getProperty(propName);
      if (property == null)       throw new IllegalArgumentException("Property '" + propToIndex + "' was not found in class '"+ oClass.getName()+ "'");
      propList.add(propToIndex);
      typeList.add(property.getType());
    }
    fields=new String[propList.size()];
    propList.toArray(fields);
    oldPos=pos + 1;
    pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
    if (pos == -1)     throw new OCommandSQLParsingException("Index type requested",text,oldPos + 1);
    keyTypes=new OType[propList.size()];
    typeList.toArray(keyTypes);
  }
 else {
    if (indexName.indexOf('.') > 0) {
      final String[] parts=indexName.split("\\.");
      oClass=findClass(parts[0]);
      if (oClass == null)       throw new OCommandExecutionException("Class " + parts[0] + " not found");
      final OProperty prop=oClass.getProperty(parts[1]);
      if (prop == null)       throw new IllegalArgumentException("Property '" + parts[1] + "' was not found in class '"+ oClass.getName()+ "'");
      fields=new String[]{prop.getName()};
      keyTypes=new OType[]{prop.getType()};
    }
  }
  indexType=OClass.INDEX_TYPE.valueOf(word.toString());
  if (indexType == null)   throw new OCommandSQLParsingException("Index type is null",text,oldPos);
  oldPos=pos;
  pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
  if (pos != -1 && !word.toString().equalsIgnoreCase("NULL")) {
    final String typesString=textUpperCase.substring(oldPos).trim();
    ArrayList<OType> keyTypeList=new ArrayList<OType>();
    for (    String typeName : typesString.split("\\s*,\\s*")) {
      keyTypeList.add(OType.valueOf(typeName));
    }
    OType[] parsedKeyTypes=new OType[keyTypeList.size()];
    keyTypeList.toArray(parsedKeyTypes);
    if (keyTypes == null) {
      keyTypes=parsedKeyTypes;
    }
 else {
      if (!Arrays.deepEquals(keyTypes,parsedKeyTypes)) {
        throw new OCommandSQLParsingException("Property type list not match with real property types",text,oldPos);
      }
    }
  }
  return this;
}
