{
  name=iSource.field("name");
  if (iSource.field("type") != null)   type=OType.getById(((Long)iSource.field("type")).byteValue());
  offset=((Long)iSource.field("offset")).intValue();
  mandatory=(Boolean)iSource.field("mandatory");
  notNull=(Boolean)iSource.field("notNull");
  min=iSource.field("min");
  max=iSource.field("max");
  linkedClass=owner.owner.getClass((String)iSource.field("linkedClass"));
  if (iSource.field("linkedType") != null)   linkedType=OType.getById(((Long)iSource.field("linkedType")).byteValue());
  final ODocument indexRecord=iSource.field("index");
  if (indexRecord != null && indexRecord.getIdentity().isValid())   try {
    index=new OTreeMapDatabaseLazySave<String,ORecordId>((ODatabaseRecord<?>)database,OStorage.CLUSTER_INDEX_NAME,new ORecordId(indexRecord.getIdentity().toString()));
    index.load();
  }
 catch (  IOException e) {
    OLogManager.instance().error(this,"Can't load index for property %s",e,ODatabaseException.class,toString());
  }
  return this;
}
