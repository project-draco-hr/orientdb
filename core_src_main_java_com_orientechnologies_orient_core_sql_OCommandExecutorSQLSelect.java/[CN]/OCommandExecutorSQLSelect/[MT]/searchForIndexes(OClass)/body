{
  final ODatabaseRecord database=getDatabase();
  database.checkSecurity(ODatabaseSecurityResources.CLASS,ORole.PERMISSION_READ,iSchemaClass.getName().toLowerCase());
  final List<OIndexSearchResult> indexSearchResults=new ArrayList<OIndexSearchResult>();
  if (compiledFilter == null) {
    if (orderedFields.size() == 0)     return false;
 else     return optimizeSort(iSchemaClass);
  }
  analyzeQueryBranch(iSchemaClass,compiledFilter.getRootCondition(),indexSearchResults,context);
  Collections.sort(indexSearchResults,new Comparator<OIndexSearchResult>(){
    public int compare(    final OIndexSearchResult searchResultOne,    final OIndexSearchResult searchResultTwo){
      return searchResultTwo.getFieldCount() - searchResultOne.getFieldCount();
    }
  }
);
  for (  final OIndexSearchResult searchResult : indexSearchResults) {
    final List<OIndex<?>> involvedIndexes=getInvolvedIndexes(iSchemaClass,searchResult);
    Collections.sort(involvedIndexes,new IndexComparator());
    for (    final OIndex index : involvedIndexes) {
      if (index.isRebuiding())       continue;
      final OIndexDefinition indexDefinition=index.getDefinition();
      if (searchResult.containsNullValues && indexDefinition.isNullValuesIgnored())       continue;
      final OQueryOperator operator=searchResult.lastOperator;
      if (!OIndexSearchResult.isIndexEqualityOperator(operator)) {
        final String lastFiled=searchResult.lastField.getItemName(searchResult.lastField.getItemCount() - 1);
        final String relatedIndexField=indexDefinition.getFields().get(searchResult.fieldValuePairs.size());
        if (!lastFiled.equals(relatedIndexField))         continue;
      }
      final int searchResultFieldsCount=searchResult.fields().size();
      final List<Object> keyParams=new ArrayList<Object>(searchResultFieldsCount);
      for (      final String fieldName : indexDefinition.getFields().subList(0,searchResultFieldsCount)) {
        final Object fieldValue=searchResult.fieldValuePairs.get(fieldName);
        if (fieldValue instanceof OSQLQuery<?>)         return false;
        if (fieldValue != null)         keyParams.add(fieldValue);
 else {
          if (searchResult.lastValue instanceof OSQLQuery<?>)           return false;
          keyParams.add(searchResult.lastValue);
        }
      }
      if (context.isRecordingMetrics()) {
        Set<String> idxNames=(Set<String>)context.getVariable("involvedIndexes");
        if (idxNames == null) {
          idxNames=new HashSet<String>();
          context.setVariable("involvedIndexes",idxNames);
        }
        if (index instanceof OChainedIndexProxy) {
          idxNames.addAll(((OChainedIndexProxy)index).getIndexNames());
        }
 else         idxNames.add(index.getName());
      }
      OIndexCursor cursor;
      final boolean indexIsUsedInOrderBy=canBeUsedByOrderBy(index) && !(index.getInternal() instanceof OChainedIndexProxy);
      try {
        boolean ascSortOrder=!indexIsUsedInOrderBy || orderedFields.get(0).getValue().equals(KEYWORD_ASC);
        if (indexIsUsedInOrderBy)         fullySortedByIndex=indexDefinition.getFields().size() >= orderedFields.size();
        cursor=operator.executeIndexQuery(context,index,keyParams,ascSortOrder);
      }
 catch (      Exception e) {
        OLogManager.instance().error(this,"Error on using index %s in query '%s'. Probably you need to rebuild indexes. Now executing query using cluster scan",e,index.getName(),request != null && request.getText() != null ? request.getText() : "");
        fullySortedByIndex=false;
        return false;
      }
      if (cursor == null)       continue;
      boolean evaluateRecords=analyzeForFilterOptimization(searchResult);
      fetchValuesFromIndexCursor(cursor,evaluateRecords);
      if (context.isRecordingMetrics()) {
        context.setVariable("indexIsUsedInOrderBy",indexIsUsedInOrderBy);
        context.setVariable("fullySortedByIndex",fullySortedByIndex);
      }
      return true;
    }
  }
  return false;
}
