{
  OHazelcastPlugin manager1=(OHazelcastPlugin)serverInstance.get(0).getServerInstance().getDistributedManager();
  ODistributedConfiguration databaseConfiguration=manager1.getDatabaseConfiguration(this.getDatabaseName());
  ODocument cfg=databaseConfiguration.getDocument();
  cfg.field("autoDeploy",false);
  cfg.field("version",(Integer)cfg.field("version") + 1);
  manager1.updateCachedDatabaseConfiguration(this.getDatabaseName(),cfg,true,true);
  OrientGraphFactory localFactory=new OrientGraphFactory("plocal:target/server0/databases/" + getDatabaseName());
  OrientGraphNoTx graphNoTx=null;
  try {
    graphNoTx=localFactory.getNoTx();
    final OrientVertexType clientType=graphNoTx.createVertexType("Client",1);
    ODistributedConfiguration dCfg=new ODistributedConfiguration(cfg);
    for (int i=0; i < serverInstance.size(); ++i) {
      final String serverName=serverInstance.get(i).getServerInstance().getDistributedManager().getLocalNodeName();
      clientType.addCluster("client_" + serverName);
      dCfg.setServerOwner("client_" + serverName,serverName);
    }
    manager1.updateCachedDatabaseConfiguration(this.getDatabaseName(),dCfg.getDocument(),true,true);
    final OrientVertexType.OrientVertexProperty prop=clientType.createProperty("name",OType.STRING);
    prop.createIndex(OClass.INDEX_TYPE.NOTUNIQUE);
    assertTrue(graphNoTx.getRawGraph().getMetadata().getIndexManager().existsIndex("Client.name"));
    Thread.sleep(500);
    graphNoTx.getRawGraph().close();
    executeMultipleWritesOnShards(executeWritesOnServers,"plocal");
    checkWritesWithShardinNoReplica(serverInstance,executeWritesOnServers);
    System.out.println("Shutdown on server3.\n");
    simulateServerFault(serverInstance.get(2),"shutdown");
    assertFalse(serverInstance.get(2).isActive());
    waitForDatabaseIsOffline(executeWritesOnServers.get(2).getServerInstance().getDistributedManager().getLocalNodeName(),getDatabaseName(),10000);
    executeWritesOnServers.remove(2);
    checkWritesWithShardinNoReplica(executeWritesOnServers,executeWritesOnServers);
    try {
      System.out.print("Checking that records on server3 are not available in the cluster...");
      graphNoTx=localFactory.getNoTx();
      ODatabaseRecordThreadLocal.INSTANCE.set(graphNoTx.getRawGraph());
      final String uniqueId="client_asia-s2-t10-v0";
      Iterable<Vertex> it=graphNoTx.command(new OCommandSQL("select from Client where name = '" + uniqueId + "'")).execute();
      List<OrientVertex> result=new LinkedList<OrientVertex>();
      assertEquals(0,result.size());
      System.out.println("Done");
      graphNoTx.getRawGraph().close();
      ODatabaseRecordThreadLocal.INSTANCE.set(null);
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail();
    }
    serverInstance.get(2).startServer(getDistributedServerConfiguration(serverInstance.get(SERVERS - 1)));
    System.out.println("Server 3 restarted.");
    assertTrue(serverInstance.get(2).isActive());
    Thread.sleep(500);
    try {
      System.out.print("Checking server3 status by querying a record inserted on it...");
      localFactory=new OrientGraphFactory("plocal:target/server2/databases/" + getDatabaseName());
      graphNoTx=localFactory.getNoTx();
      ODatabaseRecordThreadLocal.INSTANCE.set(graphNoTx.getRawGraph());
      final String uniqueId="client_asia-s2-t10-v0";
      Iterable<Vertex> it=graphNoTx.command(new OCommandSQL("select from Client where name = '" + uniqueId + "'")).execute();
      List<OrientVertex> result=new LinkedList<OrientVertex>();
      for (      Vertex v : it) {
        result.add((OrientVertex)v);
      }
      assertEquals(1,result.size());
      graphNoTx.getRawGraph().close();
      ODatabaseRecordThreadLocal.INSTANCE.set(null);
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail(e.toString());
    }
    executeWritesOnServers.add(serverInstance.get(2));
    checkWritesWithShardinNoReplica(serverInstance,executeWritesOnServers);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.toString());
  }
 finally {
    if (!graphNoTx.getRawGraph().isClosed()) {
      ODatabaseRecordThreadLocal.INSTANCE.set(graphNoTx.getRawGraph());
      graphNoTx.getRawGraph().close();
      ODatabaseRecordThreadLocal.INSTANCE.set(null);
    }
  }
}
