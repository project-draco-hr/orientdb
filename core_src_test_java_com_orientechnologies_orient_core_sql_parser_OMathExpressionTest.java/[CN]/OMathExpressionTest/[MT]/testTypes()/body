{
  OMathExpression expr=new OMathExpression(-1);
  for (  OMathExpression.Operator op : OMathExpression.Operator.values()) {
    Assert.assertEquals(expr.apply(1,op,1).getClass(),Integer.class);
    Assert.assertEquals(expr.apply((short)1,op,(short)1).getClass(),Integer.class);
    Assert.assertEquals(expr.apply(1l,op,1l).getClass(),Long.class);
    Assert.assertEquals(expr.apply(1f,op,1f).getClass(),Float.class);
    Assert.assertEquals(expr.apply(1d,op,1d).getClass(),Double.class);
    Assert.assertEquals(expr.apply(BigDecimal.ONE,op,BigDecimal.ONE).getClass(),BigDecimal.class);
    Assert.assertEquals(expr.apply(1l,op,1).getClass(),Long.class);
    Assert.assertEquals(expr.apply(1f,op,1).getClass(),Float.class);
    Assert.assertEquals(expr.apply(1d,op,1).getClass(),Double.class);
    Assert.assertEquals(expr.apply(BigDecimal.ONE,op,1).getClass(),BigDecimal.class);
    Assert.assertEquals(expr.apply(1,op,1l).getClass(),Long.class);
    Assert.assertEquals(expr.apply(1,op,1f).getClass(),Float.class);
    Assert.assertEquals(expr.apply(1,op,1d).getClass(),Double.class);
    Assert.assertEquals(expr.apply(1,op,BigDecimal.ONE).getClass(),BigDecimal.class);
  }
  Assert.assertEquals(expr.apply(Integer.MAX_VALUE,OMathExpression.Operator.PLUS,1).getClass(),Long.class);
  Assert.assertEquals(expr.apply(Integer.MIN_VALUE,OMathExpression.Operator.MINUS,1).getClass(),Long.class);
}
