{
  line++;
  if (skipFrom > -1) {
    if (skipTo > -1) {
      if (line >= skipFrom && line <= skipTo)       return null;
    }
 else     if (line >= skipFrom)     return null;
  }
  log(OETLProcessor.LOG_LEVELS.DEBUG,"parsing=%s",input);
  final List<String> fields=OStringSerializerHelper.smartSplit(input.toString(),new char[]{separator},0,-1,false,false,false,false);
  if (columnNames == null) {
    if (!columnsOnFirstLine)     throw new OTransformException(getName() + ": columnsOnFirstLine=false and no columns declared");
    columnNames=fields;
    for (int i=0; i < columnNames.size(); ++i)     columnNames.set(i,getCellContent(columnNames.get(i)));
    return null;
  }
  final ODocument doc=new ODocument();
  for (int i=0; i < columnNames.size() && i < fields.size(); ++i) {
    final String fieldName=columnNames.get(i);
    Object fieldValue=null;
    try {
      final String fieldStringValue=getCellContent(fields.get(i));
      final OType fieldType=columnTypes != null ? columnTypes.get(i) : null;
      if (fieldType != null && fieldType != OType.ANY) {
        fieldValue=getCellContent(fieldStringValue);
        try {
          fieldValue=OType.convert(fieldValue,fieldType.getDefaultJavaType());
          doc.field(fieldName,fieldValue);
        }
 catch (        Exception e) {
          processor.getStats().incrementErrors();
          log(OETLProcessor.LOG_LEVELS.ERROR,"Error on converting row %d field '%s' (%d), value '%s' (class:%s) to type: %s",processor.getExtractor().getProgress(),fieldName,i,fieldValue,fieldValue.getClass().getName(),fieldType);
        }
      }
 else       if (fieldStringValue != null && !fieldStringValue.isEmpty()) {
        final char firstChar=fieldStringValue.charAt(0);
        if (Character.isDigit(firstChar)) {
          DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
          df.setLenient(true);
          try {
            fieldValue=df.parse(fieldStringValue);
          }
 catch (          ParseException pe) {
            if (fieldStringValue.contains(".") || fieldStringValue.contains(",")) {
              String numberAsString=fieldStringValue.replaceAll(",",".");
              fieldValue=new Float(numberAsString);
              if (!Float.isFinite((Float)fieldValue)) {
                fieldValue=new Double(numberAsString);
              }
            }
 else             try {
              fieldValue=new Integer(fieldStringValue);
            }
 catch (            Exception e) {
              fieldValue=new Long(fieldStringValue);
            }
          }
        }
 else         fieldValue=fieldStringValue;
        if (nullValue != null && nullValue.equals(fieldValue))         continue;
        doc.field(fieldName,fieldValue);
      }
    }
 catch (    Exception e) {
      processor.getStats().incrementErrors();
      log(OETLProcessor.LOG_LEVELS.ERROR,"Error on setting document field %s=%s (cause=%s)",fieldName,fieldValue,e.toString());
    }
  }
  log(OETLProcessor.LOG_LEVELS.DEBUG,"document=%s",doc);
  return doc;
}
