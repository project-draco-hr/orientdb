{
  if (result.total == 0)   return null;
  final int totalPerThread=result.total / concurrencyLevel;
  final int totalPerLastThread=totalPerThread + result.total % concurrencyLevel;
  final Long[] operationTiming=new Long[result.total];
  final List<OBaseWorkLoadContext> contexts=new ArrayList<OBaseWorkLoadContext>(concurrencyLevel);
  final Thread[] thread=new Thread[concurrencyLevel];
  for (int t=0; t < concurrencyLevel; ++t) {
    final int currentThread=t;
    final OBaseWorkLoadContext context=getContext();
    contexts.add(context);
    thread[t]=new Thread(new Runnable(){
      @Override public void run(){
        context.threadId=currentThread;
        context.totalPerThread=context.threadId < concurrencyLevel - 1 ? totalPerThread : totalPerLastThread;
        context.init(dbIdentifier,operationsPerTransaction,connectionStrategy);
        try {
          final int startIdx=totalPerThread * context.threadId;
          final AtomicInteger operationsExecutedInTx=new AtomicInteger();
          for (final AtomicInteger i=new AtomicInteger(); i.get() < context.totalPerThread; i.incrementAndGet()) {
            ODatabaseDocumentTx.executeWithRetries(new OCallable<Object,Integer>(){
              @Override public Object call(              final Integer retry){
                if (retry > 0) {
                  i.addAndGet(operationsExecutedInTx.get() * -1);
                  operationsExecutedInTx.set(0);
                }
                context.currentIdx=startIdx + i.get();
                if (operationsPerTransaction > 0 && (i.get() + 1) % operationsPerTransaction == 0) {
                  commitTransaction(context);
                  operationsExecutedInTx.set(0);
                  beginTransaction(context);
                }
                final long startOp=System.nanoTime();
                try {
                  return callback.call(context);
                }
 catch (                ONeedRetryException e) {
                  result.conflicts.incrementAndGet();
                  if (operationsPerTransaction > 0)                   beginTransaction(context);
                  throw e;
                }
catch (                Exception e) {
                  errors.add(e.toString());
                  if (errors.size() > MAX_ERRORS) {
                    e.printStackTrace();
                    return null;
                  }
                }
 finally {
                  operationTiming[context.currentIdx]=System.nanoTime() - startOp;
                  operationsExecutedInTx.incrementAndGet();
                }
                return null;
              }
            }
,10);
          }
          if (operationsPerTransaction > 0)           commitTransaction(context);
        }
  finally {
          context.close();
        }
      }
    }
);
  }
  final long startTime=System.currentTimeMillis();
  for (int t=0; t < concurrencyLevel; ++t) {
    thread[t].start();
  }
  for (int t=0; t < concurrencyLevel; ++t) {
    try {
      thread[t].join();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  result.totalTime=System.currentTimeMillis() - startTime;
  Arrays.sort(operationTiming);
  result.throughputAvgNs=(int)(result.totalTime * 1000000 / operationTiming.length);
  result.totalTimeOperationsNs=0;
  for (  long l : operationTiming)   result.totalTimeOperationsNs+=l;
  result.latencyMinNs=operationTiming[0];
  result.latencyMaxNs=operationTiming[operationTiming.length - 1];
  result.latencyAvgNs=(int)(result.totalTimeOperationsNs / operationTiming.length);
  result.latencyPercentileAvg=getPercentile(operationTiming,result.latencyAvgNs);
  result.latencyPercentile99Ns=operationTiming[(int)(operationTiming.length * 99f / 100f)];
  result.latencyPercentile99_9Ns=operationTiming[(int)(operationTiming.length * 99.9f / 100f)];
  return contexts;
}
