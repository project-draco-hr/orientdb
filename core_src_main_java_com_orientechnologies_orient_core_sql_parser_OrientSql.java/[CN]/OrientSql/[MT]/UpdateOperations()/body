{
  OUpdateOperations jjtn000=new OUpdateOperations(JJTUPDATEOPERATIONS);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  OUpdateItem lastItem;
  OUpdatePutItem lastPutItem;
  OUpdateIncrementItem lastIncrementItem;
  OUpdateRemoveItem lastRemoveItem;
  try {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SET:
      jj_consume_token(SET);
    jjtn000.type=OUpdateOperations.TYPE_SET;
  lastItem=UpdateItem();
jjtn000.updateItems.add(lastItem);
label_8: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
  ;
break;
default :
jj_la1[87]=jj_gen;
break label_8;
}
jj_consume_token(COMMA);
lastItem=UpdateItem();
jjtn000.updateItems.add(lastItem);
}
break;
case PUT:
jj_consume_token(PUT);
jjtn000.type=OUpdateOperations.TYPE_PUT;
lastPutItem=UpdatePutItem();
jjtn000.updatePutItems.add(lastPutItem);
label_9: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[88]=jj_gen;
break label_9;
}
jj_consume_token(COMMA);
lastPutItem=UpdatePutItem();
jjtn000.updatePutItems.add(lastPutItem);
}
break;
case MERGE:
case CONTENT:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case MERGE:
jj_consume_token(MERGE);
jjtn000.type=OUpdateOperations.TYPE_MERGE;
break;
case CONTENT:
jj_consume_token(CONTENT);
jjtn000.type=OUpdateOperations.TYPE_CONTENT;
break;
default :
jj_la1[89]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jjtn000.json=Json();
break;
case ADD:
case INCREMENT:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INCREMENT:
jj_consume_token(INCREMENT);
jjtn000.type=OUpdateOperations.TYPE_INCREMENT;
break;
case ADD:
jj_consume_token(ADD);
jjtn000.type=OUpdateOperations.TYPE_ADD;
break;
default :
jj_la1[90]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
lastIncrementItem=UpdateIncrementItem();
jjtn000.updateIncrementItems.add(lastIncrementItem);
label_10: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[91]=jj_gen;
break label_10;
}
jj_consume_token(COMMA);
lastIncrementItem=UpdateIncrementItem();
jjtn000.updateIncrementItems.add(lastIncrementItem);
}
break;
case REMOVE:
jj_consume_token(REMOVE);
jjtn000.type=OUpdateOperations.TYPE_REMOVE;
lastRemoveItem=UpdateRemoveItem();
jjtn000.updateRemoveItems.add(lastRemoveItem);
label_11: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[92]=jj_gen;
break label_11;
}
jj_consume_token(COMMA);
lastRemoveItem=UpdateRemoveItem();
jjtn000.updateRemoveItems.add(lastRemoveItem);
}
break;
default :
jj_la1[93]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
