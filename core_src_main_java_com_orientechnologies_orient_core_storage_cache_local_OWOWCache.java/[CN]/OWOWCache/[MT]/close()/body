{
  flush();
  if (!commitExecutor.isShutdown()) {
    commitExecutor.shutdown();
    try {
      if (!commitExecutor.awaitTermination(5,TimeUnit.MINUTES))       throw new OWriteCacheException("Background data flush task cannot be stopped.");
    }
 catch (    InterruptedException e) {
      OLogManager.instance().error(this,"Data flush thread was interrupted");
      Thread.interrupted();
      throw OException.wrapException(new OWriteCacheException("Data flush thread was interrupted"),e);
    }
  }
  filesLock.acquireWriteLock();
  try {
    final Collection<Integer> fileIds=nameIdMap.values();
    for (    Integer intId : fileIds) {
      if (intId >= 0) {
        files.close(composeFileId(id,intId));
      }
    }
    if (nameIdMapHolder != null) {
      nameIdMapHolder.setLength(0);
      for (      Map.Entry<String,Integer> entry : nameIdMap.entrySet()) {
        writeNameIdEntry(new NameFileIdEntry(entry.getKey(),entry.getValue()),false);
      }
      nameIdMapHolder.getFD().sync();
      nameIdMapHolder.close();
    }
    nameIdMap.clear();
    final long[] ids=new long[fileIds.size()];
    int n=0;
    for (    long id : fileIds) {
      ids[n]=id;
      n++;
    }
    return ids;
  }
  finally {
    filesLock.releaseWriteLock();
  }
}
