{
  banner("Test with quorum = 1");
  ODatabaseDocumentTx dbServer1=poolFactory.get(getDatabaseURL(serverInstance.get(0)),"admin","admin").acquire();
  ODatabaseDocumentTx dbServer2=poolFactory.get(getDatabaseURL(serverInstance.get(1)),"admin","admin").acquire();
  ODatabaseDocumentTx dbServer3=poolFactory.get(getDatabaseURL(serverInstance.get(2)),"admin","admin").acquire();
  System.out.print("\nChanging configuration (writeQuorum=1, autoDeploy=false)...");
  ODocument cfg=null;
  ServerRun server=serverInstance.get(2);
  OHazelcastPlugin manager=(OHazelcastPlugin)server.getServerInstance().getDistributedManager();
  ODistributedConfiguration databaseConfiguration=manager.getDatabaseConfiguration("distributed-inserttxha");
  cfg=databaseConfiguration.serialize();
  cfg.field("writeQuorum",1);
  cfg.field("failureAvailableNodesLessQuorum",true);
  cfg.field("version",(Integer)cfg.field("version") + 1);
  manager.updateCachedDatabaseConfiguration("distributed-inserttxha",cfg,true,true);
  System.out.println("\nConfiguration updated.");
  this.server3inDeadlock=true;
  Thread.sleep(200);
  System.out.print("Inserting record r1 and checking consistency...");
  ODocument r1onServer1=new ODocument("Person").fields("id","R001","firstName","Han","lastName","Solo");
  r1onServer1.save();
  Thread.sleep(200);
  ODocument r1onServer2=retrieveRecord(getDatabaseURL(serverInstance.get(1)),"R001");
  assertEquals(r1onServer1.field("@version"),r1onServer2.field("@version"));
  assertEquals(r1onServer1.field("id"),r1onServer2.field("id"));
  assertEquals(r1onServer1.field("firstName"),r1onServer2.field("firstName"));
  assertEquals(r1onServer1.field("lastName"),r1onServer2.field("lastName"));
  System.out.println("\tDone.");
  int initialVersion=r1onServer1.field("@version");
  System.out.print("Building client c1 and client c2...");
  List<Callable<Void>> clients=new LinkedList<Callable<Void>>();
  clients.add(new ClientWriter(getDatabaseURL(serverInstance.get(0)),"R001","Luke","Skywalker"));
  clients.add(new ClientWriter(getDatabaseURL(serverInstance.get(1)),"R001","Darth","Vader"));
  System.out.println("\tDone.");
  ExecutorService executor=Executors.newCachedThreadPool();
  System.out.println("Concurrent update:");
  List<Future<Void>> futures=executor.invokeAll(clients);
  try {
    for (    Future f : futures) {
      f.get();
    }
    assertTrue("Concurrent update NOT detected!",false);
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue(true);
    System.out.println("Concurrent update detected!");
  }
  Thread.sleep(500);
  this.server3inDeadlock=false;
  Thread.sleep(1000);
  r1onServer1=retrieveRecord(getDatabaseURL(serverInstance.get(0)),"R001");
  r1onServer2=retrieveRecord(getDatabaseURL(serverInstance.get(1)),"R001");
  ODocument r1onServer3=retrieveRecord(getDatabaseURL(serverInstance.get(2)),"R001");
  ODatabaseRecordThreadLocal.INSTANCE.set(dbServer1);
  r1onServer1.reload();
  ODatabaseRecordThreadLocal.INSTANCE.set(dbServer2);
  r1onServer2.reload();
  ODatabaseRecordThreadLocal.INSTANCE.set(dbServer3);
  r1onServer3.reload();
  if ((r1onServer1.field("firstName").equals("Luke") && r1onServer1.field("lastName").equals("Skywalker")) || r1onServer1.field("firstName").equals("Darth") && r1onServer1.field("lastName").equals("Vader")) {
    assertTrue("The record has been updated by a client!",true);
  }
 else {
    assertTrue("The record has not been updated by any client!",false);
  }
  System.out.printf("Checking consistency among servers...");
  assertEquals(r1onServer1.field("@version"),r1onServer2.field("@version"));
  assertEquals(r1onServer1.field("id"),r1onServer2.field("id"));
  assertEquals(r1onServer1.field("firstName"),r1onServer2.field("firstName"));
  assertEquals(r1onServer1.field("lastName"),r1onServer2.field("lastName"));
  assertEquals(r1onServer2.field("@version"),r1onServer3.field("@version"));
  assertEquals(r1onServer2.field("id"),r1onServer3.field("id"));
  assertEquals(r1onServer2.field("firstName"),r1onServer3.field("firstName"));
  assertEquals(r1onServer2.field("lastName"),r1onServer3.field("lastName"));
  System.out.println("The records are consistent in the cluster.");
  System.out.print("Checking versioning...");
  int finalVersion=r1onServer1.field("@version");
  assertEquals(finalVersion,initialVersion + 1);
  System.out.println("\tDone.");
}
