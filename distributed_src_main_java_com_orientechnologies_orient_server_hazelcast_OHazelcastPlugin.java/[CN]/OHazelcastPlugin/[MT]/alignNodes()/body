{
  if (remoteClusterNodes.isEmpty())   return;
  setStatus("aligning");
synchronized (synchronizers) {
    for (    Entry<String,OStorageSynchronizer> entry : synchronizers.entrySet()) {
      final String databaseName=entry.getKey();
      try {
        final long[] lastOperationId=entry.getValue().getLog().getLastOperationId(ODatabaseJournal.OPERATION_STATUS.COMMITTED);
        if (lastOperationId[0] == -1 && lastOperationId[1] == -1)         continue;
        ODistributedServerLog.warn(this,getLocalNodeId(),remoteClusterNodes.keySet().toString(),DIRECTION.OUT,"send align request in broadcast for database %s from %d:%d",databaseName,lastOperationId[0],lastOperationId[1]);
synchronized (pendingAlignments) {
          for (          String node : remoteClusterNodes.keySet()) {
            pendingAlignments.put(node + "/" + databaseName,Boolean.FALSE);
            ODistributedServerLog.info(this,getLocalNodeId(),node,DIRECTION.NONE,"setting node in alignment state for db=%s",databaseName);
          }
        }
        propagate(remoteClusterNodes.keySet(),new OAlignRequestTask(serverInstance,this,databaseName,EXECUTION_MODE.ASYNCHRONOUS,lastOperationId[0],lastOperationId[1]));
      }
 catch (      IOException e) {
        ODistributedServerLog.warn(this,getLocalNodeId(),null,DIRECTION.OUT,"error on retrieve last operation id from the log for db=%s",databaseName);
      }
    }
    if (pendingAlignments.isEmpty())     setStatus("online");
  }
}
