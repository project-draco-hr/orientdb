{
  iContent=iContent.trim();
  if (iContent.length() == 0)   return iRecord;
  final ORecordSchemaAware<?> record=(ORecordSchemaAware<?>)iRecord;
  final int posFirstValue=iContent.indexOf(OStringSerializerHelper.ENTRY_SEPARATOR);
  int pos=iContent.indexOf(OStringSerializerHelper.CLASS_SEPARATOR);
  if (pos > -1 && (pos < posFirstValue || posFirstValue == -1)) {
    record.setClassNameIfExists(iContent.substring(0,pos));
    iContent=iContent.substring(pos + 1);
  }
 else   record.setClassNameIfExists(null);
  final List<String> fields=OStringSerializerHelper.smartSplit(iContent,OStringSerializerHelper.RECORD_SEPARATOR);
  String field;
  String fieldName=null;
  String fieldValue;
  OType type=null;
  OClass linkedClass;
  OType linkedType;
  OProperty prop;
  for (int i=0; i < fields.size(); ++i) {
    field=fields.get(i).trim();
    try {
      pos=field.indexOf(FIELD_VALUE_SEPARATOR);
      if (pos > -1) {
        fieldName=field.substring(0,pos);
        fieldValue=field.length() > pos + 1 ? field.substring(pos + 1) : null;
        prop=record.getSchemaClass() != null ? record.getSchemaClass().getProperty(fieldName) : null;
        if (prop != null) {
          type=prop.getType();
          linkedClass=prop.getLinkedClass();
          linkedType=prop.getLinkedType();
        }
 else {
          type=iRecord instanceof ODocument ? ((ODocument)iRecord).fieldType(fieldName) : null;
          linkedClass=null;
          linkedType=null;
          if (fieldValue != null && type == null) {
            if (fieldValue.length() > 1 && fieldValue.charAt(0) == '"' && fieldValue.charAt(fieldValue.length() - 1) == '"') {
              type=OType.STRING;
            }
 else             if (fieldValue.charAt(0) == OStringSerializerHelper.COLLECTION_BEGIN && fieldValue.charAt(fieldValue.length() - 1) == OStringSerializerHelper.COLLECTION_END) {
              type=OType.EMBEDDEDLIST;
              String value=fieldValue.substring(1,fieldValue.length() - 1);
              if (value.length() > 0) {
                if (value.charAt(0) == OStringSerializerHelper.LINK) {
                  type=OType.LINKLIST;
                  linkedType=OType.LINK;
                  int classSeparatorPos=value.indexOf(OStringSerializerHelper.CLASS_SEPARATOR);
                  if (classSeparatorPos > -1) {
                    String className=value.substring(1,classSeparatorPos);
                    if (className != null)                     linkedClass=iDatabase.getMetadata().getSchema().getClass(className);
                  }
                }
 else                 if (value.charAt(0) == OStringSerializerHelper.PARENTHESIS_BEGIN) {
                  linkedType=OType.EMBEDDED;
                }
 else                 if (Character.isDigit(value.charAt(0)) || value.charAt(0) == '+' || value.charAt(0) == '-') {
                  String[] items=value.split(",");
                  linkedType=getType(items[0]);
                }
 else                 if (value.charAt(0) == '\'' || value.charAt(0) == '"')                 linkedType=OType.STRING;
              }
            }
 else             if (fieldValue.charAt(0) == OStringSerializerHelper.MAP_BEGIN && fieldValue.charAt(fieldValue.length() - 1) == OStringSerializerHelper.MAP_END) {
              type=OType.EMBEDDEDMAP;
            }
 else             if (fieldValue.charAt(0) == OStringSerializerHelper.LINK)             type=OType.LINK;
 else             if (fieldValue.charAt(0) == OStringSerializerHelper.PARENTHESIS_BEGIN)             type=OType.EMBEDDED;
 else             if (fieldValue.equals("true") || fieldValue.equals("false"))             type=OType.BOOLEAN;
 else             type=getType(fieldValue);
          }
        }
        if (type == OType.EMBEDDEDLIST || type == OType.EMBEDDEDSET || type == OType.EMBEDDEDMAP)         record.field(fieldName,fieldFromStream(iRecord,type,linkedClass,linkedType,fieldName,fieldValue),type);
 else         record.field(fieldName,fieldFromStream(iRecord,type,linkedClass,linkedType,fieldName,fieldValue));
      }
    }
 catch (    Exception e) {
      OLogManager.instance().exception("Error on unmarshalling field '%s'",e,OSerializationException.class,fieldName);
    }
  }
  record.unsetDirty();
  return iRecord;
}
