{
  super.onServerStarted(server);
  if (serverStarted++ == (SERVERS - 1)) {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          executeWhen(0,new OCallable<Boolean,ODatabaseDocumentTx>(){
            @Override public Boolean call(            ODatabaseDocumentTx db){
              return db.countClass("Person") > (count * SERVERS * writerCount + baseCount) * 1 / 3;
            }
          }
,new OCallable<Boolean,ODatabaseDocumentTx>(){
            @Override public Boolean call(            ODatabaseDocumentTx db){
              Assert.assertTrue("Insert was too fast",inserting);
              banner("SIMULATE FAILURE ON SERVER " + (SERVERS - 1));
              delayWriter=50;
              serverInstance.get(SERVERS - 1).crashServer();
              executeWhen(db,new OCallable<Boolean,ODatabaseDocumentTx>(){
                @Override public Boolean call(                ODatabaseDocumentTx db){
                  return db.countClass("Person") > (count * writerCount * SERVERS) * 2 / 4;
                }
              }
,new OCallable<Boolean,ODatabaseDocumentTx>(){
                @Override public Boolean call(                ODatabaseDocumentTx db){
                  Assert.assertTrue("Insert was too fast",inserting);
                  banner("RESTARTING SERVER " + (SERVERS - 1) + "...");
                  try {
                    serverInstance.get(SERVERS - 1).startServer(getDistributedServerConfiguration(serverInstance.get(SERVERS - 1)));
                    delayWriter=0;
                  }
 catch (                  Exception e) {
                    e.printStackTrace();
                  }
                  return null;
                }
              }
);
              return null;
            }
          }
);
        }
 catch (        Exception e) {
          e.printStackTrace();
          Assert.fail("Error on execution flow");
        }
      }
    }
).start();
  }
}
