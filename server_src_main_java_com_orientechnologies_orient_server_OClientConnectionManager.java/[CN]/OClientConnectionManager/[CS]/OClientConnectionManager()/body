{
  final int delay=OGlobalConfiguration.SERVER_CHANNEL_CLEAN_DELAY.getValueAsInteger();
  Orient.instance().getTimer().schedule(new TimerTask(){
    @Override public void run(){
      final Iterator<Entry<Integer,OClientConnection>> iterator=connections.entrySet().iterator();
      while (iterator.hasNext()) {
        final Entry<Integer,OClientConnection> entry=iterator.next();
        final Socket socket;
        if (entry.getValue().protocol == null || entry.getValue().protocol.getChannel() == null)         socket=null;
 else         socket=entry.getValue().protocol.getChannel().socket;
        if (socket == null || socket.isClosed() || socket.isInputShutdown()) {
          OLogManager.instance().debug(this,"[OClientConnectionManager] found and removed pending closed channel %d (%s)",entry.getKey(),socket);
          try {
            OCommandRequestText command=entry.getValue().data.command;
            if (command != null && command.isIdempotent()) {
              entry.getValue().protocol.sendShutdown();
              entry.getValue().protocol.interrupt();
            }
            entry.getValue().close();
          }
 catch (          Exception e) {
            OLogManager.instance().error(this,"Error during close of connection for close channel",e);
          }
          iterator.remove();
        }
      }
    }
  }
,delay,delay);
  Orient.instance().getProfiler().registerHookValue("server.connections.actives","Number of active network connections",METRIC_TYPE.COUNTER,new OProfilerHookValue(){
    public Object getValue(){
      return connections.size();
    }
  }
);
}
