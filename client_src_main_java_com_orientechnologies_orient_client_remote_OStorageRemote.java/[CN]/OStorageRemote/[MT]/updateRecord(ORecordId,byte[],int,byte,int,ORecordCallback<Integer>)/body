{
  checkConnection();
  if (iMode == 1 && iCallback == null)   iMode=2;
  do {
    try {
      final OChannelBinaryClient network=beginRequest(OChannelBinaryProtocol.REQUEST_RECORD_UPDATE);
      try {
        network.writeRID(iRid);
        network.writeBytes(iContent);
        network.writeInt(iVersion);
        network.writeByte(iRecordType);
        network.writeByte((byte)iMode);
      }
  finally {
        endRequest(network);
      }
switch (iMode) {
case 0:
        try {
          beginResponse(network);
          return new OStorageOperationResult<Integer>(network.readInt());
        }
  finally {
          endResponse(network);
        }
case 1:
      if (iCallback != null) {
        final int sessionId=getSessionId();
        Callable<Object> response=new Callable<Object>(){
          public Object call() throws Exception {
            int result;
            try {
              OStorageRemoteThreadLocal.INSTANCE.get().sessionId=sessionId;
              beginResponse(network);
              result=network.readInt();
            }
  finally {
              endResponse(network);
              OStorageRemoteThreadLocal.INSTANCE.get().sessionId=-1;
            }
            iCallback.call(iRid,result);
            return null;
          }
        }
;
        asynchExecutor.submit(new FutureTask<Object>(response));
      }
  }
  return new OStorageOperationResult<Integer>(iVersion);
}
 catch (OModificationOperationProhibitedException mope) {
  handleDBFreeze();
}
catch (Exception e) {
  handleException("Error on update record " + iRid,e);
}
}
 while (true);
}
