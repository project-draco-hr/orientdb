{
  Object result=null;
  String[] words=nextValue(true);
  if (words == null)   return null;
  if (words[0].startsWith(OQueryHelper.OPEN_BRACE)) {
    braces++;
    currentPos=currentPos - words[0].length() + 1;
    OSQLFilterCondition subCondition=new OSQLFilterCondition(extractConditionItem(),extractConditionOperator(),extractConditionItem());
    jumpWhiteSpaces();
    currentPos++;
    braces--;
    return subCondition;
  }
 else   if (words[0].startsWith(OQueryHelper.OPEN_COLLECTION)) {
    currentPos=currentPos - words[0].length() + 1;
    List<Object> coll=new ArrayList<Object>();
    String[] item;
    Object v;
    do {
      item=nextValue(true);
      v=OSQLHelper.parseValue(database,this,item[1]);
      coll.add(v);
      item=nextValue(true);
    }
 while (item != null && item[0].equals(OQueryHelper.COLLECTION_SEPARATOR));
    currentPos++;
    return coll;
  }
 else   if (words[0].startsWith(OCommandExecutorSQLAbstract.KEYWORD_COLUMN)) {
    String[] parameters=OQueryHelper.getParameters(words[0]);
    if (parameters.length != 1)     throw new OQueryParsingException("Missed column number",text,currentPos);
    result=new OSQLFilterItemColumn(this,parameters[0]);
  }
 else   if (words[0].startsWith(OSQLFilterItemFieldAll.NAME + OQueryHelper.OPEN_BRACE)) {
    result=new OSQLFilterItemFieldAll(this,words[1]);
  }
 else   if (words[0].startsWith(OSQLFilterItemFieldAny.NAME + OQueryHelper.OPEN_BRACE)) {
    result=new OSQLFilterItemFieldAny(this,words[1]);
  }
 else {
    if (words[0].equals("NOT")) {
      String[] nextWord=nextValue(true);
      if (nextWord != null && nextWord.length == 2)       words[1]=words[1] + " " + nextWord[1];
    }
    result=OSQLHelper.parseValue(database,this,words[1]);
  }
  return result;
}
