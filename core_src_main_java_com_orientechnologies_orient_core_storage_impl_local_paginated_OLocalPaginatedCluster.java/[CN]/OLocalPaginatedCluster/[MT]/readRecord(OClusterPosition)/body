{
  acquireSharedLock();
  try {
    long pagePointer=clusterPosition.longValue();
    int recordPosition=(int)(pagePointer & RECORD_POSITION_MASK);
    long pageIndex=pagePointer >>> PAGE_INDEX_OFFSET;
    if (diskCache.getFilledUpTo(fileId) <= pageIndex)     return null;
    ORecordVersion recordVersion=null;
    long pointer=diskCache.load(fileId,pageIndex);
    try {
      final OLocalPage localPage=new OLocalPage(pointer,false,writeAheadLog,pageIndex,id);
      long recordPointer=localPage.getRecordPointer(recordPosition);
      if (recordPointer == ODirectMemory.NULL_POINTER)       return null;
      recordVersion=localPage.getRecordVersion(recordPosition);
    }
  finally {
      diskCache.release(fileId,pageIndex);
    }
    byte[] fullContent=readFullEntry(clusterPosition);
    int fullContentPosition=0;
    byte recordType=fullContent[fullContentPosition];
    fullContentPosition++;
    int readContentSize=OIntegerSerializer.INSTANCE.deserializeNative(fullContent,fullContentPosition);
    fullContentPosition+=OIntegerSerializer.INT_SIZE;
    byte[] recordContent=new byte[readContentSize];
    System.arraycopy(fullContent,fullContentPosition,recordContent,0,recordContent.length);
    recordContent=Snappy.uncompress(recordContent,0,recordContent.length);
    return new ORawBuffer(recordContent,recordVersion,recordType);
  }
  finally {
    releaseSharedLock();
  }
}
