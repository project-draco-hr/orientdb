{
  System.out.println("Start adding edges" + new Date().getTime() + " Thread:"+ Thread.currentThread().getName());
  OrientGraphNoTx databaseNoTx=getGraph();
  while (!vertexSet.isEmpty()) {
    String keyFrom=vertexSet.pollFirst();
    Set<String> toKeySet=vertexReg.keySet();
    ODatabaseRecordThreadLocal.INSTANCE.set(databaseNoTx.getRawGraph());
    final int total=toKeySet.size();
    int current=0;
    for (    String keyTo : toKeySet) {
      boolean success=false;
      for (int retry=0; retry < RETRIES; retry++) {
        try {
          OrientVertex iSourceVertex=databaseNoTx.getVertex(vertexReg.get(keyFrom));
          OrientVertex iDestVertex=databaseNoTx.getVertex(vertexReg.get(keyTo));
          databaseNoTx.addEdge(null,iSourceVertex,iDestVertex,"CustomEdge");
          if (retry > 2)           System.out.println("OK (key #" + current + "/"+ total+ ") after "+ retry+ " retries - Thread:"+ Thread.currentThread().getName());
          success=true;
          current++;
          edgeCounter.incrementAndGet();
          break;
        }
 catch (        OConcurrentModificationException e) {
          if (retry > 2)           System.out.println("Concurrent exception (key #" + current + "/"+ total+ ") adding edge "+ keyFrom+ "->"+ keyTo+ ", retry "+ retry+ " Thread:"+ Thread.currentThread().getName());
        }
catch (        Exception e) {
          System.err.println("Exception (key #" + current + "/"+ total+ ") adding edge "+ keyFrom+ "->"+ keyTo+ ", retry "+ retry+ " Thread:"+ Thread.currentThread().getName());
          e.printStackTrace();
        }
      }
      if (!success)       System.out.println("ERROR on (key #" + current + "/"+ total+ ") adding edge "+ keyFrom+ "->"+ keyTo+ " Thread:"+ Thread.currentThread().getName());
    }
  }
  System.out.println("Done adding edges" + new Date().getTime() + " Thread:"+ Thread.currentThread().getName());
}
