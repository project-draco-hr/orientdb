{
  ODocument cfgGlobal=null;
  Collection<ODocument> cfgBegin=null;
  ODocument cfgExtract=null;
  Collection<ODocument> cfgTransformers=null;
  ODocument cfgLoader=null;
  Collection<ODocument> cfgEnd=null;
  System.out.println("OrientDB etl v." + OConstants.getVersion() + " "+ OConstants.ORIENT_URL);
  if (args.length == 0) {
    System.out.println("Syntax error, missing configuration file.");
    System.out.println("Use: oetl.sh <json-file>");
    System.exit(1);
  }
  final OBasicCommandContext context=createDefaultContext();
  for (int i=0; i < args.length; ++i) {
    final String arg=args[i];
    if (arg.charAt(0) == '-') {
      final String[] parts=arg.substring(1).split("=");
      context.setVariable(parts[0].toUpperCase(),parts[1]);
    }
 else {
      try {
        final String config=OIOUtils.readFileAsString(new File(arg));
        final ODocument cfg=new ODocument().fromJSON(config,"noMap");
        cfgGlobal=cfg.field("config");
        cfgBegin=cfg.field("begin");
        cfgExtract=cfg.field("extractor");
        cfgTransformers=cfg.field("transformers");
        cfgLoader=cfg.field("loader");
        cfgEnd=cfg.field("end");
      }
 catch (      IOException e) {
        throw new OConfigurationException("Error on loading config file: " + arg);
      }
    }
  }
  if (cfgExtract == null)   throw new IllegalArgumentException("No Extractor configured");
  if (cfgTransformers == null)   throw new IllegalArgumentException("No Transformer configured");
  if (cfgLoader == null)   throw new IllegalArgumentException("No Loader configured");
  if (cfgGlobal != null) {
    for (    String f : cfgGlobal.fieldNames()) {
      context.setVariable(f,cfgGlobal.field(f));
    }
  }
  final OETLProcessor processor=new OETLProcessor(cfgBegin,cfgExtract,cfgTransformers,cfgLoader,cfgEnd,context);
  processor.execute();
}
