{
  if (!OGlobalConfiguration.USE_LHPEPS_MEMORY_CLUSTER.getValueAsBoolean())   return;
  initSchema();
  final int docCount=10000;
  final ODocument document=new ODocument();
  final TreeSet<OClusterPosition> clusterPositions=new TreeSet<OClusterPosition>();
  for (int i=0; i < docCount; i++) {
    document.reset();
    document.setClassName("Zombie");
    document.field("name","Flasheater" + i);
    document.field("rank",i);
    document.save();
    clusterPositions.add(document.getIdentity().getClusterPosition());
  }
  final HashSet<OClusterPosition> deletedItems=new HashSet<OClusterPosition>();
  final Random random=new Random();
  random.setSeed(119269911101956L);
  ORecordIteratorCluster<ODocument> clusterIterator=db.browseCluster("Zombie",OClusterPosition.INVALID_POSITION,OClusterPosition.INVALID_POSITION,true);
  while (clusterIterator.hasNext()) {
    final ODocument doc=clusterIterator.next();
    if (random.nextBoolean()) {
      deletedItems.add(doc.getIdentity().getClusterPosition());
      doc.delete();
    }
  }
  Assert.assertEquals(db.countClass("Zombie"),docCount - deletedItems.size());
  OClusterPosition startPosition=null;
  OClusterPosition endPosition=null;
  int processedDocs=0;
  for (  OClusterPosition position : clusterPositions) {
    processedDocs++;
    if (processedDocs == 1000) {
      startPosition=position;
    }
 else     if (processedDocs == 2000) {
      endPosition=position;
      break;
    }
  }
  clusterIterator=db.browseCluster("Zombie",startPosition,endPosition,true);
  Iterator<OClusterPosition> positionIterator=clusterPositions.subSet(startPosition,true,endPosition,true).iterator();
  while (clusterIterator.hasNext()) {
    final ODocument doc=clusterIterator.next();
    final OClusterPosition position=positionIterator.next();
    Assert.assertEquals(position,doc.getIdentity().getClusterPosition());
    if (deletedItems.contains(position))     Assert.assertTrue(doc.getRecordVersion().isTombstone());
  }
  Assert.assertFalse(clusterIterator.hasNext());
  Assert.assertFalse(positionIterator.hasNext());
  clusterIterator=db.browseCluster("Zombie",startPosition,endPosition,false);
  positionIterator=clusterPositions.subSet(startPosition,true,endPosition,true).iterator();
  while (positionIterator.hasNext()) {
    final OClusterPosition position=positionIterator.next();
    if (deletedItems.contains(position))     continue;
    Assert.assertTrue(clusterIterator.hasNext());
    Assert.assertEquals(position,clusterIterator.next().getIdentity().getClusterPosition());
  }
  Assert.assertFalse(clusterIterator.hasNext());
  Assert.assertFalse(positionIterator.hasNext());
}
