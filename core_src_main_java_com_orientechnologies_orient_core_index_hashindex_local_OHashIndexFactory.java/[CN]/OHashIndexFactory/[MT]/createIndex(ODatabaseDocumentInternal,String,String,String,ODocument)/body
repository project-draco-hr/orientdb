{
  if (valueContainerAlgorithm == null)   valueContainerAlgorithm=ODefaultIndexFactory.NONE_VALUE_CONTAINER;
  OStorage storage=database.getStorage();
  OIndexEngine indexEngine;
  Boolean durableInNonTxMode;
  Object durable=null;
  if (metadata != null) {
    durable=metadata.field("durableInNonTxMode");
  }
  if (durable instanceof Boolean)   durableInNonTxMode=(Boolean)durable;
 else   durableInNonTxMode=null;
  final String storageType=storage.getType();
  if (storageType.equals("memory") || storageType.equals("plocal"))   indexEngine=new OHashTableIndexEngine(durableInNonTxMode);
 else   if (storageType.equals("distributed"))   indexEngine=new OHashTableIndexEngine(durableInNonTxMode);
 else   if (storageType.equals("remote"))   indexEngine=new ORemoteIndexEngine();
 else   throw new OIndexException("Unsupported storage type : " + storageType);
  if (OClass.INDEX_TYPE.UNIQUE_HASH_INDEX.toString().equals(indexType))   return new OIndexUnique(indexType,algorithm,indexEngine,valueContainerAlgorithm,metadata);
 else   if (OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX.toString().equals(indexType))   return new OIndexNotUnique(indexType,algorithm,indexEngine,valueContainerAlgorithm,metadata);
 else   if (OClass.INDEX_TYPE.FULLTEXT_HASH_INDEX.toString().equals(indexType))   return new OIndexFullText(indexType,algorithm,indexEngine,valueContainerAlgorithm,metadata);
 else   if (OClass.INDEX_TYPE.DICTIONARY_HASH_INDEX.toString().equals(indexType))   return new OIndexDictionary(indexType,algorithm,indexEngine,valueContainerAlgorithm,metadata);
  throw new OConfigurationException("Unsupported type : " + indexType);
}
