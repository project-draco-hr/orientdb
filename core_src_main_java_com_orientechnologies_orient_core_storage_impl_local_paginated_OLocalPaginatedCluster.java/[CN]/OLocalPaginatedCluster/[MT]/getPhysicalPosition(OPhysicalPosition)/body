{
  acquireSharedLock();
  try {
    OClusterPosition clusterPosition=position.clusterPosition;
    long pagePointer=clusterPosition.longValue();
    long pageIndex=pagePointer >>> PAGE_INDEX_OFFSET;
    int recordPosition=(int)(pagePointer & RECORD_POSITION_MASK);
    long pagesCount=diskCache.getFilledUpTo(fileId);
    if (pageIndex >= pagesCount)     return null;
    OCacheEntry cacheEntry=diskCache.load(fileId,pageIndex);
    OCachePointer pointer=cacheEntry.getCachePointer();
    try {
      final OLocalPage localPage=new OLocalPage(pointer.getDataPointer(),false,OAbstractPLocalPage.TrackMode.NONE);
      int recordPageOffset=localPage.getRecordPageOffset(recordPosition);
      if (recordPageOffset < 0)       return null;
      int recordSize=localPage.getRecordSize(recordPosition);
      if (localPage.getByteValue(recordPageOffset + recordSize - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE) == 0)       return null;
      final OPhysicalPosition physicalPosition=new OPhysicalPosition();
      physicalPosition.dataSegmentId=-1;
      physicalPosition.dataSegmentPos=-1;
      physicalPosition.recordSize=-1;
      physicalPosition.recordType=localPage.getByteValue(recordPageOffset);
      physicalPosition.recordVersion=localPage.getRecordVersion(recordPosition);
      physicalPosition.clusterPosition=position.clusterPosition;
      return physicalPosition;
    }
  finally {
      diskCache.release(cacheEntry);
    }
  }
  finally {
    releaseSharedLock();
  }
}
