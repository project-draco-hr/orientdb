{
  try {
    String name=Integer.toString(threadId);
    OrientGraphFactory graphFactory=new OrientGraphFactory("plocal:target/server" + serverId + "/databases/"+ getDatabaseName());
    OrientBaseGraph graph=graphFactory.getNoTx();
    for (int i=0; i < count; i++) {
      try {
        final int id=baseCount + i;
        int retry=0;
        for (retry=0; retry < maxRetries; retry++) {
          try {
            final OrientVertex client=createVertex(graph,id);
            updateVertex(graph,id);
            checkVertex(graph,id);
            if ((i + 1) % 100 == 0)             System.out.println("\nDBStartupWriter " + graph.getRawGraph().getURL() + " managed "+ (i + 1)+ "/"+ count+ " records so far");
            if (delayWriter > 0)             Thread.sleep(delayWriter);
            break;
          }
 catch (          InterruptedException e) {
            System.out.println("DBStartupWriter received interrupt (db=" + graph.getRawGraph().getURL());
            Thread.currentThread().interrupt();
            break;
          }
catch (          ORecordDuplicatedException e) {
          }
catch (          ONeedRetryException e) {
            System.out.println("DBStartupWriter received exception (db=" + graph.getRawGraph().getURL());
            if (retry >= maxRetries)             e.printStackTrace();
            break;
          }
catch (          ODistributedException e) {
            if (!(e.getCause() instanceof ORecordDuplicatedException)) {
              graph.rollback();
              throw e;
            }
          }
catch (          Throwable e) {
            System.out.println("DBStartupWriter received exception (db=" + graph.getRawGraph().getURL());
            e.printStackTrace();
            return null;
          }
        }
      }
  finally {
        runningWriters.countDown();
      }
    }
    graph.getRawGraph().close();
    System.out.println("\nDBStartupWriter " + name + " END");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}
