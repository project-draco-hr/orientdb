{
  if (!parserOptionalKeyword(KEYWORD_SELECT))   return -1;
  int upperBound=OStringSerializerHelper.getLowerIndexOf(parserTextUpperCase,parserGetCurrentPosition(),KEYWORD_FROM_2FIND,KEYWORD_LET_2FIND);
  if (upperBound == -1)   upperBound=parserText.length();
  int lastRealPositionProjection=-1;
  final String projectionString=parserText.substring(parserGetCurrentPosition(),upperBound).trim();
  if (projectionString.length() > 0) {
    projections=new LinkedHashMap<String,Object>();
    projectionDefinition=new LinkedHashMap<String,String>();
    final List<String> items=OStringSerializerHelper.smartSplit(projectionString,',');
    int beginPos;
    int endPos;
    for (    String projection : items) {
      projection=projection.trim();
      if (projectionDefinition == null)       throw new OCommandSQLParsingException("Projection not allowed with FLATTEN() and EXPAND() operators");
      final List<String> words=OStringSerializerHelper.smartSplit(projection,' ');
      if (words.size() > 1)       lastRealPositionProjection+=words.get(0).length();
      String fieldName;
      endPos=projection.toUpperCase(Locale.ENGLISH).indexOf(KEYWORD_AS);
      if (endPos > -1) {
        fieldName=projection.substring(endPos + KEYWORD_AS.length()).trim();
        lastRealPositionProjection+=endPos + KEYWORD_AS.length() + fieldName.length()+ 1;
        projection=projection.substring(0,endPos).trim();
        if (projectionDefinition.containsKey(fieldName))         throw new OCommandSQLParsingException("Field '" + fieldName + "' is duplicated in current SELECT, choose a different name");
      }
 else {
        beginPos=projection.charAt(0) == '@' ? 1 : 0;
        endPos=extractProjectionNameSubstringEndPosition(projection);
        fieldName=endPos > -1 ? projection.substring(beginPos,endPos) : projection.substring(beginPos);
        fieldName=OStringSerializerHelper.getStringContent(fieldName);
        for (int fieldIndex=2; projectionDefinition.containsKey(fieldName); ++fieldIndex)         fieldName+=fieldIndex;
      }
      String p=projection.toUpperCase(Locale.ENGLISH);
      if (p.startsWith("FLATTEN(") || p.startsWith("EXPAND(")) {
        if (p.startsWith("FLATTEN("))         OLogManager.instance().debug(this,"FLATTEN() operator has been replaced by EXPAND()");
        List<String> pars=OStringSerializerHelper.getParameters(projection);
        if (pars.size() != 1) {
          throw new OCommandSQLParsingException("EXPAND/FLATTEN operators expects the field name as parameter. Example EXPAND( out )");
        }
        expandTarget=OSQLHelper.parseValue(this,pars.get(0).trim(),context);
        projectionDefinition=null;
        projections=null;
        if (groupedResult == null && expandTarget instanceof OSQLFunctionRuntime && ((OSQLFunctionRuntime)expandTarget).aggregateResults())         getProjectionGroup(null);
        continue;
      }
      projectionDefinition.put(fieldName,projection);
    }
    if (projectionDefinition != null && (projectionDefinition.size() > 1 || !projectionDefinition.values().iterator().next().equals("*"))) {
      projections=createProjectionFromDefinition();
      for (      Object p : projections.values()) {
        if (groupedResult == null && p instanceof OSQLFunctionRuntime && ((OSQLFunctionRuntime)p).aggregateResults()) {
          getProjectionGroup(null);
          break;
        }
      }
    }
 else {
      projectionDefinition=null;
      projections=null;
    }
  }
  if (upperBound < parserText.length() - 1)   parserSetCurrentPosition(upperBound);
 else   if (lastRealPositionProjection > -1)   parserMoveCurrentPosition(lastRealPositionProjection + 1);
 else   parserSetEndOfText();
  return parserGetCurrentPosition();
}
