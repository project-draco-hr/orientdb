{
  final Throwable firstCause=OException.getFirstCause(exception);
  final boolean tokenException=firstCause instanceof OTokenException;
  if (!(firstCause instanceof IOException)) {
    if (exception instanceof OException)     throw (OException)exception;
    throw OException.wrapException(new OStorageException(message),exception);
  }
  if (!tokenException)   if (iNetwork != null) {
    OLogManager.instance().warn(this,"Caught I/O errors from %s (local socket=%s), trying to reconnect (error: %s)",iNetwork,iNetwork.getLocalSocketAddress(),firstCause);
    OLogManager.instance().debug(this,"I/O error stack: ",firstCause);
    try {
      engine.getConnectionManager().remove(iNetwork);
    }
 catch (    Exception e) {
      OLogManager.instance().debug(this,"Cannot remove connection from connection manager",e);
    }
  }
 else {
    OLogManager.instance().warn(this,"Caught I/O errors, trying to reconnect (error: %s)",firstCause.toString());
    OLogManager.instance().debug(this,"I/O error stack: ",firstCause);
  }
  final long lostConnectionTime=System.currentTimeMillis();
  final int currentMaxRetry;
  final int currentRetryDelay;
  final int urlSize;
synchronized (serverURLs) {
    urlSize=serverURLs.size();
  }
  if (urlSize > 1) {
    currentMaxRetry=1;
    currentRetryDelay=0;
  }
 else {
    currentMaxRetry=connectionRetry;
    currentRetryDelay=connectionRetryDelay;
  }
  for (int retry=0; retry < currentMaxRetry; ++retry) {
    if (retry > 0 && currentRetryDelay > 0)     try {
      Thread.sleep(currentRetryDelay);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      break;
    }
    try {
      if (OLogManager.instance().isDebugEnabled())       OLogManager.instance().debug(this,"Retrying to connect to remote server #" + (retry + 1) + "/"+ currentMaxRetry+ "...");
      setSessionId(null,-1,null);
      final String currentURL=reopenRemoteDatabase();
      if (!tokenException)       OLogManager.instance().warn(this,"Connection re-acquired transparently after %dms and %d retries to server '%s': no errors will be thrown at application level",System.currentTimeMillis() - lostConnectionTime,retry + 1,currentURL);
      return;
    }
 catch (    Throwable t) {
      OLogManager.instance().error(this,"Error during exception handling",t);
    }
  }
  throw OException.wrapException(new OStorageException(message),exception);
}
