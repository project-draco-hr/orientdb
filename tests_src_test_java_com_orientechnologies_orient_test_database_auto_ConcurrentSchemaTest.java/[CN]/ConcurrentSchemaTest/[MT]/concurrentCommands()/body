{
  ConcurrentTestHelper.test(THREADS,new TestFactory<Void>(){
    @Override public Callable<Void> createWorker(){
      return new CreateClassCommandExecutor(url);
    }
  }
);
  for (int id=0; id < THREADS; ++id) {
    for (int i=0; i < CYCLES; ++i) {
      final String clsName="ConcurrentClassTest-" + id + "-"+ i;
      Assert.assertTrue(database.getMetadata().getSchema().existsClass(clsName));
    }
  }
  ConcurrentTestHelper.test(THREADS,new TestFactory<Void>(){
    @Override public Callable<Void> createWorker(){
      return new DropClassCommandExecutor(url);
    }
  }
);
  Assert.assertEquals(counter.get(),0);
}
