{
  final OByteBufferPool pool=new OByteBufferPool(10,10000,300);
  Assert.assertEquals(pool.getMaxPagesPerChunk(),16);
  Assert.assertEquals(pool.getMaxAmountOfChunks(),625);
  final List<Future<Void>> futures=new ArrayList<Future<Void>>();
  final CountDownLatch latch=new CountDownLatch(1);
  final ExecutorService executor=Executors.newFixedThreadPool(8);
  for (int i=0; i < 5; i++) {
    futures.add(executor.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        latch.await();
        try {
          for (int n=0; n < 1000000; n++) {
            List<ByteBuffer> buffers=new ArrayList<ByteBuffer>();
            for (int i=0; i < 2000; i++) {
              buffers.add(pool.acquireDirect(false));
            }
            for (int i=0; i < 2000; i++) {
              final ByteBuffer buffer=buffers.get(i);
              pool.release(buffer);
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw e;
        }
        return null;
      }
    }
));
  }
  latch.countDown();
  for (  Future<Void> future : futures) {
    future.get();
  }
}
