{
  listener.onMessage("\nStarting shallow comparison of clusters:");
  listener.onMessage("\nChecking the number of clusters...");
  Collection<String> clusterNames1=makeDbCall(databaseOne,new ODbRelatedCall<Collection<String>>(){
    @Override public Collection<String> call(    ODatabaseDocumentInternal database){
      return database.getClusterNames();
    }
  }
);
  Collection<String> clusterNames2=makeDbCall(databaseTwo,new ODbRelatedCall<Collection<String>>(){
    @Override public Collection<String> call(    ODatabaseDocumentInternal database){
      return database.getClusterNames();
    }
  }
);
  if (clusterNames1.size() != clusterNames2.size()) {
    listener.onMessage("ERR: cluster sizes are different: " + clusterNames1.size() + " <-> "+ clusterNames2.size());
    ++differences;
  }
  boolean ok;
  for (  final String clusterName : clusterNames1) {
    if (includeClusters != null) {
      if (!includeClusters.contains(clusterName))       continue;
    }
 else     if (excludeClusters != null) {
      if (excludeClusters.contains(clusterName))       continue;
    }
    ok=true;
    final int cluster1Id=makeDbCall(databaseTwo,new ODbRelatedCall<Integer>(){
      @Override public Integer call(      ODatabaseDocumentInternal database){
        return database.getClusterIdByName(clusterName);
      }
    }
);
    listener.onMessage("\n- Checking cluster " + String.format("%-25s: ","'" + clusterName + "'"));
    if (cluster1Id == -1) {
      listener.onMessage("ERR: cluster name '" + clusterName + "' was not found on database "+ databaseTwo.getName());
      ++differences;
      ok=false;
    }
    final int cluster2Id=makeDbCall(databaseOne,new ODbRelatedCall<Integer>(){
      @Override public Integer call(      ODatabaseDocumentInternal database){
        return database.getClusterIdByName(clusterName);
      }
    }
);
    if (cluster1Id != cluster2Id) {
      listener.onMessage("ERR: cluster id is different for cluster " + clusterName + ": "+ cluster2Id+ " <-> "+ cluster1Id);
      ++differences;
      ok=false;
    }
    long countCluster1=makeDbCall(databaseOne,new ODbRelatedCall<Long>(){
      @Override public Long call(      ODatabaseDocumentInternal database){
        return database.getStorage().count(cluster1Id);
      }
    }
);
    long countCluster2=makeDbCall(databaseOne,new ODbRelatedCall<Long>(){
      @Override public Long call(      ODatabaseDocumentInternal database){
        return database.getStorage().count(cluster2Id);
      }
    }
);
    if (countCluster1 != countCluster2) {
      listener.onMessage("ERR: number of records different in cluster '" + clusterName + "' (id="+ cluster1Id+ "): "+ countCluster1+ " <-> "+ countCluster2);
      ++differences;
      ok=false;
    }
    if (ok)     listener.onMessage("OK");
  }
  listener.onMessage("\n\nShallow analysis done.");
  return true;
}
