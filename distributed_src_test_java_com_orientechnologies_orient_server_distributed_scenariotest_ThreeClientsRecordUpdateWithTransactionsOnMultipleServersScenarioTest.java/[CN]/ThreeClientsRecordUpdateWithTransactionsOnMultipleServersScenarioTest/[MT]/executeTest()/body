{
  ODatabaseDocumentTx dbServer1=poolFactory.get(getDatabaseURL(serverInstance.get(0)),"admin","admin").acquire();
  ODatabaseDocumentTx dbServer2=poolFactory.get(getDatabaseURL(serverInstance.get(1)),"admin","admin").acquire();
  ODatabaseDocumentTx dbServer3=poolFactory.get(getDatabaseURL(serverInstance.get(2)),"admin","admin").acquire();
  ODatabaseRecordThreadLocal.INSTANCE.set(dbServer1);
  ODocument record1Server1=new ODocument("Person").fromMap(hanFields);
  record1Server1.save();
  waitForInsertedRecordPropagation(RECORD_ID);
  ODocument record1Server2=retrieveRecord(getDatabaseURL(serverInstance.get(1)),RECORD_ID);
  assertEquals(record1Server2.getVersion(),record1Server1.getVersion());
  assertEquals(record1Server2.field("id"),record1Server1.field("id"));
  assertEquals(record1Server2.field("firstName"),record1Server1.field("firstName"));
  assertEquals(record1Server2.field("lastName"),record1Server1.field("lastName"));
  ODocument record1Server3=retrieveRecord(getDatabaseURL(serverInstance.get(2)),RECORD_ID);
  assertEquals(record1Server3.getVersion(),record1Server1.getVersion());
  assertEquals(record1Server3.field("id"),record1Server1.field("id"));
  assertEquals(record1Server3.field("firstName"),record1Server1.field("firstName"));
  assertEquals(record1Server3.field("lastName"),record1Server1.field("lastName"));
  int actualVersion=record1Server1.getVersion();
  System.out.println("Actual version: " + actualVersion);
  ((ODistributedStorage)dbServer1.getStorage()).setEventListener(new AfterRecordLockDelayer(DOCUMENT_WRITE_TIMEOUT));
  ((ODistributedStorage)dbServer2.getStorage()).setEventListener(new AfterRecordLockDelayer(DOCUMENT_WRITE_TIMEOUT / 4));
  ((ODistributedStorage)dbServer3.getStorage()).setEventListener(new AfterRecordLockDelayer(DOCUMENT_WRITE_TIMEOUT / 2));
  List<Callable<Void>> clients=new LinkedList<Callable<Void>>();
  clients.add(new RecordUpdater(getDatabaseURL(serverInstance.get(0)),record1Server1,lukeFields,true));
  clients.add(new RecordUpdater(getDatabaseURL(serverInstance.get(1)),record1Server2,darthFields,true));
  clients.add(new RecordUpdater(getDatabaseURL(serverInstance.get(2)),record1Server3,leiaFields,true));
  List<Future<Void>> futures=Executors.newCachedThreadPool().invokeAll(clients);
  executeFutures(futures);
  waitForUpdatedRecordPropagation(RECORD_ID,"firstName","Leia");
  record1Server1=retrieveRecord(getDatabaseURL(serverInstance.get(0)),RECORD_ID);
  record1Server2=retrieveRecord(getDatabaseURL(serverInstance.get(1)),RECORD_ID);
  record1Server3=retrieveRecord(getDatabaseURL(serverInstance.get(2)),RECORD_ID);
  int finalVersionServer1=record1Server1.getVersion();
  int finalVersionServer2=record1Server2.getVersion();
  int finalVersionServer3=record1Server3.getVersion();
  assertEquals(actualVersion + 1,finalVersionServer1);
  assertEquals(actualVersion + 1,finalVersionServer2);
  assertEquals(actualVersion + 1,finalVersionServer3);
}
