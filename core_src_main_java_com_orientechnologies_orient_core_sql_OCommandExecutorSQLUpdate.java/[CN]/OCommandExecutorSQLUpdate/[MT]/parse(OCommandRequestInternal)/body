{
  iRequest.getDatabase().checkSecurity(ODatabaseSecurityResources.COMMAND,ORole.PERMISSION_UPDATE);
  init(iRequest.getDatabase(),iRequest.getText());
  className=null;
  setEntries.clear();
  query=null;
  recordCount=0;
  final StringBuilder word=new StringBuilder();
  int pos=OSQLHelper.nextWord(text,textUpperCase,0,word,true);
  if (pos == -1 || !word.toString().equals(OCommandExecutorSQLUpdate.KEYWORD_UPDATE))   throw new OCommandSQLParsingException("Keyword " + OCommandExecutorSQLUpdate.KEYWORD_UPDATE + " not found",text,0);
  int newPos=OSQLHelper.nextWord(text,textUpperCase,pos,word,true);
  if (newPos == -1)   throw new OCommandSQLParsingException("Invalid cluster/class name",text,pos);
  pos=newPos;
  String subjectName=word.toString();
  if (subjectName.startsWith(OCommandExecutorSQLAbstract.CLASS_PREFIX))   subjectName=subjectName.substring(OCommandExecutorSQLAbstract.CLASS_PREFIX.length());
  final OClass cls=database.getMetadata().getSchema().getClass(subjectName);
  if (cls == null)   throw new OCommandSQLParsingException("Class " + subjectName + " not found in database",text,pos);
  className=cls.getName();
  newPos=OSQLHelper.nextWord(text,textUpperCase,pos,word,true);
  if (pos == -1 || (!word.toString().equals(KEYWORD_SET) && !word.toString().equals(KEYWORD_REMOVE)))   throw new OCommandSQLParsingException("Expected keyword " + KEYWORD_SET + " or "+ KEYWORD_REMOVE,text,pos);
  while (pos != -1 && !word.toString().equals(OCommandExecutorSQLAbstract.KEYWORD_WHERE)) {
    if (word.toString().equals(KEYWORD_SET)) {
      pos=parseSetFields(word,pos,newPos);
    }
 else     if (word.toString().equals(KEYWORD_REMOVE)) {
      pos=parseRemoveFields(word,newPos);
    }
 else     break;
  }
  String whereCondition=word.toString();
  if (whereCondition.equals(OCommandExecutorSQLAbstract.KEYWORD_WHERE))   query=database.command(new OSQLAsynchQuery<ODocument>("select from " + className + " where "+ text.substring(pos),this));
 else   query=database.command(new OSQLAsynchQuery<ODocument>("select from " + className,this));
  return this;
}
