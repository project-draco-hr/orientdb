{
  final OCompositeIndexDefinition compositeIndexDefinition=new OCompositeIndexDefinition();
  compositeIndexDefinition.addIndex(new OPropertyIndexDefinition("testCollectionClass","fOne",OType.INTEGER,-1));
  compositeIndexDefinition.addIndex(new OPropertyMapIndexDefinition("testCollectionClass","fTwo",OType.STRING,OPropertyMapIndexDefinition.INDEX_BY.KEY,-1));
  compositeIndexDefinition.addIndex(new OPropertyIndexDefinition("testCollectionClass","fThree",OType.INTEGER,-1));
  final ODocument doc=new ODocument();
  ORecordInternal.unsetDirty(doc);
  Assert.assertFalse(doc.isDirty());
  final OTrackedMap<String> trackedMap=new OTrackedMap<String>(doc);
  trackedMap.put("k1","v1");
  trackedMap.put("k2","v2");
  trackedMap.put("k3","v3");
  trackedMap.remove("k2");
  final List<OMultiValueChangeEvent<Object,String>> firedEvents=new ArrayList<OMultiValueChangeEvent<Object,String>>();
  trackedMap.addChangeListener(new OMultiValueChangeListener<Object,String>(){
    public void onAfterRecordChanged(    final OMultiValueChangeEvent<Object,String> event){
      firedEvents.add(event);
    }
  }
);
  trackedMap.put("k4","v4");
  trackedMap.remove("k1");
  Map<OCompositeKey,Integer> keysToAdd=new HashMap<OCompositeKey,Integer>();
  Map<OCompositeKey,Integer> keysToRemove=new HashMap<OCompositeKey,Integer>();
  for (  OMultiValueChangeEvent<Object,String> multiValueChangeEvent : firedEvents)   compositeIndexDefinition.processChangeEvent(multiValueChangeEvent,keysToAdd,keysToRemove,2,3);
  Assert.assertEquals(keysToRemove.size(),1);
  Assert.assertEquals(keysToAdd.size(),1);
  Assert.assertTrue(keysToAdd.containsKey(new OCompositeKey(2,"k4",3)));
  Assert.assertTrue(keysToRemove.containsKey(new OCompositeKey(2,"k1",3)));
}
