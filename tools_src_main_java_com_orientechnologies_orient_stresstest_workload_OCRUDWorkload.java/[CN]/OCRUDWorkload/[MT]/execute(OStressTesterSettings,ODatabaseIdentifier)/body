{
  createSchema(databaseIdentifier);
  final ORID[] records=new ORID[createsResult.total];
  executeOperation(databaseIdentifier,createsResult,settings.concurrencyLevel,settings.operationsPerTransaction,new OCallable<Void,OBaseWorkLoadContext>(){
    @Override public Void call(    final OBaseWorkLoadContext context){
      final ODocument doc=createOperation(context.currentIdx);
      records[context.currentIdx]=doc.getIdentity();
      createsResult.current.incrementAndGet();
      return null;
    }
  }
);
  if (records.length != createsResult.total)   throw new RuntimeException("Error on creating records: found " + records.length + " but expected "+ createsResult.total);
  executeOperation(databaseIdentifier,readsResult,settings.concurrencyLevel,settings.operationsPerTransaction,new OCallable<Void,OBaseWorkLoadContext>(){
    @Override public Void call(    final OBaseWorkLoadContext context){
      readOperation(((OWorkLoadContext)context).getDb(),context.currentIdx);
      readsResult.current.incrementAndGet();
      return null;
    }
  }
);
  executeOperation(databaseIdentifier,updatesResult,settings.concurrencyLevel,settings.operationsPerTransaction,new OCallable<Void,OBaseWorkLoadContext>(){
    @Override public Void call(    final OBaseWorkLoadContext context){
      updateOperation(((OWorkLoadContext)context).getDb(),records[context.currentIdx]);
      updatesResult.current.incrementAndGet();
      return null;
    }
  }
);
  executeOperation(databaseIdentifier,deletesResult,settings.concurrencyLevel,settings.operationsPerTransaction,new OCallable<Void,OBaseWorkLoadContext>(){
    @Override public Void call(    final OBaseWorkLoadContext context){
      deleteOperation(((OWorkLoadContext)context).getDb(),records[context.currentIdx]);
      records[context.currentIdx]=null;
      deletesResult.current.incrementAndGet();
      return null;
    }
  }
);
}
