{
  Collection<OIdentifiable> container=(Collection<OIdentifiable>)value;
  for (  OIdentifiable oIdentifiable : container) {
    Document doc=new Document();
    doc.add(OLuceneIndexType.createField(RID,oIdentifiable.getIdentity().toString(),Field.Store.YES,Field.Index.NOT_ANALYZED_NO_NORMS));
    int i=0;
    if (index.isAutomatic()) {
      for (      String f : index.getFields()) {
        Object val=null;
        if (key instanceof OCompositeKey) {
          val=((OCompositeKey)key).getKeys().get(i);
          i++;
        }
 else {
          val=key;
        }
        if (val != null) {
          if (facetManager.supportsFacets() && facetManager.isFacetField(f)) {
            doc.add(facetManager.buildFacetField(f,val));
          }
 else {
            if (isToStore(f).equals(Field.Store.YES)) {
              doc.add(OLuceneIndexType.createField(f + STORED,val,Field.Store.YES,Field.Index.NOT_ANALYZED_NO_NORMS));
            }
            doc.add(OLuceneIndexType.createField(f,val,Field.Store.NO,Field.Index.ANALYZED));
          }
        }
      }
    }
 else {
      Object val=null;
      if (key instanceof OCompositeKey) {
        List<Object> keys=((OCompositeKey)key).getKeys();
        int k=0;
        for (        Object o : keys) {
          doc.add(OLuceneIndexType.createField("k" + k,val,Field.Store.NO,Field.Index.ANALYZED));
        }
      }
 else       if (key instanceof Collection) {
        Collection<Object> keys=(Collection<Object>)key;
        int k=0;
        for (        Object o : keys) {
          doc.add(OLuceneIndexType.createField("k" + k,o,Field.Store.NO,Field.Index.ANALYZED));
        }
      }
 else {
        val=key;
        doc.add(OLuceneIndexType.createField("k0",val,Field.Store.NO,Field.Index.ANALYZED));
      }
    }
    if (facetManager.supportsFacets()) {
      try {
        addDocument(facetManager.buildDocument(doc));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
 else {
      addDocument(doc);
    }
    facetManager.commit();
    if (!index.isAutomatic()) {
      commit();
    }
  }
}
