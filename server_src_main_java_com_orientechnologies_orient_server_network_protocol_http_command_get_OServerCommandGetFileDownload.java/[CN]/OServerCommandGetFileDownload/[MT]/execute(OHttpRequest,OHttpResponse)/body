{
  ODatabaseDocumentTx db=getProfiledDatabaseInstance(iRequest);
  String[] urlParts=checkSyntax(iRequest.url,3,"Syntax error: fileDownload/<database>/rid/[/<fileName>][/<fileType>].");
  final String fileName=urlParts.length > 3 ? encodeResponseText(urlParts[3]) : "unknown";
  final String fileType=urlParts.length > 5 ? encodeResponseText(urlParts[4]) + '/' + encodeResponseText(urlParts[5]) : (urlParts.length > 4 ? encodeResponseText(urlParts[4]) : "");
  final String rid=urlParts[2];
  iRequest.data.commandInfo="Download";
  iRequest.data.commandDetail=rid;
  final ORecordAbstract<?> response;
  try {
    response=db.load(new ORecordId(rid));
    if (response != null) {
      if (response instanceof ORecordBytes) {
        sendORecordBinaryFileContent(iRequest,iResponse,OHttpUtils.STATUS_OK_CODE,OHttpUtils.STATUS_OK_DESCRIPTION,fileType,(ORecordBytes)response,fileName);
      }
 else       if (response instanceof ORecordSchemaAware) {
        for (        OProperty prop : ((ORecordSchemaAware<?>)response).getSchemaClass().properties()) {
          if (prop.getType().equals(OType.BINARY))           sendBinaryFieldFileContent(iRequest,iResponse,OHttpUtils.STATUS_OK_CODE,OHttpUtils.STATUS_OK_DESCRIPTION,fileType,(byte[])((ORecordSchemaAware<?>)response).field(prop.getName()),fileName);
        }
      }
 else {
        iResponse.sendTextContent(OHttpUtils.STATUS_INVALIDMETHOD_CODE,"Record requested is not a file nor has a readable schema",OHttpUtils.CONTENT_TEXT_PLAIN,"Record requested is not a file nor has a readable schema",null);
      }
    }
 else {
      iResponse.sendTextContent(OHttpUtils.STATUS_INVALIDMETHOD_CODE,"Record requested not exists",OHttpUtils.CONTENT_TEXT_PLAIN,"Record requestes not exists",null);
    }
  }
 catch (  Exception e) {
    iResponse.sendTextContent(OHttpUtils.STATUS_INTERNALERROR_CODE,OHttpUtils.STATUS_INTERNALERROR_DESCRIPTION,OHttpUtils.CONTENT_TEXT_PLAIN,e.getMessage(),null);
  }
 finally {
    if (db != null)     OSharedDocumentDatabase.release(db);
  }
  return false;
}
