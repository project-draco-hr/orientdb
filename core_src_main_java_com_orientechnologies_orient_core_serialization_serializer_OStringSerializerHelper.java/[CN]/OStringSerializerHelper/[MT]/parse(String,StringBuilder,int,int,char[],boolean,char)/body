{
  char stringBeginChar=' ';
  boolean encodeMode=false;
  int insideParenthesis=0;
  int insideCollection=0;
  int insideMap=0;
  int insideLinkPart=0;
  final int max=endIndex > -1 ? endIndex + 1 : iSource.length();
  final char[] buffer=new char[max - beginIndex];
  iSource.getChars(beginIndex,max,buffer,0);
  for (int i=0; i < buffer.length; ++i) {
    final char c=buffer[i];
    if (stringBeginChar == ' ') {
      if (c == COLLECTION_BEGIN)       insideCollection++;
 else       if (c == COLLECTION_END) {
        if (!isCharPresent(c,iRecordSeparator)) {
          if (insideCollection == 0)           throw new OSerializationException("Found invalid " + COLLECTION_END + " character. Assure to open and close correctly.");
          insideCollection--;
        }
      }
 else       if (c == PARENTHESIS_BEGIN) {
        insideParenthesis++;
      }
 else       if (c == PARENTHESIS_END) {
        if (!isCharPresent(c,iRecordSeparator)) {
          if (insideParenthesis == 0)           throw new OSerializationException("Found invalid " + PARENTHESIS_END + " character. Assure to open and close correctly.");
          insideParenthesis--;
        }
      }
 else       if (c == MAP_BEGIN) {
        insideMap++;
      }
 else       if (c == MAP_END) {
        if (!isCharPresent(c,iRecordSeparator)) {
          if (insideMap == 0)           throw new OSerializationException("Found invalid " + MAP_END + " character. Assure to open and close correctly.");
          insideMap--;
        }
      }
 else       if (c == LINK)       insideLinkPart=1;
 else       if (insideLinkPart == 1 && c == ORID.SEPARATOR)       insideLinkPart=2;
      if (insideLinkPart > 0 && c != '-' && !Character.isDigit(c) && c != ORID.SEPARATOR && c != LINK)       insideLinkPart=0;
      if ((c == '"' || iStringSeparatorExtended && c == '\'') && !encodeMode) {
        stringBeginChar=c;
      }
      if (insideParenthesis == 0 && insideCollection == 0 && insideMap == 0 && insideLinkPart == 0) {
        if (isCharPresent(c,iRecordSeparator)) {
          return beginIndex + i + 1;
        }
      }
    }
 else {
      if ((c == '"' || iStringSeparatorExtended && c == '\'') && !encodeMode) {
        if (stringBeginChar == c) {
          stringBeginChar=' ';
        }
      }
    }
    if (c == '\\' && !encodeMode)     encodeMode=true;
 else     encodeMode=false;
    if (iJumpChars.length > 0) {
      if (isCharPresent(c,iJumpChars))       continue;
    }
    iBuffer.append(c);
  }
  return -1;
}
