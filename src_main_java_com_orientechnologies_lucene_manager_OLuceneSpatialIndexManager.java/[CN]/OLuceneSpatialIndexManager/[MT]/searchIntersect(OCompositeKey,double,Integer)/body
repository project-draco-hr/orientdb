{
  double lat=((Double)OType.convert(((OCompositeKey)key).getKeys().get(0),Double.class)).doubleValue();
  double lng=((Double)OType.convert(((OCompositeKey)key).getKeys().get(1),Double.class)).doubleValue();
  Set<OIdentifiable> result=new HashSet<OIdentifiable>();
  SpatialOperation operation=SpatialOperation.Intersects;
  Point p=ctx.makePoint(lng,lat);
  SpatialArgs args=new SpatialArgs(operation,ctx.makeCircle(lng,lat,DistanceUtils.dist2Degrees(distance,DistanceUtils.EARTH_MEAN_RADIUS_KM)));
  Filter filter=strategy.makeFilter(args);
  IndexSearcher searcher=getSearcher();
  ValueSource valueSource=strategy.makeDistanceValueSource(p);
  Sort distSort=new Sort(valueSource.getSortField(false)).rewrite(searcher);
  int limitDoc=limit != null ? limit : Integer.MAX_VALUE;
  TopDocs topDocs=searcher.search(new MatchAllDocsQuery(),filter,limitDoc,distSort);
  ScoreDoc[] scoreDocs=topDocs.scoreDocs;
  for (  ScoreDoc s : scoreDocs) {
    Document doc=searcher.doc(s.doc);
    result.add(new ORecordId(doc.get(RID)));
  }
  return result;
}
