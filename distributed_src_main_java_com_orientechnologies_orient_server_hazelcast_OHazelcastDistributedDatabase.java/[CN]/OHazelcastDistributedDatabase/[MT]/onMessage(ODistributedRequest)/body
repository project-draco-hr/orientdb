{
  final OAbstractRemoteTask task=iRequest.getPayload();
  if (!online.get() && !(task instanceof ODeployDatabaseTask)) {
    ODistributedServerLog.debug(this,manager.getLocalNodeName(),iRequest.getSenderNodeName(),DIRECTION.OUT,"skip request because the node is not online yet, request=%s",iRequest);
    return;
  }
  OScenarioThreadLocal.INSTANCE.set(RUN_MODE.RUNNING_DISTRIBUTED);
  try {
    if (ODistributedServerLog.isDebugEnabled())     ODistributedServerLog.debug(this,manager.getLocalNodeName(),iRequest.getSenderNodeName(),DIRECTION.IN,"request %s",task);
    final Serializable responsePayload;
    try {
      ODatabaseRecordThreadLocal.INSTANCE.set(database);
      task.setNodeSource(iRequest.getSenderNodeName());
      responsePayload=manager.executeOnLocalNode(iRequest,database);
    }
  finally {
      database.getLevel1Cache().clear();
    }
    if (ODistributedServerLog.isDebugEnabled())     ODistributedServerLog.debug(this,manager.getLocalNodeName(),iRequest.getSenderNodeName(),DIRECTION.OUT,"sending back response %s to request %s",responsePayload,task);
    final OHazelcastDistributedResponse response=new OHazelcastDistributedResponse(iRequest.getId(),manager.getLocalNodeName(),iRequest.getSenderNodeName(),responsePayload);
    try {
      final IQueue<ODistributedResponse> queue=msgService.getQueue(OHazelcastDistributedMessageService.getResponseQueueName(iRequest.getSenderNodeName()));
      if (!queue.offer(response,OGlobalConfiguration.DISTRIBUTED_QUEUE_TIMEOUT.getValueAsLong(),TimeUnit.MILLISECONDS))       throw new ODistributedException("Timeout on dispatching response to the thread queue " + iRequest.getSenderNodeName());
    }
 catch (    Exception e) {
      throw new ODistributedException("Cannot dispatch response to the thread queue " + iRequest.getSenderNodeName(),e);
    }
  }
  finally {
    OScenarioThreadLocal.INSTANCE.set(RUN_MODE.DEFAULT);
  }
}
