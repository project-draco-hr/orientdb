{
  List<Integer> keys=new ArrayList<Integer>();
  keys.clear();
  final MersenneTwisterFast random=new MersenneTwisterFast();
  while (keys.size() < KEYS_COUNT) {
    int key=random.nextInt();
    if (localHashTable.get(key) == null) {
      localHashTable.put(key,key + "");
      keys.add(key);
      Assert.assertEquals(localHashTable.get(key),"" + key);
    }
  }
  Collections.sort(keys);
  OHashIndexBucket.Entry<Integer,String>[] entries=localHashTable.ceilingEntries(keys.get(10));
  int curPos=0;
  for (  int key : keys) {
    if (key < keys.get(10)) {
      continue;
    }
    int sKey=entries[curPos].key;
    Assert.assertEquals(key,sKey);
    curPos++;
    if (curPos >= entries.length) {
      entries=localHashTable.higherEntries(entries[entries.length - 1].key);
      curPos=0;
    }
  }
}
