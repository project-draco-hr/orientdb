{
  return new OLazyRecordIterator(new OLazyIterator<OIdentifiable>(){
{
      ORecordElement cur=null;
      if (sourceRecord != null)       cur=sourceRecord.getOwner();
      if (!(cur instanceof ODocument))       cur=sourceRecord;
      if (cur.getInternalStatus() == STATUS.MARSHALLING) {
        iter=new HashSet<Entry<OIdentifiable,Object>>(ORecordLazySet.super.map.entrySet()).iterator();
      }
 else       iter=ORecordLazySet.super.map.entrySet().iterator();
    }
    private Iterator<Entry<OIdentifiable,Object>> iter;
    private Entry<OIdentifiable,Object> last;
    @Override public boolean hasNext(){
      return iter.hasNext();
    }
    @Override public OIdentifiable next(){
      Entry<OIdentifiable,Object> entry=iter.next();
      last=entry;
      if (entry.getValue() != ENTRY_REMOVAL)       return (OIdentifiable)entry.getValue();
      return entry.getKey();
    }
    @Override public void remove(){
      iter.remove();
      if (last.getKey() instanceof ORecord)       ORecordInternal.removeIdentityChangeListener((ORecord)last.getKey(),ORecordLazySet.this);
    }
    @Override public OIdentifiable update(    OIdentifiable iValue){
      if (iValue != null)       map.put(iValue.getIdentity(),iValue.getRecord());
      return iValue;
    }
  }
,autoConvertToRecord && getOwner().getInternalStatus() != STATUS.MARSHALLING);
}
