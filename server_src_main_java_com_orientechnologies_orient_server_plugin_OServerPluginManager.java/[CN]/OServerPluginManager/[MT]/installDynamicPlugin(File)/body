{
  String pluginName=pluginFile.getName();
  final OServerPluginInfo currentPluginData;
  OLogManager.instance().info(this,"Installing dynamic plugin '%s'...",pluginName);
  try {
    final URLClassLoader pluginClassLoader=new URLClassLoader(new URL[]{pluginFile.toURI().toURL()},this.getClass().getClassLoader());
    final InputStream pluginConfigFile=pluginClassLoader.getResourceAsStream("plugin.json");
    if (pluginConfigFile == null || pluginConfigFile.available() == 0) {
      OLogManager.instance().error(this,"Error on loading plugin.json for dynamic plugin '%s'",pluginName);
      throw new IllegalArgumentException(String.format("Error on loading plugin.json for dynamic plugin '%s'",pluginName));
    }
    final ODocument properties=new ODocument().fromJSON(pluginConfigFile);
    if (properties.containsField("name"))     pluginName=properties.field("name");
    final String pluginClass=properties.field("javaClass");
    final OServerPlugin pluginInstance;
    final Map<String,Object> parameters;
    if (pluginClass != null) {
      parameters=properties.field("parameters");
      final List<OServerParameterConfiguration> params=new ArrayList<OServerParameterConfiguration>();
      for (      String paramName : parameters.keySet()) {
        params.add(new OServerParameterConfiguration(paramName,(String)parameters.get(paramName)));
      }
      final OServerParameterConfiguration[] pluginParams=params.toArray(new OServerParameterConfiguration[params.size()]);
      pluginInstance=startPluginClass(pluginClassLoader,pluginClass,pluginParams);
    }
 else {
      pluginInstance=null;
      parameters=null;
    }
    currentPluginData=new OServerPluginInfo(pluginName,(String)properties.field("version"),(String)properties.field("description"),(String)properties.field("web"),pluginInstance,parameters,pluginFile.lastModified(),pluginClassLoader);
    registerPlugin(currentPluginData);
    loadedPlugins.put(pluginFile.getName(),pluginName);
    registerStaticDirectory(currentPluginData);
  }
 catch (  Exception e) {
    OLogManager.instance().error(this,"Error on installing dynamic plugin '%s'",e,pluginName);
  }
}
