{
  try {
    dgram.setLength(recvBuffer.length);
    socket.receive(dgram);
    OLogManager.instance().debug(this,"Received multicast packet %d bytes from %s:%d",dgram.getLength(),dgram.getAddress(),dgram.getPort());
    byte[] buffer=new byte[dgram.getLength()];
    System.arraycopy(dgram.getData(),0,buffer,0,buffer.length);
    try {
      String packet=new String(OSecurityManager.instance().decrypt(clusterNode.securityAlgorithm,clusterNode.securityKey,buffer));
      String[] parts=packet.trim().split("\\|");
      int i=0;
      if (!parts[i].startsWith(OClusterDiscoveryManager.PACKET_HEADER))       return;
      if (Integer.parseInt(parts[++i]) != OClusterDiscoveryManager.PROTOCOL_VERSION) {
        OLogManager.instance().debug(this,"Received bad multicast packet with version %s not equals to the current %d",parts[i],OClusterDiscoveryManager.PROTOCOL_VERSION);
        return;
      }
      if (!parts[++i].equals(clusterNode.name)) {
        OLogManager.instance().debug(this,"Received bad multicast packet with cluster name %s not equals to the current %s",parts[i],clusterNode.name);
        return;
      }
      final String serverAddress=parts[++i];
      final int serverPort=Integer.parseInt(parts[++i]);
      if (serverAddress.equals(binaryNetworkListener.getInboundAddr().getHostName()) && serverPort == binaryNetworkListener.getInboundAddr().getPort())       return;
      clusterNode.receivedClusterPresence(serverAddress,serverPort);
    }
 catch (    Exception e) {
      OLogManager.instance().debug(this,"Received wrong packet from multicast IP",e);
    }
  }
 catch (  Throwable t) {
    OLogManager.instance().error(this,"Error on executing request",t);
  }
 finally {
  }
}
