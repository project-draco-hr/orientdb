{
  ODatabaseDocument db=new ODatabaseDocumentTx("memory:" + ODocumentValidationTest.class.getSimpleName());
  db.create();
  try {
    ODocument doc=new ODocument();
    OIdentifiable id=db.save(doc).getIdentity();
    OClass clazz=db.getMetadata().getSchema().createClass("Validation");
    clazz.createProperty("int",OType.INTEGER).setMin("11");
    clazz.createProperty("long",OType.LONG).setMin("11");
    clazz.createProperty("float",OType.FLOAT).setMin("11");
    clazz.createProperty("binary",OType.BINARY).setMin("11");
    clazz.createProperty("byte",OType.BYTE).setMin("11");
    Calendar cal=Calendar.getInstance();
    cal.add(Calendar.HOUR,1);
    SimpleDateFormat format=((ODatabaseDocumentTx)db).getStorage().getConfiguration().getDateFormatInstance();
    clazz.createProperty("date",OType.DATE).setMin(format.format(cal.getTime()));
    format=((ODatabaseDocumentTx)db).getStorage().getConfiguration().getDateTimeFormatInstance();
    clazz.createProperty("datetime",OType.DATETIME).setMin(format.format(cal.getTime()));
    clazz.createProperty("decimal",OType.DECIMAL).setMin("11");
    clazz.createProperty("double",OType.DOUBLE).setMin("11");
    clazz.createProperty("short",OType.SHORT).setMin("11");
    clazz.createProperty("string",OType.STRING).setMin("11");
    clazz.createProperty("embeddedList",OType.EMBEDDEDLIST).setMin("1");
    clazz.createProperty("embeddedSet",OType.EMBEDDEDSET).setMin("1");
    clazz.createProperty("embeddedMap",OType.EMBEDDEDMAP).setMin("1");
    clazz.createProperty("linkList",OType.LINKLIST).setMin("1");
    clazz.createProperty("linkSet",OType.LINKSET).setMin("1");
    clazz.createProperty("linkMap",OType.LINKMAP).setMin("1");
    ODocument d=new ODocument(clazz);
    d.field("int",12);
    d.field("long",12);
    d.field("float",12);
    d.field("binary",new byte[]{1,2,3,4,5,6,7,8,9,10,11,12});
    d.field("byte",12);
    cal=Calendar.getInstance();
    cal.add(Calendar.DAY_OF_MONTH,1);
    d.field("datetime",cal.getTime());
    d.field("decimal",12);
    d.field("double",12);
    d.field("short",12);
    d.field("string","yeahyeahyeah");
    d.field("link",id);
    d.field("embeddedList",Arrays.asList("a"));
    d.field("embeddedSet",new HashSet<String>(Arrays.asList("a")));
    Map<String,String> map=new HashMap<String,String>();
    map.put("some","value");
    d.field("embeddedMap",map);
    d.field("linkList",Arrays.asList(new ORecordId(40,50)));
    d.field("linkSet",new HashSet<ORecordId>(Arrays.asList(new ORecordId(40,50))));
    HashMap<String,ORecordId> map1=new HashMap<String,ORecordId>();
    map1.put("some",new ORecordId(40,50));
    d.field("linkMap",map1);
    d.validate();
    checkField(d,"int",10);
    checkField(d,"long",10);
    checkField(d,"float",10);
    checkField(d,"binary",new byte[]{1,2,3,4,5,6,7,8});
    checkField(d,"byte",10);
    checkField(d,"datetime",new Date());
    checkField(d,"decimal",10);
    checkField(d,"double",10);
    checkField(d,"short",10);
    checkField(d,"string","01234");
    checkField(d,"embeddedList",new ArrayList<String>());
    checkField(d,"embeddedSet",new HashSet<String>());
    checkField(d,"linkList",new ArrayList<ORecordId>());
    checkField(d,"linkSet",new HashSet<ORecordId>());
  }
  finally {
    db.drop();
  }
}
