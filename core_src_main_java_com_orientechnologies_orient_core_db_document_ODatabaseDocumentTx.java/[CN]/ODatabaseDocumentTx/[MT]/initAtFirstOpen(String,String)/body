{
  if (initialized)   return;
  ORecordSerializerFactory serializerFactory=ORecordSerializerFactory.instance();
  String serializeName=getStorage().getConfiguration().getRecordSerializer();
  if (serializeName == null)   serializeName=ORecordSerializerSchemaAware2CSV.NAME;
  serializer=serializerFactory.getFormat(serializeName);
  if (serializer == null)   throw new ODatabaseException("RecordSerializer with name '" + serializeName + "' not found ");
  if (getStorage().getConfiguration().getRecordSerializerVersion() > serializer.getMinSupportedVersion())   throw new ODatabaseException("Persistent record serializer version is not support by the current implementation");
  componentsFactory=getStorage().getComponentsFactory();
  final OSBTreeCollectionManager sbTreeCM=getStorage().getResource(OSBTreeCollectionManager.class.getSimpleName(),new Callable<OSBTreeCollectionManager>(){
    @Override public OSBTreeCollectionManager call() throws Exception {
      Class<? extends OSBTreeCollectionManager> managerClass=getStorage().getCollectionManagerClass();
      if (managerClass == null) {
        OLogManager.instance().warn(this,"Current implementation of storage does not support sbtree collections");
        return null;
      }
 else {
        return managerClass.newInstance();
      }
    }
  }
);
  sbTreeCollectionManager=sbTreeCM != null ? new OSBTreeCollectionManagerProxy(this,sbTreeCM) : null;
  localCache.startup();
  metadata=new OMetadataDefault();
  metadata.load();
  recordFormat=DEF_RECORD_FORMAT;
  if (!(getStorage() instanceof OStorageProxy)) {
    if (metadata.getIndexManager().autoRecreateIndexesAfterCrash()) {
      metadata.getIndexManager().recreateIndexes();
      setCurrentDatabaseinThreadLocal();
      user=null;
    }
    installHooks();
    registerHook(new OSecurityTrackerHook(metadata.getSecurity()),ORecordHook.HOOK_POSITION.LAST);
    user=null;
  }
 else   user=new OImmutableUser(-1,new OUser(iUserName,OUser.encryptPassword(iUserPassword)).addRole(new ORole("passthrough",null,ORole.ALLOW_MODES.ALLOW_ALL_BUT)));
  if (!metadata.getSchema().existsClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME))   metadata.getSchema().createClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME);
  initialized=true;
}
