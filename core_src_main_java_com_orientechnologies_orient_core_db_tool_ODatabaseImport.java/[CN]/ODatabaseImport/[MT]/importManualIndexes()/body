{
  listener.onMessage("\nImporting manual index entries...");
  ODocument doc=new ODocument();
  database.getMetadata().getIndexManager().reload();
  int n=0;
  do {
    jsonReader.readNext(OJSONReader.BEGIN_OBJECT);
    jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);
    final String indexName=jsonReader.readString(OJSONReader.NEXT_IN_ARRAY);
    if (indexName == null || indexName.length() == 0)     return;
    listener.onMessage("\n- Index '" + indexName + "'...");
    final OIndex<?> index=database.getMetadata().getIndexManager().getIndex(indexName);
    long tot=0;
    jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);
    do {
      final String value=jsonReader.readString(OJSONReader.NEXT_IN_ARRAY).trim();
      if (!value.isEmpty()) {
        doc=(ODocument)ORecordSerializerJSON.INSTANCE.fromString(value,doc,null);
        doc.setLazyLoad(false);
        final OIdentifiable oldRid=doc.<OIdentifiable>field("rid");
        if (!doc.<Boolean>field("binary")) {
          final OIdentifiable newRid=exportImportHashTable.get(oldRid);
          index.put(doc.field("key"),newRid != null ? newRid.getIdentity() : oldRid.getIdentity());
        }
 else {
          ORuntimeKeyIndexDefinition<?> runtimeKeyIndexDefinition=(ORuntimeKeyIndexDefinition<?>)index.getDefinition();
          OBinarySerializer<?> binarySerializer=runtimeKeyIndexDefinition.getSerializer();
          final ORID newRid=exportImportHashTable.get(doc.<OIdentifiable>field("rid")).getIdentity();
          index.put(binarySerializer.deserialize(doc.<byte[]>field("key"),0),newRid != null ? newRid : oldRid);
        }
        tot++;
      }
    }
 while (jsonReader.lastChar() == ',');
    if (index != null) {
      listener.onMessage("OK (" + tot + " entries)");
      n++;
    }
 else     listener.onMessage("ERR, the index wasn't found in configuration");
    jsonReader.readNext(OJSONReader.END_OBJECT);
    jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
  }
 while (jsonReader.lastChar() == ',');
  listener.onMessage("\nDone. Imported " + n + " indexes.");
  jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);
}
