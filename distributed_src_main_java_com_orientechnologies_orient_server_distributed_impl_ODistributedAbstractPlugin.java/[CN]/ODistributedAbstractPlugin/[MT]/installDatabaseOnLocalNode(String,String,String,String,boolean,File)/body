{
  ODistributedServerLog.info(this,nodeName,iNode,DIRECTION.IN,"Installing database '%s' to: %s...",databaseName,dbPath);
  try {
    final File f=new File(iDatabaseCompressedFile);
    final File fCompleted=new File(iDatabaseCompressedFile + ".completed");
    new File(dbPath).mkdirs();
    final ODatabaseDocumentTx db=new ODatabaseDocumentTx("plocal:" + dbPath);
    final FileInputStream in=new FileInputStream(f){
      @Override public int read() throws IOException {
        while (true) {
          final int read=super.read();
          if (read > -1)           return read;
          if (fCompleted.exists())           return 0;
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException e) {
          }
        }
      }
      @Override public int read(      final byte[] b,      final int off,      final int len) throws IOException {
        while (true) {
          final int read=super.read(b,off,len);
          if (read > 0)           return read;
          if (fCompleted.exists())           return 0;
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException e) {
          }
        }
      }
      @Override public int available() throws IOException {
        while (true) {
          final int avail=super.available();
          if (avail > 0)           return avail;
          if (fCompleted.exists())           return 0;
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException e) {
          }
        }
      }
    }
;
    try {
      final ODistributedAbstractPlugin me=this;
      executeInDistributedDatabaseLock(databaseName,0,new OCallable<Void,ODistributedConfiguration>(){
        @Override public Void call(        final ODistributedConfiguration cfg){
          try {
            if (delta) {
              new OIncrementalServerSync().importDelta(serverInstance,db,in,iNode);
            }
 else {
              db.restore(in,null,new Callable<Object>(){
                @Override public Object call() throws Exception {
                  if (uniqueClustersBackupDirectory != null && uniqueClustersBackupDirectory.exists()) {
                    for (                    File f : uniqueClustersBackupDirectory.listFiles()) {
                      final File oldFile=new File(dbPath + "/" + f.getName());
                      if (oldFile.exists())                       oldFile.delete();
                      if (!f.renameTo(oldFile))                       throw new ODistributedException("Cannot restore exclusive cluster file '" + f.getAbsolutePath() + "' into "+ oldFile.getAbsolutePath());
                    }
                    uniqueClustersBackupDirectory.delete();
                  }
                  return null;
                }
              }
,ODistributedServerLog.isDebugEnabled() ? me : null);
            }
            return null;
          }
 catch (          IOException e) {
            throw OException.wrapException(new OIOException("Error on distributed sync of database"),e);
          }
        }
      }
);
    }
  finally {
      in.close();
    }
    ODistributedServerLog.info(this,nodeName,null,DIRECTION.NONE,"Installed database '%s' (LSN=%s)",databaseName,((OAbstractPaginatedStorage)db.getStorage().getUnderlying()).getLSN());
    return db;
  }
 catch (  IOException e) {
    ODistributedServerLog.warn(this,nodeName,null,DIRECTION.IN,"Error on copying database '%s' on local server",e,databaseName);
  }
  return null;
}
