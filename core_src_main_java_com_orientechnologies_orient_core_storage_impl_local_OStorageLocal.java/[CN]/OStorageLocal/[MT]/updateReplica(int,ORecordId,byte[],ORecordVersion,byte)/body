{
  if (rid.isNew())   throw new OStorageException("Passed record with id " + rid + " is new and can not be treated as replica.");
  checkOpeness();
  final OCluster cluster=getClusterById(rid.clusterId);
  final ODataLocal dataSegment=getDataSegmentById(dataSegmentId);
  modificationLock.requestModificationLock();
  try {
    lock.acquireExclusiveLock();
    try {
      lockManager.acquireLock(Thread.currentThread(),rid,LOCK.EXCLUSIVE);
      try {
        OPhysicalPosition ppos=cluster.getPhysicalPosition(new OPhysicalPosition(rid.clusterPosition));
        if (ppos == null) {
          if (!cluster.isHashBased())           throw new OStorageException("Cluster with LH support is required.");
          ppos=new OPhysicalPosition(rid.clusterPosition,recordVersion);
          ppos.recordType=recordType;
          ppos.dataSegmentId=dataSegment.getId();
          if (!recordVersion.isTombstone()) {
            ppos.dataSegmentPos=dataSegment.addRecord(rid,content);
          }
          cluster.addPhysicalPosition(ppos);
          return true;
        }
 else {
          if (ppos.recordType != recordType)           throw new OStorageException("Record types of provided and stored replicas are different " + recordType + ":"+ ppos.recordType+ ".");
          if (ppos.recordVersion.compareTo(recordVersion) < 0) {
            cluster.updateVersion(ppos.clusterPosition,recordVersion);
            if (!recordVersion.isTombstone() && !ppos.recordVersion.isTombstone()) {
              ppos.dataSegmentPos=dataSegment.setRecord(ppos.dataSegmentPos,rid,content);
              cluster.updateDataSegmentPosition(ppos.clusterPosition,dataSegmentId,ppos.dataSegmentPos);
            }
 else             if (!recordVersion.isTombstone() && ppos.recordVersion.isTombstone()) {
              ppos.dataSegmentPos=dataSegment.addRecord(rid,content);
              cluster.updateDataSegmentPosition(ppos.clusterPosition,dataSegmentId,ppos.dataSegmentPos);
            }
 else             if (recordVersion.isTombstone() && !ppos.recordVersion.isTombstone()) {
              dataSegment.deleteRecord(ppos.dataSegmentPos);
            }
            return true;
          }
        }
      }
  finally {
        lockManager.releaseLock(Thread.currentThread(),rid,LOCK.EXCLUSIVE);
      }
    }
  finally {
      lock.releaseExclusiveLock();
    }
  }
  finally {
    modificationLock.releaseModificationLock();
  }
  return false;
}
