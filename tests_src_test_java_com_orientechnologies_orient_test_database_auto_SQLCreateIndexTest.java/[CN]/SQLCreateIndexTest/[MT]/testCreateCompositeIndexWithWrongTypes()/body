{
  final String query=new StringBuilder("CREATE INDEX sqlCreateIndexCompositeIndex3 ON sqlCreateIndexTestClass (prop1, prop2) UNIQUE ").append(EXPECTED_PROP1_TYPE).append(", ").append(EXPECTED_PROP1_TYPE).toString();
  try {
    database.command(new OCommandSQL(query)).execute();
    Assert.fail();
  }
 catch (  OResponseProcessingException e) {
    Assert.assertTrue(e.getCause() instanceof OCommandExecutionException);
    OCommandExecutionException exception=(OCommandExecutionException)e.getCause();
    Assert.assertTrue(exception.getMessage().contains("Error on execution of command: sql.CREATE INDEX sqlCreateIndexCompositeIndex3 ON"));
    if (exception.getCause() instanceof OCommandExecutionException)     Assert.assertEquals(exception.getCause().getCause().getClass(),IllegalArgumentException.class);
 else     Assert.assertEquals(exception.getCause().getClass(),IllegalArgumentException.class);
  }
catch (  OCommandExecutionException e) {
    Assert.assertTrue(e.getMessage().contains("Error on execution of command: sql.CREATE INDEX sqlCreateIndexCompositeIndex3 ON"));
    if (e.getCause() instanceof OCommandExecutionException)     Assert.assertEquals(e.getCause().getCause().getClass(),IllegalArgumentException.class);
 else     Assert.assertEquals(e.getCause().getClass(),IllegalArgumentException.class);
  }
  final OIndex<?> index=database.getMetadata().getSchema().getClass("sqlCreateIndexTestClass").getClassIndex("sqlCreateIndexCompositeIndex3");
  Assert.assertNull(index,"Index created while wrong query was executed");
}
