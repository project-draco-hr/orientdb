{
  nameIdMap=new ConcurrentHashMap<String,Integer>();
  long localFileCounter=-1;
  nameIdMapHolder.seek(0);
  NameFileIdEntry nameFileIdEntry;
  while ((nameFileIdEntry=readNextNameIdEntry()) != null) {
    final long absFileId=Math.abs(nameFileIdEntry.fileId);
    if (localFileCounter < absFileId)     localFileCounter=absFileId;
    nameIdMap.put(nameFileIdEntry.name,nameFileIdEntry.fileId);
  }
  if (localFileCounter > 0)   fileCounter=(int)localFileCounter;
  for (  Map.Entry<String,Integer> nameIdEntry : nameIdMap.entrySet()) {
    if (nameIdEntry.getValue() >= 0) {
      final long externalId=composeFileId(id,nameIdEntry.getValue());
      if (files.get(externalId) == null) {
        OFileClassic fileClassic=createFileInstance(nameIdEntry.getKey());
        if (fileClassic.exists()) {
          fileClassic.open();
          files.add(externalId,fileClassic);
        }
 else {
          final Integer fileId=nameIdMap.get(nameIdEntry.getKey());
          if (fileId != null && fileId > 0) {
            nameIdMap.put(nameIdEntry.getKey(),-fileId);
          }
        }
      }
    }
  }
}
