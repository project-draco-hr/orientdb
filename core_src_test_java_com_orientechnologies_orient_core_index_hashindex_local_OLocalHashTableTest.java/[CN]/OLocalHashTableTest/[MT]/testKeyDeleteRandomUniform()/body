{
  final Set<Integer> keys=new HashSet<Integer>();
  long ms=System.currentTimeMillis();
  System.out.println("testKeyDeleteRandomUniform : " + ms);
  final MersenneTwisterFast random=new MersenneTwisterFast(ms);
  while (keys.size() < KEYS_COUNT) {
    int key=random.nextInt();
    localHashTable.put(key,key + "");
    keys.add(key);
    Assert.assertEquals(localHashTable.get(key),key + "");
  }
  for (  int key : keys) {
    if (key % 3 == 0)     localHashTable.remove(key);
  }
  for (  int key : keys) {
    if (key % 3 == 0) {
      Assert.assertNull(localHashTable.get(key));
    }
 else {
      Assert.assertEquals(localHashTable.get(key),key + "");
    }
  }
}
