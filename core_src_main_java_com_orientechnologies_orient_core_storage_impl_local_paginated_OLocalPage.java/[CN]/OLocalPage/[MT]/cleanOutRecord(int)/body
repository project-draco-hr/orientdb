{
  int entryIndexPosition=PAGE_INDEXES_OFFSET + OIntegerSerializer.INT_SIZE * position;
  int entryPointer=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + entryIndexPosition);
  int entryFlag=entryPointer >>> 16;
  int entryPosition=entryPointer & POSITION_MASK;
  if (entryFlag == CLEANED_OUT_FLAG)   return;
  int freeListHeader=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + FREELIST_HEADER);
  if (freeListHeader <= 0)   OIntegerSerializer.INSTANCE.serializeInDirectMemory(CLEANED_OUT_FLAG << 16,directMemory,pagePointer + entryIndexPosition);
 else   OIntegerSerializer.INSTANCE.serializeInDirectMemory((CLEANED_OUT_FLAG << 16) | freeListHeader,directMemory,pagePointer + entryIndexPosition);
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(position + 1,directMemory,pagePointer + FREELIST_HEADER);
  int entrySize=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + entryPosition);
  int freePosition=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + FREE_POSITION_OFFSET);
  if (entryPosition > freePosition)   directMemory.copyData(pagePointer + freePosition,pagePointer + freePosition + entrySize,entryPosition - freePosition);
  int indexesLength=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + PAGE_INDEXES_LENGTH_OFFSET);
  for (int i=0; i < indexesLength; i++) {
    int currentEntryIndexPosition=PAGE_INDEXES_OFFSET + OIntegerSerializer.INT_SIZE * i;
    int currentEntryPointer=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + currentEntryIndexPosition);
    int currentEntryFlag=currentEntryPointer >>> 16;
    int currentEntryPosition=currentEntryPointer & POSITION_MASK;
    if (currentEntryPosition < entryPosition && (currentEntryFlag == 0 || currentEntryFlag == MARKED_AS_DELETED_FLAG)) {
      currentEntryPosition+=entrySize;
      OIntegerSerializer.INSTANCE.serializeInDirectMemory(currentEntryPosition | currentEntryFlag << 16,directMemory,pagePointer + currentEntryIndexPosition);
    }
  }
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(getRecordsCount() - 1,directMemory,pagePointer + RECORDS_COUNT_OFFSET);
  if (entryFlag == 0)   OIntegerSerializer.INSTANCE.serializeInDirectMemory(getFreeSpace() + entrySize,directMemory,pagePointer + FREE_SPACE_COUNTER_OFFSET);
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(freePosition + entrySize,directMemory,pagePointer + FREE_POSITION_OFFSET);
}
