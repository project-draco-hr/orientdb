{
  long seed=System.currentTimeMillis();
  System.out.println("testUpdateValue seed : " + seed);
  TreeSet<Long> keys=new TreeSet<Long>();
  Random random=new Random(seed);
  while (keys.size() < 2 * OSBTreeBonsaiBucket.MAX_BUCKET_SIZE_BYTES / OLongSerializer.LONG_SIZE) {
    keys.add(random.nextLong());
  }
  ODirectMemoryPointer pointer=ODirectMemoryPointerFactory.instance().createPointer(ODurablePage.MAX_PAGE_SIZE_BYTES);
  OCachePointer cachePointer=new OCachePointer(pointer,new OLogSequenceNumber(0,0),0,0);
  cachePointer.incrementReferrer();
  OCacheEntry cacheEntry=new OCacheEntry(0,0,cachePointer,false);
  OSBTreeBonsaiBucket<Long,OIdentifiable> treeBucket=new OSBTreeBonsaiBucket<Long,OIdentifiable>(cacheEntry,0,true,OLongSerializer.INSTANCE,OLinkSerializer.INSTANCE,null);
  Map<Long,Integer> keyIndexMap=new HashMap<Long,Integer>();
  int index=0;
  for (  Long key : keys) {
    if (!treeBucket.addEntry(index,new OSBTreeBonsaiBucket.SBTreeEntry<Long,OIdentifiable>(OBonsaiBucketPointer.NULL,OBonsaiBucketPointer.NULL,key,new ORecordId(index,index)),true))     break;
    keyIndexMap.put(key,index);
    index++;
  }
  Assert.assertEquals(keyIndexMap.size(),treeBucket.size());
  for (int i=0; i < treeBucket.size(); i++)   treeBucket.updateValue(i,new ORecordId(i + 5,i + 5));
  for (  Map.Entry<Long,Integer> keyIndexEntry : keyIndexMap.entrySet()) {
    OSBTreeBonsaiBucket.SBTreeEntry<Long,OIdentifiable> entry=treeBucket.getEntry(keyIndexEntry.getValue());
    Assert.assertEquals(entry,new OSBTreeBonsaiBucket.SBTreeEntry<Long,OIdentifiable>(OBonsaiBucketPointer.NULL,OBonsaiBucketPointer.NULL,keyIndexEntry.getKey(),new ORecordId(keyIndexEntry.getValue() + 5,keyIndexEntry.getValue() + 5)));
    Assert.assertEquals(keyIndexEntry.getKey(),treeBucket.getKey(keyIndexEntry.getValue()));
  }
  cachePointer.decrementReferrer();
}
