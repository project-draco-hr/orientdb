{
  checkForRebuild();
  if (document == null)   return;
  acquireExclusiveLock();
  try {
    indexEngine.startTransaction();
    final Boolean clearAll=document.field("clear");
    if (clearAll != null && clearAll)     clear();
    final Collection<ODocument> entries=document.field("entries");
    for (    final ODocument entry : entries) {
      final String serializedKey=OStringSerializerHelper.decode((String)entry.field("k"));
      final Object key;
      try {
        if (serializedKey.equals("*"))         key="*";
 else {
          final ODocument keyContainer=new ODocument();
          keyContainer.setLazyLoad(false);
          keyContainer.fromString(serializedKey);
          final Object storedKey=keyContainer.field("key");
          if (storedKey instanceof List)           key=new OCompositeKey((List<? extends Comparable<?>>)storedKey);
 else           if (Boolean.TRUE.equals(keyContainer.field("binary"))) {
            key=OStreamSerializerAnyStreamable.INSTANCE.fromStream((byte[])storedKey);
          }
 else           key=storedKey;
        }
      }
 catch (      IOException ioe) {
        throw new OTransactionException("Error during index changes deserialization. ",ioe);
      }
      final List<ODocument> operations=(List<ODocument>)entry.field("ops");
      if (operations != null) {
        for (        final ODocument op : operations) {
          final int operation=(Integer)op.rawField("o");
          final OIdentifiable value=op.field("v",OType.LINK);
          if (operation == OPERATION.PUT.ordinal())           put(key,value);
 else           if (operation == OPERATION.REMOVE.ordinal()) {
            if (key.equals("*"))             remove(value);
 else             if (value == null)             remove(key);
 else             remove(key,value);
          }
        }
      }
    }
  }
  finally {
    indexEngine.stopTransaction();
    releaseExclusiveLock();
  }
}
