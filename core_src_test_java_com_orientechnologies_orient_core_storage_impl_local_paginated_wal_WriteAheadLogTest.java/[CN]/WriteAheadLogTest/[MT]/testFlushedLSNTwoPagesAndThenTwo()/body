{
  OWALRecord walRecord=null;
  for (int i=0; i < 2; i++) {
    walRecord=new TestRecord(ONE_KB,false);
    writeAheadLog.log(walRecord);
    walRecord=new TestRecord(ONE_KB,false);
    writeAheadLog.log(walRecord);
    walRecord=new TestRecord(OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET - 2048,false);
    writeAheadLog.log(walRecord);
  }
  Assert.assertNull(writeAheadLog.getFlushedLSN());
  writeAheadLog.flush();
  OLogSequenceNumber end=null;
  for (int i=0; i < 2; i++) {
    walRecord=new TestRecord(ONE_KB,false);
    writeAheadLog.log(walRecord);
    walRecord=new TestRecord(ONE_KB,false);
    writeAheadLog.log(walRecord);
    walRecord=new TestRecord(OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET - 2048,false);
    end=writeAheadLog.log(walRecord);
  }
  writeAheadLog.flush();
  Assert.assertEquals(writeAheadLog.getFlushedLSN(),walRecord.getLsn());
  Assert.assertEquals(writeAheadLog.end(),end);
  writeAheadLog.close();
  writeAheadLog=createWAL();
  Assert.assertTrue(writeAheadLog.end().compareTo(end) >= 0);
  Assert.assertTrue(writeAheadLog.getFlushedLSN().compareTo(walRecord.getLsn()) >= 0);
  end=writeAheadLog.end();
  walRecord=new TestRecord(ONE_KB,false);
  OLogSequenceNumber lsn=writeAheadLog.log(walRecord);
  Assert.assertEquals(writeAheadLog.getFlushedLSN().compareTo(lsn),-1);
  Assert.assertEquals(end.compareTo(lsn),-1);
}
