{
  for (int i=0; i < 100; i++) {
    int upperBorder=keyValues.lastKey() + 5000;
    int fromKey;
    if (upperBorder > 0)     fromKey=random.nextInt(upperBorder);
 else     fromKey=random.nextInt(Integer.MAX_VALUE);
    if (random.nextBoolean()) {
      Integer includedKey=keyValues.ceilingKey(fromKey);
      if (includedKey != null)       fromKey=includedKey;
 else       fromKey=keyValues.floorKey(fromKey);
    }
    int maxValuesToFetch=10000;
    Collection<OIdentifiable> orids=sbTree.getValuesMajor(fromKey,keyInclusive,maxValuesToFetch);
    Set<OIdentifiable> result=new HashSet<OIdentifiable>(orids);
    Iterator<ORID> valuesIterator=keyValues.tailMap(fromKey,keyInclusive).values().iterator();
    int fetchedValues=0;
    while (valuesIterator.hasNext() && fetchedValues < maxValuesToFetch) {
      ORID value=valuesIterator.next();
      Assert.assertTrue(result.remove(value));
      fetchedValues++;
    }
    if (valuesIterator.hasNext())     Assert.assertEquals(fetchedValues,maxValuesToFetch);
    Assert.assertEquals(result.size(),0);
  }
}
