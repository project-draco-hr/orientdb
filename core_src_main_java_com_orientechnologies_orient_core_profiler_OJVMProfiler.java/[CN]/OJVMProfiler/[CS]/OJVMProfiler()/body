{
  registerHookValue(getSystemMetric("config.cpus"),new OProfilerHookValue(){
    @Override public Object getValue(){
      return metricProcessors;
    }
  }
);
  registerHookValue(getProcessMetric("runtime.availableMemory"),new OProfilerHookValue(){
    @Override public Object getValue(){
      return Runtime.getRuntime().freeMemory();
    }
  }
);
  registerHookValue(getProcessMetric("runtime.maxMemory"),new OProfilerHookValue(){
    @Override public Object getValue(){
      return Runtime.getRuntime().maxMemory();
    }
  }
);
  registerHookValue(getProcessMetric("runtime.totalMemory"),new OProfilerHookValue(){
    @Override public Object getValue(){
      return Runtime.getRuntime().totalMemory();
    }
  }
);
  final File[] roots=File.listRoots();
  for (  final File root : roots) {
    String volumeName=root.getAbsolutePath();
    int pos=volumeName.indexOf(":\\");
    if (pos > -1)     volumeName=volumeName.substring(0,pos);
    final String metricPrefix="system.disk." + volumeName;
    registerHookValue(metricPrefix + ".totalSpace",new OProfilerHookValue(){
      @Override public Object getValue(){
        return root.getTotalSpace();
      }
    }
);
    registerHookValue(metricPrefix + ".freeSpace",new OProfilerHookValue(){
      @Override public Object getValue(){
        return root.getFreeSpace();
      }
    }
);
    registerHookValue(metricPrefix + ".usableSpace",new OProfilerHookValue(){
      @Override public Object getValue(){
        return root.getUsableSpace();
      }
    }
);
  }
}
