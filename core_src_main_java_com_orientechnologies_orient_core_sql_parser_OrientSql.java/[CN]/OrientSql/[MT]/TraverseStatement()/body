{
  OTraverseStatement jjtn000=new OTraverseStatement(JJTTRAVERSESTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  try {
    jj_consume_token(TRAVERSE);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case VALUES:
case SET:
case ORDER:
case GROUP:
case OFFSET:
case THIS:
case RECORD_ATTRIBUTE:
case LBRACKET:
case STAR:
case IN:
case KEY:
case IDENTIFIER:
      TraverseProjectionItem();
    label_2:     while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
        ;
      break;
default :
    jj_la1[17]=jj_gen;
  break label_2;
}
jj_consume_token(COMMA);
TraverseProjectionItem();
}
break;
default :
jj_la1[18]=jj_gen;
;
}
jj_consume_token(FROM);
FromClause();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case WHILE:
jj_consume_token(WHILE);
WhereClause();
break;
default :
jj_la1[19]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIMIT:
Limit();
break;
default :
jj_la1[20]=jj_gen;
;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
}
