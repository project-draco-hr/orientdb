{
  int seed=0;
  while (seed < MAX_SEED) {
    OLinearHashingTable<OClusterPosition,OPhysicalPosition> linearHashingTable=new OLinearHashingTable<OClusterPosition,OPhysicalPosition>();
    HashSet<Long> longs=new HashSet<Long>();
    MersenneTwisterFast random=new MersenneTwisterFast(seed);
    for (int i=0; i < KEYS_COUNT; i++) {
      long key=random.nextLong(Long.MAX_VALUE);
      final OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionLong(key));
      if (linearHashingTable.put(position)) {
        longs.add(key);
      }
    }
    for (    long key : longs) {
      if (key % 3 == 0) {
        final OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionLong(key));
        Assert.assertEquals(position,linearHashingTable.delete(position.clusterPosition));
      }
    }
    for (    long key : longs) {
      if (key % 3 == 0) {
        OClusterPosition position=new OClusterPositionLong(key);
        Assert.assertFalse(linearHashingTable.contains(position));
      }
 else {
        OClusterPosition position=new OClusterPositionLong(key);
        Assert.assertTrue(linearHashingTable.contains(position));
      }
    }
    seed++;
  }
}
