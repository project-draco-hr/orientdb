{
  final OModifiableBoolean cacheHit=new OModifiableBoolean();
  final TreeMap<PageKey,OPair<Long,OCacheEntry>> filePositionMap=new TreeMap<PageKey,OPair<Long,OCacheEntry>>();
  final TreeMap<Long,OCacheEntry> queuePositionMap=new TreeMap<Long,OCacheEntry>();
  long position=0;
  int internalFileId=dataInputStream.readInt();
  while (internalFileId >= 0) {
    final long pageIndex=dataInputStream.readLong();
    try {
      final long fileId=writeCache.externalFileId(internalFileId);
      final OCacheEntry entry=new OCacheEntry(fileId,pageIndex,null,false);
      filePositionMap.put(new PageKey(fileId,pageIndex),new OPair<Long,OCacheEntry>(position,entry));
      queuePositionMap.put(position,entry);
      position++;
    }
  finally {
      internalFileId=dataInputStream.readInt();
    }
  }
  for (  final Map.Entry<PageKey,OPair<Long,OCacheEntry>> entry : filePositionMap.entrySet()) {
    final PageKey pageKey=entry.getKey();
    final OPair<Long,OCacheEntry> pair=entry.getValue();
    if (!writeCache.isOpen(pageKey.fileId))     writeCache.openFile(pageKey.fileId);
    final OCachePointer[] pointers=writeCache.load(pageKey.fileId,pageKey.pageIndex,1,false,cacheHit);
    if (pointers.length == 0) {
      queuePositionMap.remove(pair.key);
      continue;
    }
    final OCacheEntry cacheEntry=pair.value;
    cacheEntry.setCachePointer(pointers[0]);
  }
  for (  final OCacheEntry cacheEntry : queuePositionMap.values()) {
    final long fileId=cacheEntry.getFileId();
    Set<Long> pages=filePages.get(fileId);
    if (pages == null) {
      pages=new HashSet<Long>();
      Set<Long> op=filePages.putIfAbsent(fileId,pages);
      if (op != null) {
        pages=op;
      }
    }
    queue.putToMRU(cacheEntry);
    pages.add(cacheEntry.getPageIndex());
  }
}
