{
  ODatabaseDocumentTx db=new ODatabaseDocumentTx(url);
  db.open("admin","admin");
  final Map<ORID,ORID> createdRecords=new HashMap<ORID,ORID>();
  OIdentityChangedListener identityChangedListener=new OIdentityChangedListener(){
    @Override public void onIdentityChanged(    ORID oldRid,    ORID newRid,    ORecord<?> record){
      if (oldRid.isTemporary())       Assert.assertTrue(newRid.isPersistent());
 else       if (oldRid.isNew())       Assert.assertTrue(newRid.isTemporary());
 else       Assert.fail();
      if (oldRid.isTemporary())       createdRecords.put(oldRid,newRid);
    }
  }
;
  db.begin();
  ODocument kim=new ODocument("Profile").field("name","Kim").field("surname","Bauer");
  ODocument teri=new ODocument("Profile").field("name","Teri").field("surname","Bauer");
  ODocument jack=new ODocument("Profile").field("name","Jack").field("surname","Bauer");
  kim.addIdentityChangeListener(identityChangedListener);
  teri.addIdentityChangeListener(identityChangedListener);
  jack.addIdentityChangeListener(identityChangedListener);
  ((HashSet<ODocument>)jack.field("following",new HashSet<ODocument>()).field("following")).add(kim);
  ((HashSet<ODocument>)kim.field("following",new HashSet<ODocument>()).field("following")).add(teri);
  ((HashSet<ODocument>)teri.field("following",new HashSet<ODocument>()).field("following")).add(jack);
  jack.save();
  ORID kimTempRid=kim.getIdentity().copy();
  ORID teriTempRid=teri.getIdentity().copy();
  ORID jackTempRid=jack.getIdentity().copy();
  Assert.assertTrue(kim.getIdentity().isTemporary());
  Assert.assertTrue(teri.getIdentity().isTemporary());
  Assert.assertTrue(jack.getIdentity().isTemporary());
  final Map<ORID,ORID> commitCreatedRecords=db.commit();
  Assert.assertTrue(kim.getIdentity().isPersistent());
  Assert.assertTrue(teri.getIdentity().isPersistent());
  Assert.assertTrue(jack.getIdentity().isPersistent());
  Assert.assertEquals(createdRecords.size(),3);
  Assert.assertEquals(commitCreatedRecords.size(),3);
  Assert.assertEquals(createdRecords.get(kimTempRid),kim.getIdentity());
  Assert.assertEquals(createdRecords.get(teriTempRid),teri.getIdentity());
  Assert.assertEquals(createdRecords.get(jackTempRid),jack.getIdentity());
  System.out.println("Kim indexed: " + db.getMetadata().getSchema().getClass("Profile").getProperty("name").getIndex().get("Kim"));
  db.close();
  db.open("admin","admin");
  ODocument loadedJack=db.load(jack.getIdentity());
  Assert.assertEquals(loadedJack.field("name"),"Jack");
  Collection<ODocument> jackFollowings=loadedJack.field("following");
  Assert.assertNotNull(jackFollowings);
  Assert.assertEquals(jackFollowings.size(),1);
  ODocument loadedKim=jackFollowings.iterator().next();
  Assert.assertEquals(loadedKim.field("name"),"Kim");
  Collection<ODocument> kimFollowings=loadedKim.field("following");
  Assert.assertNotNull(kimFollowings);
  Assert.assertEquals(kimFollowings.size(),1);
  ODocument loadedTeri=kimFollowings.iterator().next();
  Assert.assertEquals(loadedTeri.field("name"),"Teri");
  Collection<ODocument> teriFollowings=loadedTeri.field("following");
  Assert.assertNotNull(teriFollowings);
  Assert.assertEquals(teriFollowings.size(),1);
  Assert.assertEquals(teriFollowings.iterator().next().field("name"),"Jack");
  db.close();
}
