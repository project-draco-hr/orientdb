{
  if (nodeLeftName == null)   return;
  ODistributedServerLog.debug(this,nodeName,nodeLeftName,DIRECTION.NONE,"Distributed server is '%s' unreachable",nodeLeftName);
  try {
    closeRemoteServer(nodeLeftName);
    for (    ODistributedLifecycleListener l : listeners)     try {
      l.onNodeLeft(nodeLeftName);
    }
 catch (    Exception e) {
    }
    if (messageService != null) {
      final int nodeLeftId=getNodeIdByName(nodeLeftName);
      for (      String dbName : messageService.getDatabases())       messageService.getDatabase(dbName).handleUnreachableNode(nodeLeftId);
    }
    final Member member=activeNodes.remove(nodeLeftName);
    if (member != null) {
      activeNodesNamesByUuid.remove(member.getUuid());
      activeNodesUuidByName.remove(nodeLeftName);
    }
    if (hazelcastInstance == null || !hazelcastInstance.getLifecycleService().isRunning())     return;
    final long autoRemoveOffLineServer=OGlobalConfiguration.DISTRIBUTED_AUTO_REMOVE_OFFLINE_SERVERS.getValueAsLong();
    if (autoRemoveOffLineServer == 0)     removeNodeFromConfiguration(nodeLeftName);
 else     if (autoRemoveOffLineServer > 0) {
      autoRemovalOfServers.put(nodeLeftName,System.currentTimeMillis());
      Orient.instance().scheduleTask(new TimerTask(){
        @Override public void run(){
          try {
            final Long lastTimeNodeLeft=autoRemovalOfServers.get(nodeLeftName);
            if (lastTimeNodeLeft == null)             return;
            if (System.currentTimeMillis() - lastTimeNodeLeft >= autoRemoveOffLineServer) {
              removeNodeFromConfiguration(nodeLeftName);
            }
          }
 catch (          Exception e) {
          }
        }
      }
,autoRemoveOffLineServer,0);
    }
    for (    String databaseName : getManagedDatabases()) {
      configurationMap.remove(CONFIG_DBSTATUS_PREFIX + nodeLeftName + "."+ databaseName);
    }
    ODistributedServerLog.warn(this,nodeLeftName,null,DIRECTION.NONE,"Node removed id=%s name=%s",member,nodeLeftName);
    if (nodeLeftName.startsWith("ext:")) {
      final List<String> registeredNodes=getRegisteredNodes();
      ODistributedServerLog.error(this,nodeName,null,DIRECTION.NONE,"Removed node id=%s name=%s has not being recognized. Remove the node manually (registeredNodes=%s)",member,nodeLeftName,registeredNodes);
    }
    for (    String databaseName : getManagedDatabases()) {
      final ODistributedConfiguration cfg=getDatabaseConfiguration(databaseName);
      final Set<String> clustersWithNotAvailableOwner=cfg.getClustersOwnedByServer(nodeLeftName);
      if (reassignClustersOwnership(nodeName,databaseName,clustersWithNotAvailableOwner,false))       updateCachedDatabaseConfiguration(databaseName,cfg.getDocument(),true,true);
    }
  }
  finally {
    if (messageService != null)     messageService.handleUnreachableNode(nodeLeftName);
  }
}
