{
  if (cachedClusterNodes.size() <= 1)   return;
synchronized (installDatabaseLock) {
    for (    Entry<String,Object> entry : getConfigurationMap().entrySet()) {
      if (entry.getKey().startsWith(CONFIG_DATABASE_PREFIX)) {
        final String databaseName=entry.getKey().substring(CONFIG_DATABASE_PREFIX.length());
        final ODocument config=(ODocument)entry.getValue();
        final Boolean autoDeploy=config.field("autoDeploy");
        if (autoDeploy != null && autoDeploy) {
          final Boolean hotAlignment=config.field("hotAlignment");
          final String dbPath=serverInstance.getDatabaseDirectory() + databaseName;
          final Set<String> configuredDatabases=serverInstance.getAvailableStorageNames().keySet();
          if (configuredDatabases.contains(databaseName)) {
            if (iStartup && hotAlignment != null && !hotAlignment) {
              ODistributedServerLog.warn(this,getLocalNodeName(),null,DIRECTION.NONE,"dropping local database %s in %s and get a fresh copy from a remote node...",databaseName,dbPath);
              Orient.instance().unregisterStorageByName(databaseName);
              OFileUtils.deleteRecursively(new File(dbPath));
            }
 else             continue;
          }
          final OHazelcastDistributedDatabase distrDatabase=messageService.registerDatabase(databaseName);
          distrDatabase.setWaitForTaskType(ODeployDatabaseTask.class);
          distrDatabase.configureDatabase(null,false,false);
          final Map<String,OBuffer> results=(Map<String,OBuffer>)sendRequest(databaseName,null,new ODeployDatabaseTask(),EXECUTION_MODE.RESPONSE);
          OBuffer result=null;
          for (          Entry<String,OBuffer> r : results.entrySet())           if (r.getValue().getBuffer() != null && r.getValue().getBuffer().length > 0) {
            result=r.getValue();
            ODistributedServerLog.warn(this,getLocalNodeName(),r.getKey(),DIRECTION.IN,"installing database %s in %s...",databaseName,dbPath);
            break;
          }
          if (result == null)           throw new ODistributedException("No response received from remote nodes for auto-deploy of database");
          new File(dbPath).mkdirs();
          final ODatabaseDocumentTx db=new ODatabaseDocumentTx("local:" + dbPath);
          final ByteArrayInputStream in=new ByteArrayInputStream(result.getBuffer());
          try {
            db.restore(in,null,null);
            in.close();
            db.close();
            Orient.instance().unregisterStorageByName(db.getName());
            ODistributedServerLog.warn(this,getLocalNodeName(),null,DIRECTION.NONE,"installed database %s in %s, setting it online...",databaseName,dbPath);
            distrDatabase.setOnline();
            ODistributedServerLog.warn(this,getLocalNodeName(),null,DIRECTION.NONE,"database %s is online",databaseName);
          }
 catch (          IOException e) {
            ODistributedServerLog.warn(this,getLocalNodeName(),null,DIRECTION.IN,"error on copying database '%s' on local server",e,databaseName);
          }
        }
      }
    }
  }
}
