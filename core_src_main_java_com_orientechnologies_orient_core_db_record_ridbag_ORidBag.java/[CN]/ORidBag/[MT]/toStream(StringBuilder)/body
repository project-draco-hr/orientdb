{
  final ORecordSerializationContext context=ORecordSerializationContext.getContext();
  if (context != null) {
    if (delegate.size() >= topThreshold && isEmbedded()) {
      ORidBagDelegate oldDelegate=delegate;
      delegate=new OSBTreeRidBag();
      boolean oldAutoConvert=oldDelegate.isAutoConvertToRecord();
      oldDelegate.setAutoConvertToRecord(false);
      for (      OIdentifiable identifiable : oldDelegate)       delegate.add(identifiable);
      delegate.setOwner(oldDelegate.getOwner());
      oldDelegate.setAutoConvertToRecord(oldAutoConvert);
      oldDelegate.requestDelete();
    }
 else     if (delegate.size() <= bottomThreshold && !isEmbedded()) {
      ORidBagDelegate oldDelegate=delegate;
      boolean oldAutoConvert=oldDelegate.isAutoConvertToRecord();
      oldDelegate.setAutoConvertToRecord(false);
      delegate=new OEmbeddedRidBag();
      for (      OIdentifiable identifiable : oldDelegate)       delegate.add(identifiable);
      delegate.setOwner(oldDelegate.getOwner());
      oldDelegate.setAutoConvertToRecord(oldAutoConvert);
      oldDelegate.requestDelete();
    }
  }
  final UUID oldUuid=uuid;
  final OSBTreeCollectionManager sbTreeCollectionManager=ODatabaseRecordThreadLocal.INSTANCE.get().getSbTreeCollectionManager();
  if (sbTreeCollectionManager != null)   uuid=sbTreeCollectionManager.listenForChanges(this);
 else   uuid=null;
  boolean hasUuid=uuid != null;
  final int serializedSize=OByteSerializer.BYTE_SIZE + delegate.getSerializedSize() + ((hasUuid) ? OUUIDSerializer.UUID_SIZE : 0);
  final byte[] stream=new byte[serializedSize];
  byte configByte=0;
  if (isEmbedded())   configByte|=1;
  if (hasUuid)   configByte|=2;
  stream[0]=configByte;
  int offset=1;
  if (hasUuid) {
    OUUIDSerializer.INSTANCE.serialize(uuid,stream,offset);
    offset+=OUUIDSerializer.UUID_SIZE;
  }
  delegate.serialize(stream,offset,oldUuid);
  output.append(OBase64Utils.encodeBytes(stream));
  return this;
}
