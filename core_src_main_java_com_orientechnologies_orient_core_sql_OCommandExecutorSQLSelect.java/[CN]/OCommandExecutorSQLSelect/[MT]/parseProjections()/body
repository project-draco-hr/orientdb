{
  int currentPos=0;
  final StringBuilder word=new StringBuilder();
  currentPos=OSQLHelper.nextWord(text,textUpperCase,currentPos,word,true);
  if (!word.toString().equals(KEYWORD_SELECT))   return -1;
  int fromPosition=textUpperCase.indexOf(KEYWORD_FROM_2FIND,currentPos);
  if (fromPosition == -1)   throw new OQueryParsingException("Missed " + KEYWORD_FROM,text,currentPos);
  Object projectionValue;
  final String projectionString=text.substring(currentPos,fromPosition).trim();
  if (projectionString.length() > 0 && !projectionString.equals("*")) {
    projections=new LinkedHashMap<String,Object>();
    final List<String> items=OStringSerializerHelper.smartSplit(projectionString,',');
    String fieldName;
    int pos;
    for (    String projection : items) {
      projection=projection.trim();
      if (projections == null)       throw new OCommandSQLParsingException("Projection not allowed with FLATTEN() operator");
      fieldName=null;
      pos=projection.toUpperCase().indexOf(KEYWORD_AS);
      if (pos > -1) {
        fieldName=projection.substring(pos + KEYWORD_AS.length()).trim();
        projection=projection.substring(0,pos).trim();
        if (projections.containsKey(fieldName))         throw new OCommandSQLParsingException("Field '" + fieldName + "' is duplicated in current SELECT, choose a different name");
      }
 else {
        final int pos1=projection.indexOf('.');
        final int pos2=projection.indexOf('(');
        pos=-1;
        if (pos1 > -1 && pos2 == -1)         pos=pos1;
 else         if (pos2 > -1 && pos1 == -1)         pos=pos2;
 else         if (pos1 > -1 && pos2 > -1)         pos=Math.min(pos1,pos2);
        fieldName=pos > -1 ? projection.substring(0,pos) : projection;
        fieldName=OSQLHelper.stringContent(fieldName);
        for (int fieldIndex=2; projections.containsKey(fieldName); ++fieldIndex) {
          fieldName+=fieldIndex;
        }
      }
      if (projection.toUpperCase().startsWith("FLATTEN(")) {
        List<String> pars=OStringSerializerHelper.getParameters(projection);
        if (pars.size() != 1)         throw new OCommandSQLParsingException("FLATTEN operator expects the field name as parameter. Example FLATTEN( out )");
        flattenTarget=OSQLHelper.parseValue(database,this,pars.get(0).trim());
        projections=null;
        if (!anyFunctionAggregates && flattenTarget instanceof OSQLFunctionRuntime && ((OSQLFunctionRuntime)flattenTarget).aggregateResults())         anyFunctionAggregates=true;
        continue;
      }
      projectionValue=OSQLHelper.parseValue(database,this,projection);
      projections.put(fieldName,projectionValue);
      if (!anyFunctionAggregates && projectionValue instanceof OSQLFunctionRuntime && ((OSQLFunctionRuntime)projectionValue).aggregateResults())       anyFunctionAggregates=true;
    }
  }
  currentPos=fromPosition + KEYWORD_FROM.length() + 1;
  return currentPos;
}
