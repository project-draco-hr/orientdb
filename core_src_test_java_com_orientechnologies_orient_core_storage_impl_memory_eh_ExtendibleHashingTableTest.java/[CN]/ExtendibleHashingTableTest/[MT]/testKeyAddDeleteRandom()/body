{
  OExtendibleHashingTable extendibleHashingTable;
  int seed=0;
  while (seed < MAX_SEED) {
    extendibleHashingTable=new OExtendibleHashingTable(3,4);
    List<Long> longs=getUniqueRandomValuesArray(seed,2 * KEYS_COUNT);
    for (int i=0; i < KEYS_COUNT; i++) {
      extendibleHashingTable.put(new OPhysicalPosition(new OClusterPositionLong(longs.get(i))));
    }
    for (int i=0; i < KEYS_COUNT; i++) {
      if (i % 3 == 0) {
        OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionLong(longs.get(i)));
        Assert.assertEquals(position,extendibleHashingTable.delete(position.clusterPosition));
      }
      if (i % 2 == 0) {
        OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionLong(longs.get(i + KEYS_COUNT)));
        Assert.assertTrue(extendibleHashingTable.put(position));
        Assert.assertTrue(extendibleHashingTable.contains(new OClusterPositionLong(longs.get(KEYS_COUNT + i))),"i = " + i);
      }
    }
    for (int i=0; i < KEYS_COUNT; i++) {
      if (i % 3 == 0) {
        OClusterPosition position=new OClusterPositionLong(longs.get(i));
        Assert.assertFalse(extendibleHashingTable.contains(position));
      }
 else {
        OClusterPosition position=new OClusterPositionLong(longs.get(i));
        Assert.assertTrue(extendibleHashingTable.contains(position));
      }
      if (i % 2 == 0) {
        OClusterPosition position=new OClusterPositionLong(longs.get(KEYS_COUNT + i));
        Assert.assertTrue(extendibleHashingTable.contains(position));
      }
    }
    seed++;
  }
}
