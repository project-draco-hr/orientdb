{
  OSelectStatement jjtn000=new OSelectStatement(JJTSELECTSTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  validationStats.add(0,new ValidationStats());
  try {
    jj_consume_token(SELECT);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case NULL:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case THIS:
case RECORD_ATTRIBUTE:
case INTEGER_LITERAL:
case FLOATING_POINT_LITERAL:
case CHARACTER_LITERAL:
case STRING_LITERAL:
case TRUE:
case FALSE:
case LPAREN:
case LBRACE:
case LBRACKET:
case HOOK:
case COLON:
case MINUS:
case STAR:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
case 198:
      jjtn000.projection=Projection();
    break;
default :
  jj_la1[19]=jj_gen;
;
}
jj_consume_token(FROM);
jjtn000.target=FromClause();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LET:
jjtn000.letClause=LetClause();
break;
default :
jj_la1[20]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case WHERE:
jj_consume_token(WHERE);
jjtn000.whereClause=WhereClause();
break;
default :
jj_la1[21]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case GROUP:
jjtn000.groupBy=GroupBy();
break;
default :
jj_la1[22]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ORDER:
jjtn000.orderBy=OrderBy();
break;
default :
jj_la1[23]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case UNWIND:
jjtn000.unwind=Unwind();
break;
default :
jj_la1[24]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIMIT:
case SKIP2:
case OFFSET:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SKIP2:
case OFFSET:
jjtn000.skip=Skip();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIMIT:
jjtn000.limit=Limit();
break;
default :
jj_la1[25]=jj_gen;
;
}
break;
case LIMIT:
jjtn000.limit=Limit();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SKIP2:
case OFFSET:
jjtn000.skip=Skip();
break;
default :
jj_la1[26]=jj_gen;
;
}
break;
default :
jj_la1[27]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[28]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case FETCHPLAN:
jjtn000.fetchPlan=FetchPlan();
break;
default :
jj_la1[29]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TIMEOUT:
jjtn000.timeout=Timeout();
break;
default :
jj_la1[30]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LOCK:
jj_consume_token(LOCK);
jj_consume_token(RECORD);
jjtn000.lockRecord=true;
break;
default :
jj_la1[31]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PARALLEL:
jj_consume_token(PARALLEL);
jjtn000.parallel=true;
break;
default :
jj_la1[32]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case NOCACHE:
jj_consume_token(NOCACHE);
jjtn000.noCache=true;
break;
default :
jj_la1[33]=jj_gen;
;
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
jjtn000.validate(validationStats.remove(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
