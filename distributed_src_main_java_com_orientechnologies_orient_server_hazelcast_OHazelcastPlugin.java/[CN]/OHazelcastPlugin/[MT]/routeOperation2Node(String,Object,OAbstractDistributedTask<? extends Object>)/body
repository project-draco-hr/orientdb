{
  final String dbName=iTask.getDatabaseName();
  String masterNodeId=getMasterNode(dbName,iClusterName,iKey);
  iTask.setNodeDestination(masterNodeId);
  if (!masterNodeId.equals(localNodeId) && isOfflineNode(masterNodeId)) {
    ODistributedServerLog.warn(this,getLocalNodeId(),masterNodeId,DIRECTION.OUT,"node is offline (status=%s). Waiting for completition...",getRemoteNodeStatus(masterNodeId));
    while (isOfflineNode(masterNodeId)) {
      try {
        Thread.sleep(200);
      }
 catch (      InterruptedException e) {
        Thread.interrupted();
      }
      final String newMasterNodeId=getMasterNode(dbName,iClusterName,iKey);
      if (!newMasterNodeId.equals(masterNodeId)) {
        ODistributedServerLog.warn(this,getLocalNodeId(),masterNodeId,DIRECTION.OUT,"node %s is the new owner of the requested key set",getRemoteNodeStatus(masterNodeId));
        masterNodeId=newMasterNodeId;
      }
    }
    ODistributedServerLog.warn(this,getLocalNodeId(),masterNodeId,DIRECTION.OUT,"node %s is aligned. Flushing pending operations...");
  }
  for (int retry=0; retry < SEND_RETRY_MAX; ++retry) {
    try {
      if (isLocalNodeMaster(iKey)) {
        return iTask.call();
      }
 else {
        ODistributedServerLog.info(this,getLocalNodeId(),masterNodeId,DIRECTION.OUT,"routing operation %s against db '%s' in %s mode...",iTask.getName().toUpperCase(),dbName,EXECUTION_MODE.SYNCHRONOUS);
        try {
          final Object remoteResult;
          if (iTask.getExecutionType() == EXEC_TYPE.BOTH || iTask.getExecutionType() == EXEC_TYPE.REMOTE_ONLY) {
            ODistributedServerLog.info(this,getLocalNodeId(),masterNodeId,DIRECTION.OUT,"execution operation %s against db '%s' remotely type=%s...",iTask.getName().toUpperCase(),dbName,iTask.getExecutionType());
            final DistributedTask<Object> task=new DistributedTask<Object>((Callable<Object>)iTask,iKey);
            remoteResult=executeOperation(task,EXECUTION_MODE.SYNCHRONOUS,null);
          }
 else           remoteResult=null;
          final Object localResult;
          if (iTask.getExecutionType() == EXEC_TYPE.BOTH || iTask.getExecutionType() == EXEC_TYPE.LOCAL_ONLY) {
            ODistributedServerLog.info(this,getLocalNodeId(),masterNodeId,DIRECTION.OUT,"execution operation %s against db '%s' locally type=%s...",iTask.getName().toUpperCase(),dbName,iTask.getExecutionType());
            localResult=iTask.call();
          }
 else           localResult=remoteResult;
          if (iTask.getExecutionType() == EXEC_TYPE.BOTH)           if (remoteResult != null && localResult != null)           if (!remoteResult.equals(localResult)) {
            ODistributedServerLog.warn(this,getLocalNodeId(),masterNodeId,DIRECTION.OUT,"detected conflict on %s in %s mode: remote {%s} != local {%s}",iTask.getName().toUpperCase(),EXECUTION_MODE.SYNCHRONOUS,dbName,remoteResult,localResult);
            iTask.handleConflict(masterNodeId,localResult,remoteResult);
          }
          return localResult;
        }
 catch (        MemberLeftException e) {
          ODistributedServerLog.warn(this,getLocalNodeId(),masterNodeId,DIRECTION.OUT,"error on execution of operation in %s mode, because node left. Re-route it in transparent way",e,EXECUTION_MODE.SYNCHRONOUS);
          return routeOperation2Node(iClusterName,iKey,iTask);
        }
catch (        ExecutionException e) {
          if (e.getCause() instanceof OServerOfflineException) {
            ODistributedServerLog.warn(this,getLocalNodeId(),masterNodeId,DIRECTION.OUT,"remote node is not online, retrying %d...",retry + 1);
            try {
              Thread.sleep(200 + (retry * 50));
            }
 catch (            InterruptedException ex) {
              Thread.interrupted();
            }
          }
 else {
            ODistributedServerLog.error(this,getLocalNodeId(),masterNodeId,DIRECTION.OUT,"error on execution of operation in %s mode",e,EXECUTION_MODE.SYNCHRONOUS);
            throw e;
          }
        }
      }
    }
 catch (    InterruptedException e) {
      Thread.interrupted();
    }
catch (    Exception e) {
      ODistributedServerLog.error(this,getLocalNodeId(),masterNodeId,DIRECTION.OUT,"error on execution of operation in %s mode",e,EXECUTION_MODE.SYNCHRONOUS);
      throw new ExecutionException("error on execution of operation in " + EXECUTION_MODE.SYNCHRONOUS + " mode against node "+ masterNodeId,e);
    }
  }
  return null;
}
