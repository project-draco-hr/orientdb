{
  checkForRebuild();
  if (operationDocument == null)   return;
  acquireExclusiveLock();
  try {
    indexEngine.startTransaction();
    final IndexTxSnapshot indexTxSnapshot=txSnapshot.get();
    final Boolean clearAll=operationDocument.field("clear");
    if (clearAll != null && clearAll) {
      indexTxSnapshot.clear=true;
      indexTxSnapshot.indexSnapshot.clear();
    }
    final Collection<ODocument> entries=operationDocument.field("entries");
    final Map<Object,Object> snapshot=indexTxSnapshot.indexSnapshot;
    for (    final ODocument entry : entries) {
      final String serializedKey=OStringSerializerHelper.decode((String)entry.field("k"));
      final Object key;
      try {
        final ODocument keyContainer=new ODocument();
        keyContainer.setLazyLoad(false);
        keyContainer.fromString(serializedKey);
        final Object storedKey=keyContainer.field("key");
        if (storedKey instanceof List)         key=new OCompositeKey((List<? extends Comparable<?>>)storedKey);
 else         if (Boolean.TRUE.equals(keyContainer.field("binary"))) {
          key=OStreamSerializerAnyStreamable.INSTANCE.fromStream((byte[])storedKey);
        }
 else         key=storedKey;
      }
 catch (      IOException ioe) {
        throw new OTransactionException("Error during index changes deserialization. ",ioe);
      }
      final List<ODocument> operations=entry.field("ops");
      if (operations != null) {
        for (        final ODocument op : operations) {
          final int operation=(Integer)op.rawField("o");
          final OIdentifiable value=op.field("v",OType.LINK);
          if (operation == OPERATION.PUT.ordinal())           putInSnapshot(key,value,snapshot);
 else           if (operation == OPERATION.REMOVE.ordinal()) {
            if (value == null)             removeFromSnapshot(key,snapshot);
 else {
              removeFromSnapshot(key,value,snapshot);
            }
          }
        }
      }
    }
  }
  finally {
    indexEngine.stopTransaction();
    releaseExclusiveLock();
  }
}
