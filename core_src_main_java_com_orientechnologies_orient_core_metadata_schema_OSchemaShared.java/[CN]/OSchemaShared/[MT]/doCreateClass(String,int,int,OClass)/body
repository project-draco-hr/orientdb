{
  OClass result;
  final ODatabaseDocumentInternal db=getDatabase();
  final OStorage storage=db.getStorage();
  StringBuilder cmd=null;
  getDatabase().checkSecurity(ORule.ResourceGeneric.SCHEMA,ORole.PERMISSION_CREATE);
  acquireSchemaWriteLock();
  try {
    final String key=className.toLowerCase();
    if (classes.containsKey(key) && retry == 0)     throw new OSchemaException("Class '" + className + "' already exists in current database");
    cmd=new StringBuilder("create class ");
    cmd.append(className);
    List<OClass> superClassesList=new ArrayList<OClass>();
    if (superClasses != null && superClasses.length > 0) {
      boolean first=true;
      for (      OClass superClass : superClasses) {
        if (superClass != null) {
          if (first)           cmd.append(" extends ");
 else           cmd.append(", ");
          cmd.append(superClass.getName());
          first=false;
          superClassesList.add(superClass);
        }
      }
    }
    if (clusters == 0)     cmd.append(" abstract");
 else {
      cmd.append(" clusters ");
      cmd.append(clusters);
    }
    if (isDistributedCommand()) {
      final int[] clusterIds=createClusters(className,clusters);
      createClassInternal(className,clusterIds,superClassesList);
      final OAutoshardedStorage autoshardedStorage=(OAutoshardedStorage)storage;
      OCommandSQL commandSQL=new OCommandSQL(cmd.toString());
      commandSQL.addExcludedNode(autoshardedStorage.getNodeId());
      final Object res=db.command(commandSQL).execute();
    }
 else     if (storage instanceof OStorageProxy) {
      db.command(new OCommandSQL(cmd.toString())).execute();
      reload();
    }
 else {
      final int[] clusterIds=createClusters(className,clusters);
      createClassInternal(className,clusterIds,superClassesList);
    }
    result=classes.get(className.toLowerCase());
    for (Iterator<ODatabaseLifecycleListener> it=Orient.instance().getDbLifecycleListeners(); it.hasNext(); )     it.next().onCreateClass(getDatabase(),result);
  }
 catch (  ClusterIdsAreEmptyException e) {
    throw OException.wrapException(new OSchemaException("Cannot create class '" + className + "'"),e);
  }
 finally {
    releaseSchemaWriteLock();
  }
  return result;
}
