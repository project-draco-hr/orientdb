{
  parserText=request.getText();
  ODatabaseDocumentInternal db=ODatabaseRecordThreadLocal.INSTANCE.get();
  final OFunction f=db.getMetadata().getFunctionLibrary().getFunction(parserText);
  db.checkSecurity(ORule.ResourceGeneric.FUNCTION,ORole.PERMISSION_READ,f.getName());
  final OScriptManager scriptManager=Orient.instance().getScriptManager();
  final OPartitionedObjectPool.PoolEntry<ScriptEngine> entry=scriptManager.acquireDatabaseEngine(db.getName(),f.getLanguage());
  final ScriptEngine scriptEngine=entry.object;
  try {
    final Bindings binding=scriptManager.bind(scriptEngine.getBindings(ScriptContext.ENGINE_SCOPE),(ODatabaseDocumentTx)db,iContext,iArgs);
    try {
      final Object result;
      if (scriptEngine instanceof Invocable) {
        final Invocable invocableEngine=(Invocable)scriptEngine;
        Object[] args=null;
        if (iArgs != null) {
          args=new Object[iArgs.size()];
          int i=0;
          for (          Entry<Object,Object> arg : iArgs.entrySet())           args[i++]=arg.getValue();
        }
 else {
          args=OCommonConst.EMPTY_OBJECT_ARRAY;
        }
        result=invocableEngine.invokeFunction(parserText,args);
      }
 else {
        final Object[] args=iArgs == null ? null : iArgs.values().toArray();
        result=scriptEngine.eval(scriptManager.getFunctionInvoke(f,args),binding);
      }
      return OCommandExecutorUtility.transformResult(result);
    }
 catch (    ScriptException e) {
      throw new OCommandScriptException("Error on execution of the script",request.getText(),e.getColumnNumber(),e);
    }
catch (    NoSuchMethodException e) {
      throw new OCommandScriptException("Error on execution of the script",request.getText(),0,e);
    }
catch (    OCommandScriptException e) {
      throw e;
    }
 finally {
      scriptManager.unbind(binding,iContext,iArgs);
    }
  }
  finally {
    scriptManager.releaseDatabaseEngine(f.getLanguage(),db.getName(),entry);
  }
}
