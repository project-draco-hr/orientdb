{
  final Iterator<Entry<Integer,OClientConnection>> iterator=connections.entrySet().iterator();
  while (iterator.hasNext()) {
    final Entry<Integer,OClientConnection> entry=iterator.next();
    entry.getValue().protocol.sendShutdown();
    OCommandRequestText command=entry.getValue().data.command;
    if (command != null && command.isIdempotent()) {
      entry.getValue().protocol.interrupt();
    }
 else {
      ONetworkProtocol protocol=entry.getValue().protocol;
      if (protocol instanceof ONetworkProtocolBinary && ((ONetworkProtocolBinary)protocol).getRequestType() == OChannelBinaryProtocol.REQUEST_SHUTDOWN) {
        continue;
      }
      try {
        final Socket socket;
        if (entry.getValue().protocol == null || entry.getValue().protocol.getChannel() == null)         socket=null;
 else         socket=entry.getValue().protocol.getChannel().socket;
        if (socket != null && !socket.isClosed() && !socket.isInputShutdown()) {
          try {
            socket.shutdownInput();
          }
 catch (          IOException e) {
            OLogManager.instance().warn(this,"Error on closing connection of %s client during shutdown",e,entry.getValue().getRemoteAddress());
          }
        }
        if (entry.getValue().protocol.isAlive()) {
          if (entry.getValue().protocol instanceof ONetworkProtocolBinary && ((ONetworkProtocolBinary)entry.getValue().protocol).getRequestType() == -1) {
            try {
              entry.getValue().protocol.getChannel().close();
            }
 catch (            Exception e) {
              OLogManager.instance().error(this,"Error during chanel close at shutdown",e);
            }
            entry.getValue().protocol.interrupt();
          }
          entry.getValue().protocol.join();
        }
      }
 catch (      InterruptedException e) {
      }
    }
  }
}
