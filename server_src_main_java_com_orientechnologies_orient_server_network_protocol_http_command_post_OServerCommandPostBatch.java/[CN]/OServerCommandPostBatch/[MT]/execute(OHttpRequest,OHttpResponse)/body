{
  checkSyntax(iRequest.url,2,"Syntax error: batch/<database>");
  iRequest.data.commandInfo="Execute multiple requests in one shot";
  ODatabaseDocumentTx db=null;
  ODocument batch=null;
  Object lastResult=null;
  try {
    db=getProfiledDatabaseInstance(iRequest);
    batch=new ODocument().fromJSON(iRequest.content);
    Boolean tx=batch.field("transaction");
    if (tx == null)     tx=false;
    final Collection<Map<Object,Object>> operations;
    try {
      operations=batch.field("operations");
    }
 catch (    Exception e) {
      throw new IllegalArgumentException("Expected 'operations' field as a collection of objects");
    }
    if (operations == null || operations.isEmpty())     throw new IllegalArgumentException("Input JSON has no operations to execute");
    if (tx)     db.begin();
    for (    Map<Object,Object> operation : operations) {
      final String type=(String)operation.get("type");
      if (type.equals("c")) {
        final ODocument doc=getRecord(operation);
        doc.save();
        lastResult=doc;
      }
 else       if (type.equals("u")) {
        final ODocument doc=getRecord(operation);
        doc.save();
        lastResult=doc;
      }
 else       if (type.equals("d")) {
        final ODocument doc=getRecord(operation);
        db.delete(doc.getIdentity());
        lastResult=doc.getIdentity();
      }
 else       if (type.equals("cmd")) {
        final String language=(String)operation.get("language");
        if (language == null)         throw new IllegalArgumentException("language parameter is null");
        final Object command=operation.get("command");
        if (command == null)         throw new IllegalArgumentException("command parameter is null");
        String commandAsString=null;
        if (command != null)         if (OMultiValue.isMultiValue(command)) {
          for (          Object c : OMultiValue.getMultiValueIterable(command)) {
            if (commandAsString == null)             commandAsString=c.toString();
 else             commandAsString+=";" + c.toString();
          }
        }
 else         commandAsString=command.toString();
        final OCommandRequestText cmd=(OCommandRequestText)OCommandManager.instance().getRequester(language);
        cmd.setText(commandAsString);
        lastResult=db.command(cmd).execute();
      }
 else       if (type.equals("script")) {
        final String language=(String)operation.get("language");
        if (language == null)         throw new IllegalArgumentException("language parameter is null");
        final Object script=operation.get("script");
        if (script == null)         throw new IllegalArgumentException("script parameter is null");
        StringBuilder text=new StringBuilder();
        if (OMultiValue.isMultiValue(script)) {
          int i=0;
          for (          Object o : OMultiValue.getMultiValueIterable(script)) {
            if (o != null) {
              if (i++ > 0)               text.append("\n");
              text.append(o.toString());
            }
          }
        }
 else         text.append(script);
        lastResult=db.command(new OCommandScript(language,text.toString())).execute();
      }
    }
    if (tx)     db.commit();
  }
  finally {
    if (db != null)     db.close();
  }
  iResponse.send(OHttpUtils.STATUS_OK_CODE,OHttpUtils.STATUS_OK_DESCRIPTION,OHttpUtils.CONTENT_TEXT_PLAIN,lastResult,null,true);
  return false;
}
