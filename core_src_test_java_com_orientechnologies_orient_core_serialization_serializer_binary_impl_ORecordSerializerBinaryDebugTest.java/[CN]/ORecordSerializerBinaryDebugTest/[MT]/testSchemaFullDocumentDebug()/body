{
  ODatabaseDocumentTx db=new ODatabaseDocumentTx("memory:" + ORecordSerializerBinaryDebugTest.class.getSimpleName());
  db.create();
  try {
    OClass clazz=db.getMetadata().getSchema().createClass("some");
    clazz.createProperty("testP",OType.STRING);
    clazz.createProperty("theInt",OType.INTEGER);
    ODocument doc=new ODocument("some");
    doc.field("testP","test");
    doc.field("theInt",2);
    doc.field("anDouble",2D);
    byte[] bytes=doc.toStream();
    ORecordSerializerBinaryDebug debugger=new ORecordSerializerBinaryDebug();
    ORecordSerializationDebug debug=debugger.deserializeDebug(bytes,db);
    assertEquals(debug.properties.size(),3);
    assertEquals(debug.properties.get(0).name,"testP");
    assertEquals(debug.properties.get(0).type,OType.STRING);
    assertEquals(debug.properties.get(0).value,"test");
    assertEquals(debug.properties.get(1).name,"theInt");
    assertEquals(debug.properties.get(1).type,OType.INTEGER);
    assertEquals(debug.properties.get(1).value,2);
    assertEquals(debug.properties.get(2).name,"anDouble");
    assertEquals(debug.properties.get(2).type,OType.DOUBLE);
    assertEquals(debug.properties.get(2).value,2D);
  }
  finally {
    db.drop();
  }
}
