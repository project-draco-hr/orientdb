{
  final String databaseName=iRequest.getDatabaseName();
  final String clusterName=iRequest.getClusterName();
  final Thread currentThread=Thread.currentThread();
  final ODistributedConfiguration cfg=manager.getDatabaseConfiguration(databaseName);
  final ODistributedPartitioningStrategy strategy=manager.getStrategy(cfg.getPartitionStrategy(clusterName));
  final ODistributedPartition partition=strategy.getPartition(manager,databaseName,clusterName);
  final List<String> nodes=partition.getNodes();
  final IQueue<ODistributedRequest>[] reqQueues=getRequestQueues(databaseName,nodes);
  final int writeQuorum=cfg.getWriteQuorum(clusterName);
  final int queueSize=nodes.size();
  iRequest.setSenderNodeName(manager.getLocalNodeName());
  iRequest.setSenderThreadId(currentThread.getId());
  final ArrayBlockingQueue<ODistributedResponse> responseQueue=new ArrayBlockingQueue<ODistributedResponse>(queueSize,true);
  internalThreadQueues.put(currentThread.getId(),responseQueue);
  try {
    requestLock.lock();
    try {
      iRequest.assignUniqueId(manager.getRunId(),manager.incrementDistributedSerial(databaseName));
      ODistributedServerLog.debug(this,getLocalNodeNameAndThread(),nodes.toString(),DIRECTION.OUT,"request %s",iRequest.getPayload());
      for (      IQueue<ODistributedRequest> queue : reqQueues) {
        queue.offer(iRequest,MAX_PUSH_TIMEOUT,TimeUnit.MILLISECONDS);
      }
    }
  finally {
      requestLock.unlock();
    }
    final ODistributedResponse firstResponse=collectResponses(iRequest,writeQuorum,nodes,responseQueue);
    return firstResponse;
  }
 catch (  Exception e) {
    throw new ODistributedException("Error on sending distributed request against " + databaseName + (clusterName != null ? ":" + clusterName : ""),e);
  }
 finally {
    internalThreadQueues.remove(currentThread.getId());
  }
}
