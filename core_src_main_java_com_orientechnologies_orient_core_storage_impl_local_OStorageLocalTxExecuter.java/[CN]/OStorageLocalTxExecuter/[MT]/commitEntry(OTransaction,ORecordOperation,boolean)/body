{
  if (txEntry.type != ORecordOperation.DELETED && !txEntry.getRecord().isDirty())   return;
  final ORecordId rid=(ORecordId)txEntry.getRecord().getIdentity();
  final OCluster cluster=storage.getClusterById(rid.clusterId);
  if (cluster.getName().equals(OStorage.CLUSTER_INDEX_NAME))   return;
  if (!(cluster instanceof OClusterLocal))   return;
  if (txEntry.getRecord() instanceof OTxListener)   ((OTxListener)txEntry.getRecord()).onEvent(txEntry,OTxListener.EVENT.BEFORE_COMMIT);
switch (txEntry.type) {
case ORecordOperation.LOADED:
    break;
case ORecordOperation.CREATED:
{
    byte[] stream=txEntry.getRecord().toStream();
    if (rid.isNew()) {
      if (iTx.getDatabase().callbackHooks(ORecordHook.TYPE.BEFORE_CREATE,txEntry.getRecord()))       stream=txEntry.getRecord().toStream();
      rid.clusterId=cluster.getId();
      if (iUseLog)       rid.clusterPosition=createRecord(iTx.getId(),cluster,rid,stream,txEntry.getRecord().getRecordType());
 else       rid.clusterPosition=iTx.getDatabase().getStorage().createRecord(rid,stream,txEntry.getRecord().getRecordType(),(byte)0,null);
      iTx.getDatabase().callbackHooks(ORecordHook.TYPE.AFTER_CREATE,txEntry.getRecord());
    }
 else {
      if (iUseLog)       txEntry.getRecord().setVersion(updateRecord(iTx.getId(),cluster,rid,stream,txEntry.getRecord().getVersion(),txEntry.getRecord().getRecordType()));
 else       txEntry.getRecord().setVersion(iTx.getDatabase().getStorage().updateRecord(rid,stream,txEntry.getRecord().getVersion(),txEntry.getRecord().getRecordType(),(byte)0,null));
    }
    break;
  }
case ORecordOperation.UPDATED:
{
  byte[] stream=txEntry.getRecord().toStream();
  if (iTx.getDatabase().callbackHooks(ORecordHook.TYPE.BEFORE_UPDATE,txEntry.getRecord()))   stream=txEntry.getRecord().toStream();
  if (iUseLog)   txEntry.getRecord().setVersion(updateRecord(iTx.getId(),cluster,rid,stream,txEntry.getRecord().getVersion(),txEntry.getRecord().getRecordType()));
 else   txEntry.getRecord().setVersion(iTx.getDatabase().getStorage().updateRecord(rid,stream,txEntry.getRecord().getVersion(),txEntry.getRecord().getRecordType(),(byte)0,null));
  iTx.getDatabase().callbackHooks(ORecordHook.TYPE.AFTER_UPDATE,txEntry.getRecord());
  break;
}
case ORecordOperation.DELETED:
{
iTx.getDatabase().callbackHooks(ORecordHook.TYPE.BEFORE_DELETE,txEntry.getRecord());
if (iUseLog) deleteRecord(iTx.getId(),cluster,rid.clusterPosition,txEntry.getRecord().getVersion());
 else iTx.getDatabase().getStorage().deleteRecord(rid,txEntry.getRecord().getVersion(),(byte)0,null);
iTx.getDatabase().callbackHooks(ORecordHook.TYPE.AFTER_DELETE,txEntry.getRecord());
}
break;
}
txEntry.getRecord().unsetDirty();
if (txEntry.getRecord() instanceof OTxListener) ((OTxListener)txEntry.getRecord()).onEvent(txEntry,OTxListener.EVENT.AFTER_COMMIT);
}
