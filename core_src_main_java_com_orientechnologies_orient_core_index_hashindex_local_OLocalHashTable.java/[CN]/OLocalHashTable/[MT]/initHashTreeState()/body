{
  for (long pageIndex=0; pageIndex < MAX_LEVEL_SIZE; pageIndex++) {
    final OCacheEntry cacheEntry=loadPageEntry(pageIndex,0);
    final OCachePointer pagePointer=cacheEntry.getCachePointer();
    pagePointer.acquireExclusiveLock();
    try {
      final OHashIndexBucket<K,V> emptyBucket=new OHashIndexBucket<K,V>(MAX_LEVEL_DEPTH,pagePointer.getDataPointer(),keySerializer,valueSerializer);
    }
  finally {
      pagePointer.releaseExclusiveLock();
      cacheEntry.markDirty();
      diskCache.release(cacheEntry);
    }
  }
  final long[] rootTree=new long[MAX_LEVEL_SIZE];
  for (int i=0; i < MAX_LEVEL_SIZE; i++)   rootTree[i]=createBucketPointer(i,0);
  hashTree=new long[1][];
  hashTree[0]=rootTree;
  nodesMetadata=new OHashTreeNodeMetadata[1];
  nodesMetadata[0]=new OHashTreeNodeMetadata((byte)0,(byte)0,(byte)MAX_LEVEL_DEPTH);
  filesMetadata[0].setBucketsCount(MAX_LEVEL_SIZE);
  size=0;
  hashTreeSize=1;
}
