{
  final OSessionStoragePerformanceStatistic statistic=performanceStatisticManager.getSessionPerformanceStatistic();
  startOperation();
  int readEntries=0;
  if (statistic != null)   statistic.startRidBagEntryReadTimer();
  try {
    atomicOperationsManager.acquireReadLock(this);
    try {
      final Lock lock=fileLockManager.acquireSharedLock(fileId);
      try {
        OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
        BucketSearchResult bucketSearchResult=findBucket(key,atomicOperation);
        OBonsaiBucketPointer bucketPointer=bucketSearchResult.getLastPathItem();
        int index;
        if (bucketSearchResult.itemIndex >= 0) {
          index=inclusive ? bucketSearchResult.itemIndex : bucketSearchResult.itemIndex - 1;
        }
 else {
          index=-bucketSearchResult.itemIndex - 2;
        }
        boolean firstBucket=true;
        do {
          OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,bucketPointer.getPageIndex(),false);
          cacheEntry.acquireSharedLock();
          try {
            OSBTreeBonsaiBucket<K,V> bucket=new OSBTreeBonsaiBucket<K,V>(cacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChanges(atomicOperation,cacheEntry),this);
            if (!firstBucket)             index=bucket.size() - 1;
            for (int i=index; i >= 0; i--) {
              if (!listener.addResult(bucket.getEntry(i))) {
                readEntries++;
                return;
              }
            }
            bucketPointer=bucket.getLeftSibling();
            firstBucket=false;
          }
  finally {
            cacheEntry.releaseSharedLock();
            releasePage(atomicOperation,cacheEntry);
          }
        }
 while (bucketPointer.getPageIndex() >= 0);
      }
  finally {
        lock.unlock();
      }
    }
 catch (    IOException ioe) {
      throw OException.wrapException(new OSBTreeBonsaiLocalException("Error during fetch of minor values for key " + key + " in sbtree "+ getName(),this),ioe);
    }
 finally {
      atomicOperationsManager.releaseReadLock(this);
    }
  }
  finally {
    if (statistic != null)     statistic.stopRidBagEntryReadTimer(readEntries);
    completeOperation();
  }
}
