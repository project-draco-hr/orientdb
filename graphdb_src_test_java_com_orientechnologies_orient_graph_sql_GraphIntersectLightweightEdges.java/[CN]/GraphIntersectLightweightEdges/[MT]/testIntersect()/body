{
  graph.setUseLightweightEdges(true);
  graph.setAutoStartTx(false);
  graph.declareIntent(new OIntentMassiveInsert().setDisableSecurity(true).setDisableHooks(true).setDisableValidation(true).setEnableCache(false));
  final OrientVertex root1=graph.addVertex(null,"name","root1");
  for (int i=0; i < TOT; ++i) {
    root1.addEdge("E",graph.addVertex(null,"child",i));
    if (i % 1000 == 0) {
      graph.commit();
      graph.setUseLog(false);
      System.out.println("commit " + i);
    }
  }
  OLogManager.instance().info(this,"Created root1 with " + TOT + " children");
  final OrientVertex root2=graph.addVertex(null,"name","root2");
  for (int i=0; i < TOT; ++i) {
    root2.addEdge("E",graph.addVertex(null,"child",i));
    if (i % 1000 == 0) {
      graph.commit();
      graph.setUseLog(false);
      System.out.println("commit " + i);
    }
  }
  OLogManager.instance().info(this,"Created root2 with " + TOT + " children");
  final OrientVertex common=graph.addVertex(null,"common",true);
  root1.addEdge("E",common);
  root2.addEdge("E",common);
  graph.commit();
  OLogManager.instance().info(this,"Intersecting...");
  final Iterable<OrientVertex> result=graph.command(new OCommandSQL("select intersect( out() ) from [?,?]")).execute(root1.getIdentity(),root2.getIdentity());
  OLogManager.instance().info(this,"Intersecting done");
  Assert.assertTrue(result.iterator().hasNext());
  OrientVertex o=result.iterator().next();
  final Set set=o.getRecord().field("intersect");
  Assert.assertEquals(set.iterator().next(),common);
}
