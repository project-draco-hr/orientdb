{
  if (!inited) {
    initSuperClasses();
    final Collection<OProperty> allProperties=new ArrayList<OProperty>();
    final Map<String,OProperty> allPropsMap=new HashMap<String,OProperty>(20);
    for (int i=superClasses.size() - 1; i >= 0; i--) {
      allProperties.addAll(superClasses.get(i).allProperties);
      allPropsMap.putAll(superClasses.get(i).allPropertiesMap);
    }
    allProperties.addAll(properties.values());
    for (    OProperty p : properties.values()) {
      final String propName=p.getName();
      if (!allPropsMap.containsKey(propName))       allPropsMap.put(propName,p);
    }
    this.allProperties=Collections.unmodifiableCollection(allProperties);
    this.allPropertiesMap=Collections.unmodifiableMap(allPropsMap);
    this.restricted=isSubClassOf(OSecurityShared.RESTRICTED_CLASSNAME);
    this.isVertexType=isSubClassOf(VERTEX_CLASS_NAME);
    this.isEdgeType=isSubClassOf(EDGE_CLASS_NAME);
    this.triggered=isSubClassOf(OClassTrigger.CLASSNAME);
    this.function=isSubClassOf(OFunctionTrigger.CLASSNAME);
    this.scheduler=isSubClassOf(OScheduler.CLASSNAME);
    this.ouser=isSubClassOf(OUser.CLASS_NAME);
    this.orole=isSubClassOf(ORole.CLASS_NAME);
    inited=true;
  }
}
