{
  final int fieldNameLength=iFieldName.length();
  Object value=null;
  int beginPos=0;
  int separatorPos=0;
  do {
    char separator=' ';
    for (; separatorPos < fieldNameLength; ++separatorPos) {
      separator=iFieldName.charAt(separatorPos);
      if (separator == '.' || separator == '[')       break;
    }
    final String fieldName;
    if (separatorPos < fieldNameLength)     fieldName=iFieldName.substring(beginPos,separatorPos);
 else     if (beginPos > 0)     fieldName=iFieldName.substring(beginPos);
 else     fieldName=iFieldName;
    if (separator == '.') {
      value=getIdentifiableValue(current,fieldName);
      if (value == null || !(value instanceof ODocument))       return null;
      current=(ODocument)value;
      if (current.getInternalStatus() == STATUS.NOT_LOADED)       current.reload();
    }
 else     if (separator == '[') {
      if (value == null)       value=getIdentifiableValue(current,fieldName);
      if (value == null)       return null;
      final int end=iFieldName.indexOf(']',separatorPos);
      if (end == -1)       throw new IllegalArgumentException("Missed closed ']'");
      final String index=OStringSerializerHelper.getStringContent(iFieldName.substring(separatorPos + 1,end));
      separatorPos=end;
      if (value instanceof ODocument) {
        final List<String> indexParts=OStringSerializerHelper.smartSplit(index,',');
        if (indexParts.size() == 1)         value=((ODocument)value).field(index);
 else {
          final Object[] values=new Object[indexParts.size()];
          for (int i=0; i < indexParts.size(); ++i) {
            values[i]=((ODocument)value).field(indexParts.get(i));
          }
          value=values;
        }
      }
 else       if (value instanceof Map<?,?>) {
        final List<String> indexParts=OStringSerializerHelper.smartSplit(index,',');
        if (indexParts.size() == 1)         value=((Map<?,?>)value).get(index);
 else {
          final Object[] values=new Object[indexParts.size()];
          for (int i=0; i < indexParts.size(); ++i) {
            values[i]=((Map<?,?>)value).get(indexParts.get(i));
          }
          value=values;
        }
      }
 else       if (value instanceof Collection<?> || value.getClass().isArray()) {
        final boolean isArray=value.getClass().isArray();
        final List<String> indexParts=OStringSerializerHelper.smartSplit(index,',');
        final List<String> indexRanges=OStringSerializerHelper.smartSplit(index,'-');
        final List<String> indexCondition=OStringSerializerHelper.smartSplit(index,'=',' ');
        if (indexParts.size() == 1 && indexRanges.size() == 1 && indexCondition.size() == 1) {
          if (isArray)           value=Array.get(value,Integer.parseInt(index));
 else           value=((List<?>)value).get(Integer.parseInt(index));
        }
 else         if (indexParts.size() > 1) {
          final Object[] values;
          values=new Object[indexParts.size()];
          for (int i=0; i < indexParts.size(); ++i) {
            if (isArray)             values[i]=Array.get(value,Integer.parseInt(indexParts.get(i)));
 else             values[i]=((List<?>)value).get(Integer.parseInt(indexParts.get(i)));
          }
          value=values;
        }
 else         if (indexRanges.size() > 1) {
          final Object[] values;
          final int rangeFrom=Integer.parseInt(indexRanges.get(0));
          final int rangeTo=Integer.parseInt(indexRanges.get(1));
          values=new Object[rangeTo - rangeFrom + 1];
          for (int i=rangeFrom; i <= rangeTo; ++i) {
            if (isArray)             values[i - rangeFrom]=Array.get(value,i);
 else             values[i - rangeFrom]=((List<?>)value).get(i);
          }
          value=values;
        }
 else         if (indexCondition.size() > 0) {
          final String conditionFieldName=indexCondition.get(0);
          Object conditionFieldValue=ORecordSerializerStringAbstract.getTypeValue(indexCondition.get(1));
          if (conditionFieldValue instanceof String)           conditionFieldValue=OStringSerializerHelper.getStringContent(conditionFieldValue);
          final ArrayList<ODocument> values=new ArrayList<ODocument>();
          for (          Object v : (Collection<Object>)value) {
            if (v instanceof ODocument) {
              final ODocument doc=(ODocument)v;
              Object fieldValue=doc.field(conditionFieldName);
              fieldValue=OType.convert(fieldValue,conditionFieldValue.getClass());
              if (fieldValue != null && fieldValue.equals(conditionFieldValue)) {
                values.add(doc);
              }
            }
          }
          if (values.isEmpty())           value=null;
 else           if (values.size() == 1)           value=values.iterator().next();
 else           value=values;
        }
      }
    }
 else     value=getIdentifiableValue(current,fieldName);
    beginPos=++separatorPos;
  }
 while (separatorPos < fieldNameLength);
  return (RET)value;
}
