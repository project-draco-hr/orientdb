{
  watchDogListener=Orient.instance().getMemoryWatchDog().addListener(new Listener(){
    /** 
 * Auto reduce cache size of 50%
 */
    public void memoryUsageLow(    TYPE iType,    final long usedMemory,    final long maxMemory){
      if (iType == TYPE.JVM) {
        acquireExclusiveLock();
        try {
          final int oldSize=entries.size();
          if (oldSize == 0)           return;
          final int threshold=(int)(oldSize * 0.5f);
          if (entries.size() < threshold)           return;
          final ORID[] ridToRemove=new ORID[entries.size() - threshold];
          int entryNum=0;
          int i=0;
          for (          ORID rid : entries.keySet()) {
            if (entryNum++ >= threshold)             ridToRemove[i++]=rid;
            if (i >= ridToRemove.length)             break;
          }
          for (          ORID rid : ridToRemove)           entries.remove(rid);
          OLogManager.instance().debug(this,"Low memory: auto reduce the record cache size from %d to %d",oldSize,threshold);
        }
 catch (        Exception e) {
          OLogManager.instance().error(this,"Error while freeing resources",e);
        }
 finally {
          releaseExclusiveLock();
        }
      }
    }
    /** 
 * Free the entire cache
 */
    public void memoryUsageCritical(    TYPE iType,    final long usedMemory,    final long maxMemory){
      if (iType == TYPE.JVM) {
        acquireExclusiveLock();
        try {
          entries.clear();
        }
 catch (        Exception e) {
          OLogManager.instance().error(this,"Error while freeing resources",e);
        }
 finally {
          releaseExclusiveLock();
        }
      }
    }
  }
);
  OProfiler.getInstance().registerHookValue(profilerPrefix + ".cache.current",new OProfilerHookValue(){
    public Object getValue(){
      acquireSharedLock();
      try {
        return entries.size();
      }
  finally {
        releaseSharedLock();
      }
    }
  }
);
  OProfiler.getInstance().registerHookValue(profilerPrefix + ".cache.max",new OProfilerHookValue(){
    public Object getValue(){
      return maxSize;
    }
  }
);
}
