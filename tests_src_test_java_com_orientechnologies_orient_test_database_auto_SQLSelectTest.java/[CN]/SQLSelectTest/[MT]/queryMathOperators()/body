{
  List<ODocument> result=executeQuery("select * from account where id < 3 + 4",database);
  Assert.assertFalse(result.isEmpty());
  for (int i=0; i < result.size(); ++i)   Assert.assertTrue(((Number)result.get(i).field("id")).intValue() < 3 + 4);
  result=executeQuery("select * from account where id < 10 - 3",database);
  Assert.assertFalse(result.isEmpty());
  for (int i=0; i < result.size(); ++i)   Assert.assertTrue(((Number)result.get(i).field("id")).intValue() < 10 - 3);
  result=executeQuery("select * from account where id < 3 * 2",database);
  Assert.assertFalse(result.isEmpty());
  for (int i=0; i < result.size(); ++i)   Assert.assertTrue(((Number)result.get(i).field("id")).intValue() < 3 * 2);
  result=executeQuery("select * from account where id < 120 / 20",database);
  Assert.assertFalse(result.isEmpty());
  for (int i=0; i < result.size(); ++i)   Assert.assertTrue(((Number)result.get(i).field("id")).intValue() < 120 / 20);
  result=executeQuery("select * from account where id < 27 % 10",database);
  Assert.assertFalse(result.isEmpty());
  for (int i=0; i < result.size(); ++i)   Assert.assertTrue(((Number)result.get(i).field("id")).intValue() < 27 % 10);
  result=executeQuery("select * from account where id = id * 1",database);
  Assert.assertFalse(result.isEmpty());
  List<ODocument> result2=executeQuery("select count(*) as tot from account where id >= 0",database);
  Assert.assertEquals(result.size(),((Number)result2.get(0).field("tot")).intValue());
}
