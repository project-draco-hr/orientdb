{
  final Map<String,ODocument> linked=(Map<String,ODocument>)fieldValue;
  iContext.onBeforeMap(iRootRecord,fieldName,iUserObject);
  for (  Object key : linked.keySet()) {
    final Object o=linked.get(key);
    if (o instanceof OIdentifiable) {
      final ODocument d=((OIdentifiable)o).getRecord();
      if (d != null) {
        final Integer fieldDepthLevel=parsedRecords.get(d.getIdentity());
        if (!d.getIdentity().isValid() || (fieldDepthLevel != null && fieldDepthLevel.intValue() == iLevelFromRoot)) {
          removeParsedFromMap(parsedRecords,d);
          iContext.onBeforeDocument(iRootRecord,d,key.toString(),iUserObject);
          final Object userObject=iListener.fetchLinkedMapEntry(iRootRecord,iUserObject,fieldName,key.toString(),d,iContext);
          processRecord(d,userObject,iFetchPlan,iCurrentLevel,iLevelFromRoot,iFieldDepthLevel,parsedRecords,iFieldPathFromRoot,iListener,iContext);
          iContext.onAfterDocument(iRootRecord,d,key.toString(),iUserObject);
        }
 else {
          iListener.parseLinkedCollectionValue(iRootRecord,d,iUserObject,key.toString(),iContext);
        }
      }
    }
 else     if (OMultiValue.isMultiValue(o)) {
      fetchCollection(iRootRecord,iUserObject,iFetchPlan,o,key.toString(),iCurrentLevel + 1,iLevelFromRoot,iFieldDepthLevel,parsedRecords,iFieldPathFromRoot,iListener,iContext);
    }
  }
  iContext.onAfterMap(iRootRecord,fieldName,iUserObject);
}
