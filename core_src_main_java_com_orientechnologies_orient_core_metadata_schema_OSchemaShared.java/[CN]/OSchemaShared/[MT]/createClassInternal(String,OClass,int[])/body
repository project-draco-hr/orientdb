{
  acquireSchemaWriteLock();
  try {
    if (className == null || className.length() == 0)     throw new OSchemaException("Found class name null or empty");
    if (Character.isDigit(className.charAt(0)))     throw new OSchemaException("Found invalid class name. Cannot start with numbers");
    final Character wrongCharacter=checkNameIfValid(className);
    if (wrongCharacter != null)     throw new OSchemaException("Found invalid class name. Character '" + wrongCharacter + "' cannot be used in class name.");
    final ODatabaseDocumentInternal database=getDatabase();
    final OStorage storage=database.getStorage();
    checkEmbedded(storage);
    checkClustersAreAbsent(clusterIdsToAdd);
    final int[] clusterIds;
    if (clusterIdsToAdd == null || clusterIdsToAdd.length == 0) {
      throw new ClusterIdsAreEmptyException();
    }
 else     clusterIds=clusterIdsToAdd;
    database.checkSecurity(ODatabaseSecurityResources.SCHEMA,ORole.PERMISSION_CREATE);
    final String key=className.toLowerCase();
    if (classes.containsKey(key))     throw new OSchemaException("Class " + className + " already exists in current database");
    OClassImpl cls=new OClassImpl(this,className,clusterIds);
    classes.put(key,cls);
    if (cls.getShortName() != null)     classes.put(cls.getShortName().toLowerCase(),cls);
    if (superClass != null) {
      cls.setSuperClassInternal(superClass);
      final int[] clustersToIndex=superClass.getPolymorphicClusterIds();
      final String[] clusterNames=new String[clustersToIndex.length];
      for (int i=0; i < clustersToIndex.length; i++)       clusterNames[i]=database.getClusterNameById(clustersToIndex[i]);
      for (      OIndex<?> index : superClass.getIndexes())       for (      String clusterName : clusterNames)       if (clusterName != null)       database.getMetadata().getIndexManager().addClusterToIndex(clusterName,index.getName());
    }
    addClusterClassMap(cls);
    for (Iterator<ODatabaseLifecycleListener> it=Orient.instance().getDbLifecycleListeners(); it.hasNext(); )     it.next().onCreateClass(database,cls);
    return cls;
  }
  finally {
    releaseSchemaWriteLock();
  }
}
