{
  checkOpeness();
  if (!(iRecord instanceof ODocument)) {
    assignAndCheckCluster(iRecord,iClusterName);
    final OTransaction originalTx=wrapInImplicitTxIfRequired();
    final RET ret;
    try {
      ret=(RET)currentTx.saveRecord(iRecord,iClusterName,iMode,iForceCreate,iRecordCreatedCallback,iRecordUpdatedCallback);
    }
 catch (    final Exception e) {
      unwrapIfWasWrappedInImplicitTx(originalTx,false);
      throw OException.wrapException(new ODatabaseException("Error while updating record."),e);
    }
    unwrapIfWasWrappedInImplicitTx(originalTx,true);
    return ret;
  }
  ODocument doc=(ODocument)iRecord;
  ODocumentInternal.checkClass(doc,this);
  if (!getTransaction().isActive() && !storage.isRemote())   doc.validate();
  ODocumentInternal.convertAllMultiValuesToTrackedVersions(doc);
  if (iForceCreate || !doc.getIdentity().isValid()) {
    if (doc.getClassName() != null)     checkSecurity(ORule.ResourceGeneric.CLASS,ORole.PERMISSION_CREATE,doc.getClassName());
    assignAndCheckCluster(doc,iClusterName);
  }
 else {
    if (doc.getClassName() != null)     checkSecurity(ORule.ResourceGeneric.CLASS,ORole.PERMISSION_UPDATE,doc.getClassName());
  }
  final OTransaction originalTx=wrapInImplicitTxIfRequired();
  try {
    doc=(ODocument)currentTx.saveRecord(iRecord,iClusterName,iMode,iForceCreate,iRecordCreatedCallback,iRecordUpdatedCallback);
  }
 catch (  final Exception e) {
    unwrapIfWasWrappedInImplicitTx(originalTx,false);
    throw OException.wrapException(new ODatabaseException("Error while updating record."),e);
  }
  unwrapIfWasWrappedInImplicitTx(originalTx,true);
  return (RET)doc;
}
