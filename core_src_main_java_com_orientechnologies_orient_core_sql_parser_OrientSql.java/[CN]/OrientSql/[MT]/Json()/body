{
  OJson jjtn000=new OJson(JJTJSON);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  OJsonItem lastItem;
  Token token;
  try {
    jj_consume_token(LBRACE);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case LUCENE:
case NEAR:
case WITHIN:
case CHARACTER_LITERAL:
case STRING_LITERAL:
case BACKTICK:
case IN:
case KEY:
case IDENTIFIER:
      lastItem=new OJsonItem();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case LUCENE:
case NEAR:
case WITHIN:
case BACKTICK:
case IN:
case KEY:
case IDENTIFIER:
      lastItem.leftIdentifier=Identifier();
    break;
case STRING_LITERAL:
  token=jj_consume_token(STRING_LITERAL);
lastItem.leftString=token.image.substring(1,token.image.length() - 1);
break;
case CHARACTER_LITERAL:
token=jj_consume_token(CHARACTER_LITERAL);
lastItem.leftString=token.image.substring(1,token.image.length() - 1);
break;
default :
jj_la1[204]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jj_consume_token(COLON);
lastItem.right=Expression();
jjtn000.items.add(lastItem);
label_38: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[205]=jj_gen;
break label_38;
}
jj_consume_token(COMMA);
lastItem=new OJsonItem();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case LUCENE:
case NEAR:
case WITHIN:
case BACKTICK:
case IN:
case KEY:
case IDENTIFIER:
lastItem.leftIdentifier=Identifier();
break;
case STRING_LITERAL:
token=jj_consume_token(STRING_LITERAL);
lastItem.leftString=token.image.substring(1,token.image.length() - 1);
break;
case CHARACTER_LITERAL:
token=jj_consume_token(CHARACTER_LITERAL);
lastItem.leftString=token.image.substring(1,token.image.length() - 1);
break;
default :
jj_la1[206]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jj_consume_token(COLON);
lastItem.right=Expression();
jjtn000.items.add(lastItem);
}
break;
default :
jj_la1[207]=jj_gen;
;
}
jj_consume_token(RBRACE);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
