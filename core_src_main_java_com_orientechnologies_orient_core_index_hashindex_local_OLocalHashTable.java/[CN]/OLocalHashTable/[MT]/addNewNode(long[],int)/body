{
  if (hashTreeTombstone >= 0) {
    long[] tombstone=hashTree[hashTreeTombstone];
    hashTree[hashTreeTombstone]=newNode;
    nodesMetadata[hashTreeTombstone]=new OHashTreeNodeMetadata((byte)0,(byte)0,(byte)nodeLocalDepth);
    final int nodeIndex=hashTreeTombstone;
    if (tombstone != null)     hashTreeTombstone=(int)tombstone[0];
 else     hashTreeTombstone=-1;
    return nodeIndex;
  }
  if (hashTreeSize >= hashTree.length) {
    long[][] newHashTree=new long[hashTree.length << 1][];
    System.arraycopy(hashTree,0,newHashTree,0,hashTree.length);
    hashTree=newHashTree;
    newHashTree=null;
    OHashTreeNodeMetadata[] newNodeMetadata=new OHashTreeNodeMetadata[nodesMetadata.length << 1];
    System.arraycopy(nodesMetadata,0,newNodeMetadata,0,nodesMetadata.length);
    nodesMetadata=newNodeMetadata;
    newNodeMetadata=null;
  }
  hashTree[hashTreeSize]=newNode;
  nodesMetadata[hashTreeSize]=new OHashTreeNodeMetadata((byte)0,(byte)0,(byte)nodeLocalDepth);
  hashTreeSize++;
  return hashTreeSize - 1;
}
