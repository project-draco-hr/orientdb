{
  acquireExclusiveLock();
  try {
    configuration=new ODocument();
    this.indexDefinition=indexDefinition;
    this.name=name;
    storage=(OStorageLocal)database.getStorage();
    final ORecord<?> emptyRecord=new ORecordBytes(new byte[]{});
    emptyRecord.save(clusterIndexName);
    identity=emptyRecord.getIdentity();
    keySerializer=detectKeySerializer(indexDefinition);
    if (clusterIdsToIndex != null)     for (    final int id : clusterIdsToIndex)     clustersToIndex.add(database.getClusterNameById(id));
    final OStorageFileConfiguration metadataConfiguration=new OStorageFileConfiguration(null,OStorageVariableParser.DB_PATH_VARIABLE + '/' + name+ METADATA_CONFIGURATION_FILE_EXTENSION,OFileFactory.MMAP,"0","50%");
    final OStorageFileConfiguration treeStateConfiguration=new OStorageFileConfiguration(null,OStorageVariableParser.DB_PATH_VARIABLE + '/' + name+ TREE_STATE_FILE_EXTENSION,OFileFactory.MMAP,"0","50%");
    metadataStore=new OEHFileMetadataStore(storage,metadataConfiguration);
    treeStateStore=new OEHTreeStateStore(storage,treeStateConfiguration);
    final OStorageSegmentConfiguration fileConfiguration=new OStorageSegmentConfiguration(storage.getConfiguration(),name,0);
    bucketFile=new OMultiFileSegment(storage,fileConfiguration,BUCKET_FILE_EXTENSION,OHashIndexBucket.MAX_BUCKET_SIZE_BYTES);
    bucketFile.create(OHashIndexBucket.MAX_BUCKET_SIZE_BYTES * maxLevelSize);
    metadataStore.create(-1);
    treeStateStore.create(-1);
    bucketFile.getFile(0).writeHeaderLong(0,size);
    bucketFile.getFile(0).writeHeaderLong(OLongSerializer.LONG_SIZE,hashTreeSize);
    bucketFile.getFile(0).writeHeaderLong(2 * OLongSerializer.LONG_SIZE,hashTreeTombstone);
    bucketFile.getFile(0).writeHeaderLong(3 * OLongSerializer.LONG_SIZE,bucketTombstonePointer);
    initHashTreeState();
    updateConfiguration();
    rebuild(progressListener);
    return this;
  }
 catch (  IOException e) {
    throw new OIndexException("Error during index creation.",e);
  }
 finally {
    releaseExclusiveLock();
  }
}
