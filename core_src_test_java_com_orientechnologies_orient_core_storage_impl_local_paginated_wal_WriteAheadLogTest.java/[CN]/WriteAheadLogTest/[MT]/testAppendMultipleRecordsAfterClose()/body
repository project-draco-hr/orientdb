{
  List<OSetPageDataRecord> writtenRecords=new ArrayList<OSetPageDataRecord>();
  Random rnd=new Random();
  final int recordsToWrite=1000;
  for (int i=0; i < recordsToWrite; i++) {
    byte[] data=new byte[10];
    rnd.nextBytes(data);
    int pageOffset=rnd.nextInt(65536);
    long pageIndex=rnd.nextLong();
    OSetPageDataRecord setPageDataRecord=new OSetPageDataRecord(data,pageOffset,pageIndex,"test");
    writtenRecords.add(setPageDataRecord);
    writeAheadLog.logRecord(setPageDataRecord);
  }
  writeAheadLog.close();
  writeAheadLog=createWAL();
  for (int i=0; i < recordsToWrite; i++) {
    byte[] data=new byte[10];
    rnd.nextBytes(data);
    int pageOffset=rnd.nextInt(65536);
    long pageIndex=rnd.nextLong();
    OSetPageDataRecord setPageDataRecord=new OSetPageDataRecord(data,pageOffset,pageIndex,"test");
    writtenRecords.add(setPageDataRecord);
    writeAheadLog.logRecord(setPageDataRecord);
  }
  assertLogContent(writeAheadLog,writtenRecords);
  assertLogContent(writeAheadLog,writtenRecords.subList(writtenRecords.size() / 2,writtenRecords.size()));
  writeAheadLog.close();
  writeAheadLog=createWAL();
  assertLogContent(writeAheadLog,writtenRecords);
  assertLogContent(writeAheadLog,writtenRecords.subList(writtenRecords.size() / 2,writtenRecords.size()));
}
