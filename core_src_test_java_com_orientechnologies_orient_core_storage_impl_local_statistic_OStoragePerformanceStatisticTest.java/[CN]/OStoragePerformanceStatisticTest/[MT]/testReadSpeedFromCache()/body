{
  final AssertDataFunction assertDataFunction=new AssertDataFunction(){
    @Override public void assertData(    long[] data) throws AssertionError {
      Assert.assertEquals(data[0],10000000);
      Assert.assertEquals(data[1],10000000 / 1024);
    }
  }
;
  final GetDataFunction getDataFunction=new GetDataFunction(){
    @Override public long[] getData(    OStoragePerformanceStatisticMXBean storagePerformanceStatistic){
      final long[] result=new long[2];
      result[0]=storagePerformanceStatistic.getReadSpeedFromCacheInPages();
      result[1]=storagePerformanceStatistic.getReadSpeedFromCacheInMB();
      return result;
    }
  }
;
  final LoadLoop loadLoop=new LoadLoop(){
    @Override public void execute(    OStoragePerformanceStatistic storagePerformanceStatistic,    boolean measurementStopped){
      storagePerformanceStatistic.startCommitTimer();
      storagePerformanceStatistic.startPageReadFromCacheTimer();
      storagePerformanceStatistic.stopPageReadFromCacheTimer();
      storagePerformanceStatistic.stopCommitTimer();
    }
  }
;
  testNoMBeanCase("testReadSpeedFromCache",loadLoop,getDataFunction,assertDataFunction);
  testMBeanCase("testReadSpeedFromCache",loadLoop,getDataFunction,assertDataFunction);
}
