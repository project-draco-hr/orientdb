{
  @SuppressWarnings("unchecked") Map.Entry<FileLockKey,Long>[] sortedPages=evictedPages.entrySet().toArray(new Map.Entry[evictedPages.size()]);
  Arrays.sort(sortedPages,new Comparator<Map.Entry>(){
    @Override public int compare(    Map.Entry entryOne,    Map.Entry entryTwo){
      FileLockKey fileLockKeyOne=(FileLockKey)entryOne.getKey();
      FileLockKey fileLockKeyTwo=(FileLockKey)entryTwo.getKey();
      return fileLockKeyOne.compareTo(fileLockKeyTwo);
    }
  }
);
  for (  Map.Entry<FileLockKey,Long> entry : sortedPages) {
    long evictedDataPointer=entry.getValue();
    FileLockKey fileLockKey=entry.getKey();
    flushData(fileLockKey.fileId,fileLockKey.pageIndex,evictedDataPointer);
    dirtyPages.get(fileLockKey.fileId).remove(new DirtyPage(fileLockKey.pageIndex,null));
    directMemory.free(evictedDataPointer);
  }
  evictedPages.clear();
}
