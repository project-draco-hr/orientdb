{
  final ODatabaseDocumentInternal database=getDatabase();
  database.checkSecurity(ORule.ResourceGeneric.CLASS,ORole.PERMISSION_READ,iCls.getName().toLowerCase());
  OStorage.LOCKING_STRATEGY locking=context != null && context.getVariable("$locking") != null ? (OStorage.LOCKING_STRATEGY)context.getVariable("$locking") : OStorage.LOCKING_STRATEGY.DEFAULT;
  final ORID[] range=getRange();
  if (iAscendentOrder)   return new ORecordIteratorClass<ORecord>(database,database,iCls.getName(),iPolymorphic,request.isUseCache(),false,locking).setRange(range[0],range[1]);
 else   return new ORecordIteratorClassDescendentOrder<ORecord>(database,database,iCls.getName(),iPolymorphic,request.isUseCache(),false,locking).setRange(range[0],range[1]);
}
