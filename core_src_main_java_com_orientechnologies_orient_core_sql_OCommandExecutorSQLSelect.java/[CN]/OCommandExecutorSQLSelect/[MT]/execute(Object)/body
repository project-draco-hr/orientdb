{
  final int[] clusterIds;
  if (compiledFilter.getSourceClasses() != null) {
    String firstClass=compiledFilter.getSourceClasses().keySet().iterator().next();
    OClass cls=database.getMetadata().getSchema().getClass(firstClass.toLowerCase());
    if (cls == null)     throw new OCommandExecutionException("Class " + firstClass + " was not found");
    database.checkSecurity(ODatabaseSecurityResources.CLASS,ORole.PERMISSION_READ,cls.getName());
    clusterIds=cls.getPolymorphicClusterIds();
    for (    int clusterId : clusterIds)     database.checkSecurity(ODatabaseSecurityResources.CLUSTER,ORole.PERMISSION_READ,database.getClusterNameById(clusterId),clusterId);
    final List<ORecordId> resultSet=searchForIndexes(cls);
    if (resultSet.size() > 0) {
      for (      ORecordId rid : resultSet)       addResult(database.load(rid));
    }
 else     scanEntireClusters(clusterIds);
  }
 else   if (compiledFilter.getSourceClusters() != null) {
    String firstCluster=compiledFilter.getSourceClusters().keySet().iterator().next();
    if (firstCluster == null || firstCluster.length() == 0)     throw new OCommandExecutionException("No cluster or schema class selected in query");
    if (Character.isDigit(firstCluster.charAt(0)))     clusterIds=OStringSerializerHelper.splitIntArray(firstCluster);
 else     clusterIds=new int[]{database.getClusterIdByName(firstCluster.toLowerCase())};
    database.checkSecurity(ODatabaseSecurityResources.CLUSTER,ORole.PERMISSION_READ,firstCluster.toLowerCase(),clusterIds[0]);
    scanEntireClusters(clusterIds);
  }
 else   if (compiledFilter.getSourceRecords() != null) {
    ORecordId rid=new ORecordId();
    ORecordInternal<?> record;
    for (    String rec : compiledFilter.getSourceRecords()) {
      rid.fromString(rec);
      record=database.load(rid);
      foreach(record);
    }
  }
 else   throw new OQueryParsingException("No source found in query: specify class, clusters or single records");
  processResultSet();
  return null;
}
