{
  ODatabaseDocument database=db;
  final OSchema schema=database.getMetadata().getSchema();
  OClass clazz=schema.createClass("CompositeIndexWithRangeAndConditions");
  clazz.createProperty("id",OType.INTEGER);
  clazz.createProperty("bar",OType.INTEGER);
  clazz.createProperty("tags",OType.EMBEDDEDLIST,OType.STRING);
  clazz.createProperty("name",OType.STRING);
  database.command(new OCommandSQL("create index CompositeIndexWithRangeAndConditions_id_tags_name on CompositeIndexWithRangeAndConditions (id, tags, name) NOTUNIQUE")).execute();
  database.command(new OCommandSQL("insert into CompositeIndexWithRangeAndConditions set id = 1, tags = [\"green\",\"yellow\"] , name = \"Foo\", bar = 1")).execute();
  database.command(new OCommandSQL("insert into CompositeIndexWithRangeAndConditions set id = 1, tags = [\"blue\",\"black\"] , name = \"Foo\", bar = 14")).execute();
  database.command(new OCommandSQL("insert into CompositeIndexWithRangeAndConditions set id = 1, tags = [\"white\"] , name = \"Foo\"")).execute();
  database.command(new OCommandSQL("insert into CompositeIndexWithRangeAndConditions set id = 1, tags = [\"green\",\"yellow\"], name = \"Foo1\", bar = 14")).execute();
  List<ODocument> r=database.query(new OSQLSynchQuery<Object>("select from CompositeIndexWithRangeAndConditions where id > 0 and bar = 1"));
  Assert.assertEquals(1,r.size());
  List<ODocument> r1=database.query(new OSQLSynchQuery<Object>("select from CompositeIndexWithRangeAndConditions where id = 1 and tags CONTAINS \"white\""));
  List<ODocument> r2=database.query(new OSQLSynchQuery<Object>("select from CompositeIndexWithRangeAndConditions where id > 0 and tags CONTAINS \"white\""));
  List<ODocument> r3=database.query(new OSQLSynchQuery<Object>("select from CompositeIndexWithRangeAndConditions where id > 0 and bar = 1"));
  Assert.assertEquals(r1.size(),1);
  Assert.assertEquals(r2.size(),1);
  Assert.assertEquals(r3.size(),1);
  List<ODocument> r4=database.query(new OSQLSynchQuery<Object>("select from CompositeIndexWithRangeAndConditions where tags CONTAINS \"white\" and id > 0"));
  Assert.assertEquals(r4.size(),1);
}
