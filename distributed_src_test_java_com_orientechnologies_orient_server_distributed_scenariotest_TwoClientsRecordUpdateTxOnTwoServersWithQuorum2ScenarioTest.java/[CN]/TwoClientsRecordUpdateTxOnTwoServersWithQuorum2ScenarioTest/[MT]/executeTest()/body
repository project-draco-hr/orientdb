{
  setWriteQuorum(2);
  ODatabaseDocumentTx dbServer0=poolFactory.get(getDatabaseURL(serverInstance.get(0)),"admin","admin").acquire();
  ODatabaseRecordThreadLocal.INSTANCE.set(dbServer0);
  ODocument recordServer0=new ODocument("Person").fields("id",RECORD_ID,"firstName","Han","lastName","Solo");
  recordServer0.save();
  waitForInsertedRecordPropagation(RECORD_ID);
  ODocument recordServer1=retrieveRecord(getDatabaseURL(serverInstance.get(1)),RECORD_ID);
  assertEquals(recordServer1.getVersion(),recordServer0.getVersion());
  assertEquals(recordServer1.field("id"),recordServer0.field("id"));
  assertEquals(recordServer1.field("firstName"),recordServer0.field("firstName"));
  assertEquals(recordServer1.field("lastName"),recordServer0.field("lastName"));
  int actualVersion=recordServer0.getVersion();
  ((ODistributedStorage)dbServer0.getStorage()).setEventListener(new AfterRecordLockDelayer("server0",DOCUMENT_WRITE_TIMEOUT / 4));
  List<Callable<Void>> clients=new LinkedList<Callable<Void>>();
  clients.add(new RecordUpdater(getDatabaseURL(serverInstance.get(0)),recordServer0,lukeFields,true));
  clients.add(new RecordUpdater(getDatabaseURL(serverInstance.get(1)),recordServer1,darthFields,true));
  List<Future<Void>> futures=Executors.newCachedThreadPool().invokeAll(clients);
  executeFutures(futures);
  waitForUpdatedRecordPropagation(RECORD_ID,"firstName",lukeFields.get("firstName").toString());
  recordServer0=retrieveRecord(getDatabaseURL(serverInstance.get(0)),RECORD_ID);
  recordServer1=retrieveRecord(getDatabaseURL(serverInstance.get(1)),RECORD_ID);
  int finalVersionServer0=recordServer0.getVersion();
  int finalVersionServer1=recordServer1.getVersion();
  assertEquals(finalVersionServer0,actualVersion + 1);
  assertEquals(finalVersionServer1,actualVersion + 1);
}
