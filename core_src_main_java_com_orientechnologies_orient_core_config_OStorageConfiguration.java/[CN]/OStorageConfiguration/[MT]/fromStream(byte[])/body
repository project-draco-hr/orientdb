{
  final String[] values=new String(iStream).split("\\|");
  int index=0;
  version=Integer.parseInt(read(values[index++]));
  name=read(values[index++]);
  schemaRecordId=read(values[index++]);
  dictionaryRecordId=read(values[index++]);
  if (version > 0)   indexMgrRecordId=read(values[index++]);
 else   indexMgrRecordId=null;
  localeLanguage=read(values[index++]);
  localeCountry=read(values[index++]);
  dateFormat=read(values[index++]);
  dateTimeFormat=read(values[index++]);
  if (version >= 4) {
    timeZone=TimeZone.getTimeZone(read(values[index++]));
    charset=read(values[index++]);
  }
  if (version > 1)   index=phySegmentFromStream(values,index,fileTemplate);
  int size=Integer.parseInt(read(values[index++]));
  clusters.clear();
  for (int i=0; i < size; ++i) {
    final int clusterId=Integer.parseInt(read(values[index++]));
    if (clusterId == -1)     continue;
    final String clusterName=read(values[index++]);
    final int targetDataSegmentId=version >= 3 ? Integer.parseInt(read(values[index++])) : 0;
    final String clusterType=read(values[index++]);
    final OStorageClusterConfiguration currentCluster;
    if (clusterType.equals("p")) {
      final OStoragePhysicalClusterConfigurationLocal phyClusterLocal=new OStoragePhysicalClusterConfigurationLocal(this,clusterId,targetDataSegmentId);
      phyClusterLocal.name=clusterName;
      index=phySegmentFromStream(values,index,phyClusterLocal);
      final String holeFlag;
      if (version > 4) {
        holeFlag=read(values[index++]);
      }
 else {
        holeFlag="f";
      }
      if (holeFlag.equals("f"))       phyClusterLocal.setHoleFile(new OStorageClusterHoleConfiguration(phyClusterLocal,read(values[index++]),read(values[index++]),read(values[index++])));
      currentCluster=phyClusterLocal;
    }
 else     if (clusterType.equals("m"))     currentCluster=new OStorageMemoryClusterConfiguration(clusterName,clusterId,targetDataSegmentId);
 else     if (clusterType.equals("d")) {
      currentCluster=new OStoragePaginatedClusterConfiguration(this,clusterId,clusterName,null,Boolean.valueOf(read(values[index++])),Float.valueOf(read(values[index++])),Float.valueOf(read(values[index++])),read(values[index++]));
    }
 else     throw new IllegalArgumentException("Unsupported cluster type: " + clusterType);
    for (int c=clusters.size(); c <= clusterId; ++c)     clusters.add(null);
    clusters.set(clusterId,currentCluster);
  }
  size=Integer.parseInt(read(values[index++]));
  dataSegments.clear();
  for (int i=0; i < size; ++i)   dataSegments.add(null);
  int dataId;
  String dataName;
  OStorageDataConfiguration data;
  for (int i=0; i < size; ++i) {
    dataId=Integer.parseInt(read(values[index++]));
    if (dataId == -1)     continue;
    dataName=read(values[index++]);
    data=new OStorageDataConfiguration(this,dataName,dataId);
    index=phySegmentFromStream(values,index,data);
    data.holeFile=new OStorageDataHoleConfiguration(data,read(values[index++]),read(values[index++]),read(values[index++]));
    dataSegments.set(dataId,data);
  }
  txSegment=new OStorageTxConfiguration(read(values[index++]),read(values[index++]),read(values[index++]),read(values[index++]),read(values[index++]));
  size=Integer.parseInt(read(values[index++]));
  properties.clear();
  for (int i=0; i < size; ++i) {
    properties.add(new OStorageEntryConfiguration(read(values[index++]),read(values[index++])));
  }
  if (version >= 7)   binaryFormatVersion=Integer.parseInt(read(values[index++]));
 else   if (version == 6)   binaryFormatVersion=9;
 else   binaryFormatVersion=8;
  if (version >= 8)   clusterSelection=read(values[index++]);
 else   clusterSelection=ORoundRobinClusterSelectionStrategy.NAME;
  if (version >= 9)   minimumClusters=Integer.parseInt(read(values[index++]));
 else   minimumClusters=1;
  return this;
}
