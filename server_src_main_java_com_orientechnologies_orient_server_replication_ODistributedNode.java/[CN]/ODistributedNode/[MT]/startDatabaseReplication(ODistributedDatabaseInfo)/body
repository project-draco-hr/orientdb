{
synchronized (this) {
    if (status == STATUS.ONLINE)     return;
    final ODistributedDatabaseInfo oldDbInfo=databases.remove(iDatabase.databaseName);
    if (oldDbInfo != null)     oldDbInfo.close();
    logger.setDatabase(iDatabase.databaseName);
    logger.log(this,Level.WARNING,TYPE.REPLICATION,DIRECTION.OUT,"starting replication against distributed node");
    try {
      databases.put(iDatabase.databaseName,iDatabase);
      if (iDatabase.connection == null)       iDatabase.connection=new ONodeConnection(replicator,id,replicator.getConflictResolver());
      iDatabase.connected();
      setStatus(STATUS.SYNCHRONIZING);
      iDatabase.connection.synchronize(iDatabase.databaseName,replicator.getLocalDatabaseConfiguration(iDatabase.databaseName));
      iDatabase.setOnline();
      setStatus(STATUS.ONLINE);
    }
 catch (    Exception e) {
      iDatabase.setOffline();
      iDatabase.close();
      databases.remove(iDatabase.databaseName);
      logger.log(this,Level.WARNING,TYPE.REPLICATION,DIRECTION.NONE,"cannot find database on remote server. Removing it from shared list",e);
    }
  }
}
