{
  final NavigableMap<Long,byte[]> pageIndexDataMap=new TreeMap<Long,byte[]>();
  long fileId=wowCache.addFile(fileName);
  Random random=new Random();
  for (int i=0; i < 600; i++) {
    long pageIndex=random.nextInt(2048);
    byte[] data=new byte[8];
    random.nextBytes(data);
    pageIndexDataMap.put(pageIndex,data);
    final OCachePointer cachePointer=wowCache.load(fileId,pageIndex,1,true,new OModifiableBoolean())[0];
    cachePointer.acquireExclusiveLock();
    ByteBuffer buffer=cachePointer.getSharedBuffer();
    buffer.position(systemOffset);
    buffer.put(data);
    cachePointer.releaseExclusiveLock();
    wowCache.store(fileId,pageIndex,cachePointer);
    cachePointer.decrementReadersReferrer();
  }
  for (  Map.Entry<Long,byte[]> entry : pageIndexDataMap.entrySet()) {
    long pageIndex=entry.getKey();
    byte[] dataOne=entry.getValue();
    OCachePointer cachePointer=wowCache.load(fileId,pageIndex,1,false,new OModifiableBoolean())[0];
    byte[] dataTwo=new byte[8];
    ByteBuffer buffer=cachePointer.getSharedBuffer();
    buffer.position(systemOffset);
    buffer.get(dataTwo);
    cachePointer.decrementReadersReferrer();
    Assert.assertEquals(dataTwo,dataOne);
  }
  for (int i=0; i < 300; i++) {
    long desiredIndex=random.nextInt(2048);
    Long pageIndex=pageIndexDataMap.ceilingKey(desiredIndex);
    if (pageIndex == null)     pageIndex=pageIndexDataMap.floorKey(desiredIndex);
    byte[] data=new byte[8];
    random.nextBytes(data);
    pageIndexDataMap.put(pageIndex,data);
    final OCachePointer cachePointer=wowCache.load(fileId,pageIndex,1,true,new OModifiableBoolean())[0];
    cachePointer.acquireExclusiveLock();
    ByteBuffer buffer=cachePointer.getSharedBuffer();
    buffer.position(systemOffset);
    buffer.put(data);
    cachePointer.releaseExclusiveLock();
    wowCache.store(fileId,pageIndex,cachePointer);
    cachePointer.decrementReadersReferrer();
  }
  for (  Map.Entry<Long,byte[]> entry : pageIndexDataMap.entrySet()) {
    long pageIndex=entry.getKey();
    byte[] dataOne=entry.getValue();
    OCachePointer cachePointer=wowCache.load(fileId,pageIndex,1,false,new OModifiableBoolean())[0];
    byte[] dataTwo=new byte[8];
    ByteBuffer buffer=cachePointer.getSharedBuffer();
    buffer.position(systemOffset);
    buffer.get(dataTwo);
    cachePointer.decrementReadersReferrer();
    Assert.assertEquals(dataTwo,dataOne);
  }
  wowCache.flush();
  for (  Map.Entry<Long,byte[]> entry : pageIndexDataMap.entrySet()) {
    assertFile(entry.getKey(),entry.getValue(),new OLogSequenceNumber(0,0));
  }
}
