{
  setCurrentGraphInThreadLocal();
  OrientBaseGraph.getEdgeClassNames(getGraph(),iLabels);
  OrientBaseGraph.encodeClassNames(iLabels);
  final ODocument doc=getRecord();
  final OMultiCollectionIterator<Vertex> iterable=new OMultiCollectionIterator<Vertex>();
  for (  String fieldName : doc.fieldNames()) {
    final OPair<Direction,String> connection=getConnection(iDirection,fieldName,iLabels);
    if (connection == null)     continue;
    final Object fieldValue=doc.field(fieldName);
    if (fieldValue != null)     if (fieldValue instanceof OIdentifiable) {
      addSingleVertex(doc,iterable,fieldName,connection,fieldValue,iLabels);
    }
 else     if (fieldValue instanceof Collection<?>) {
      Collection<?> coll=(Collection<?>)fieldValue;
      if (coll.size() == 1) {
        if (coll instanceof ORecordLazyMultiValue)         addSingleVertex(doc,iterable,fieldName,connection,((ORecordLazyMultiValue)coll).rawIterator().next(),iLabels);
 else         if (coll instanceof List<?>)         addSingleVertex(doc,iterable,fieldName,connection,((List<?>)coll).get(0),iLabels);
 else         addSingleVertex(doc,iterable,fieldName,connection,coll.iterator().next(),iLabels);
      }
 else {
        if (coll instanceof ORecordLazyMultiValue)         iterable.add(new OrientVertexIterator(this,coll,((ORecordLazyMultiValue)coll).rawIterator(),connection,iLabels,coll.size()));
 else         iterable.add(new OrientVertexIterator(this,coll,coll.iterator(),connection,iLabels,-1));
      }
    }
 else     if (fieldValue instanceof ORidBag) {
      iterable.add(new OrientVertexIterator(this,fieldValue,((ORidBag)fieldValue).rawIterator(),connection,iLabels,-1));
    }
  }
  return iterable;
}
