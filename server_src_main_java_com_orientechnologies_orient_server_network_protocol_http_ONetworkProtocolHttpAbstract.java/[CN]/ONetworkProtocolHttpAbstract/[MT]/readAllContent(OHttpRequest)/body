{
  iRequest.content=null;
  int in;
  char currChar;
  int contentLength=-1;
  boolean endOfHeaders=false;
  final StringBuilder request=new StringBuilder();
  while (!channel.socket.isInputShutdown()) {
    in=channel.inStream.read();
    if (in == -1)     break;
    currChar=(char)in;
    if (currChar == '\r') {
      if (request.length() > 0 && !endOfHeaders) {
        String line=request.toString();
        if (line.startsWith(OHttpUtils.AUTHORIZATION)) {
          String auth=line.substring(OHttpUtils.AUTHORIZATION.length() + 2);
          if (!auth.startsWith(OHttpUtils.AUTHORIZATION_BASIC))           throw new IllegalArgumentException("Only HTTP Basic authorization is supported");
          iRequest.authorization=auth.substring(OHttpUtils.AUTHORIZATION_BASIC.length() + 1);
          iRequest.authorization=new String(OBase64Utils.decode(iRequest.authorization));
        }
 else         if (line.startsWith(OHttpUtils.COOKIE)) {
          String sessionPair=line.substring(OHttpUtils.COOKIE.length() + 1);
          String[] sessionPairItems=sessionPair.split("=");
          if (sessionPairItems.length == 2 && OHttpUtils.OSESSIONID.equals(sessionPairItems[0]))           iRequest.sessionId=sessionPairItems[1];
        }
 else         if (line.startsWith(OHttpUtils.CONTENT_LENGTH)) {
          contentLength=Integer.parseInt(line.substring(OHttpUtils.CONTENT_LENGTH.length()));
          if (contentLength > requestMaxContentLength)           OLogManager.instance().warn(this,"->" + channel.socket.getInetAddress().getHostAddress() + ": Error on content size "+ contentLength+ ": the maximum allowed is "+ requestMaxContentLength);
        }
 else         if (line.startsWith(OHttpUtils.CONTENT_TYPE)) {
          String contentType=line.substring(OHttpUtils.CONTENT_TYPE.length());
          if (contentType.startsWith(OHttpUtils.CONTENT_TYPE_MULTIPART)) {
            iRequest.isMultipart=true;
            iRequest.boundary=new String(line.substring(OHttpUtils.CONTENT_TYPE.length() + OHttpUtils.CONTENT_TYPE_MULTIPART.length() + 2+ OHttpUtils.BOUNDARY.length()+ 1));
          }
        }
 else         if (line.startsWith(OHttpUtils.X_FORWARDED_FOR)) {
          getData().caller=line.substring(OHttpUtils.X_FORWARDED_FOR.length());
        }
      }
      in=channel.inStream.read();
      if (in == -1)       break;
      currChar=(char)in;
      if (!endOfHeaders && request.length() == 0) {
        if (contentLength <= 0)         return;
        endOfHeaders=true;
      }
      request.setLength(0);
    }
 else     if (endOfHeaders && request.length() == 0 && currChar != '\r' && currChar != '\n') {
      if (iRequest.isMultipart) {
        iRequest.content="";
        iRequest.multipartStream=new OHttpMultipartBaseInputStream(channel.inStream,currChar,contentLength);
        return;
      }
 else {
        byte[] buffer=new byte[contentLength];
        buffer[0]=(byte)currChar;
        channel.read(buffer,1,contentLength - 1);
        iRequest.content=new String(buffer);
        return;
      }
    }
 else     request.append(currChar);
  }
  if (OLogManager.instance().isDebugEnabled())   OLogManager.instance().debug(this,"Error on parsing HTTP content from client " + channel.socket.getInetAddress().getHostAddress() + ":\n"+ request);
  return;
}
