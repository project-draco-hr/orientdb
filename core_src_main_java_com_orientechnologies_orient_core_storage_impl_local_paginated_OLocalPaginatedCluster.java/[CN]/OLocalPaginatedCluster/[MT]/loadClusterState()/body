{
  OFile file=clusterStateHolder.getFile();
  byte[] clusterStateOne=new byte[STATE_SIZE];
  byte[] clusterStateTwo=new byte[STATE_SIZE];
  byte[] clusterState;
  file.read(0,clusterStateOne,STATE_SIZE);
  file.read(STATE_SIZE,clusterStateTwo,STATE_SIZE);
  CRC32 crc32=new CRC32();
  crc32.update(clusterStateOne,OIntegerSerializer.INT_SIZE,STATE_SIZE - OIntegerSerializer.INT_SIZE);
  int crcOne=OIntegerSerializer.INSTANCE.deserializeNative(clusterStateOne,0);
  Comparable tsOne;
  if (crcOne != (int)crc32.getValue()) {
    tsOne=null;
  }
 else {
    int type=OIntegerSerializer.INSTANCE.deserializeNative(clusterStateOne,OIntegerSerializer.INT_SIZE);
    if (type == 1) {
      tsOne=OLongSerializer.INSTANCE.deserializeNative(clusterStateOne,2 * OIntegerSerializer.INT_SIZE);
    }
 else     if (type == 0) {
      int segment=OIntegerSerializer.INSTANCE.deserializeNative(clusterStateOne,2 * OIntegerSerializer.INT_SIZE);
      long position=OLongSerializer.INSTANCE.deserializeNative(clusterStateOne,3 * OIntegerSerializer.INT_SIZE);
      tsOne=new OLogSequenceNumber(segment,position);
    }
 else     throw new OStorageException("Invalid type of cluster state timestamp");
  }
  int crcTwo=OIntegerSerializer.INSTANCE.deserializeNative(clusterStateTwo,0);
  Comparable tsTwo;
  crc32.reset();
  crc32.update(clusterStateTwo,OIntegerSerializer.INT_SIZE,STATE_SIZE - OIntegerSerializer.INT_SIZE);
  if (crcTwo != (int)crc32.getValue()) {
    tsTwo=null;
  }
 else {
    int type=OIntegerSerializer.INSTANCE.deserializeNative(clusterStateTwo,OIntegerSerializer.INT_SIZE);
    if (type == 1) {
      tsTwo=OLongSerializer.INSTANCE.deserializeNative(clusterStateTwo,2 * OIntegerSerializer.INT_SIZE);
    }
 else     if (type == 0) {
      int segment=OIntegerSerializer.INSTANCE.deserializeNative(clusterStateTwo,2 * OIntegerSerializer.INT_SIZE);
      long position=OLongSerializer.INSTANCE.deserializeNative(clusterStateTwo,3 * OIntegerSerializer.INT_SIZE);
      tsTwo=new OLogSequenceNumber(segment,position);
    }
 else     throw new OStorageException("Invalid type of cluster state timestamp");
  }
  if (tsOne == null && tsTwo == null) {
    OLogManager.instance().error(this,"Cluster state can not be loaded from file.");
    return;
  }
  if (tsOne == null) {
    clusterState=clusterStateTwo;
    useFirstStateHolder=true;
  }
 else   if (tsTwo == null) {
    clusterState=clusterStateOne;
    useFirstStateHolder=false;
  }
 else {
    int cmp=tsOne.compareTo(tsTwo);
    if (cmp >= 0) {
      clusterState=clusterStateOne;
      useFirstStateHolder=false;
    }
 else {
      clusterState=clusterStateTwo;
      useFirstStateHolder=true;
    }
  }
  int offset=3 * OIntegerSerializer.INT_SIZE + OLongSerializer.LONG_SIZE;
  size=OLongSerializer.INSTANCE.deserializeNative(clusterState,offset);
  offset+=OLongSerializer.LONG_SIZE;
  recordsSize=OLongSerializer.INSTANCE.deserializeNative(clusterState,offset);
  offset+=OLongSerializer.LONG_SIZE;
  int freeListSize=OIntegerSerializer.INSTANCE.deserializeNative(clusterState,offset);
  offset+=OIntegerSerializer.INT_SIZE;
  freePageLists=new long[freeListSize];
  for (int i=0; i < freeListSize; i++) {
    freePageLists[i]=OLongSerializer.INSTANCE.deserializeNative(clusterState,offset);
    offset+=OLongSerializer.LONG_SIZE;
  }
}
