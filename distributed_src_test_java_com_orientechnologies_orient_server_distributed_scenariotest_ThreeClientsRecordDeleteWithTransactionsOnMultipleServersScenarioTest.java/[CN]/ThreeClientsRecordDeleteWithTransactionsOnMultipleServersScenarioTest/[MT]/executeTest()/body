{
  ODatabaseDocumentTx dbServer1=poolFactory.get(getDatabaseURL(serverInstance.get(0)),"admin","admin").acquire();
  ODatabaseDocumentTx dbServer2=poolFactory.get(getDatabaseURL(serverInstance.get(1)),"admin","admin").acquire();
  ODatabaseDocumentTx dbServer3=poolFactory.get(getDatabaseURL(serverInstance.get(2)),"admin","admin").acquire();
  ODatabaseRecordThreadLocal.INSTANCE.set(dbServer1);
  ODocument record1Server1=new ODocument("Person").fromMap(hanFields);
  record1Server1.save();
  waitForInsertedRecordPropagation(RECORD_ID);
  ((ODistributedStorage)dbServer1.getStorage()).setEventListener(new AfterRecordLockDelayer(DOCUMENT_WRITE_TIMEOUT));
  ((ODistributedStorage)dbServer2.getStorage()).setEventListener(new AfterRecordLockDelayer(DOCUMENT_WRITE_TIMEOUT / 4));
  ((ODistributedStorage)dbServer3.getStorage()).setEventListener(new AfterRecordLockDelayer(DOCUMENT_WRITE_TIMEOUT / 2));
  List<Callable<Void>> clients=new LinkedList<Callable<Void>>();
  clients.add(new RecordDeleter(getDatabaseURL(serverInstance.get(0)),RECORD_ID,true));
  clients.add(new RecordDeleter(getDatabaseURL(serverInstance.get(1)),RECORD_ID,true));
  clients.add(new RecordDeleter(getDatabaseURL(serverInstance.get(2)),RECORD_ID,true));
  List<Future<Void>> futures=Executors.newCachedThreadPool().invokeAll(clients);
  executeFutures(futures);
  waitForDeletedRecordPropagation(RECORD_ID);
  assertTrue(retrieveRecordOrReturnMissing(getDatabaseURL(serverInstance.get(0)),RECORD_ID) == MISSING_DOCUMENT);
  assertTrue(retrieveRecordOrReturnMissing(getDatabaseURL(serverInstance.get(1)),RECORD_ID) == MISSING_DOCUMENT);
  assertTrue(retrieveRecordOrReturnMissing(getDatabaseURL(serverInstance.get(2)),RECORD_ID) == MISSING_DOCUMENT);
}
