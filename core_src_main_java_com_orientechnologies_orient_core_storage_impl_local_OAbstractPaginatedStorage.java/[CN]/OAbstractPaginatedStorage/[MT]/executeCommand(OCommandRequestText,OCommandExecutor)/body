{
  if (iCommand.isIdempotent() && !executor.isIdempotent())   throw new OCommandExecutionException("Cannot execute non idempotent command");
  long beginTime=Orient.instance().getProfiler().startChrono();
  try {
    ODatabaseDocumentInternal db=ODatabaseRecordThreadLocal.INSTANCE.get();
    Iterable<ODatabaseListener> listeners=db.getListeners();
    for (    ODatabaseListener oDatabaseListener : listeners) {
      oDatabaseListener.onBeforeCommand(iCommand,executor);
    }
    Object result=executor.execute(iCommand.getParameters());
    for (    ODatabaseListener oDatabaseListener : listeners) {
      oDatabaseListener.onAfterCommand(iCommand,executor,result);
    }
    return result;
  }
 catch (  OException e) {
    throw e;
  }
catch (  Exception e) {
    throw new OCommandExecutionException("Error on execution of command: " + iCommand,e);
  }
 finally {
    if (Orient.instance().getProfiler().isRecording()) {
      final ODatabaseDocumentInternal db=ODatabaseRecordThreadLocal.INSTANCE.getIfDefined();
      if (db != null) {
        final OSecurityUser user=db.getUser();
        final String userString=user != null ? user.toString() : null;
        Orient.instance().getProfiler().stopChrono("db." + ODatabaseRecordThreadLocal.INSTANCE.get().getName() + ".command."+ iCommand.toString(),"Command executed against the database",beginTime,"db.*.command.*",null,userString);
      }
    }
  }
}
