{
  if (iClass == null) {
    throw new OSerializationException("Type " + doc.getClassName() + " cannot be serialized because is not part of registered entities. To fix this error register this class");
  }
  final Class<T> c;
  boolean isInnerClass=iClass.getEnclosingClass() != null;
  if (Proxy.class.isAssignableFrom(iClass)) {
    c=iClass;
  }
 else {
    ProxyFactory f=new ProxyFactory();
    f.setSuperclass(iClass);
    f.setFilter(new MethodFilter(){
      public boolean isHandled(      Method m){
        final String methodName=m.getName();
        try {
          return (isSetterMethod(methodName,m) || isGetterMethod(methodName,m) || methodName.equals("equals")|| methodName.equals("hashCode"));
        }
 catch (        NoSuchFieldException nsfe) {
          OLogManager.instance().warn(this,"Error handling the method %s in class %s",nsfe,m.getName(),iClass.getName());
          return false;
        }
catch (        SecurityException se) {
          OLogManager.instance().warn(this,"",se,m.getName(),iClass.getName());
          return false;
        }
      }
    }
);
    c=f.createClass();
  }
  MethodHandler mi=new OObjectProxyMethodHandler(doc);
  try {
    T newEntity;
    if (iArgs != null && iArgs.length > 0) {
      if (isInnerClass) {
        if (iEnclosingInstance == null) {
          iEnclosingInstance=iClass.getEnclosingClass().newInstance();
        }
        Object[] newArgs=new Object[iArgs.length + 1];
        newArgs[0]=iEnclosingInstance;
        for (int i=0; i < iArgs.length; i++) {
          newArgs[i + 1]=iArgs[i];
        }
        iArgs=newArgs;
      }
      Constructor<T> constructor=null;
      for (      Constructor<?> constr : c.getConstructors()) {
        boolean found=true;
        if (constr.getParameterTypes().length == iArgs.length) {
          for (int i=0; i < constr.getParameterTypes().length; i++) {
            Class<?> parameterType=constr.getParameterTypes()[i];
            if (parameterType.isPrimitive()) {
              if (!isPrimitiveParameterCorrect(parameterType,iArgs[i])) {
                found=false;
                break;
              }
            }
 else             if (iArgs[i] != null && !parameterType.isAssignableFrom(iArgs[i].getClass())) {
              found=false;
              break;
            }
          }
        }
 else {
          continue;
        }
        if (found) {
          constructor=(Constructor<T>)constr;
          break;
        }
      }
      if (constructor != null) {
        newEntity=(T)constructor.newInstance(iArgs);
        initDocument(iClass,newEntity,doc,(ODatabaseObject)ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner());
      }
 else {
        if (iEnclosingInstance != null)         newEntity=createInstanceNoParameters(c,iEnclosingInstance);
 else         newEntity=createInstanceNoParameters(c,iClass);
      }
    }
 else {
      if (iEnclosingInstance != null)       newEntity=createInstanceNoParameters(c,iEnclosingInstance);
 else       newEntity=createInstanceNoParameters(c,iClass);
    }
    ((Proxy)newEntity).setHandler(mi);
    if (OObjectEntitySerializer.hasBoundedDocumentField(iClass))     OObjectEntitySerializer.setFieldValue(OObjectEntitySerializer.getBoundedDocumentField(iClass),newEntity,doc);
    return newEntity;
  }
 catch (  InstantiationException ie) {
    OLogManager.instance().error(this,"Error creating proxied instance for class " + iClass.getName(),ie);
  }
catch (  IllegalAccessException iae) {
    OLogManager.instance().error(this,"Error creating proxied instance for class " + iClass.getName(),iae);
  }
catch (  IllegalArgumentException iae) {
    OLogManager.instance().error(this,"Error creating proxied instance for class " + iClass.getName(),iae);
  }
catch (  SecurityException se) {
    OLogManager.instance().error(this,"Error creating proxied instance for class " + iClass.getName(),se);
  }
catch (  InvocationTargetException ite) {
    OLogManager.instance().error(this,"Error creating proxied instance for class " + iClass.getName(),ite);
  }
catch (  NoSuchMethodException nsme) {
    OLogManager.instance().error(this,"Error creating proxied instance for class " + iClass.getName(),nsme);
  }
  return null;
}
