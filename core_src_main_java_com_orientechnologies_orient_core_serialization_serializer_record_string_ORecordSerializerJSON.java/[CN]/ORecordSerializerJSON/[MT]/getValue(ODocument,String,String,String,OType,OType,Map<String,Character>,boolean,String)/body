{
  if (iFieldValue.equals("null"))   return null;
  if (iFieldName != null && iRecord.getSchemaClass() != null) {
    final OProperty p=iRecord.getSchemaClass().getProperty(iFieldName);
    if (p != null) {
      iType=p.getType();
      iLinkedType=p.getLinkedType();
    }
  }
  if (iType == null && iFieldTypes != null && iFieldTypes.containsKey(iFieldName))   iType=ORecordSerializerStringAbstract.getType(iFieldValue,iFieldTypes.get(iFieldName));
  if (iFieldValue.startsWith("{") && iFieldValue.endsWith("}")) {
    return getValueAsObjectOrMap(iRecord,iFieldValue,iType,iLinkedType,iFieldTypes,iNoMap,iOptions);
  }
 else   if (iFieldValue.startsWith("[") && iFieldValue.endsWith("]")) {
    return getValueAsCollection(iRecord,iFieldValue,iType,iLinkedType,iFieldTypes,iNoMap,iOptions);
  }
  if (iType == null)   if (iFieldValue.charAt(0) != '\"' && iFieldValue.charAt(0) != '\'') {
    if (iFieldValue.equalsIgnoreCase("false") || iFieldValue.equalsIgnoreCase("true"))     iType=OType.BOOLEAN;
 else {
      Character c=null;
      if (iFieldTypes != null) {
        c=iFieldTypes.get(iFieldName);
        if (c != null)         iType=ORecordSerializerStringAbstract.getType(iFieldValue + c);
      }
      if (c == null && !iFieldValue.isEmpty()) {
        if (iFieldValue.charAt(0) == ORID.PREFIX && iFieldValue.contains(":"))         iType=OType.LINK;
 else         if (OStringSerializerHelper.contains(iFieldValue,'.')) {
          final Double v=new Double(OStringSerializerHelper.getStringContent(iFieldValue));
          if (canBeTrunkedToFloat(v))           return v.floatValue();
 else           return v;
        }
 else {
          final Long v=new Long(OStringSerializerHelper.getStringContent(iFieldValue));
          if (canBeTrunkedToInt(v))           return v.intValue();
 else           return v;
        }
      }
    }
  }
 else   if (iFieldValue.startsWith("{") && iFieldValue.endsWith("}"))   iType=OType.EMBEDDED;
 else {
    if (iFieldValueAsString.length() >= 4 && iFieldValueAsString.charAt(0) == ORID.PREFIX && iFieldValueAsString.contains(":")) {
      final List<String> parts=OStringSerializerHelper.split(iFieldValueAsString,1,-1,':');
      if (parts.size() == 2)       try {
        Short.parseShort(parts.get(0));
        if (parts.get(1).matches("\\d+")) {
          iType=OType.LINK;
        }
      }
 catch (      Exception ignored) {
      }
    }
    if (iFieldTypes != null) {
      Character c=iFieldTypes.get(iFieldName);
      if (c != null)       iType=ORecordSerializerStringAbstract.getType(iFieldValueAsString,c);
    }
    if (iType == null)     iType=OType.STRING;
  }
  if (iType != null) switch (iType) {
case STRING:
    return decodeJSON(iFieldValueAsString);
case LINK:
  final int pos=iFieldValueAsString.indexOf('@');
if (pos > -1) return new ODocument(iFieldValueAsString.substring(1,pos),new ORecordId(iFieldValueAsString.substring(pos + 1)));
 else {
  return new ORecordId(iFieldValueAsString);
}
case EMBEDDED:
return fromString(iFieldValueAsString);
case DATE:
if (iFieldValueAsString == null || iFieldValueAsString.equals("")) return null;
try {
return Long.parseLong(iFieldValueAsString);
}
 catch (NumberFormatException e) {
try {
return ODateHelper.getDateFormatInstance().parseObject(iFieldValueAsString);
}
 catch (ParseException ex) {
throw new OSerializationException("Unable to unmarshall date (format=" + ODateHelper.getDateFormat() + ") : "+ iFieldValueAsString,e);
}
}
case DATETIME:
if (iFieldValueAsString == null || iFieldValueAsString.equals("")) return null;
try {
return Long.parseLong(iFieldValueAsString);
}
 catch (NumberFormatException e) {
try {
return ODateHelper.getDateTimeFormatInstance().parseObject(iFieldValueAsString);
}
 catch (ParseException ex) {
throw new OSerializationException("Unable to unmarshall datetime (format=" + ODateHelper.getDateTimeFormat() + ") : "+ iFieldValueAsString,e);
}
}
case BINARY:
return OStringSerializerHelper.fieldTypeFromStream(iRecord,iType,iFieldValueAsString);
default :
return OStringSerializerHelper.fieldTypeFromStream(iRecord,iType,iFieldValue);
}
return iFieldValueAsString;
}
