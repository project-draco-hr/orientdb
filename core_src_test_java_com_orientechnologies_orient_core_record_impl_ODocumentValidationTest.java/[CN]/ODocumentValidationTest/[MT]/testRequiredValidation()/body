{
  ODatabaseDocument db=new ODatabaseDocumentTx("memory:" + ODocumentValidationTest.class.getSimpleName());
  db.create();
  try {
    ODocument doc=new ODocument();
    OIdentifiable id=db.save(doc).getIdentity();
    OClass embeddedClazz=db.getMetadata().getSchema().createClass("EmbeddedValidation");
    embeddedClazz.createProperty("int",OType.INTEGER).setMandatory(true);
    OClass clazz=db.getMetadata().getSchema().createClass("Validation");
    clazz.createProperty("int",OType.INTEGER).setMandatory(true);
    clazz.createProperty("long",OType.LONG).setMandatory(true);
    clazz.createProperty("float",OType.FLOAT).setMandatory(true);
    clazz.createProperty("boolean",OType.BOOLEAN).setMandatory(true);
    clazz.createProperty("binary",OType.BINARY).setMandatory(true);
    clazz.createProperty("byte",OType.BYTE).setMandatory(true);
    clazz.createProperty("date",OType.DATE).setMandatory(true);
    clazz.createProperty("datetime",OType.DATETIME).setMandatory(true);
    clazz.createProperty("decimal",OType.DECIMAL).setMandatory(true);
    clazz.createProperty("double",OType.DOUBLE).setMandatory(true);
    clazz.createProperty("short",OType.SHORT).setMandatory(true);
    clazz.createProperty("string",OType.STRING).setMandatory(true);
    clazz.createProperty("link",OType.LINK).setMandatory(true);
    clazz.createProperty("embedded",OType.EMBEDDED,embeddedClazz).setMandatory(true);
    clazz.createProperty("embeddedListNoClass",OType.EMBEDDEDLIST).setMandatory(true);
    clazz.createProperty("embeddedSetNoClass",OType.EMBEDDEDSET).setMandatory(true);
    clazz.createProperty("embeddedMapNoClass",OType.EMBEDDEDMAP).setMandatory(true);
    clazz.createProperty("embeddedList",OType.EMBEDDEDLIST,embeddedClazz).setMandatory(true);
    clazz.createProperty("embeddedSet",OType.EMBEDDEDSET,embeddedClazz).setMandatory(true);
    clazz.createProperty("embeddedMap",OType.EMBEDDEDMAP,embeddedClazz).setMandatory(true);
    clazz.createProperty("linkList",OType.LINKLIST).setMandatory(true);
    clazz.createProperty("linkSet",OType.LINKSET).setMandatory(true);
    clazz.createProperty("linkMap",OType.LINKMAP).setMandatory(true);
    ODocument d=new ODocument(clazz);
    d.field("int",10);
    d.field("long",10);
    d.field("float",10);
    d.field("boolean",10);
    d.field("binary",new byte[]{});
    d.field("byte",10);
    d.field("date",new Date());
    d.field("datetime",new Date());
    d.field("decimal",10);
    d.field("double",10);
    d.field("short",10);
    d.field("string","yeah");
    d.field("link",id);
    d.field("linkList",new ArrayList<ORecordId>());
    d.field("linkSet",new HashSet<ORecordId>());
    d.field("linkMap",new HashMap<String,ORecordId>());
    d.field("embeddedListNoClass",new ArrayList<ORecordId>());
    d.field("embeddedSetNoClass",new HashSet<ORecordId>());
    d.field("embeddedMapNoClass",new HashMap<String,ORecordId>());
    ODocument embedded=new ODocument("EmbeddedValidation");
    embedded.field("int",20);
    embedded.field("long",20);
    d.field("embedded",embedded);
    ODocument embeddedInList=new ODocument("EmbeddedValidation");
    embeddedInList.field("int",30);
    embeddedInList.field("long",30);
    final ArrayList<ODocument> embeddedList=new ArrayList<ODocument>();
    embeddedList.add(embeddedInList);
    d.field("embeddedList",embeddedList);
    ODocument embeddedInSet=new ODocument("EmbeddedValidation");
    embeddedInSet.field("int",30);
    embeddedInSet.field("long",30);
    final Set<ODocument> embeddedSet=new HashSet<ODocument>();
    embeddedSet.add(embeddedInSet);
    d.field("embeddedSet",embeddedSet);
    ODocument embeddedInMap=new ODocument("EmbeddedValidation");
    embeddedInMap.field("int",30);
    embeddedInMap.field("long",30);
    final Map<String,ODocument> embeddedMap=new HashMap<String,ODocument>();
    embeddedMap.put("testEmbedded",embeddedInMap);
    d.field("embeddedMap",embeddedMap);
    d.validate();
    checkRequireField(d,"int");
    checkRequireField(d,"long");
    checkRequireField(d,"float");
    checkRequireField(d,"boolean");
    checkRequireField(d,"binary");
    checkRequireField(d,"byte");
    checkRequireField(d,"date");
    checkRequireField(d,"datetime");
    checkRequireField(d,"decimal");
    checkRequireField(d,"double");
    checkRequireField(d,"short");
    checkRequireField(d,"string");
    checkRequireField(d,"link");
    checkRequireField(d,"embedded");
    checkRequireField(d,"embeddedList");
    checkRequireField(d,"embeddedSet");
    checkRequireField(d,"embeddedMap");
    checkRequireField(d,"linkList");
    checkRequireField(d,"linkSet");
    checkRequireField(d,"linkMap");
  }
  finally {
    db.drop();
  }
}
