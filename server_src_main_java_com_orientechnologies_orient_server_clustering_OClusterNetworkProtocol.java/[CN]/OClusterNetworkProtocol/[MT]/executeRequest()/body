{
switch (requestType) {
case OClusterProtocol.REQUEST_NODE2NODE_CONNECT:
{
      commandInfo="Connection from node";
      remoteNodeId=channel.readString();
      if (OLogManager.instance().isDebugEnabled())       OLogManager.instance().debug(this,"REPL NODE <%s> connected, authenticating it...",remoteNodeId);
      setName("OrientDB <- Node/" + remoteNodeId);
      final String userName=channel.readString();
      serverLogin(userName,channel.readString(),"connect");
      if (OLogManager.instance().isDebugEnabled())       OLogManager.instance().debug(this,"REPL NODE <%s> authenticated correctly with user '%s'",remoteNodeId,userName);
      beginResponse();
      try {
        sendOk(clientTxId);
      }
  finally {
        endResponse();
      }
      break;
    }
case OClusterProtocol.REQUEST_LEADER2PEER_CONNECT:
{
    commandInfo="Connection from leader";
    final ODocument doc=new ODocument().fromStream(channel.readBytes());
    final String clusterName=doc.field("clusterName");
    final byte[] encodedSecurityKey=doc.field("clusterKey");
    final String leaderAddress=doc.field("leaderNodeAddress");
    if (!clusterName.equals(manager.getName()) || !Arrays.equals(encodedSecurityKey,manager.getConfig().getSecurityKey()))     throw new OSecurityException("Invalid combination of cluster name and key received");
    boolean remainTheLeader=false;
    beginResponse();
    try {
      sendOk(clientTxId);
      if (manager.isLeader()) {
        OLogManager.instance().warn(this,"Received remote connection from the leader node %s, but current node is itself leader: split network problem or high network latency?",leaderAddress);
        final String myUid=InetAddress.getLocalHost().getHostAddress() + ":" + channel.socket.getLocalPort();
        if (leaderAddress.compareTo(myUid) > 0) {
          remainTheLeader=true;
          OLogManager.instance().warn(this,"Current node remains the Leader of the cluster because it has lower network address",leaderAddress);
        }
      }
      channel.writeByte((byte)(remainTheLeader ? 0 : 1));
      if (!remainTheLeader) {
        final ODocument localCfg=manager.getReplicator().getLocalDatabaseConfiguration();
        channel.writeBytes(localCfg.toStream());
      }
    }
  finally {
      endResponse();
    }
    if (remainTheLeader)     sendShutdown();
 else {
      setName("OrientDB <- Distributed Leader");
      manager.becomePeer(this);
      manager.getReplicator().updateConfiguration(new ODocument(channel.readBytes()));
    }
    break;
  }
case OClusterProtocol.REQUEST_LEADER2PEER_HEARTBEAT:
checkConnected();
commandInfo="Cluster Heartbeat";
final long lastInterval=manager.updateHeartBeatTime();
if (OLogManager.instance().isDebugEnabled()) OLogManager.instance().debug(this,"Received heartbeat message from leader. Last interval was " + lastInterval + "ms");
beginResponse();
try {
sendOk(clientTxId);
}
  finally {
endResponse();
}
break;
case OClusterProtocol.REQUEST_NODE2NODE_REPLICATION_SYNCHRONIZE:
{
commandInfo="Synchronization between nodes";
final String dbName=channel.readString();
final ODocument cfg=new ODocument(channel.readBytes());
if (OLogManager.instance().isInfoEnabled()) OLogManager.instance().info(this,"REPL DB <-(%s) received synchronization request from node %s...",dbName,remoteNodeId);
if (!databases.containsKey(dbName)) {
final ODatabaseDocumentTx db=(ODatabaseDocumentTx)openDatabase(ODatabaseDocumentTx.TYPE,dbName,serverUser.name,serverUser.password);
databases.put(dbName,db);
}
beginResponse();
try {
sendOk(clientTxId);
final ORecordOperation op=new ORecordOperation();
Collection<ODocument> nodes=cfg.field("nodes");
channel.writeInt(nodes.size());
for (ODocument nodeCfg : nodes) {
final String node=nodeCfg.field("node");
channel.writeString(node);
final long lastLog=(Long)nodeCfg.field("lastLog");
OLogManager.instance().info(this,"REPL DB <-(%s) reading operation logs from %s after %d",dbName,remoteNodeId,lastLog);
final OOperationLog opLog=manager.getReplicator().getOperationLog(node,dbName);
if (opLog != null) {
int position=opLog.findOperationId(lastLog);
int sent=0;
channel.writeInt(position);
for (int i=position - 1; i >= 0; --i) {
opLog.getEntry(i,op);
channel.writeBytes(op.toStream());
sent++;
OLogManager.instance().info(this,"REPL DB <-(%s) #%d operation %d with RID %s",dbName,sent,op.serial,op.record.getIdentity());
}
}
 else channel.writeInt(0);
}
}
  finally {
endResponse();
}
OLogManager.instance().info(this,"REPL DB (%s)-> synchronization completed from node %s, starting inverse replication...",dbName,remoteNodeId);
manager.getReplicator().startReplication(dbName,remoteNodeId,SYNCH_TYPE.ASYNCH.toString());
OLogManager.instance().info(this,"REPL DB <-(%s) reverse synchronization completed to node %s",dbName,remoteNodeId);
break;
}
case OClusterProtocol.REQUEST_NODE2NODE_REPLICATION_RECORD_CHANGE:
{
commandInfo="Distributed record change";
final String dbName=channel.readString();
final byte operationType=channel.readByte();
final long operationId=channel.readLong();
final ORecordId rid=channel.readRID();
final byte[] buffer=channel.readBytes();
final int version=channel.readInt();
final byte recordType=channel.readByte();
OLogManager.instance().info(this,"REPL DB <-(%s) %s record %s from %s...",dbName,ORecordOperation.getName(operationType),rid,remoteNodeId);
final long result;
ODatabaseRecord database=databases.get(dbName);
ODistributedRequesterThreadLocal.INSTANCE.set(true);
try {
switch (operationType) {
case ORecordOperation.CREATED:
long origClusterPosition=rid.clusterPosition;
rid.clusterPosition=-1;
result=createRecord(database,rid,buffer,recordType);
if (result != origClusterPosition) throw new OReplicationConflictException("Record created has RID different by the original: original " + rid.clusterId + ":"+ origClusterPosition+ ", local "+ rid.clusterId+ ":"+ result);
break;
case ORecordOperation.UPDATED:
result=updateRecord(database,rid,buffer,version,recordType);
break;
case ORecordOperation.DELETED:
result=deleteRecord(database,rid,version);
break;
default :
throw new IllegalArgumentException("Received invalid distributed record change operation type: " + operationType);
}
}
  finally {
ODistributedRequesterThreadLocal.INSTANCE.set(false);
}
final ODistributedNode node=manager.getReplicator().getNode(remoteNodeId);
final ODistributedDatabaseInfo db=node.getDatabase(database.getName());
db.log.appendLog(operationId,operationType,rid);
beginResponse();
try {
sendOk(clientTxId);
channel.writeLong(result);
}
  finally {
endResponse();
}
break;
}
case OClusterProtocol.REQUEST_NODE2NODE_DB_COPY:
{
checkConnected();
commandInfo="Importing a database from a remote node";
final String dbName=channel.readString();
final String dbUser=channel.readString();
final String dbPasswd=channel.readString();
final String dbType=channel.readString();
final String engineType=channel.readString();
try {
OLogManager.instance().info(this,"REPL <%s> importing database...",dbName);
ODatabaseDocumentTx database=getDatabaseInstance(dbName,dbType,engineType);
if (database.exists()) {
OLogManager.instance().info(this,"REPL <%s> deleting existent database...",database.getName());
database.drop();
}
database=createDatabase(database,dbUser,dbPasswd);
if (database.isClosed()) database.open(dbUser,dbPasswd);
OLogManager.instance().info(this,"REPL <%s> reading database content via streaming from remote server node...",dbName);
beginResponse();
try {
new ODatabaseImport(database,new OChannelBinaryInputStream(channel),this).importDatabase();
OLogManager.instance().info(this,"REPL <%s> database imported correctly",dbName);
sendOk(clientTxId);
}
  finally {
endResponse();
}
}
  finally {
manager.getPeer().updateHeartBeatTime();
}
manager.getPeer().updateConfigurationToLeader();
break;
}
default :
return false;
}
return true;
}
