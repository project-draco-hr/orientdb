{
  if (iValue == null)   return null;
  iValue=iValue.trim();
  Object fieldValue=VALUE_NOT_PARSED;
  if (iValue.startsWith("'") && iValue.endsWith("'") || iValue.startsWith("\"") && iValue.endsWith("\""))   fieldValue=OIOUtils.getStringContent(iValue);
 else   if (iValue.charAt(0) == OStringSerializerHelper.LIST_BEGIN && iValue.charAt(iValue.length() - 1) == OStringSerializerHelper.LIST_END) {
    final List<String> items=OStringSerializerHelper.smartSplit(iValue.substring(1,iValue.length() - 1),OStringSerializerHelper.RECORD_SEPARATOR);
    final List<Object> coll=new ArrayList<Object>();
    for (    String item : items) {
      coll.add(parseValue(item,iContext));
    }
    fieldValue=coll;
  }
 else   if (iValue.charAt(0) == OStringSerializerHelper.MAP_BEGIN && iValue.charAt(iValue.length() - 1) == OStringSerializerHelper.MAP_END) {
    final List<String> items=OStringSerializerHelper.smartSplit(iValue.substring(1,iValue.length() - 1),OStringSerializerHelper.RECORD_SEPARATOR);
    final Map<Object,Object> map=new HashMap<Object,Object>();
    for (    String item : items) {
      final List<String> parts=OStringSerializerHelper.smartSplit(item,OStringSerializerHelper.ENTRY_SEPARATOR);
      if (parts == null || parts.size() != 2)       throw new OCommandSQLParsingException("Map found but entries are not defined as <key>:<value>");
      Object key=OStringSerializerHelper.decode(parseValue(parts.get(0),iContext).toString());
      Object value=parseValue(parts.get(1),iContext);
      if (value instanceof String) {
        value=OStringSerializerHelper.decode(value.toString());
      }
      map.put(key,value);
    }
    if (map.containsKey(ODocumentHelper.ATTRIBUTE_TYPE))     fieldValue=new ODocument().fromJSON(iValue);
 else     fieldValue=map;
  }
 else   if (iValue.charAt(0) == OStringSerializerHelper.EMBEDDED_BEGIN && iValue.charAt(iValue.length() - 1) == OStringSerializerHelper.EMBEDDED_END) {
    fieldValue=new OCommandSQL(iValue.substring(1,iValue.length() - 1));
    ((OCommandSQL)fieldValue).getContext().setParent(iContext);
  }
 else   if (ORecordId.isA(iValue))   fieldValue=new ORecordId(iValue.trim());
 else {
    if (iValue.equalsIgnoreCase("null"))     fieldValue=null;
 else     if (iValue.equalsIgnoreCase("not null"))     fieldValue=NOT_NULL;
 else     if (iValue.equalsIgnoreCase("defined"))     fieldValue=DEFINED;
 else     if (iValue.equalsIgnoreCase("true"))     fieldValue=Boolean.TRUE;
 else     if (iValue.equalsIgnoreCase("false"))     fieldValue=Boolean.FALSE;
 else     if (iValue.startsWith("date(")) {
      final OSQLFunctionRuntime func=OSQLHelper.getFunction(null,iValue);
      if (func != null) {
        fieldValue=func.execute(null,null,null,iContext);
      }
    }
 else {
      final Object v=parseStringNumber(iValue);
      if (v != null)       fieldValue=v;
    }
  }
  return fieldValue;
}
