{
  checkClass();
  graph.setCurrentGraphInThreadLocal();
  graph.autoStartTransaction();
  for (  final Index<? extends Element> index : graph.getManualIndices()) {
    if (Edge.class.isAssignableFrom(index.getIndexClass())) {
      OrientIndex<OrientEdge> idx=(OrientIndex<OrientEdge>)index;
      idx.removeElement(this);
    }
  }
  final OIdentifiable inVertexEdge=vIn != null ? vIn : rawElement;
  final ODocument outVertex=getOutVertex().getRecord();
  final String edgeClassName=OrientBaseGraph.encodeClassName(getLabel());
  final boolean useVertexFieldsForEdgeLabels=graph.isUseVertexFieldsForEdgeLabels();
  final String outFieldName=OrientVertex.getConnectionFieldName(Direction.OUT,edgeClassName,useVertexFieldsForEdgeLabels);
  dropEdgeFromVertex(inVertexEdge,outVertex,outFieldName,outVertex.field(outFieldName));
  final OIdentifiable outVertexEdge=vOut != null ? vOut : rawElement;
  final ODocument inVertex=getInVertex().getRecord();
  final String inFieldName=OrientVertex.getConnectionFieldName(Direction.IN,edgeClassName,useVertexFieldsForEdgeLabels);
  dropEdgeFromVertex(outVertexEdge,inVertex,inFieldName,inVertex.field(inFieldName));
  outVertex.save();
  inVertex.save();
  if (rawElement != null)   super.remove();
}
