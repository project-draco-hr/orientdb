{
  try {
    final StringWriter buffer=new StringWriter();
    final OJSONWriter json=new OJSONWriter(buffer);
    boolean includeVer;
    boolean includeType;
    boolean includeId;
    boolean includeClazz;
    boolean attribSameRow;
    int indentLevel;
    if (iFormat == null) {
      includeType=true;
      includeVer=true;
      includeId=true;
      includeClazz=true;
      attribSameRow=true;
      indentLevel=0;
    }
 else {
      includeType=false;
      includeVer=false;
      includeId=false;
      includeClazz=false;
      attribSameRow=false;
      indentLevel=0;
      String[] format=iFormat.split(",");
      for (      String f : format)       if (f.equals("type"))       includeType=true;
 else       if (f.equals("rid"))       includeId=true;
 else       if (f.equals("version"))       includeVer=true;
 else       if (f.equals("class"))       includeClazz=true;
 else       if (f.equals("attribSameRow"))       attribSameRow=true;
 else       if (f.startsWith("indent"))       indentLevel=Integer.parseInt(f.substring(f.indexOf(":") + 1));
    }
    json.beginObject(indentLevel);
    boolean firstAttribute=true;
    if (includeType) {
      json.writeAttribute(firstAttribute ? indentLevel + 1 : 0,firstAttribute,ATTRIBUTE_TYPE,"" + (char)iRecord.getRecordType());
      if (attribSameRow)       firstAttribute=false;
    }
    if (includeId && iRecord.getIdentity() != null && iRecord.getIdentity().isValid()) {
      json.writeAttribute(firstAttribute ? indentLevel + 1 : 0,firstAttribute,ATTRIBUTE_ID,iRecord.getIdentity().toString());
      if (attribSameRow)       firstAttribute=false;
    }
    if (includeVer && iRecord.getVersion() > 0) {
      json.writeAttribute(firstAttribute ? indentLevel + 1 : 0,firstAttribute,ATTRIBUTE_VERSION,iRecord.getVersion());
      if (attribSameRow)       firstAttribute=false;
    }
    if (includeClazz && iRecord instanceof ORecordSchemaAware<?> && ((ORecordSchemaAware<?>)iRecord).getClassName() != null) {
      json.writeAttribute(firstAttribute ? indentLevel + 1 : 0,firstAttribute,ATTRIBUTE_CLASS,((ORecordSchemaAware<?>)iRecord).getClassName());
      if (attribSameRow)       firstAttribute=false;
    }
    if (iRecord instanceof ORecordSchemaAware<?>) {
      final ORecordSchemaAware<?> record=(ORecordSchemaAware<?>)iRecord;
      for (      String fieldName : record.fieldNames()) {
        json.writeAttribute(indentLevel + 1,true,fieldName,encode(record.field(fieldName)));
      }
    }
 else     if (iRecord instanceof ORecordStringable) {
      final ORecordStringable record=(ORecordStringable)iRecord;
      json.writeAttribute(indentLevel + 1,true,"value",record.value());
    }
 else     if (iRecord instanceof ORecordBytes) {
      final ORecordBytes record=(ORecordBytes)iRecord;
      json.writeAttribute(indentLevel + 1,true,"value",OBase64Utils.encodeBytes(record.toStream()));
    }
 else     throw new OSerializationException("Error on marshalling record of type '" + iRecord.getClass() + "' to JSON. The record type can't be exported to JSON");
    json.endObject(indentLevel);
    return buffer.toString();
  }
 catch (  IOException e) {
    throw new OSerializationException("Error on marshalling of record to JSON",e);
  }
}
