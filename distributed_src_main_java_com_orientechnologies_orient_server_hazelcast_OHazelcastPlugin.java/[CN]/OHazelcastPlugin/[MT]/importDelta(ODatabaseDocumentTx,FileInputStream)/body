{
  try {
    serverInstance.openDatabase(db);
    OScenarioThreadLocal.executeAsDistributed(new Callable<Object>(){
      @Override public Object call() throws Exception {
        db.activateOnCurrentThread();
        long totalRecords=0;
        long totalCreated=0;
        long totalUpdated=0;
        long totalDeleted=0;
        long totalHoles=0;
        ODistributedServerLog.info(this,nodeName,null,DIRECTION.NONE,"Started import of delta for database '" + db.getName() + "'");
        long lastLap=System.currentTimeMillis();
        try {
          final DataInputStream input=new DataInputStream(in);
          try {
            final long records=input.readLong();
            for (long i=0; i < records; ++i) {
              final int clusterId=input.readInt();
              final long clusterPos=input.readLong();
              final boolean deleted=input.readBoolean();
              final ORecordId rid=new ORecordId(clusterId,clusterPos);
              totalRecords++;
              final ORecord loadedRecord=rid.getRecord();
              if (deleted) {
                ODistributedServerLog.debug(this,nodeName,null,DIRECTION.NONE,"DELTA <- deleting " + rid);
                if (loadedRecord != null)                 db.delete(rid);
                totalDeleted++;
              }
 else {
                final int recordVersion=input.readInt();
                final int recordType=input.readByte();
                final int recordSize=input.readInt();
                final byte[] recordContent=new byte[recordSize];
                input.read(recordContent);
                ORecord newRecord=null;
                if (loadedRecord == null) {
                  ODistributedServerLog.debug(this,nodeName,null,DIRECTION.NONE,"DELTA <- creating rid=%s type=%d size=%d v=%d",rid,recordType,recordSize,recordVersion);
                  do {
                    newRecord=Orient.instance().getRecordFactoryManager().newInstance((byte)recordType);
                    ORecordInternal.fill(newRecord,new ORecordId(rid.getClusterId(),-1),recordVersion - 1,recordContent,true);
                    newRecord.save();
                    if (newRecord.getIdentity().getClusterPosition() < clusterPos) {
                      ODistributedServerLog.debug(this,nodeName,null,DIRECTION.NONE,"DELTA <- creating hole rid=%s",newRecord.getIdentity());
                      newRecord.delete();
                      totalHoles++;
                    }
                  }
 while (newRecord.getIdentity().getClusterPosition() < clusterPos);
                  totalCreated++;
                }
 else {
                  ODistributedServerLog.debug(this,nodeName,null,DIRECTION.NONE,"DELTA <- updating rid=%s type=%d size=%d v=%d",rid,recordType,recordSize,recordVersion);
                  newRecord=Orient.instance().getRecordFactoryManager().newInstance((byte)recordType);
                  ORecordInternal.fill(newRecord,rid,ORecordVersionHelper.setRollbackMode(recordVersion),recordContent,true);
                  if (loadedRecord instanceof ODocument) {
                    ODocument loadedDocument=(ODocument)loadedRecord;
                    loadedDocument.merge((ODocument)newRecord,false,false).getVersion();
                    loadedDocument.setDirty();
                    newRecord=loadedDocument;
                  }
                  newRecord.save();
                  totalUpdated++;
                }
                if (!newRecord.getIdentity().equals(rid))                 throw new ODistributedDatabaseDeltaSyncException("Error on synchronization of records, rids are different: saved " + newRecord.getIdentity() + ", but it should be "+ rid);
              }
              final long now=System.currentTimeMillis();
              if (now - lastLap > 1000) {
                ODistributedServerLog.info(this,nodeName,null,DIRECTION.IN,"- %d total entries: %d created, %d updated, %d deleted, %d holes...",db.getName(),totalRecords,totalCreated,totalUpdated,totalDeleted,totalHoles);
                lastLap=now;
              }
            }
            db.getMetadata().reload();
          }
  finally {
            input.close();
          }
        }
 catch (        Exception e) {
          ODistributedServerLog.error(this,nodeName,null,DIRECTION.IN,"Error on installing database delta '%s' on local server",e,db.getName());
          throw OException.wrapException(new ODistributedException("Error on installing database delta '" + db.getName() + "' on local server"),e);
        }
 finally {
        }
        ODistributedServerLog.info(this,nodeName,null,DIRECTION.IN,"Installed database delta for '%s'. %d total entries: %d created, %d updated, %d deleted, %d holes",db.getName(),totalRecords,totalCreated,totalUpdated,totalDeleted,totalHoles);
        return null;
      }
    }
);
    db.activateOnCurrentThread();
  }
 catch (  Exception e) {
    ODistributedServerLog.error(this,nodeName,null,DIRECTION.NONE,"Error while applying changes of database delta sync on '%s': forcing full database sync...",e,db.getName());
    throw OException.wrapException(new ODistributedDatabaseDeltaSyncException("Error while applying changes of database delta sync on '" + db.getName() + "': forcing full database sync..."),e);
  }
}
