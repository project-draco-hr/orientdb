{
  originalDB.activateOnCurrentThread();
  final long originalRecords=originalDB.countClass("Sample");
  syncDB.activateOnCurrentThread();
  final long syncRecords=syncDB.countClass("Sample");
  Assert.assertEquals(originalRecords,syncRecords);
  originalDB.activateOnCurrentThread();
  OSchema schema=originalDB.getMetadata().getSchema();
  OClass clazz=schema.getClass("Sample");
  int[] clusterIds=clazz.getClusterIds();
  for (  int clusterId : clusterIds) {
    final OStorage originalStorage=originalDB.getStorage();
    final OStorage syncedStorage=syncDB.getStorage();
    final long[] db1Range=originalStorage.getClusterDataRange(clusterId);
    final long[] db2Range=syncedStorage.getClusterDataRange(clusterId);
    Assert.assertEquals(db1Range,db2Range);
    final ORecordId rid=new ORecordId(clusterId);
    OPhysicalPosition[] physicalPositions=originalStorage.ceilingPhysicalPositions(clusterId,new OPhysicalPosition(0));
    while (physicalPositions.length > 0) {
      for (      OPhysicalPosition physicalPosition : physicalPositions) {
        rid.clusterPosition=physicalPosition.clusterPosition;
        final ORawBuffer originalBuffer=originalStorage.readRecord(rid,null,true,null).getResult();
        final ORawBuffer syncBuffer=syncedStorage.readRecord(rid,null,true,null).getResult();
        Assert.assertEquals(originalBuffer.recordType,syncBuffer.recordType);
        Assert.assertEquals(originalBuffer.version,syncBuffer.version);
        Assert.assertEquals(originalBuffer.buffer,syncBuffer.buffer);
      }
      physicalPositions=originalStorage.higherPhysicalPositions(clusterId,physicalPositions[physicalPositions.length - 1]);
    }
  }
}
