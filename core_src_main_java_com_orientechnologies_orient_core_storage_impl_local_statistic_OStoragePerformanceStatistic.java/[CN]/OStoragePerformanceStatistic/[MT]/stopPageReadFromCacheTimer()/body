{
  final Deque<Long> stamps=tlTimeStumps.get();
  if (stamps.size() > 0) {
    final long endTs=nanoTimer.getNano();
    final long timeDiff=endTs - stamps.pop();
    final PerformanceCounters pf=performanceCounters.get();
    if (pf != null) {
      final AtomicReference<OTimeCounter> readSpeedFromCache=pf.readSpeedFromCache;
      OTimeCounter oldReadSpeedFromCache=readSpeedFromCache.get();
      OTimeCounter newReadSpeedFromCache=new OTimeCounter(oldReadSpeedFromCache.getTime() + timeDiff,oldReadSpeedFromCache.getCounter() + 1);
      while (!readSpeedFromCache.compareAndSet(oldReadSpeedFromCache,newReadSpeedFromCache)) {
        oldReadSpeedFromCache=readSpeedFromCache.get();
        newReadSpeedFromCache=new OTimeCounter(oldReadSpeedFromCache.getTime() + timeDiff,oldReadSpeedFromCache.getCounter() + 1);
      }
    }
  }
}
