{
  database1=new ODatabaseDocumentTx(url).open("admin","admin");
  database2=new ODatabaseDocumentTx(url).open("admin","admin");
  database1.begin(TXTYPE.OPTIMISTIC);
  ODocument vDocA_db1=database1.newInstance();
  vDocA_db1.field(NAME,"docA");
  vDocA_db1.save();
  ODocument vDocB_db1=database1.newInstance();
  vDocB_db1.field(NAME,"docB");
  vDocB_db1.save();
  database1.commit();
  ORID vDocA_Rid=vDocA_db1.getIdentity().copy();
  ORID vDocB_Rid=vDocB_db1.getIdentity().copy();
  database2.begin(TXTYPE.OPTIMISTIC);
  try {
    ODocument vDocA_db2=database2.load(vDocA_Rid);
    vDocA_db2.field(NAME,"docA_v2");
    vDocA_db2.save();
    database1.begin(TXTYPE.OPTIMISTIC);
    try {
      vDocA_db1.field(NAME,"docA_v3");
      vDocA_db1.save();
      database1.commit();
    }
 catch (    OConcurrentModificationException e) {
      Assert.fail("Should not failed here...");
    }
    Assert.assertEquals(vDocA_db1.field(NAME),"docA_v3");
    ODocument vDocB_db2=database2.load(vDocB_Rid);
    vDocB_db2.field(NAME,"docB_UpdatedInTranscationThatWillBeRollbacked");
    vDocB_db2.save();
    database2.commit();
    Assert.fail("Should throw OConcurrentModificationException");
  }
 catch (  OConcurrentModificationException e) {
    database2.rollback();
  }
  database1.close();
  database2.getStorage().close();
  database2=new ODatabaseDocumentTx(url).open("admin","admin");
  ODocument vDocB_db2=database2.load(vDocB_Rid);
  Assert.assertEquals(vDocB_db2.field(NAME),"docB");
  database1.close();
  database2.close();
}
