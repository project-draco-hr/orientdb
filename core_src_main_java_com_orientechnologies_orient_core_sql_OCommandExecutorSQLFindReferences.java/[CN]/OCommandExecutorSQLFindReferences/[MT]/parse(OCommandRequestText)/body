{
  iRequest.getDatabase().checkSecurity(ODatabaseSecurityResources.COMMAND,ORole.PERMISSION_READ);
  init(iRequest.getDatabase(),iRequest.getText());
  final StringBuilder word=new StringBuilder();
  int oldPos=0;
  int pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
  if (pos == -1 || !word.toString().equals(KEYWORD_FIND))   throw new OCommandSQLParsingException("Keyword " + KEYWORD_FIND + " not found",text,oldPos);
  oldPos=pos;
  pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
  if (pos == -1 || !word.toString().equals(KEYWORD_REFERENCES))   throw new OCommandSQLParsingException("Keyword " + KEYWORD_REFERENCES + " not found",text,oldPos);
  oldPos=pos;
  pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,false);
  if (pos == -1)   throw new OCommandSQLParsingException("Expected <recordId>",text,oldPos);
  final String recordIdString=word.toString();
  if (recordIdString == null || recordIdString.equals(""))   throw new OCommandSQLParsingException("Record to search can't be null",text,pos);
  try {
    recordId=new ORecordId(recordIdString);
    if (!recordId.isValid())     throw new OCommandSQLParsingException("Record ID " + recordIdString + " is not valid",text,pos);
  }
 catch (  IllegalArgumentException iae) {
    throw new OCommandSQLParsingException("Error reading record Id",text,pos,iae);
  }
  oldPos=pos;
  pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
  if (pos != -1) {
    classList=word.toString().trim();
    if (!classList.startsWith("[") || !classList.endsWith("]")) {
      throw new OCommandSQLParsingException("Class list must be contained in []",text,pos);
    }
    classList=classList.substring(1,classList.length() - 1);
  }
  return this;
}
