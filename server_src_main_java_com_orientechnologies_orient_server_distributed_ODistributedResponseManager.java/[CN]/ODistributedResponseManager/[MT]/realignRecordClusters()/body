{
  final Set<Integer> clusterIds=new HashSet<Integer>();
  long minClusterPos=Long.MAX_VALUE;
  long maxClusterPos=Long.MIN_VALUE;
  for (  ODistributedResponse r : getReceivedResponses()) {
    final ORemoteTask task=request.getTask();
    if (task instanceof OCreateRecordTask) {
      final Object badResponse=r.getPayload();
      if (badResponse instanceof Throwable)       return false;
      final OPlaceholder badResult=(OPlaceholder)badResponse;
      clusterIds.add(badResult.getIdentity().getClusterId());
      if (clusterIds.size() > 1)       return false;
      final long clPos=((OPlaceholder)badResponse).getIdentity().getClusterPosition();
      if (clPos < minClusterPos)       minClusterPos=clPos;
      if (clPos > maxClusterPos)       maxClusterPos=clPos;
    }
  }
  if (clusterIds.isEmpty())   return false;
  if (minClusterPos == maxClusterPos)   return false;
  for (  ODistributedResponse r : getReceivedResponses()) {
    final ORemoteTask task=request.getTask();
    final OPlaceholder origPh=(OPlaceholder)r.getPayload();
    for (long i=minClusterPos; i <= maxClusterPos; ++i) {
      if (i > origPh.getIdentity().getClusterPosition()) {
        ORecordInternal.setIdentity(((OCreateRecordTask)task).getRecord(),((OCreateRecordTask)task).getRecord().getIdentity().getClusterId(),-1);
        dManager.sendRequest(request.getDatabaseName(),null,OMultiValue.getSingletonList(r.getExecutorNodeName()),task,ODistributedRequest.EXECUTION_MODE.NO_RESPONSE,null);
      }
      final OPlaceholder ph=new OPlaceholder(new ORecordId(origPh.getIdentity().getClusterId(),i),-1);
      final ODeleteRecordTask undoTask=new ODeleteRecordTask(new ORecordId(ph.getIdentity()),ph.getVersion()).setDelayed(false);
      if (undoTask != null) {
        ODistributedServerLog.warn(this,dManager.getLocalNodeName(),null,DIRECTION.NONE,"sending undo message (%s) for request (%s) to server %s",undoTask,request,r.getExecutorNodeName());
        dManager.sendRequest(request.getDatabaseName(),null,OMultiValue.getSingletonList(r.getExecutorNodeName()),undoTask,ODistributedRequest.EXECUTION_MODE.NO_RESPONSE,null);
      }
    }
  }
  return true;
}
