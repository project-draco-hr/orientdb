{
  final OSchema schema=database.getMetadata().getSchema();
  OClass clazz=schema.createClass("compositeIndexNullRangeQueryClass");
  clazz.createProperty("prop1",OType.INTEGER);
  clazz.createProperty("prop2",OType.INTEGER);
  clazz.createProperty("prop3",OType.INTEGER);
  final ODocument metadata=new ODocument();
  metadata.field("ignoreNullValues",false);
  clazz.createIndex("compositeIndexNullRangeQueryIndex",OClass.INDEX_TYPE.NOTUNIQUE.toString(),null,metadata,null,new String[]{"prop1","prop2","prop3"});
  for (int i=0; i < 20; i++) {
    ODocument document=new ODocument("compositeIndexNullRangeQueryClass");
    document.field("prop1",i / 10);
    document.field("prop2",i / 5);
    if (i % 2 == 0)     document.field("prop3",i);
    document.save();
  }
  String query="select from compositeIndexNullRangeQueryClass where prop1 = 1 and prop2 > 2";
  List<ODocument> result=database.query(new OSQLSynchQuery<ODocument>(query));
  Assert.assertEquals(result.size(),5);
  for (int k=0; k < 5; k++) {
    ODocument document=result.get(k);
    Assert.assertEquals(document.field("prop1"),1);
    Assert.assertTrue(document.<Integer>field("prop2") > 2);
  }
  ODocument explain=database.command(new OCommandSQL("explain " + query)).execute();
  Assert.assertTrue(explain.<Set<String>>field("involvedIndexes").contains("compositeIndexNullRangeQueryIndex"));
  query="select from compositeIndexNullRangeQueryClass where prop1 > 0";
  result=database.query(new OSQLSynchQuery<ODocument>(query));
  Assert.assertEquals(result.size(),10);
  for (int k=0; k < 10; k++) {
    ODocument document=result.get(k);
    Assert.assertTrue(document.<Integer>field("prop1") > 0);
  }
}
