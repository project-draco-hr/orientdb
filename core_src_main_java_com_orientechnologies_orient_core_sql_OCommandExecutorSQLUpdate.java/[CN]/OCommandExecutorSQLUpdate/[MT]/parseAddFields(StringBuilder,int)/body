{
  String fieldName;
  String fieldValue;
  int newPos=pos;
  while (pos != -1 && (addEntries.size() == 0 || word.toString().equals(",")) && !word.toString().equals(KEYWORD_WHERE)) {
    newPos=OSQLHelper.nextWord(text,textUpperCase,pos,word,false);
    if (newPos == -1)     throw new OCommandSQLParsingException("Field name expected. Use " + getSyntax(),text,pos);
    pos=newPos;
    fieldName=word.toString();
    newPos=OStringParser.jumpWhiteSpaces(text,pos);
    if (newPos == -1 || text.charAt(newPos) != '=')     throw new OCommandSQLParsingException("Character '=' was expected. Use " + getSyntax(),text,pos);
    pos=newPos + 1;
    newPos=OSQLHelper.nextWord(text,textUpperCase,pos,word,false," =><");
    if (pos == -1)     throw new OCommandSQLParsingException("Value expected. Use " + getSyntax(),text,pos);
    fieldValue=word.toString();
    if (fieldValue.startsWith("{") || fieldValue.startsWith("[") || fieldValue.startsWith("[")) {
      newPos=OStringParser.jumpWhiteSpaces(text,pos);
      final StringBuilder buffer=new StringBuilder();
      newPos=OStringSerializerHelper.parse(text,buffer,newPos,-1,OStringSerializerHelper.DEFAULT_FIELD_SEPARATOR,true,OStringSerializerHelper.DEFAULT_IGNORE_CHARS);
      fieldValue=buffer.toString();
    }
    if (fieldValue.endsWith(",")) {
      pos=newPos - 1;
      fieldValue=fieldValue.substring(0,fieldValue.length() - 1);
    }
 else     pos=newPos;
    addEntries.add(new OPair<String,Object>(fieldName,getFieldValueCountingParameters(fieldValue)));
    pos=OSQLHelper.nextWord(text,textUpperCase,pos,word,true);
  }
  if (addEntries.size() == 0)   throw new OCommandSQLParsingException("Entries to add <field> = <value> are missed. Example: name = 'Bill', salary = 300.2. Use " + getSyntax(),text,pos);
  return pos;
}
