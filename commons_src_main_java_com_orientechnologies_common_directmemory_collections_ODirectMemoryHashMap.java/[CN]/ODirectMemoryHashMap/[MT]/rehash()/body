{
  final ODirectMemoryHashMapBucket<K,V>[] oldEntries=entries;
  final int oldCapacity=capacity;
  try {
    capacity=capacity << 1;
    entries=new ODirectMemoryHashMapBucket[capacity];
    for (    ODirectMemoryHashMapBucket<K,V> oldBucket : oldEntries) {
      if (oldBucket == null)       continue;
      for (      ODirectMemoryHashMapBucket.Entry oldEntry : oldBucket) {
        final long index=index(oldEntry.hashCode);
        ODirectMemoryHashMapBucket<K,V> bucket=entries[(int)index];
        if (bucket == null) {
          bucket=new ODirectMemoryHashMapBucket<K,V>(memory,bucketSize,valueSerializer);
          entries[(int)index]=bucket;
        }
        entries[(int)index].add(oldEntry.key,oldEntry.hashCode,oldEntry.value);
      }
    }
    for (    ODirectMemoryHashMapBucket<K,V> oldBucket : oldEntries) {
      if (oldBucket == null)       continue;
      oldBucket.clear();
    }
    nextThreshold=(int)(capacity * 0.75);
  }
 catch (  OutOfMemoryError e) {
    for (    ODirectMemoryHashMapBucket<K,V> bucket : entries)     if (bucket != null)     bucket.clear();
    entries=oldEntries;
    capacity=oldCapacity;
    throw e;
  }
}
