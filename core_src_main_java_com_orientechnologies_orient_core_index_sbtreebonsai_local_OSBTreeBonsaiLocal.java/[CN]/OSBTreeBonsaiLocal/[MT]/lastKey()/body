{
  atomicOperationsManager.acquireReadLock(this);
  try {
    final Lock lock=fileLockManager.acquireSharedLock(fileId);
    try {
      LinkedList<PagePathItemUnit> path=new LinkedList<PagePathItemUnit>();
      OBonsaiBucketPointer bucketPointer=rootBucketPointer;
      OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
      OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,bucketPointer.getPageIndex(),false);
      OSBTreeBonsaiBucket<K,V> bucket=new OSBTreeBonsaiBucket<K,V>(cacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChangesTree(atomicOperation,cacheEntry));
      int itemIndex=bucket.size() - 1;
      try {
        while (true) {
          if (bucket.isLeaf()) {
            if (bucket.isEmpty()) {
              if (path.isEmpty()) {
                return null;
              }
 else {
                PagePathItemUnit pagePathItemUnit=path.removeLast();
                bucketPointer=pagePathItemUnit.bucketPointer;
                itemIndex=pagePathItemUnit.itemIndex - 1;
              }
            }
 else {
              return bucket.getKey(bucket.size() - 1);
            }
          }
 else {
            if (itemIndex < -1) {
              if (!path.isEmpty()) {
                PagePathItemUnit pagePathItemUnit=path.removeLast();
                bucketPointer=pagePathItemUnit.bucketPointer;
                itemIndex=pagePathItemUnit.itemIndex - 1;
              }
 else               return null;
            }
 else {
              path.add(new PagePathItemUnit(bucketPointer,itemIndex));
              if (itemIndex > -1) {
                OSBTreeBonsaiBucket.SBTreeEntry<K,V> entry=bucket.getEntry(itemIndex);
                bucketPointer=entry.rightChild;
              }
 else {
                OSBTreeBonsaiBucket.SBTreeEntry<K,V> entry=bucket.getEntry(0);
                bucketPointer=entry.leftChild;
              }
              itemIndex=OSBTreeBonsaiBucket.MAX_BUCKET_SIZE_BYTES + 1;
            }
          }
          releasePage(atomicOperation,cacheEntry);
          cacheEntry=loadPage(atomicOperation,fileId,bucketPointer.getPageIndex(),false);
          bucket=new OSBTreeBonsaiBucket<K,V>(cacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChangesTree(atomicOperation,cacheEntry));
          if (itemIndex == OSBTreeBonsaiBucket.MAX_BUCKET_SIZE_BYTES + 1)           itemIndex=bucket.size() - 1;
        }
      }
  finally {
        releasePage(atomicOperation,cacheEntry);
      }
    }
  finally {
      lock.unlock();
    }
  }
 catch (  IOException e) {
    throw new OSBTreeException("Error during finding first key in sbtree [" + name + "]");
  }
 finally {
    atomicOperationsManager.releaseReadLock(this);
  }
}
