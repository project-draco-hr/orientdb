{
  return new Callable<Void>(){
    @Override public Void call() throws Exception {
      final String id=serverId + "." + threadId;
      boolean isRunning=true;
      final OrientBaseGraph graph=new OrientGraph(databaseURL);
      try {
        String query="select from Test where prop2='v2-1'";
        for (int i=0; i < 200 && isRunning; i++) {
          if ((i % 50) == 0) {
            log("[" + id + "] Records Processed: ["+ i+ "]");
          }
          Iterable<Vertex> vtxs=graph.command(new OCommandSQL(query)).execute();
          boolean update=true;
          for (          Vertex vtx : vtxs) {
            if (update) {
              update=true;
              for (int k=0; k < 10 && update; k++) {
                OrientVertex vtx1=(OrientVertex)vtx;
                try {
                  vtx1.setProperty("prop5","prop55");
                  graph.commit();
                  break;
                }
 catch (                OConcurrentModificationException ex) {
                  vtx1.reload();
                }
catch (                ODistributedRecordLockedException ex) {
                  log("[" + id + "/"+ i+ "/"+ k+ "] Distributed lock Exception "+ ex+ " for vertex "+ vtx1+ " \n");
                  ex.printStackTrace();
                  update=false;
                  break;
                }
catch (                Exception ex) {
                  log("[" + id + "/"+ i+ "/"+ k+ "] Exception "+ ex+ " for vertex "+ vtx1+ "\n\n");
                  ex.printStackTrace();
                  isRunning=false;
                  break;
                }
              }
              if (!isRunning)               break;
            }
          }
        }
      }
 catch (      Exception ex) {
        System.out.println("ID: [" + id + "]********** Exception "+ ex+ " \n\n");
        ex.printStackTrace();
      }
 finally {
        log("[" + id + "] Done................>>>>>>>>>>>>>>>>>>");
        graph.shutdown();
        runningWriters.countDown();
      }
      Assert.assertTrue(isRunning);
      return null;
    }
  }
;
}
