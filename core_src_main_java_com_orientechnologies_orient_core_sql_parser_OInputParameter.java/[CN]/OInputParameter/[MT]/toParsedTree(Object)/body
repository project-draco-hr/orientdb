{
  if (value == null) {
    return null;
  }
  if (value instanceof Integer) {
    OInteger result=new OInteger(-1);
    result.setValue((Integer)value);
    return result;
  }
  if (value instanceof Number) {
    OFloatingPoint result=new OFloatingPoint(-1);
    result.sign=((Number)value).doubleValue() >= 0 ? 1 : -1;
    result.stringValue=value.toString();
    if (result.stringValue.startsWith("-")) {
      result.stringValue=result.stringValue.substring(1);
    }
    return result;
  }
  if (value instanceof String) {
    return value;
  }
  if (value instanceof Collection) {
    OCollection coll=new OCollection(-1);
    coll.expressions=new ArrayList<OExpression>();
    for (    Object o : (Collection)value) {
      OExpression exp=new OExpression(-1);
      exp.value=toParsedTree(o);
      coll.expressions.add(exp);
    }
    return coll;
  }
  if (value instanceof OIdentifiable) {
    ORid rid=new ORid(-1);
    String stringVal=((OIdentifiable)value).getIdentity().toString().substring(1);
    String[] splitted=stringVal.split(":");
    OInteger c=new OInteger(-1);
    c.setValue(Integer.parseInt(splitted[0]));
    rid.cluster=c;
    OInteger p=new OInteger(-1);
    p.setValue(Integer.parseInt(splitted[1]));
    rid.position=p;
    return rid;
  }
  return this;
}
