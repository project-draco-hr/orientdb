{
  content=compression.compress(content);
  content=encryption.encrypt(content);
  OAtomicOperation atomicOperation=startAtomicOperation();
  acquireExclusiveLock();
  try {
    int entryContentLength=getEntryContentLength(content.length);
    if (entryContentLength < OClusterPage.MAX_RECORD_SIZE) {
      try {
        byte[] entryContent=new byte[entryContentLength];
        int entryPosition=0;
        entryContent[entryPosition]=recordType;
        entryPosition++;
        OIntegerSerializer.INSTANCE.serializeNative(content.length,entryContent,entryPosition);
        entryPosition+=OIntegerSerializer.INT_SIZE;
        System.arraycopy(content,0,entryContent,entryPosition,content.length);
        entryPosition+=content.length;
        entryContent[entryPosition]=1;
        entryPosition++;
        OLongSerializer.INSTANCE.serializeNative(-1L,entryContent,entryPosition);
        final AddEntryResult addEntryResult=addEntry(recordVersion,entryContent,atomicOperation);
        updateClusterState(1,addEntryResult.recordsSizeDiff,atomicOperation);
        final long clusterPosition=clusterPositionMap.add(addEntryResult.pageIndex,addEntryResult.pagePosition);
        endAtomicOperation(false,null);
        return createPhysicalPosition(recordType,clusterPosition,addEntryResult.recordVersion);
      }
 catch (      Exception e) {
        endAtomicOperation(true,e);
        throw OException.wrapException(new OStorageException("Error during record creation"),e);
      }
    }
 else {
      try {
        int entrySize=content.length + OIntegerSerializer.INT_SIZE + OByteSerializer.BYTE_SIZE;
        int fullEntryPosition=0;
        byte[] fullEntry=new byte[entrySize];
        fullEntry[fullEntryPosition]=recordType;
        fullEntryPosition++;
        OIntegerSerializer.INSTANCE.serializeNative(content.length,fullEntry,fullEntryPosition);
        fullEntryPosition+=OIntegerSerializer.INT_SIZE;
        System.arraycopy(content,0,fullEntry,fullEntryPosition,content.length);
        long prevPageRecordPointer=-1;
        long firstPageIndex=-1;
        int firstPagePosition=-1;
        ORecordVersion version=null;
        int from=0;
        int to=from + (OClusterPage.MAX_RECORD_SIZE - OByteSerializer.BYTE_SIZE - OLongSerializer.LONG_SIZE);
        int recordsSizeDiff=0;
        do {
          byte[] entryContent=new byte[to - from + OByteSerializer.BYTE_SIZE + OLongSerializer.LONG_SIZE];
          System.arraycopy(fullEntry,from,entryContent,0,to - from);
          if (from > 0)           entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE]=0;
 else           entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE]=1;
          OLongSerializer.INSTANCE.serializeNative(-1L,entryContent,entryContent.length - OLongSerializer.LONG_SIZE);
          final AddEntryResult addEntryResult=addEntry(recordVersion,entryContent,atomicOperation);
          recordsSizeDiff+=addEntryResult.recordsSizeDiff;
          if (firstPageIndex == -1) {
            firstPageIndex=addEntryResult.pageIndex;
            firstPagePosition=addEntryResult.pagePosition;
            version=addEntryResult.recordVersion;
          }
          long addedPagePointer=createPagePointer(addEntryResult.pageIndex,addEntryResult.pagePosition);
          if (prevPageRecordPointer >= 0) {
            long prevPageIndex=getPageIndex(prevPageRecordPointer);
            int prevPageRecordPosition=getRecordPosition(prevPageRecordPointer);
            final OCacheEntry prevPageCacheEntry=loadPage(atomicOperation,fileId,prevPageIndex,false);
            prevPageCacheEntry.acquireExclusiveLock();
            try {
              final OClusterPage prevPage=new OClusterPage(prevPageCacheEntry,false,getChangesTree(atomicOperation,prevPageCacheEntry));
              prevPage.setRecordLongValue(prevPageRecordPosition,-OLongSerializer.LONG_SIZE,addedPagePointer);
            }
  finally {
              prevPageCacheEntry.releaseExclusiveLock();
              releasePage(atomicOperation,prevPageCacheEntry);
            }
          }
          prevPageRecordPointer=addedPagePointer;
          from=to;
          to=to + (OClusterPage.MAX_RECORD_SIZE - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE);
          if (to > fullEntry.length)           to=fullEntry.length;
        }
 while (from < to);
        updateClusterState(1,recordsSizeDiff,atomicOperation);
        long clusterPosition=clusterPositionMap.add(firstPageIndex,firstPagePosition);
        endAtomicOperation(false,null);
        return createPhysicalPosition(recordType,clusterPosition,version);
      }
 catch (      RuntimeException e) {
        endAtomicOperation(true,e);
        throw OException.wrapException(new OStorageException("Error during record creation"),e);
      }
    }
  }
  finally {
    releaseExclusiveLock();
  }
}
