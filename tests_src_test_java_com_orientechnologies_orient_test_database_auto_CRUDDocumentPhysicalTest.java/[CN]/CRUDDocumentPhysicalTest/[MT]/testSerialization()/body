{
  ORecordSerializer current=ODatabaseDocumentTx.getDefaultSerializer();
  ODatabaseDocumentTx.setDefaultSerializer(ORecordSerializerSchemaAware2CSV.INSTANCE);
  ODatabaseRecordInternal oldDb=ODatabaseRecordThreadLocal.INSTANCE.get();
  ORecordSerializer dbser=oldDb.getSerializer();
  if (oldDb instanceof ODatabaseDocumentTx)   ((ODatabaseDocumentTx)oldDb).setSerializer(ORecordSerializerSchemaAware2CSV.INSTANCE);
 else   ((ODatabaseRecordTx)oldDb).setSerializer(ORecordSerializerSchemaAware2CSV.INSTANCE);
  final byte[] streamOrigin="Account@html:{\"path\":\"html/layout\"},config:{\"title\":\"Github Admin\",\"modules\":(githubDisplay:\"github_display\")},complex:(simple1:\"string1\",one_level1:(simple2:\"string2\"),two_levels:(simple3:\"string3\",one_level2:(simple4:\"string4\")))".getBytes();
  ODocument doc=(ODocument)ORecordSerializerSchemaAware2CSV.INSTANCE.fromStream(streamOrigin,new ODocument(),null);
  doc.field("out");
  final byte[] streamDest=ORecordSerializerSchemaAware2CSV.INSTANCE.toStream(doc,false);
  Assert.assertEquals(streamOrigin,streamDest);
  ODatabaseDocumentTx.setDefaultSerializer(current);
  if (oldDb instanceof ODatabaseDocumentTx)   ((ODatabaseDocumentTx)oldDb).setSerializer(dbser);
 else   ((ODatabaseRecordTx)oldDb).setSerializer(dbser);
}
