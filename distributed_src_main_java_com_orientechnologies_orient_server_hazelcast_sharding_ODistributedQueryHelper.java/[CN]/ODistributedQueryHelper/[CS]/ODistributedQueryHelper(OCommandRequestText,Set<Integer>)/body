{
  this.iCommand=iCommand;
  final OCommandExecutor executor=OCommandManager.instance().getExecutor(iCommand);
  executor.parse(iCommand);
  final OCommandExecutor realExecutor=executor instanceof OCommandExecutorSQLDelegate ? ((OCommandExecutorSQLDelegate)executor).getDelegate() : executor;
  if (realExecutor instanceof OCommandExecutorSQLSelect) {
    final OCommandExecutorSQLSelect selectExecutor=(OCommandExecutorSQLSelect)realExecutor;
    distributable=true;
    for (    Integer c : selectExecutor.getInvolvedClusters()) {
      if (undistributedClusters.contains(c)) {
        distributable=false;
        break;
      }
    }
    order=selectExecutor.getOrderedFields();
    anyFunctionAggregate=selectExecutor.isAnyFunctionAggregates();
    if (selectExecutor.getProjections() != null) {
      for (      Map.Entry<String,Object> projection : selectExecutor.getProjections().entrySet()) {
        if (projection.getValue() instanceof OSQLFunctionRuntime) {
          final OSQLFunctionRuntime fr=(OSQLFunctionRuntime)projection.getValue();
          if (fr.getFunction().shouldMergeDistributedResult()) {
            mergers.add(new OPair<String,OSQLFunction>(projection.getKey(),fr.getFunction()));
          }
 else           if (fr.getFunction() instanceof OSQLFunctionDistinct) {
            distinct=new OPair<String,OSQLFunctionDistinct>(projection.getKey(),(OSQLFunctionDistinct)fr.getFunction());
          }
        }
      }
    }
  }
  if (iCommand.getResultListener() != null && iCommand.getResultListener().getClass().equals(ONetworkProtocolBinary.AsyncResultListener.class)) {
    asyncResultListener=iCommand.getResultListener();
  }
 else {
    asyncResultListener=null;
  }
}
