{
  State state=new State();
  state.h1=0x9368e53c2f6af274L ^ seed;
  state.h2=0x586dcd208f7cd3fdL ^ seed;
  state.c1=0x87c37b91114253d5L;
  state.c2=0x4cf5ad432745937fL;
  for (int i=0; i < key.length / 16; i++) {
    state.k1=getblock(key,i * 2 * 8);
    state.k2=getblock(key,(i * 2 + 1) * 8);
    bmix(state);
  }
  state.k1=0;
  state.k2=0;
  int tail=(key.length >>> 4) << 4;
switch (key.length & 15) {
case 15:
    state.k2^=(long)key[tail + 14] << 48;
case 14:
  state.k2^=(long)key[tail + 13] << 40;
case 13:
state.k2^=(long)key[tail + 12] << 32;
case 12:
state.k2^=(long)key[tail + 11] << 24;
case 11:
state.k2^=(long)key[tail + 10] << 16;
case 10:
state.k2^=(long)key[tail + 9] << 8;
case 9:
state.k2^=(long)key[tail + 8];
case 8:
state.k1^=(long)key[tail + 7] << 56;
case 7:
state.k1^=(long)key[tail + 6] << 48;
case 6:
state.k1^=(long)key[tail + 5] << 40;
case 5:
state.k1^=(long)key[tail + 4] << 32;
case 4:
state.k1^=(long)key[tail + 3] << 24;
case 3:
state.k1^=(long)key[tail + 2] << 16;
case 2:
state.k1^=(long)key[tail + 1] << 8;
case 1:
state.k1^=(long)key[tail + 0];
bmix(state);
}
state.h2^=key.length;
state.h1+=state.h2;
state.h2+=state.h1;
state.h1=fmix(state.h1);
state.h2=fmix(state.h2);
state.h1+=state.h2;
state.h2+=state.h1;
return state.h1;
}
