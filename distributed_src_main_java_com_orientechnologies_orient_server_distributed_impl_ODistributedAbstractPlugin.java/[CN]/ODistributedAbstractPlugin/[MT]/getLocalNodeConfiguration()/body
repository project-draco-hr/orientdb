{
  final ODocument nodeCfg=new ODocument();
  nodeCfg.field("id",nodeId);
  nodeCfg.field("uuid",nodeUuid);
  nodeCfg.field("name",nodeName);
  nodeCfg.field("startedOn",startedOn);
  nodeCfg.field("status",getNodeStatus());
  nodeCfg.field("connections",serverInstance.getClientConnectionManager().getTotal());
  final List<Map<String,Object>> listeners=new ArrayList<Map<String,Object>>();
  nodeCfg.field("listeners",listeners,OType.EMBEDDEDLIST);
  for (  OServerNetworkListener listener : serverInstance.getNetworkListeners()) {
    final Map<String,Object> listenerCfg=new HashMap<String,Object>();
    listeners.add(listenerCfg);
    listenerCfg.put("protocol",listener.getProtocolType().getSimpleName());
    listenerCfg.put("listen",listener.getListeningAddress(true));
  }
  nodeCfg.field("user_replicator",serverInstance.getUser(REPLICATOR_USER).password);
  nodeCfg.field("databases",getManagedDatabases());
  final long maxMem=Runtime.getRuntime().maxMemory();
  final long totMem=Runtime.getRuntime().totalMemory();
  final long freeMem=Runtime.getRuntime().freeMemory();
  final long usedMem=totMem - freeMem;
  nodeCfg.field("usedMemory",usedMem);
  nodeCfg.field("freeMemory",freeMem);
  nodeCfg.field("maxMemory",maxMem);
  nodeCfg.field("latencies",getMessageService().getLatencies(),OType.EMBEDDED);
  onLocalNodeConfigurationRequest(nodeCfg);
  return nodeCfg;
}
