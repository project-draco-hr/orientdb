{
  OGremlinHelper.global().create();
  graph.setAutoStartTx(false);
  graph.commit();
  graph.command(new OCommandSQL("create class tc1 extends V")).execute();
  graph.command(new OCommandSQL("create class edge1 extends E")).execute();
  graph.setAutoStartTx(true);
  OrientVertex v1=graph.command(new OCommandSQL("create vertex tc1 SET id='1', name='name1'")).execute();
  OrientVertex v2=graph.command(new OCommandSQL("create vertex tc1 SET id='2', name='name2'")).execute();
  graph.commit();
  int tc1Id=graph.getRawGraph().getClusterIdByName("tc1");
  int edge1Id=graph.getRawGraph().getClusterIdByName("edge1");
  Iterable<OrientEdge> e=graph.command(new OCommandSQL("create edge edge1 from #" + tc1Id + ":0 to #"+ tc1Id+ ":1 set f='fieldValue';")).execute();
  graph.commit();
  List<ODocument> result=graph.getRawGraph().query(new OSQLSynchQuery<ODocument>("select gremlin('current.outE') from tc1"));
  Assert.assertEquals(2,result.size());
  ODocument firstItem=result.get(0);
  List<OrientEdge> firstResult=firstItem.field("gremlin");
  Assert.assertEquals(1,firstResult.size());
  OrientEdge edge=firstResult.get(0);
  Assert.assertEquals(new ORecordId(edge1Id,OClusterPositionFactory.INSTANCE.valueOf(0)),(ORID)edge.getId());
  ODocument secondItem=result.get(1);
  List<OrientEdge> secondResult=secondItem.field("gremlin");
  Assert.assertTrue(secondResult.isEmpty());
}
