{
  checkOpeness();
  try {
    checkSecurity(ODatabaseSecurityResources.CLUSTER,ORole.PERMISSION_READ,getClusterNameById(iClusterId),iClusterId);
    callbackHooks(TYPE.BEFORE_READ,iRecord);
    final ORecordId rid=new ORecordId(iClusterId,iPosition);
    if (!iIgnoreCache) {
      ORecordInternal<?> record=getCache().findRecord(rid);
      if (record != null) {
        if (record.getInternalStatus() == STATUS.NOT_LOADED)         record.reload();
        callbackHooks(TYPE.AFTER_READ,record);
        return (RET)record;
      }
    }
    final ORawBuffer recordBuffer=underlying.read(iClusterId,iPosition,iFetchPlan);
    if (recordBuffer == null)     return null;
    if (iRecord == null || iRecord.getRecordType() != recordBuffer.recordType)     iRecord=ORecordFactory.newInstance(recordBuffer.recordType);
    iRecord.unsetDirty();
    ODatabaseRecord currDb=iRecord.getDatabase();
    if (currDb == null)     currDb=(ODatabaseRecord)databaseOwner;
    iRecord.fill(currDb,iClusterId,iPosition,recordBuffer.version,recordBuffer.buffer);
    iRecord.fromStream(recordBuffer.buffer);
    iRecord.setStatus(STATUS.LOADED);
    callbackHooks(TYPE.AFTER_READ,iRecord);
    if (!iIgnoreCache) {
      getCache().pushRecord(iRecord);
    }
    return (RET)iRecord;
  }
 catch (  ODatabaseException e) {
    throw e;
  }
catch (  Exception e) {
    OLogManager.instance().exception("Error on retrieving record #%d in cluster '%s'",e,ODatabaseException.class,iPosition,getStorage().getPhysicalClusterNameById(iClusterId));
  }
  return null;
}
