{
  this.directMemory=directMemory;
  this.pageSize=pageSize;
  this.storageLocal=storageLocal;
  this.syncOnPageFlush=syncOnPageFlush;
  this.files=new HashMap<Long,OMultiFileSegment>();
  this.filesPages=new HashMap<Long,Set<Long>>();
  this.evictedPages=new HashMap<FileLockKey,Long>();
  this.lockManager=new OLockManager<FileLockKey,Runnable>(OGlobalConfiguration.ENVIRONMENT_CONCURRENT.getValueAsBoolean(),OGlobalConfiguration.DISK_PAGE_CACHE_LOCK_TIMEOUT.getValueAsInteger());
  long tmpMaxSize=maxMemory / pageSize;
  if (tmpMaxSize >= Integer.MAX_VALUE) {
    maxSize=Integer.MAX_VALUE;
  }
 else {
    maxSize=(int)tmpMaxSize;
  }
  K_IN=maxSize >> 2;
  K_OUT=maxSize >> 1;
  am=new LRUList();
  a1out=new LRUList();
  a1in=new LRUList();
  syncObject=new Object();
}
