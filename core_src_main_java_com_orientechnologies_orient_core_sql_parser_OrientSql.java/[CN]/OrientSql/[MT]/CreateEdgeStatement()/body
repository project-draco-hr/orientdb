{
  OCreateEdgeStatement jjtn000=new OCreateEdgeStatement(JJTCREATEEDGESTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  ORid lastRid;
  try {
    jj_consume_token(CREATE);
    jj_consume_token(EDGE);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case CLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
      jjtn000.targetClass=Identifier();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case CLUSTER:
      jj_consume_token(CLUSTER);
    jjtn000.targetClusterName=Identifier();
  break;
default :
jj_la1[131]=jj_gen;
;
}
break;
default :
jj_la1[132]=jj_gen;
;
}
jj_consume_token(FROM);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INTEGER_LITERAL:
case MINUS:
case 184:
jjtn000.leftRid=Rid();
break;
case LBRACKET:
jj_consume_token(LBRACKET);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INTEGER_LITERAL:
case MINUS:
case 184:
lastRid=Rid();
jjtn000.leftRids=new ArrayList();
jjtn000.leftRids.add(lastRid);
label_20: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[133]=jj_gen;
break label_20;
}
jj_consume_token(COMMA);
lastRid=Rid();
jjtn000.leftRids.add(lastRid);
}
break;
default :
jj_la1[134]=jj_gen;
;
}
jj_consume_token(RBRACKET);
break;
case LPAREN:
jj_consume_token(LPAREN);
if (jj_2_41(2147483647)) {
jjtn000.leftStatement=SelectStatement();
}
 else if (jj_2_42(2147483647)) {
jjtn000.leftStatement=SelectWithoutTargetStatement();
}
 else {
jj_consume_token(-1);
throw new ParseException();
}
jj_consume_token(RPAREN);
break;
case HOOK:
case COLON:
jjtn000.leftParam=InputParameter();
break;
case TO:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case CLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
jjtn000.leftIdentifier=Identifier();
break;
default :
jj_la1[135]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jj_consume_token(TO);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INTEGER_LITERAL:
case MINUS:
case 184:
jjtn000.rightRid=Rid();
break;
case LBRACKET:
jj_consume_token(LBRACKET);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INTEGER_LITERAL:
case MINUS:
case 184:
lastRid=Rid();
jjtn000.rightRids=new ArrayList();
jjtn000.rightRids.add(lastRid);
label_21: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[136]=jj_gen;
break label_21;
}
jj_consume_token(COMMA);
lastRid=Rid();
jjtn000.rightRids.add(lastRid);
}
break;
default :
jj_la1[137]=jj_gen;
;
}
jj_consume_token(RBRACKET);
break;
case LPAREN:
jj_consume_token(LPAREN);
if (jj_2_43(2147483647)) {
jjtn000.rightStatement=SelectStatement();
}
 else if (jj_2_44(2147483647)) {
jjtn000.rightStatement=SelectWithoutTargetStatement();
}
 else {
jj_consume_token(-1);
throw new ParseException();
}
jj_consume_token(RPAREN);
break;
case HOOK:
case COLON:
jjtn000.rightParam=InputParameter();
break;
case TO:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case CLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
jjtn000.rightIdentifier=Identifier();
break;
default :
jj_la1[138]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SET:
case CONTENT:
case LPAREN:
jjtn000.body=InsertBody();
break;
default :
jj_la1[139]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case RETRY:
jjtn000.retry=Retry();
break;
default :
jj_la1[140]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case WAIT:
jjtn000.wait=Wait();
break;
default :
jj_la1[141]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case BATCH:
jjtn000.batch=Batch();
break;
default :
jj_la1[142]=jj_gen;
;
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
