{
  Assert.assertEquals(buffer.minSingleLRUSize(),0);
  for (int i=0; i < 4; i++) {
    long pagePointer=buffer.loadAndLockForWrite("arcBufferTest",".tst",i);
    directMemory.set(pagePointer,new byte[]{(byte)i,1,2,3,4,5,6,(byte)i},8);
    buffer.releaseWriteLock("arcBufferTest",".tst",i);
  }
  for (int i=0; i < 4; i++)   Assert.assertTrue(buffer.inFetchedOnceLRU("arcBufferTest.tst",i));
  long pagePointer=buffer.loadAndLockForWrite("arcBufferTest",".tst",0);
  directMemory.set(pagePointer,new byte[]{(byte)100,1,2,3,4,5,6,(byte)100},8);
  buffer.releaseWriteLock("arcBufferTest",".tst",0);
  for (int i=1; i < 4; i++)   Assert.assertTrue(buffer.inFetchedOnceLRU("arcBufferTest.tst",i));
  Assert.assertTrue(buffer.inFetchedSeveralTimesLRU("arcBufferTest.tst",0));
  pagePointer=buffer.loadAndLockForWrite("arcBufferTest",".tst",4);
  directMemory.set(pagePointer,new byte[]{(byte)121,1,2,3,4,5,6,(byte)121},8);
  buffer.releaseWriteLock("arcBufferTest",".tst",4);
  for (int i=2; i <= 4; i++)   Assert.assertTrue(buffer.inFetchedOnceLRU("arcBufferTest.tst",i));
  Assert.assertTrue(buffer.inFetchedOnceEvictedLRU("arcBufferTest.tst",1));
  Assert.assertTrue(buffer.inFetchedSeveralTimesLRU("arcBufferTest.tst",0));
  assertFile(1,new byte[]{(byte)1,1,2,3,4,5,6,(byte)1});
  pagePointer=buffer.loadAndLockForWrite("arcBufferTest",".tst",1);
  directMemory.set(pagePointer,new byte[]{(byte)132,1,2,3,4,5,6,(byte)132},8);
  buffer.releaseWriteLock("arcBufferTest",".tst",1);
  for (int i=3; i <= 4; i++)   Assert.assertTrue(buffer.inFetchedOnceLRU("arcBufferTest.tst",i));
  Assert.assertTrue(buffer.inFetchedOnceEvictedLRU("arcBufferTest.tst",2));
  assertFile(2,new byte[]{(byte)2,1,2,3,4,5,6,(byte)2});
  Assert.assertTrue(buffer.inFetchedSeveralTimesLRU("arcBufferTest.tst",1));
  Assert.assertTrue(buffer.inFetchedSeveralTimesLRU("arcBufferTest.tst",0));
  pagePointer=buffer.loadAndLockForWrite("arcBufferTest",".tst",4);
  directMemory.set(pagePointer,new byte[]{(byte)135,1,2,3,4,5,6,(byte)135},8);
  buffer.releaseWriteLock("arcBufferTest",".tst",4);
  Assert.assertTrue(buffer.inFetchedOnceLRU("arcBufferTest.tst",3));
  Assert.assertTrue(buffer.inFetchedOnceEvictedLRU("arcBufferTest.tst",2));
  Assert.assertTrue(buffer.inFetchedSeveralTimesLRU("arcBufferTest.tst",4));
  Assert.assertTrue(buffer.inFetchedSeveralTimesLRU("arcBufferTest.tst",1));
  Assert.assertTrue(buffer.inFetchedSeveralTimesLRU("arcBufferTest.tst",0));
  pagePointer=buffer.loadAndLockForWrite("arcBufferTest",".tst",5);
  directMemory.set(pagePointer,new byte[]{(byte)105,1,2,3,4,5,6,(byte)105},8);
  buffer.releaseWriteLock("arcBufferTest",".tst",5);
  Assert.assertTrue(buffer.inFetchedOnceLRU("arcBufferTest.tst",5));
  Assert.assertTrue(buffer.inFetchedOnceLRU("arcBufferTest.tst",3));
  Assert.assertTrue(buffer.inFetchedSeveralTimesLRU("arcBufferTest.tst",4));
  Assert.assertTrue(buffer.inFetchedSeveralTimesLRU("arcBufferTest.tst",1));
  Assert.assertTrue(buffer.inFetchedOnceEvictedLRU("arcBufferTest.tst",2));
  Assert.assertTrue(buffer.inFetchedSeveralTimesEvictedLRU("arcBufferTest.tst",0));
  assertFile(0,new byte[]{(byte)100,1,2,3,4,5,6,(byte)100});
  Assert.assertEquals(buffer.minSingleLRUSize(),1);
  pagePointer=buffer.loadAndLockForWrite("arcBufferTest",".tst",0);
  directMemory.set(pagePointer,new byte[]{(byte)11,1,2,3,4,5,6,(byte)11},8);
  buffer.releaseWriteLock("arcBufferTest",".tst",0);
  Assert.assertTrue(buffer.inFetchedOnceLRU("arcBufferTest.tst",5));
  Assert.assertTrue(buffer.inFetchedSeveralTimesLRU("arcBufferTest.tst",0));
  Assert.assertTrue(buffer.inFetchedSeveralTimesLRU("arcBufferTest.tst",4));
  Assert.assertTrue(buffer.inFetchedSeveralTimesLRU("arcBufferTest.tst",1));
  Assert.assertTrue(buffer.inFetchedOnceEvictedLRU("arcBufferTest.tst",2));
  Assert.assertTrue(buffer.inFetchedOnceEvictedLRU("arcBufferTest.tst",3));
  Assert.assertEquals(buffer.minSingleLRUSize(),0);
  assertFile(2,new byte[]{(byte)2,1,2,3,4,5,6,(byte)2});
  assertFile(3,new byte[]{(byte)3,1,2,3,4,5,6,(byte)3});
  Assert.assertEquals(buffer.getFilledUpTo("arcBufferTest",".tst"),6);
  buffer.flush();
  assertFile(0,new byte[]{(byte)11,1,2,3,4,5,6,(byte)11});
  assertFile(1,new byte[]{(byte)132,1,2,3,4,5,6,(byte)132});
  assertFile(2,new byte[]{(byte)2,1,2,3,4,5,6,(byte)2});
  assertFile(3,new byte[]{(byte)3,1,2,3,4,5,6,(byte)3});
  assertFile(4,new byte[]{(byte)135,1,2,3,4,5,6,(byte)135});
  assertFile(5,new byte[]{(byte)105,1,2,3,4,5,6,(byte)105});
}
