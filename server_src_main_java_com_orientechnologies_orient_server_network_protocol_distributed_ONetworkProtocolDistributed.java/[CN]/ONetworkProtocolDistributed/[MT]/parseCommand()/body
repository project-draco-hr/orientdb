{
  if (requestType < 80) {
    super.parseCommand();
    return;
  }
switch (requestType) {
case OChannelDistributedProtocol.REQUEST_DISTRIBUTED_HEARTBEAT:
    data.commandInfo="Keep-alive";
  manager.updateHeartBeatTime();
sendOk(0);
break;
case OChannelDistributedProtocol.REQUEST_DISTRIBUTED_CONNECT:
{
data.commandInfo="Cluster connection";
manager.receivedLeaderConnection(this);
sendOk(0);
break;
}
case OChannelDistributedProtocol.REQUEST_DISTRIBUTED_DB_SHARE_SENDER:
{
data.commandInfo="Share the database to a remote server";
ODatabaseDocumentTx db=null;
try {
final String dbName=channel.readString();
final String dbUser=channel.readString();
final String dbPassword=channel.readString();
final String remoteServerName=channel.readString();
final boolean synchronousMode=channel.readByte() == 1;
checkServerAccess("database.share");
db=openDatabase(dbName,dbUser,dbPassword);
final String engineName=db.getStorage() instanceof OStorageLocal ? "local" : "memory";
final ODistributedServerNode remoteServerNode=manager.getNode(remoteServerName);
remoteServerNode.shareDatabase(db,remoteServerName,engineName,synchronousMode);
sendOk(0);
}
  finally {
if (db != null) db.close();
}
break;
}
case OChannelDistributedProtocol.REQUEST_DISTRIBUTED_DB_SHARE_RECEIVER:
{
data.commandInfo="Received a shared database from a remote server to install";
final String dbName=channel.readString();
final String engineName=channel.readString();
OLogManager.instance().info(this,"Received database '%s' to share on local server node",dbName);
final ODatabaseDocumentTx db=getDatabaseInstance(dbName,engineName);
try {
if (db.exists()) {
OLogManager.instance().info(this,"Deleting existent database '%s'",db.getName());
db.delete();
}
createDatabase(db);
if (db.isClosed()) db.open(OUser.ADMIN,OUser.ADMIN);
OLogManager.instance().info(this,"Importing database '%s' via streaming from remote server node...",dbName);
new ODatabaseImport(db,new OChannelBinaryInputStream(channel),this).importDatabase();
OLogManager.instance().info(this,"Database imported correctly",dbName);
sendOk(0);
}
  finally {
db.close();
}
break;
}
case OChannelDistributedProtocol.REQUEST_DISTRIBUTED_DB_CONFIG:
{
data.commandInfo="Update db configuration from server node leader";
ODocument config=(ODocument)new ODocument().fromStream(channel.readBytes());
OLogManager.instance().warn(this,"Changed distributed server configuration:\n%s",config.toJSON("indent:2"));
sendOk(0);
break;
}
default :
data.commandInfo="Command not supported";
OLogManager.instance().error(this,"Request not supported. Code: " + requestType);
channel.clearInput();
sendError(clientTxId,null);
}
}
