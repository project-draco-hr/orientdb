{
  final Deque<Long> stamps=tlTimeStumps.get();
  if (stamps.size() > 0) {
    final long endTs=nanoTimer.getNano();
    final long timeDiff=endTs - stamps.pop();
    final PerformanceCounters pf=performanceCounters.get();
    if (pf != null) {
      final AtomicReference<OTimeCounter> writeSpeedInCache=pf.writeSpeedInCache;
      OTimeCounter oldWriteSpeedInCache=writeSpeedInCache.get();
      OTimeCounter newWriteSpeedInCache=new OTimeCounter(oldWriteSpeedInCache.getTime() + timeDiff,oldWriteSpeedInCache.getCounter() + 1);
      while (writeSpeedInCache.compareAndSet(oldWriteSpeedInCache,newWriteSpeedInCache)) {
        oldWriteSpeedInCache=writeSpeedInCache.get();
        newWriteSpeedInCache=new OTimeCounter(oldWriteSpeedInCache.getTime() + timeDiff,oldWriteSpeedInCache.getCounter() + 1);
      }
    }
  }
}
