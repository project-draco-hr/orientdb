{
  db.command(new OCommandSQL("create class Inverse1")).execute();
  db.command(new OCommandSQL("create class Inverse2")).execute();
  db.command(new OCommandSQL("insert into Inverse1 set pk = 'pkb1_1', fk = 'pkb2_1'")).execute();
  db.command(new OCommandSQL("insert into Inverse1 set pk = 'pkb1_2', fk = 'pkb2_2'")).execute();
  db.command(new OCommandSQL("insert into Inverse1 set pk = 'pkb1_3', fk = 'pkb2_2'")).execute();
  db.command(new OCommandSQL("insert into Inverse2 set pk = 'pkb2_1'")).execute();
  db.command(new OCommandSQL("insert into Inverse2 set pk = 'pkb2_2'")).execute();
  db.command(new OCommandSQL("CREATE LINK theLink TYPE LINKSET FROM Inverse1.fk TO Inverse2.pk INVERSE")).execute();
  List<ODocument> result=db.query(new OSQLSynchQuery<ODocument>("select pk, theLink.pk as other from Inverse2 order by pk"));
  Assert.assertEquals(result.size(),2);
  Object otherKeys=result.get(0).field("other");
  Assert.assertNotNull(otherKeys);
  Assert.assertTrue(otherKeys instanceof List);
  Assert.assertEquals(((List)otherKeys).get(0),"pkb1_1");
  otherKeys=result.get(1).field("other");
  Assert.assertNotNull(otherKeys);
  Assert.assertTrue(otherKeys instanceof List);
  Assert.assertEquals(((List)otherKeys).size(),2);
  Assert.assertTrue(((List)otherKeys).contains("pkb1_2"));
  Assert.assertTrue(((List)otherKeys).contains("pkb1_3"));
}
