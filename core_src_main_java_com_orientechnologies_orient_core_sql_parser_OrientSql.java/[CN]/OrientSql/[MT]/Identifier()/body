{
  OIdentifier jjtn000=new OIdentifier(JJTIDENTIFIER);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  Token token=null;
  try {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IDENTIFIER:
      token=jj_consume_token(IDENTIFIER);
    break;
case IN:
  token=jj_consume_token(IN);
break;
case SET:
token=jj_consume_token(SET);
break;
case PUT:
token=jj_consume_token(PUT);
break;
case ADD:
token=jj_consume_token(ADD);
break;
case REMOVE:
token=jj_consume_token(REMOVE);
break;
case MERGE:
token=jj_consume_token(MERGE);
break;
case CONTENT:
token=jj_consume_token(CONTENT);
break;
case ORDER:
token=jj_consume_token(ORDER);
break;
case KEY:
token=jj_consume_token(KEY);
break;
case OFFSET:
token=jj_consume_token(OFFSET);
break;
case GROUP:
token=jj_consume_token(GROUP);
break;
case VALUES:
token=jj_consume_token(VALUES);
break;
case RECORD:
token=jj_consume_token(RECORD);
break;
case TO:
token=jj_consume_token(TO);
break;
case LUCENE:
token=jj_consume_token(LUCENE);
break;
case CLASS:
token=jj_consume_token(CLASS);
break;
case CLASSES:
token=jj_consume_token(CLASSES);
break;
case MINDEPTH:
token=jj_consume_token(MINDEPTH);
break;
case NEAR:
token=jj_consume_token(NEAR);
break;
case WITHIN:
token=jj_consume_token(WITHIN);
break;
case BACKTICK:
jj_consume_token(BACKTICK);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IDENTIFIER:
token=jj_consume_token(IDENTIFIER);
break;
case SELECT:
token=jj_consume_token(SELECT);
break;
case TRAVERSE:
token=jj_consume_token(TRAVERSE);
break;
case INSERT:
token=jj_consume_token(INSERT);
break;
case CREATE:
token=jj_consume_token(CREATE);
break;
case DELETE:
token=jj_consume_token(DELETE);
break;
case VERTEX:
token=jj_consume_token(VERTEX);
break;
case EDGE:
token=jj_consume_token(EDGE);
break;
case UPDATE:
token=jj_consume_token(UPDATE);
break;
case UPSERT:
token=jj_consume_token(UPSERT);
break;
case FROM:
token=jj_consume_token(FROM);
break;
case TO:
token=jj_consume_token(TO);
break;
case WHERE:
token=jj_consume_token(WHERE);
break;
case WHILE:
token=jj_consume_token(WHILE);
break;
case INTO:
token=jj_consume_token(INTO);
break;
case VALUES:
token=jj_consume_token(VALUES);
break;
case SET:
token=jj_consume_token(SET);
break;
case ADD:
token=jj_consume_token(ADD);
break;
case PUT:
token=jj_consume_token(PUT);
break;
case MERGE:
token=jj_consume_token(MERGE);
break;
case CONTENT:
token=jj_consume_token(CONTENT);
break;
case REMOVE:
token=jj_consume_token(REMOVE);
break;
case INCREMENT:
token=jj_consume_token(INCREMENT);
break;
case AND:
token=jj_consume_token(AND);
break;
case OR:
token=jj_consume_token(OR);
break;
case NULL:
token=jj_consume_token(NULL);
break;
case DEFINED:
token=jj_consume_token(DEFINED);
break;
case ORDER:
token=jj_consume_token(ORDER);
break;
case GROUP:
token=jj_consume_token(GROUP);
break;
case BY:
token=jj_consume_token(BY);
break;
case LIMIT:
token=jj_consume_token(LIMIT);
break;
case SKIP2:
token=jj_consume_token(SKIP2);
break;
case OFFSET:
token=jj_consume_token(OFFSET);
break;
case TIMEOUT:
token=jj_consume_token(TIMEOUT);
break;
case ASC:
token=jj_consume_token(ASC);
break;
case AS:
token=jj_consume_token(AS);
break;
case DESC:
token=jj_consume_token(DESC);
break;
case FETCHPLAN:
token=jj_consume_token(FETCHPLAN);
break;
case RETURN:
token=jj_consume_token(RETURN);
break;
case BEFORE:
token=jj_consume_token(BEFORE);
break;
case AFTER:
token=jj_consume_token(AFTER);
break;
case LOCK:
token=jj_consume_token(LOCK);
break;
case RECORD:
token=jj_consume_token(RECORD);
break;
case WAIT:
token=jj_consume_token(WAIT);
break;
case RETRY:
token=jj_consume_token(RETRY);
break;
case LET:
token=jj_consume_token(LET);
break;
case NOCACHE:
token=jj_consume_token(NOCACHE);
break;
case UNSAFE:
token=jj_consume_token(UNSAFE);
break;
case PARALLEL:
token=jj_consume_token(PARALLEL);
break;
case STRATEGY:
token=jj_consume_token(STRATEGY);
break;
case DEPTH_FIRST:
token=jj_consume_token(DEPTH_FIRST);
break;
case BREADTH_FIRST:
token=jj_consume_token(BREADTH_FIRST);
break;
case LUCENE:
token=jj_consume_token(LUCENE);
break;
case NEAR:
token=jj_consume_token(NEAR);
break;
case WITHIN:
token=jj_consume_token(WITHIN);
break;
case UNWIND:
token=jj_consume_token(UNWIND);
break;
case MAXDEPTH:
token=jj_consume_token(MAXDEPTH);
break;
case NOT:
token=jj_consume_token(NOT);
break;
case IN:
token=jj_consume_token(IN);
break;
case LIKE:
token=jj_consume_token(LIKE);
break;
case IS:
token=jj_consume_token(IS);
break;
case BETWEEN:
token=jj_consume_token(BETWEEN);
break;
case CONTAINS:
token=jj_consume_token(CONTAINS);
break;
case CONTAINSALL:
token=jj_consume_token(CONTAINSALL);
break;
case CONTAINSKEY:
token=jj_consume_token(CONTAINSKEY);
break;
case CONTAINSVALUE:
token=jj_consume_token(CONTAINSVALUE);
break;
case CONTAINSTEXT:
token=jj_consume_token(CONTAINSTEXT);
break;
case MATCHES:
token=jj_consume_token(MATCHES);
break;
case KEY:
token=jj_consume_token(KEY);
break;
case INSTANCEOF:
token=jj_consume_token(INSTANCEOF);
break;
case CLUSTER:
token=jj_consume_token(CLUSTER);
break;
default :
jj_la1[0]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jj_consume_token(BACKTICK);
break;
default :
jj_la1[1]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
jjtn000.value=token.image;
{
if (true) return jjtn000;
}
}
  finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
