{
  super(OSocketFactory.instance(iConfig).createSocket(),iConfig);
  try {
    serverURL=remoteHost + ":" + remotePort;
    if (iDatabaseName != null)     serverURL+="/" + iDatabaseName;
    socketTimeout=iConfig.getValueAsInteger(OGlobalConfiguration.NETWORK_SOCKET_TIMEOUT);
    try {
      if (remoteHost.contains(":")) {
        final InetAddress[] addresses=Inet6Address.getAllByName(remoteHost);
        socket.connect(new InetSocketAddress(addresses[0],remotePort),socketTimeout);
      }
 else {
        socket.connect(new InetSocketAddress(remoteHost,remotePort),socketTimeout);
      }
      setReadResponseTimeout();
      connected();
    }
 catch (    java.net.SocketTimeoutException e) {
      throw new IOException("Cannot connect to host " + remoteHost + ":"+ remotePort+ " (timeout="+ socketTimeout+ ")",e);
    }
    try {
      inStream=new BufferedInputStream(socket.getInputStream(),socketBufferSize);
      outStream=new BufferedOutputStream(socket.getOutputStream(),socketBufferSize);
      in=new DataInputStream(inStream);
      out=new DataOutputStream(outStream);
      srvProtocolVersion=readShort();
    }
 catch (    IOException e) {
      throw new ONetworkProtocolException("Cannot read protocol version from remote server " + socket.getRemoteSocketAddress() + ": "+ e);
    }
    if (srvProtocolVersion != protocolVersion) {
      OLogManager.instance().warn(this,"The Client driver version is different than Server version: client=" + protocolVersion + ", server="+ srvProtocolVersion+ ". You could not use the full features of the newer version. Assure to have the same versions on both");
    }
  }
 catch (  RuntimeException e) {
    if (socket.isConnected())     socket.close();
    throw e;
  }
}
