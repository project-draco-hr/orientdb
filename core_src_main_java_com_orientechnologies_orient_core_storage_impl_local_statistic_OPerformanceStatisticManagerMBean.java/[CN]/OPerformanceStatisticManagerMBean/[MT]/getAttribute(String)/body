{
  if (attribute == null) {
    throw new RuntimeOperationsException(new IllegalArgumentException("Attribute name cannot be null"),"Cannot invoke a getter of " + getClass().getSimpleName() + " with null attribute name");
  }
  final int separatorIndex=attribute.indexOf(COMPONENT_SEPARATOR);
  final String attributeName;
  final String componentName;
  if (separatorIndex == 0) {
    throw new RuntimeOperationsException(new IllegalArgumentException("Empty attribute"),"Performance attribute name is not specified before " + COMPONENT_SEPARATOR + " for attribute "+ attribute);
  }
  if (separatorIndex == attribute.length() - 1) {
    throw new RuntimeOperationsException(new IllegalArgumentException("Empty component"),"Component name is not specified after " + COMPONENT_SEPARATOR + " for attribute "+ attribute);
  }
  if (separatorIndex > -1) {
    attributeName=attribute.substring(0,separatorIndex);
    componentName=attribute.substring(separatorIndex + 1);
  }
 else {
    attributeName=attribute;
    componentName=null;
  }
  if (attributeName.equals(CACHE_HITS)) {
    if (componentName == null)     return manager.getCacheHits();
 else {
      return manager.getCacheHits(componentName);
    }
  }
 else   if (attributeName.equals(COMMIT_TIME)) {
    if (componentName == null)     return manager.getCommitTime();
 else     return throwComponentsAreNotSupported(COMMIT_TIME);
  }
 else   if (attributeName.equals(READ_SPEED_FROM_CACHE)) {
    if (componentName == null)     return manager.getReadSpeedFromCacheInPages();
 else     return manager.getReadSpeedFromCacheInPages(componentName);
  }
 else   if (attributeName.equals(READ_SPEED_FROM_FILE)) {
    if (componentName == null)     return manager.getReadSpeedFromFileInPages();
 else     return manager.getReadSpeedFromFileInPages(componentName);
  }
 else   if (attributeName.equals(WRITE_SPEED_IN_CACHE)) {
    if (componentName == null)     return manager.getWriteSpeedInCacheInPages();
 else     return manager.getWriteSpeedInCacheInPages(componentName);
  }
 else   if (attributeName.equals(PAGES_PER_OPERATION)) {
    if (componentName == null)     throw new RuntimeOperationsException(new IllegalArgumentException("Unknown attribute"),"Amount of pages per operation is measured only on component level");
    return manager.getAmountOfPagesPerOperation(componentName);
  }
 else   if (attributeName.equals(WRITE_CACHE_PAGES_PER_FLUSH)) {
    if (componentName == null)     return manager.getWriteCachePagesPerFlush();
 else     throwComponentsAreNotSupported(WRITE_CACHE_PAGES_PER_FLUSH);
  }
 else   if (attributeName.equals(WRITE_CACHE_FLUSH_OPERATION_TIME)) {
    if (componentName == null)     return manager.getWriteCacheFlushOperationsTime();
 else     throwComponentsAreNotSupported(WRITE_CACHE_FLUSH_OPERATION_TIME);
  }
 else   if (attributeName.equals(WRITE_CACHE_FUZZY_CHECKPOINT_TIME)) {
    if (componentName == null)     return manager.getWriteCacheFuzzyCheckpointTime();
 else     throwComponentsAreNotSupported(WRITE_CACHE_FUZZY_CHECKPOINT_TIME);
  }
 else   if (attributeName.equals(FULL_CHECKPOINT_TIME)) {
    if (componentName == null)     return manager.getFullCheckpointTime();
 else     throwComponentsAreNotSupported(FULL_CHECKPOINT_TIME);
  }
 else   if (attributeName.equals(FULL_CHECKPOINT_COUNT)) {
    if (componentName == null)     return manager.getFullCheckpointCount();
 else     throwComponentsAreNotSupported(FULL_CHECKPOINT_COUNT);
  }
 else   if (attributeName.equals(READ_CACHE_SIZE)) {
    if (componentName == null)     return manager.getReadCacheSize();
 else     throwComponentsAreNotSupported(READ_CACHE_SIZE);
  }
 else   if (attributeName.equals(WRITE_CACHE_SIZE)) {
    if (componentName == null)     return manager.getWriteCacheSize();
 else     throwComponentsAreNotSupported(WRITE_CACHE_SIZE);
  }
 else   if (attributeName.equals(EXCLUSIVE_WRITE_CACHE_SIZE)) {
    if (componentName == null)     return manager.getExclusiveWriteCacheSize();
 else     throwComponentsAreNotSupported(EXCLUSIVE_WRITE_CACHE_SIZE);
  }
 else   if (attributeName.equals(WRITE_CACHE_OVERFLOW_COUNT)) {
    if (componentName == null)     return manager.getWriteCacheOverflowCount();
 else     throwComponentsAreNotSupported(WAL_CACHE_OVERFLOW_COUNT);
  }
 else   if (attributeName.equals(WAL_SIZE)) {
    if (componentName == null)     return manager.getWALSize();
 else     throwComponentsAreNotSupported(WAL_SIZE);
  }
 else   if (attributeName.equals(WAL_CACHE_OVERFLOW_COUNT)) {
    if (componentName == null)     return manager.getWALCacheOverflowCount();
 else     throwComponentsAreNotSupported(WAL_CACHE_OVERFLOW_COUNT);
  }
 else   if (attributeName.equals(WAL_LOG_TIME)) {
    if (componentName == null)     return manager.getWALLogRecordTime();
 else     throwComponentsAreNotSupported(WAL_LOG_TIME);
  }
 else   if (attributeName.equals(WAL_START_AO_LOG_TIME)) {
    if (componentName == null)     return manager.getWALStartAOLogRecordTime();
 else     throwComponentsAreNotSupported(WAL_START_AO_LOG_TIME);
  }
 else   if (attributeName.equals(WAL_END_AO_LOG_TIME)) {
    if (componentName == null)     return manager.getWALStopAOLogRecordTime();
 else     throwComponentsAreNotSupported(WAL_END_AO_LOG_TIME);
  }
 else   if (attributeName.equals(WAL_FLUSH_TIME)) {
    if (componentName == null)     return manager.getWALFlushTime();
 else     throwComponentsAreNotSupported(WAL_FLUSH_TIME);
  }
  throw new AttributeNotFoundException("Cannot find " + attribute + " attribute in "+ getClass().getSimpleName());
}
