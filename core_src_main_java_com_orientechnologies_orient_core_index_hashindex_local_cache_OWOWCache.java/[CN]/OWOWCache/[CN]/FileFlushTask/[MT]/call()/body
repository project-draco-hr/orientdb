{
  final GroupKey firstKey=new GroupKey(fileId,0);
  final GroupKey lastKey=new GroupKey(fileId,Long.MAX_VALUE);
  NavigableMap<GroupKey,WriteGroup> subMap=writeGroups.subMap(firstKey,true,lastKey,true);
  Iterator<Map.Entry<GroupKey,WriteGroup>> entryIterator=subMap.entrySet().iterator();
  while (entryIterator.hasNext()) {
    Map.Entry<GroupKey,WriteGroup> entry=entryIterator.next();
    lockManager.acquireLock(Thread.currentThread(),entry.getKey(),OLockManager.LOCK.EXCLUSIVE);
    try {
      WriteGroup writeGroup=entry.getValue();
      GroupKey groupKey=entry.getKey();
      for (int i=0; i < 16; i++) {
        long pagePointer=writeGroup.pages[i];
        if (pagePointer != ODirectMemory.NULL_POINTER) {
          flushPage(groupKey.fileId,groupKey.groupIndex * 16 + i,pagePointer);
          directMemory.free(pagePointer);
          cacheSize.decrementAndGet();
        }
      }
      entryIterator.remove();
    }
  finally {
      lockManager.releaseLock(Thread.currentThread(),entry.getKey(),OLockManager.LOCK.EXCLUSIVE);
    }
  }
  files.get(fileId).synch();
  return null;
}
