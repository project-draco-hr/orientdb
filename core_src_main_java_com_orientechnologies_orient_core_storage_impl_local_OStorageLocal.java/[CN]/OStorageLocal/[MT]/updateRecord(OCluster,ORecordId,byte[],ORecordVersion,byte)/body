{
  assert(lock.assertExclusiveLockHold());
  if (iClusterSegment == null)   throw new OStorageException("Cluster not defined for record: " + rid);
  final long timer=Orient.instance().getProfiler().startChrono();
  try {
    lockManager.acquireLock(Thread.currentThread(),rid,LOCK.EXCLUSIVE);
    try {
      final OPhysicalPosition ppos=iClusterSegment.getPhysicalPosition(new OPhysicalPosition(rid.clusterPosition));
      if (!checkForRecordValidity(ppos))       return null;
switch (recordVersion.getCounter()) {
case -1:
        ppos.recordVersion.increment();
      iClusterSegment.updateVersion(rid.clusterPosition,ppos.recordVersion);
    break;
case -2:
  break;
default :
if (recordVersion.getCounter() > -1) {
  if (!recordVersion.equals(ppos.recordVersion))   if (OFastConcurrentModificationException.enabled())   throw OFastConcurrentModificationException.instance();
 else   throw new OConcurrentModificationException(rid,ppos.recordVersion,recordVersion,ORecordOperation.UPDATED);
  ppos.recordVersion.increment();
  iClusterSegment.updateVersion(rid.clusterPosition,ppos.recordVersion);
}
 else {
  recordVersion.clearRollbackMode();
  ppos.recordVersion.copyFrom(recordVersion);
  iClusterSegment.updateVersion(rid.clusterPosition,ppos.recordVersion);
}
}
if (ppos.recordType != iRecordType) iClusterSegment.updateRecordType(rid.clusterPosition,iRecordType);
final long newDataSegmentOffset;
if (ppos.dataSegmentPos == -1) newDataSegmentOffset=getDataSegmentById(ppos.dataSegmentId).addRecord(rid,recordContent);
 else newDataSegmentOffset=getDataSegmentById(ppos.dataSegmentId).setRecord(ppos.dataSegmentPos,rid,recordContent);
if (newDataSegmentOffset != ppos.dataSegmentPos) {
iClusterSegment.updateDataSegmentPosition(ppos.clusterPosition,ppos.dataSegmentId,newDataSegmentOffset);
ppos.dataSegmentPos=newDataSegmentOffset;
}
return ppos;
}
  finally {
lockManager.releaseLock(Thread.currentThread(),rid,LOCK.EXCLUSIVE);
}
}
 catch (IOException e) {
OLogManager.instance().error(this,"Error on updating record " + rid + " (cluster: "+ iClusterSegment+ ")",e);
}
 finally {
Orient.instance().getProfiler().stopChrono(PROFILER_UPDATE_RECORD,"Update a record to database",timer,"db.*.updateRecord");
}
return null;
}
