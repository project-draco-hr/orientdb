{
  int bufferSize=0;
  for (  OEHFileMetadata bucketFile : filesMetadata) {
    if (bucketFile == null)     break;
    final OStorageFileConfiguration fileConfiguration=bucketFile.getFile().getConfig();
    bufferSize+=OStringSerializer.INSTANCE.getObjectSize(fileConfiguration.incrementSize);
    bufferSize+=OStringSerializer.INSTANCE.getObjectSize(fileConfiguration.path);
    bufferSize+=OStringSerializer.INSTANCE.getObjectSize(fileConfiguration.type);
    bufferSize+=2 * OLongSerializer.LONG_SIZE;
  }
  final int totalSize=bufferSize + 3 * OIntegerSerializer.INT_SIZE;
  if (file.getFilledUpTo() < totalSize)   file.allocateSpace(totalSize - file.getFilledUpTo());
  byte[] buffer=new byte[bufferSize];
  int offset=0;
  for (  OEHFileMetadata bucketFile : filesMetadata) {
    if (bucketFile == null)     break;
    final OStorageFileConfiguration fileConfiguration=bucketFile.getFile().getConfig();
    OStringSerializer.INSTANCE.serializeNative(fileConfiguration.incrementSize,buffer,offset);
    offset+=OStringSerializer.INSTANCE.getObjectSizeNative(buffer,offset);
    OStringSerializer.INSTANCE.serializeNative(fileConfiguration.path,buffer,offset);
    offset+=OStringSerializer.INSTANCE.getObjectSizeNative(buffer,offset);
    OStringSerializer.INSTANCE.serializeNative(fileConfiguration.type,buffer,offset);
    offset+=OStringSerializer.INSTANCE.getObjectSizeNative(buffer,offset);
    OLongSerializer.INSTANCE.serializeNative(bucketFile.geBucketsCount(),buffer,offset);
    offset+=OLongSerializer.LONG_SIZE;
    OLongSerializer.INSTANCE.serializeNative(bucketFile.getTombstonePosition(),buffer,offset);
    offset+=OLongSerializer.LONG_SIZE;
  }
  file.writeInt(0,filesMetadata.length);
  file.writeInt(OIntegerSerializer.INT_SIZE,buffer.length);
  file.write(2 * OIntegerSerializer.INT_SIZE,buffer);
}
