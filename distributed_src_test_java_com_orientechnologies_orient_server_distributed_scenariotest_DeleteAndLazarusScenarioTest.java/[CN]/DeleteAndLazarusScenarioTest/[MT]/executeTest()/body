{
  banner("Test with writeQuorum = majority");
  ODatabaseDocumentTx dbServer1=poolFactory.get(getDatabaseURL(serverInstance.get(0)),"admin","admin").acquire();
  System.out.print("\nChanging configuration (autoDeploy=false)...");
  ODocument cfg=null;
  ServerRun server=serverInstance.get(2);
  OHazelcastPlugin manager=(OHazelcastPlugin)server.getServerInstance().getDistributedManager();
  ODistributedConfiguration databaseConfiguration=manager.getDatabaseConfiguration(getDatabaseName());
  cfg=databaseConfiguration.getDocument();
  cfg.field("autoDeploy",false);
  cfg.field("version",(Integer)cfg.field("version") + 1);
  manager.updateCachedDatabaseConfiguration(getDatabaseName(),cfg,true,true);
  System.out.println("\nConfiguration updated.");
  try {
    ODatabaseRecordThreadLocal.INSTANCE.set(dbServer1);
    System.out.print("Inserting record r1...");
    new ODocument("Person").fields("id","R001","firstName","Luke","lastName","Skywalker").save();
    System.out.println("Done.");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Record r1 not inserted!.");
  }
  waitForInsertedRecordPropagation("R001");
  System.out.print("Checking consistency for record r1...");
  ODocument r1onServer1=retrieveRecord(getDatabaseURL(serverInstance.get(0)),"R001");
  ODocument r1onServer2=retrieveRecord(getDatabaseURL(serverInstance.get(1)),"R001");
  ODocument r1onServer3=retrieveRecord(getDatabaseURL(serverInstance.get(2)),"R001");
  final ORecordId r1Rid=(ORecordId)r1onServer1.getIdentity();
  assertEquals(r1onServer1.field("@version"),r1onServer2.field("@version"));
  assertEquals(r1onServer1.field("id"),r1onServer2.field("id"));
  assertEquals(r1onServer1.field("firstName"),r1onServer2.field("firstName"));
  assertEquals(r1onServer1.field("lastName"),r1onServer2.field("lastName"));
  assertEquals(r1onServer2.field("@version"),r1onServer3.field("@version"));
  assertEquals(r1onServer2.field("id"),r1onServer3.field("id"));
  assertEquals(r1onServer2.field("firstName"),r1onServer3.field("firstName"));
  assertEquals(r1onServer2.field("lastName"),r1onServer3.field("lastName"));
  System.out.println("\tDone.");
  int initialVersion=r1onServer1.field("@version");
  System.out.println("Network fault on server3.\n");
  simulateServerFault(serverInstance.get(2),"net-fault");
  assertFalse(serverInstance.get(2).isActive());
  banner("Updating r1* on server3 (isolated from the the cluster)");
  ODatabaseDocumentTx dbServer3=null;
  try {
    r1onServer3=retrieveRecord(getPlocalDatabaseURL(serverInstance.get(2)),"R001");
    dbServer3=new ODatabaseDocumentTx(getPlocalDatabaseURL(serverInstance.get(2))).open("admin","admin");
    r1onServer3.field("firstName","Darth");
    r1onServer3.field("lastName","Vader");
    r1onServer3.save();
    System.out.println(r1onServer3.getRecord().toString());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail();
  }
  serverInstance.get(2).startServer(getDistributedServerConfiguration(serverInstance.get(SERVERS - 1)));
  System.out.println("Server 3 restarted.");
  assertTrue(serverInstance.get(2).isActive());
  dbServer3=poolFactory.get(getDatabaseURL(serverInstance.get(2)),"admin","admin").acquire();
  try {
    r1onServer3=retrieveRecord(getPlocalDatabaseURL(serverInstance.get(2)),"R001");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  r1onServer1=retrieveRecord(getDatabaseURL(serverInstance.get(0)),"R001");
  r1onServer2=retrieveRecord(getDatabaseURL(serverInstance.get(1)),"R001");
  assertEquals(1,r1onServer1.field("@version"));
  assertEquals("R001",r1onServer1.field("id"));
  assertEquals("Luke",r1onServer1.field("firstName"));
  assertEquals("Skywalker",r1onServer1.field("lastName"));
  assertEquals(r1onServer1.field("@version"),r1onServer2.field("@version"));
  assertEquals(r1onServer1.field("id"),r1onServer2.field("id"));
  assertEquals(r1onServer1.field("firstName"),r1onServer2.field("firstName"));
  assertEquals(r1onServer1.field("lastName"),r1onServer2.field("lastName"));
  assertEquals("R001",r1onServer3.field("id"));
  assertEquals("Darth",r1onServer3.field("firstName"));
  assertEquals("Vader",r1onServer3.field("lastName"));
  assertEquals(initialVersion + 1,r1onServer3.field("@version"));
  System.out.println("Network fault on server1.\n");
  simulateServerFault(serverInstance.get(0),"net-fault");
  assertFalse(serverInstance.get(0).isActive());
  try {
    dbServer3=poolFactory.get(getDatabaseURL(serverInstance.get(2)),"admin","admin").acquire();
    dbServer3.command(new OCommandSQL("delete from Person where @rid=#27:0")).execute();
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
  }
  serverInstance.get(0).startServer(getDistributedServerConfiguration(serverInstance.get(0)));
  System.out.println("Server 1 restarted.");
  assertTrue(serverInstance.get(0).isActive());
  r1onServer1=retrieveRecord(getDatabaseURL(serverInstance.get(0)),"R001");
  r1onServer2=retrieveRecord(getDatabaseURL(serverInstance.get(1)),"R001");
  assertEquals(1,r1onServer1.field("@version"));
  assertEquals("R001",r1onServer1.field("id"));
  assertEquals("Luke",r1onServer1.field("firstName"));
  assertEquals("Skywalker",r1onServer1.field("lastName"));
  assertEquals(r1onServer1.field("@version"),r1onServer2.field("@version"));
  assertEquals(r1onServer1.field("id"),r1onServer2.field("id"));
  assertEquals(r1onServer1.field("firstName"),r1onServer2.field("firstName"));
  assertEquals(r1onServer1.field("lastName"),r1onServer2.field("lastName"));
  r1onServer3=retrieveRecord(getDatabaseURL(serverInstance.get(2)),"R001");
  assertEquals(2,r1onServer3.field("@version"));
  assertEquals("R001",r1onServer3.field("id"));
  assertEquals("Darth",r1onServer3.field("firstName"));
  assertEquals("Vader",r1onServer3.field("lastName"));
  try {
    dbServer1=poolFactory.get(getRemoteDatabaseURL(serverInstance.get(0)),"admin","admin").acquire();
    Integer result=dbServer1.command(new OCommandSQL("delete from " + r1Rid)).execute();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  r1onServer1=retrieveRecord(getDatabaseURL(serverInstance.get(0)),"R001",true);
  r1onServer2=retrieveRecord(getDatabaseURL(serverInstance.get(1)),"R001",true);
  r1onServer3=retrieveRecord(getDatabaseURL(serverInstance.get(2)),"R001",true);
  assertEquals(MISSING_DOCUMENT,r1onServer1);
  assertEquals(MISSING_DOCUMENT,r1onServer2);
  assertEquals(MISSING_DOCUMENT,r1onServer3);
}
