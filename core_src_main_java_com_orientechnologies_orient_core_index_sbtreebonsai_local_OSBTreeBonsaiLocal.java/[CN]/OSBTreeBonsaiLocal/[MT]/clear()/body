{
  acquireExclusiveLock();
  try {
    startAtomicOperation();
    final Queue<OBonsaiBucketPointer> subTreesToDelete=new LinkedList<OBonsaiBucketPointer>();
    OCacheEntry cacheEntry=diskCache.load(fileId,rootBucketPointer.getPageIndex(),false);
    cacheEntry.acquireExclusiveLock();
    try {
      OSBTreeBonsaiBucket<K,V> rootBucket=new OSBTreeBonsaiBucket<K,V>(cacheEntry,rootBucketPointer.getPageOffset(),keySerializer,valueSerializer,getTrackMode());
      addChildrenToQueue(subTreesToDelete,rootBucket);
      rootBucket.shrink(0);
      rootBucket=new OSBTreeBonsaiBucket<K,V>(cacheEntry,rootBucketPointer.getPageOffset(),true,keySerializer,valueSerializer,getTrackMode());
      rootBucket.setTreeSize(0);
      logPageChanges(rootBucket,fileId,rootBucketPointer.getPageIndex(),true);
      cacheEntry.markDirty();
    }
  finally {
      cacheEntry.releaseExclusiveLock();
      diskCache.release(cacheEntry);
    }
    recycleSubTrees(subTreesToDelete);
    endAtomicOperation(false);
  }
 catch (  IOException e) {
    rollback();
    throw new OSBTreeException("Error during clear of sbtree with name " + name,e);
  }
 finally {
    releaseExclusiveLock();
  }
}
