{
  final long operationId=operationStarted.incrementAndGet();
  return new OrientEdgeFuture(Orient.instance().getWorkers().submit(new Callable<OrientEdge>(){
    @Override public OrientEdge call() throws Exception {
      final OrientBaseGraph g=acquire();
      try {
        OrientVertex vOut=outVertex instanceof OrientVertexFuture ? ((OrientVertexFuture)outVertex).get() : (OrientVertex)outVertex;
        OrientVertex vIn=inVertex instanceof OrientVertexFuture ? ((OrientVertexFuture)inVertex).get() : (OrientVertex)inVertex;
        vOut.attach(g);
        vIn.attach(g);
        for (int retry=0; ; retry++) {
          try {
            final OrientEdge e=g.addEdge(id,vOut,vIn,label);
            edgesCreated.incrementAndGet();
            return e;
          }
 catch (          OConcurrentModificationException e) {
            concurrentException.incrementAndGet();
            if (retry < maxRetries) {
              OLogManager.instance().warn(this,"Conflict on addEdge(" + id + ","+ outVertex+ ","+ inVertex+ ","+ label+ "), retrying (retry="+ retry+ "/"+ maxRetries+ "). Cause: "+ e);
              if (e.getRid().equals(vOut.getIdentity())) {
                vOut.reload();
                addInCache(vOut.getProperty(keyFieldName),vOut);
              }
 else {
                vIn.reload();
                addInCache(vIn.getProperty(keyFieldName),vIn);
              }
              verticesReloaded.incrementAndGet();
            }
 else             throw e;
          }
catch (          Exception e) {
            unknownException.incrementAndGet();
            OLogManager.instance().warn(this,"Error on addEdge(" + id + ","+ outVertex+ ","+ inVertex+ ","+ label+ "), retrying (retry="+ retry+ "/"+ maxRetries+ ")");
            e.printStackTrace();
          }
        }
      }
  finally {
        g.shutdown();
        asynchOperationCompleted();
      }
    }
  }
));
}
