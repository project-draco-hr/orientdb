{
  final OAtomicOperation atomicOperation;
  try {
    atomicOperation=startAtomicOperation();
  }
 catch (  IOException e) {
    throw new OSBTreeException("Error during sbtree entrie clear.",e);
  }
  acquireExclusiveLock();
  try {
    final Queue<OBonsaiBucketPointer> subTreesToDelete=new LinkedList<OBonsaiBucketPointer>();
    OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,rootBucketPointer.getPageIndex(),false,diskCache);
    cacheEntry.acquireExclusiveLock();
    try {
      OSBTreeBonsaiBucket<K,V> rootBucket=new OSBTreeBonsaiBucket<K,V>(cacheEntry,rootBucketPointer.getPageOffset(),keySerializer,valueSerializer,getChangesTree(atomicOperation,cacheEntry));
      addChildrenToQueue(subTreesToDelete,rootBucket);
      rootBucket.shrink(0);
      rootBucket=new OSBTreeBonsaiBucket<K,V>(cacheEntry,rootBucketPointer.getPageOffset(),true,keySerializer,valueSerializer,getChangesTree(atomicOperation,cacheEntry));
      rootBucket.setTreeSize(0);
    }
  finally {
      cacheEntry.releaseExclusiveLock();
      releasePage(atomicOperation,cacheEntry,diskCache);
    }
    recycleSubTrees(subTreesToDelete,atomicOperation);
    endAtomicOperation(false);
  }
 catch (  Throwable e) {
    rollback();
    throw new OSBTreeException("Error during clear of sbtree with name " + name,e);
  }
 finally {
    releaseExclusiveLock();
  }
}
