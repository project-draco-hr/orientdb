{
  offset=super.fromStream(content,offset);
  rollback=content[offset] > 0;
  offset++;
  atomicOperationMetadataMap=new LinkedHashMap<String,OAtomicOperationMetadata<?>>();
  final int metadataId=content[offset];
  offset++;
  if (metadataId == 1) {
    final int collectionsSize=OIntegerSerializer.INSTANCE.deserializeNative(content,offset);
    offset+=OIntegerSerializer.INT_SIZE;
    final ORecordOperationMetadata recordOperationMetadata=new ORecordOperationMetadata();
    for (int i=0; i < collectionsSize; i++) {
      final long clusterPosition=OLongSerializer.INSTANCE.deserializeNative(content,offset);
      offset+=OLongSerializer.LONG_SIZE;
      final int clusterId=OIntegerSerializer.INSTANCE.deserializeNative(content,offset);
      offset+=OIntegerSerializer.INT_SIZE;
      recordOperationMetadata.addRid(new ORecordId(clusterId,clusterPosition));
    }
    atomicOperationMetadataMap.put(recordOperationMetadata.getKey(),recordOperationMetadata);
  }
 else   if (metadataId > 0)   throw new IllegalStateException("Invalid metadata entry id " + metadataId);
  return offset;
}
