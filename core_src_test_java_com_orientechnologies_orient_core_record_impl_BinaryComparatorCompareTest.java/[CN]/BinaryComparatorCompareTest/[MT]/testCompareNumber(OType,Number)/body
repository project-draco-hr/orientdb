{
  OType[] numberTypes=new OType[]{OType.BYTE,OType.DOUBLE,OType.FLOAT,OType.SHORT,OType.INTEGER,OType.LONG,OType.DATETIME};
  for (  OType t : numberTypes) {
    if (sourceType == OType.DATETIME && t == OType.BYTE)     continue;
    testCompare(sourceType,t);
  }
  for (  OType t : numberTypes) {
    testCompare(t,sourceType);
  }
  if (sourceType != OType.DATETIME) {
    Assert.assertEquals(comparator.compare(field(sourceType,value10AsSourceType),field(OType.STRING,value10AsSourceType.toString())),0);
    Assert.assertTrue(comparator.compare(field(sourceType,value10AsSourceType),field(OType.STRING,"9")) < 0);
    Assert.assertTrue(comparator.compare(field(sourceType,value10AsSourceType),field(OType.STRING,"11")) < 0);
    Assert.assertTrue(comparator.compare(field(sourceType,value10AsSourceType.intValue() * 2),field(OType.STRING,"11")) > 0);
    Assert.assertEquals(comparator.compare(field(OType.STRING,value10AsSourceType.toString()),field(sourceType,value10AsSourceType)),0);
    Assert.assertTrue(comparator.compare(field(OType.STRING,value10AsSourceType.toString()),field(sourceType,value10AsSourceType.intValue() - 1)) < 0);
    Assert.assertTrue(comparator.compare(field(OType.STRING,value10AsSourceType.toString()),field(sourceType,value10AsSourceType.intValue() + 1)) < 0);
    Assert.assertTrue(comparator.compare(field(OType.STRING,"" + value10AsSourceType.intValue() * 2),field(sourceType,value10AsSourceType.intValue())) > 0);
  }
}
