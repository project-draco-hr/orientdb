{
  listener.onMessage("\nStarting index comparison:");
  boolean ok=true;
  final OIndexManager indexManagerOne=makeDbCall(databaseDocumentTxOne,new ODbRelatedCall<OIndexManager>(){
    public OIndexManager call(){
      return databaseDocumentTxOne.getMetadata().getIndexManager();
    }
  }
);
  final OIndexManager indexManagerTwo=makeDbCall(databaseDocumentTxTwo,new ODbRelatedCall<OIndexManager>(){
    public OIndexManager call(){
      return databaseDocumentTxTwo.getMetadata().getIndexManager();
    }
  }
);
  final Collection<? extends OIndex<?>> indexesOne=makeDbCall(databaseDocumentTxOne,new ODbRelatedCall<Collection<? extends OIndex<?>>>(){
    public Collection<? extends OIndex<?>> call(){
      return indexManagerOne.getIndexes();
    }
  }
);
  int indexesSizeOne=makeDbCall(databaseDocumentTxTwo,new ODbRelatedCall<Integer>(){
    public Integer call(){
      return indexesOne.size();
    }
  }
);
  int indexesSizeTwo=makeDbCall(databaseDocumentTxTwo,new ODbRelatedCall<Integer>(){
    public Integer call(){
      return indexManagerTwo.getIndexes().size();
    }
  }
);
  if (exportImportHashTable != null)   indexesSizeTwo--;
  if (indexesSizeOne != indexesSizeTwo) {
    ok=false;
    listener.onMessage("\n- ERR: Amount of indexes are different.");
    listener.onMessage("\n--- DB1: " + indexesSizeOne);
    listener.onMessage("\n--- DB2: " + indexesSizeTwo);
    listener.onMessage("\n");
    ++differences;
  }
  final Iterator<? extends OIndex<?>> iteratorOne=makeDbCall(databaseDocumentTxOne,new ODbRelatedCall<Iterator<? extends OIndex<?>>>(){
    public Iterator<? extends OIndex<?>> call(){
      return indexesOne.iterator();
    }
  }
);
  while (makeDbCall(databaseDocumentTxOne,new ODbRelatedCall<Boolean>(){
    public Boolean call(){
      return iteratorOne.hasNext();
    }
  }
)) {
    final OIndex indexOne=makeDbCall(databaseDocumentTxOne,new ODbRelatedCall<OIndex<?>>(){
      public OIndex<?> call(){
        return iteratorOne.next();
      }
    }
);
    final OIndex<?> indexTwo=makeDbCall(databaseDocumentTxTwo,new ODbRelatedCall<OIndex<?>>(){
      public OIndex<?> call(){
        return indexManagerTwo.getIndex(indexOne.getName());
      }
    }
);
    if (indexTwo == null) {
      ok=false;
      listener.onMessage("\n- ERR: Index " + indexOne.getName() + " is absent in DB2.");
      ++differences;
      continue;
    }
    if (!indexOne.getType().equals(indexTwo.getType())) {
      ok=false;
      listener.onMessage("\n- ERR: Index types for index " + indexOne.getName() + " are different.");
      listener.onMessage("\n--- DB1: " + indexOne.getType());
      listener.onMessage("\n--- DB2: " + indexTwo.getType());
      listener.onMessage("\n");
      ++differences;
      continue;
    }
    if (!indexOne.getClusters().equals(indexTwo.getClusters())) {
      ok=false;
      listener.onMessage("\n- ERR: Clusters to index for index " + indexOne.getName() + " are different.");
      listener.onMessage("\n--- DB1: " + indexOne.getClusters());
      listener.onMessage("\n--- DB2: " + indexTwo.getClusters());
      listener.onMessage("\n");
      ++differences;
      continue;
    }
    if (indexOne.getDefinition() == null && indexTwo.getDefinition() != null) {
      ok=false;
      listener.onMessage("\n- ERR: Index definition for index " + indexOne.getName() + " for DB2 is not null.");
      ++differences;
      continue;
    }
 else     if (indexOne.getDefinition() != null && indexTwo.getDefinition() == null) {
      ok=false;
      listener.onMessage("\n- ERR: Index definition for index " + indexOne.getName() + " for DB2 is null.");
      ++differences;
      continue;
    }
 else     if (indexOne.getDefinition() != null && !indexOne.getDefinition().equals(indexTwo.getDefinition())) {
      ok=false;
      listener.onMessage("\n- ERR: Index definitions for index " + indexOne.getName() + " are different.");
      listener.onMessage("\n--- DB1: " + indexOne.getDefinition());
      listener.onMessage("\n--- DB2: " + indexTwo.getDefinition());
      listener.onMessage("\n");
      ++differences;
      continue;
    }
    final long indexOneSize=makeDbCall(databaseDocumentTxOne,new ODbRelatedCall<Long>(){
      public Long call(){
        return indexOne.getSize();
      }
    }
);
    final long indexTwoSize=makeDbCall(databaseDocumentTxTwo,new ODbRelatedCall<Long>(){
      public Long call(){
        return indexTwo.getSize();
      }
    }
);
    if (indexOneSize != indexTwoSize) {
      ok=false;
      listener.onMessage("\n- ERR: Amount of entries for index " + indexOne.getName() + " are different.");
      listener.onMessage("\n--- DB1: " + indexOneSize);
      listener.onMessage("\n--- DB2: " + indexTwoSize);
      listener.onMessage("\n");
      ++differences;
    }
    if (compareIndexMetadata) {
      final ODocument metadataOne=indexOne.getMetadata();
      final ODocument metadataTwo=indexTwo.getMetadata();
      if (metadataOne == null && metadataTwo != null) {
        ok=false;
        listener.onMessage("\n- ERR: Metadata for index " + indexOne.getName() + " for DB1 is null but for DB2 is not.");
        listener.onMessage("\n");
        ++differences;
      }
 else       if (metadataOne != null && metadataTwo == null) {
        ok=false;
        listener.onMessage("\n- ERR: Metadata for index " + indexOne.getName() + " for DB1 is not null but for DB2 is null.");
        listener.onMessage("\n");
        ++differences;
      }
 else       if (metadataOne != null && metadataTwo != null && !ODocumentHelper.hasSameContentOf(metadataOne,databaseDocumentTxOne,metadataTwo,databaseDocumentTxTwo,ridMapper)) {
        ok=false;
        listener.onMessage("\n- ERR: Metadata for index " + indexOne.getName() + " for DB1 and for DB2 are different.");
        makeDbCall(databaseDocumentTxOne,new ODbRelatedCall<Object>(){
          @Override public Object call(){
            listener.onMessage("\n--- M1: " + metadataOne);
            return null;
          }
        }
);
        makeDbCall(databaseDocumentTxTwo,new ODbRelatedCall<Object>(){
          @Override public Object call(){
            listener.onMessage("\n--- M2: " + metadataTwo);
            return null;
          }
        }
);
        listener.onMessage("\n");
        ++differences;
      }
    }
    if (((compareEntriesForAutomaticIndexes && !indexOne.getType().equals("DICTIONARY")) || !indexOne.isAutomatic())) {
      final OIndexKeyCursor indexKeyCursorOne=makeDbCall(databaseDocumentTxOne,new ODbRelatedCall<OIndexKeyCursor>(){
        public OIndexKeyCursor call(){
          return indexOne.keyCursor();
        }
      }
);
      Object key=makeDbCall(databaseDocumentTxOne,new ODbRelatedCall<Object>(){
        @Override public Object call(){
          return indexKeyCursorOne.next(-1);
        }
      }
);
      while (key != null) {
        final Object indexKey=key;
        Object indexOneValue=makeDbCall(databaseDocumentTxOne,new ODbRelatedCall<Object>(){
          public Object call(){
            return indexOne.get(indexKey);
          }
        }
);
        final Object indexTwoValue=makeDbCall(databaseDocumentTxTwo,new ODbRelatedCall<Object>(){
          public Object call(){
            return indexTwo.get(indexKey);
          }
        }
);
        if (indexTwoValue == null) {
          ok=false;
          listener.onMessage("\n- ERR: Entry with key " + key + " is absent in index "+ indexOne.getName()+ " for DB2.");
          ++differences;
        }
 else         if (indexOneValue instanceof Set && indexTwoValue instanceof Set) {
          final Set<Object> indexOneValueSet=(Set<Object>)indexOneValue;
          final Set<Object> indexTwoValueSet=(Set<Object>)indexTwoValue;
          if (!ODocumentHelper.compareSets(databaseDocumentTxOne,indexOneValueSet,databaseDocumentTxTwo,indexTwoValueSet,ridMapper)) {
            ok=false;
            reportIndexDiff(indexOne,key,indexOneValue,indexTwoValue);
          }
        }
 else         if (indexOneValue instanceof ORID && indexTwoValue instanceof ORID) {
          if (ridMapper != null && ((ORID)indexOneValue).isPersistent()) {
            OIdentifiable identifiable=ridMapper.map((ORID)indexOneValue);
            if (identifiable != null)             indexOneValue=identifiable.getIdentity();
          }
          if (!indexOneValue.equals(indexTwoValue)) {
            ok=false;
            reportIndexDiff(indexOne,key,indexOneValue,indexTwoValue);
          }
        }
 else         if (!indexOneValue.equals(indexTwoValue)) {
          ok=false;
          reportIndexDiff(indexOne,key,indexOneValue,indexTwoValue);
        }
        key=makeDbCall(databaseDocumentTxOne,new ODbRelatedCall<Object>(){
          @Override public Object call(){
            return indexKeyCursorOne.next(-1);
          }
        }
);
      }
    }
  }
  if (ok)   listener.onMessage("OK");
}
