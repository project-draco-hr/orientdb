{
  acquireSharedLock();
  try {
    OClusterPositionMapBucket.PositionEntry positionEntry=clusterPositionMap.get(clusterPosition);
    if (positionEntry == null)     return null;
    int recordPosition=positionEntry.getRecordPosition();
    long pageIndex=positionEntry.getPageIndex();
    if (diskCache.getFilledUpTo(fileId) <= pageIndex)     return null;
    ORecordVersion recordVersion=null;
    OCacheEntry cacheEntry=diskCache.load(fileId,pageIndex,false);
    OCachePointer pointer=cacheEntry.getCachePointer();
    try {
      final OClusterPage localPage=new OClusterPage(pointer.getDataPointer(),false,ODurablePage.TrackMode.NONE);
      if (localPage.isDeleted(recordPosition))       return null;
      recordVersion=localPage.getRecordVersion(recordPosition);
    }
  finally {
      diskCache.release(cacheEntry);
    }
    byte[] fullContent=readFullEntry(clusterPosition,pageIndex,recordPosition);
    if (fullContent == null)     return null;
    int fullContentPosition=0;
    byte recordType=fullContent[fullContentPosition];
    fullContentPosition++;
    int readContentSize=OIntegerSerializer.INSTANCE.deserializeNative(fullContent,fullContentPosition);
    fullContentPosition+=OIntegerSerializer.INT_SIZE;
    byte[] recordContent=new byte[readContentSize];
    System.arraycopy(fullContent,fullContentPosition,recordContent,0,recordContent.length);
    recordContent=compression.uncompress(recordContent);
    return new ORawBuffer(recordContent,recordVersion,recordType);
  }
  finally {
    releaseSharedLock();
  }
}
