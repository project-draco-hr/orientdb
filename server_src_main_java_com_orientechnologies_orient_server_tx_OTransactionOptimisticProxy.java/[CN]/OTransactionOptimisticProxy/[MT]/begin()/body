{
  super.begin();
  try {
    setUsingLog(channel.readByte() == 1);
    byte lastTxStatus;
    for (lastTxStatus=channel.readByte(); lastTxStatus == 1; lastTxStatus=channel.readByte()) {
      final byte recordStatus=channel.readByte();
      final ORecordId rid=channel.readRID();
      final byte recordType=channel.readByte();
      final ORecordOperation entry=new OTransactionEntryProxy(recordType);
      entry.type=recordStatus;
switch (recordStatus) {
case ORecordOperation.CREATED:
        oNetworkProtocolBinary.fillRecord(rid,channel.readBytes(),OVersionFactory.instance().createVersion(),entry.getRecord(),database);
      createdRecords.put(rid.copy(),entry.getRecord());
    break;
case ORecordOperation.UPDATED:
  ORecordVersion version=channel.readVersion();
byte[] bytes=channel.readBytes();
oNetworkProtocolBinary.fillRecord(rid,bytes,version,entry.getRecord(),database);
if (protocolVersion >= 23) ORecordInternal.setContentChanged(entry.getRecord(),channel.readBoolean());
break;
case ORecordOperation.DELETED:
ORecordInternal.fill(entry.getRecord(),rid,channel.readVersion(),null,false);
break;
default :
throw new OTransactionException("Unrecognized tx command: " + recordStatus);
}
tempEntries.put(entry.getRecord().getIdentity(),entry);
}
if (lastTxStatus == -1) throw new OTransactionAbortedException("Transaction aborted by the client");
final ODocument remoteIndexEntries=new ODocument(channel.readBytes());
fillIndexOperations(remoteIndexEntries);
for (Entry<ORID,ORecordOperation> entry : tempEntries.entrySet()) {
if (entry.getValue().type == ORecordOperation.UPDATED) {
final ORecord record=entry.getValue().record.getRecord();
final ORecord loadedRecord=record.getIdentity().copy().getRecord();
if (loadedRecord == null) throw new ORecordNotFoundException(record.getIdentity().toString());
if (ORecordInternal.getRecordType(loadedRecord) == ODocument.RECORD_TYPE && ORecordInternal.getRecordType(loadedRecord) == ORecordInternal.getRecordType(record)) {
((ODocument)loadedRecord).merge((ODocument)record,false,false);
((ODocument)loadedRecord).setDirty();
loadedRecord.getRecordVersion().copyFrom(record.getRecordVersion());
entry.getValue().record=loadedRecord;
updatedRecords.put((ORecordId)entry.getKey(),entry.getValue().getRecord());
}
}
addRecord(entry.getValue().getRecord(),entry.getValue().type,null);
}
tempEntries.clear();
for (ORecord record : createdRecords.values()) unmarshallRecord(record);
for (ORecord record : updatedRecords.values()) unmarshallRecord(record);
}
 catch (IOException e) {
rollback();
throw new OSerializationException("Cannot read transaction record from the network. Transaction aborted",e);
}
}
