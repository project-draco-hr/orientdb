{
  super.parse(iRequest);
  final int pos=parseProjections();
  if (pos == -1)   return this;
  if (context == null)   context=new OBasicCommandContext();
  final int endPosition=parserText.length();
  parserNextWord(true);
  if (parserGetLastWord().equalsIgnoreCase(KEYWORD_FROM)) {
    parsedTarget=OSQLEngine.getInstance().parseTarget(parserText.substring(parserGetCurrentPosition(),endPosition),getContext(),KEYWORD_WHERE);
    parserSetCurrentPosition(parsedTarget.parserIsEnded() ? endPosition : parsedTarget.parserGetCurrentPosition() + parserGetCurrentPosition());
  }
 else   parserGoBack();
  parserNextWord(true);
  if (parserGetLastWord().equalsIgnoreCase(KEYWORD_WHERE)) {
    compiledFilter=OSQLEngine.getInstance().parseCondition(parserText.substring(parserGetCurrentPosition(),endPosition),getContext(),KEYWORD_WHERE);
    optimize();
    parserSetCurrentPosition(compiledFilter.parserIsEnded() ? endPosition : compiledFilter.parserGetCurrentPosition() + parserGetCurrentPosition());
  }
 else   parserGoBack();
  if (!parserIsEnded()) {
    parserSkipWhiteSpaces();
    while (!parserIsEnded()) {
      parserNextWord(true);
      if (!parserIsEnded()) {
        final String w=parserGetLastWord();
        if (w.equals(KEYWORD_LET))         parseLet();
 else         if (w.equals(KEYWORD_ORDER))         parseOrderBy(w);
 else         if (w.equals(KEYWORD_LIMIT))         parseLimit(w);
 else         if (w.equals(KEYWORD_SKIP))         parseSkip(w);
 else         throwParsingException("Invalid keyword '" + w + "'");
      }
    }
  }
  if (limit == 0 || limit < -1) {
    throw new IllegalArgumentException("Limit must be > 0 or = -1 (no limit)");
  }
  return this;
}
