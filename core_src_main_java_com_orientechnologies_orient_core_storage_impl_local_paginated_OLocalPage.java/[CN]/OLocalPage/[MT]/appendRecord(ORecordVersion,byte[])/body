{
  int freePosition=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + FREE_POSITION_OFFSET);
  int indexesLength=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + PAGE_INDEXES_LENGTH_OFFSET);
  int lastEntryIndexPosition=PAGE_INDEXES_OFFSET + indexesLength * INDEX_ITEM_SIZE;
  int entrySize=record.length + 2 * OIntegerSerializer.INT_SIZE;
  int freeListHeader=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + FREELIST_HEADER_OFFSET);
  if (!checkSpace(entrySize,freeListHeader))   return -1;
  if (freeListHeader > 0) {
    if (freePosition - entrySize < lastEntryIndexPosition)     doDefragmentation();
  }
 else {
    if (freePosition - entrySize < lastEntryIndexPosition + INDEX_ITEM_SIZE)     doDefragmentation();
  }
  freePosition=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + FREE_POSITION_OFFSET);
  freePosition-=entrySize;
  int entryIndex;
  if (freeListHeader > 0) {
    entryIndex=freeListHeader - 1;
    final int tombstonePointer=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + PAGE_INDEXES_OFFSET + INDEX_ITEM_SIZE * entryIndex);
    int nextEntryPosition=tombstonePointer & POSITION_MASK;
    if (nextEntryPosition > 0)     OIntegerSerializer.INSTANCE.serializeInDirectMemory(nextEntryPosition,directMemory,pagePointer + FREELIST_HEADER_OFFSET);
 else     OIntegerSerializer.INSTANCE.serializeInDirectMemory(0,directMemory,pagePointer + FREELIST_HEADER_OFFSET);
    OIntegerSerializer.INSTANCE.serializeInDirectMemory(getFreeSpace() - entrySize,directMemory,pagePointer + FREE_SPACE_COUNTER_OFFSET);
  }
 else {
    entryIndex=indexesLength;
    OIntegerSerializer.INSTANCE.serializeInDirectMemory(indexesLength + 1,directMemory,pagePointer + PAGE_INDEXES_LENGTH_OFFSET);
    OIntegerSerializer.INSTANCE.serializeInDirectMemory(getFreeSpace() - entrySize - INDEX_ITEM_SIZE,directMemory,pagePointer + FREE_SPACE_COUNTER_OFFSET);
  }
  int entryIndexPosition=PAGE_INDEXES_OFFSET + entryIndex * INDEX_ITEM_SIZE;
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(freePosition,directMemory,pagePointer + entryIndexPosition);
  byte[] serializedVersion=new byte[OVersionFactory.instance().getVersionSize()];
  recordVersion.getSerializer().fastWriteTo(serializedVersion,0,recordVersion);
  directMemory.set(pagePointer + entryIndexPosition + OIntegerSerializer.INT_SIZE,serializedVersion,serializedVersion.length);
  long entryPointer=pagePointer + freePosition;
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(entrySize,directMemory,entryPointer);
  entryPointer+=OIntegerSerializer.INT_SIZE;
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(entryIndex,directMemory,entryPointer);
  entryPointer+=OIntegerSerializer.INT_SIZE;
  directMemory.set(entryPointer,record,record.length);
  entryPointer+=record.length;
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(freePosition,directMemory,pagePointer + FREE_POSITION_OFFSET);
  incrementEntriesCount();
  return entryIndex;
}
