{
  channel.acquireWriteLock();
  try {
    channel.writeByte(OChannelBinaryProtocol.RESPONSE_STATUS_ERROR);
    channel.writeInt(iClientTxId);
    Throwable current;
    if (t instanceof OLockException && t.getCause() instanceof ODatabaseException)     current=t.getCause();
 else     current=t;
    final Throwable original=current;
    while (current != null) {
      channel.writeByte((byte)1);
      channel.writeString(current.getClass().getName());
      channel.writeString(current != null ? current.getMessage() : null);
      current=current.getCause();
    }
    channel.writeByte((byte)0);
    if (connection != null && connection.data.protocolVersion >= 19) {
      final OMemoryStream memoryStream=new OMemoryStream();
      final ObjectOutputStream objectOutputStream=new ObjectOutputStream(memoryStream);
      objectOutputStream.writeObject(original);
      objectOutputStream.flush();
      final byte[] result=memoryStream.toByteArray();
      objectOutputStream.close();
      channel.writeBytes(result);
    }
    channel.flush();
    if (OLogManager.instance().isLevelEnabled(logClientExceptions)) {
      if (logClientFullStackTrace)       OLogManager.instance().log(this,logClientExceptions,"Sent run-time exception to the client %s: %s",t,channel.socket.getRemoteSocketAddress(),t.toString());
 else       OLogManager.instance().log(this,logClientExceptions,"Sent run-time exception to the client %s: %s",null,channel.socket.getRemoteSocketAddress(),t.toString());
    }
  }
 catch (  Exception e) {
    if (e instanceof SocketException)     shutdown();
  }
 finally {
    channel.releaseWriteLock();
  }
}
