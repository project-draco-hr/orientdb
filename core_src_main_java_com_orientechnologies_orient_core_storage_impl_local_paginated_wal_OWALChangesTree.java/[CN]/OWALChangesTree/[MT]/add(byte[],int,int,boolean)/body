{
  final Node fnode=bsearch(start);
  final Node node=new Node(value,start,RED,version);
  if (start < fnode.start) {
    fnode.left=node;
    node.parent=fnode;
    updateMaxEndAfterAppend(node);
    insertCaseOne(node);
  }
 else   if (start > fnode.start) {
    fnode.right=node;
    node.parent=fnode;
    updateMaxEndAfterAppend(node);
    insertCaseOne(node);
  }
 else {
    final int end=start + value.length;
    if (end == fnode.end) {
      if (fnode.version < version)       fnode.value=value;
    }
 else     if (end < fnode.end) {
      if (fnode.version < version) {
        final byte[] cvalue=Arrays.copyOfRange(fnode.value,end,fnode.end);
        final int cversion=fnode.version;
        final int cstart=end;
        fnode.end=end;
        fnode.value=value;
        updateMaxEndAccordingToChildren(fnode);
        add(cvalue,cstart,cversion,updateSerializedSize);
      }
    }
 else {
      if (fnode.version > version) {
        final byte[] cvalue=Arrays.copyOfRange(value,fnode.end,end);
        final int cversion=version;
        final int cstart=fnode.end;
        add(cvalue,cstart,cversion,updateSerializedSize);
      }
 else {
        fnode.end=end;
        fnode.value=value;
        updateMaxEndAccordingToChildren(fnode);
      }
    }
  }
  assertInvariants();
}
