{
  ORecordInternal<?> record;
  ORawBuffer recordBuffer;
  long positionInPhyCluster;
  try {
    if (iLockEntireCluster)     cluster.lock();
    OClusterPositionIterator iterator=cluster.absoluteIterator(iBeginRange,iEndRange);
    final ORecordId rid=new ORecordId(cluster.getId());
    final ODatabaseRecord database=ioRecord.getDatabase();
    ORecordInternal<?> recordToCheck;
    while (iterator.hasNext()) {
      positionInPhyCluster=iterator.next();
      if (positionInPhyCluster == -1)       continue;
      rid.clusterPosition=positionInPhyCluster;
      record=database.getTransaction().getEntry(rid);
      if (record == null)       record=database.getCache().findRecord(rid);
      if (record != null && record.getRecordType() != ODocument.RECORD_TYPE)       continue;
      if (record == null) {
        recordBuffer=readRecord(iRequesterId,cluster,positionInPhyCluster,!iLockEntireCluster);
        if (recordBuffer == null)         continue;
        if (recordBuffer.recordType != ODocument.RECORD_TYPE)         continue;
        if (ioRecord.getRecordType() != recordBuffer.recordType) {
          final ORecordInternal<?> newRecord=ORecordFactory.newInstance(recordBuffer.recordType);
          newRecord.setDatabase(ioRecord.getDatabase());
          ioRecord=newRecord;
        }
 else         ioRecord.reset();
        ioRecord.setVersion(recordBuffer.version);
        ioRecord.setIdentity(cluster.getId(),positionInPhyCluster);
        ioRecord.fromStream(recordBuffer.buffer);
        recordToCheck=ioRecord;
      }
 else       recordToCheck=record;
      if (!iListener.foreach(recordToCheck))       break;
    }
  }
  finally {
    if (iLockEntireCluster)     cluster.unlock();
  }
  return ioRecord;
}
