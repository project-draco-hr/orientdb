{
  final ODatabaseRecord database=getDatabase();
  database.checkSecurity(ODatabaseSecurityResources.COMMAND,ORole.PERMISSION_READ);
  init(((OCommandRequestText)iRequest).getText());
  className=null;
  newRecords=null;
  parseRequiredWords("INSERT","INTO");
  String subjectName=parseRequiredWord(true,"Invalid subject name. Expected cluster, class or index");
  if (subjectName.startsWith(OCommandExecutorSQLAbstract.CLUSTER_PREFIX))   clusterName=subjectName.substring(OCommandExecutorSQLAbstract.CLUSTER_PREFIX.length());
 else   if (subjectName.startsWith(OCommandExecutorSQLAbstract.INDEX_PREFIX))   indexName=subjectName.substring(OCommandExecutorSQLAbstract.INDEX_PREFIX.length());
 else {
    if (subjectName.startsWith(OCommandExecutorSQLAbstract.CLASS_PREFIX))     subjectName=subjectName.substring(OCommandExecutorSQLAbstract.CLASS_PREFIX.length());
    final OClass cls=database.getMetadata().getSchema().getClass(subjectName);
    if (cls == null)     throw new OCommandSQLParsingException("Class " + subjectName + " not found in database",text,currentPos);
    className=cls.getName();
  }
  final int beginFields=OStringParser.jumpWhiteSpaces(text,currentPos);
  if (beginFields == -1 || (text.charAt(beginFields) != '(' && !text.startsWith(KEYWORD_SET,beginFields)))   throw new OCommandSQLParsingException("Set of fields is missed. Example: (name, surname) or SET name = 'Bill'. Use " + getSyntax(),text,currentPos);
  newRecords=new ArrayList<Map<String,Object>>();
  if (text.charAt(beginFields) == '(') {
    parseBracesFields(beginFields);
  }
 else {
    final LinkedHashMap<String,Object> fields=new LinkedHashMap<String,Object>();
    newRecords.add(fields);
    parseRequiredWord(false);
    parseSetFields(fields);
  }
  return this;
}
