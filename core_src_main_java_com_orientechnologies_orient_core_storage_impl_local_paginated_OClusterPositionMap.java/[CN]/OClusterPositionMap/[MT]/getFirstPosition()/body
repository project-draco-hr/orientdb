{
  atomicOperationsManager.acquireReadLock(this);
  try {
    acquireSharedLock();
    try {
      OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
      final long filledUpTo=getFilledUpTo(atomicOperation,fileId);
      for (long pageIndex=0; pageIndex < filledUpTo; pageIndex++) {
        OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,pageIndex,false);
        try {
          OClusterPositionMapBucket bucket=new OClusterPositionMapBucket(cacheEntry,getChangesTree(atomicOperation,cacheEntry));
          int bucketSize=bucket.getSize();
          for (int index=0; index < bucketSize; index++) {
            if (bucket.exists(index))             return pageIndex * OClusterPositionMapBucket.MAX_ENTRIES + index;
          }
        }
  finally {
          releasePage(atomicOperation,cacheEntry);
        }
      }
      return ORID.CLUSTER_POS_INVALID;
    }
  finally {
      releaseSharedLock();
    }
  }
  finally {
    atomicOperationsManager.releaseReadLock(this);
  }
}
