{
  if (n <= 0)   throw new IllegalArgumentException("n must be positive, got: " + n);
  if ((n & -n) == n) {
    int y;
    if (mti >= N) {
      int kk;
      final int[] mt=this.mt;
      final int[] mag01=this.mag01;
      for (kk=0; kk < N - M; kk++) {
        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);
        mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];
      }
      for (; kk < N - 1; kk++) {
        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);
        mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];
      }
      y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
      mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];
      mti=0;
    }
    y=mt[mti++];
    y^=y >>> 11;
    y^=(y << 7) & TEMPERING_MASK_B;
    y^=(y << 15) & TEMPERING_MASK_C;
    y^=(y >>> 18);
    return (int)((n * (long)(y >>> 1)) >> 31);
  }
  int bits, val;
  do {
    int y;
    if (mti >= N) {
      int kk;
      final int[] mt=this.mt;
      final int[] mag01=this.mag01;
      for (kk=0; kk < N - M; kk++) {
        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);
        mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];
      }
      for (; kk < N - 1; kk++) {
        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);
        mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];
      }
      y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
      mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];
      mti=0;
    }
    y=mt[mti++];
    y^=y >>> 11;
    y^=(y << 7) & TEMPERING_MASK_B;
    y^=(y << 15) & TEMPERING_MASK_C;
    y^=(y >>> 18);
    bits=(y >>> 1);
    val=bits % n;
  }
 while (bits - val + (n - 1) < 0);
  return val;
}
