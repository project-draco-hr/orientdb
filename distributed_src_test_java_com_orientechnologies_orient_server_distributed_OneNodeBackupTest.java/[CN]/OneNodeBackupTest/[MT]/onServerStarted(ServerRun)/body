{
  super.onServerStarted(server);
  if (serverStarted == 0) {
    server.server.getDistributedManager().registerLifecycleListener(new ODistributedLifecycleListener(){
      @Override public boolean onNodeJoining(      String iNode){
        return true;
      }
      @Override public void onNodeJoined(      String iNode){
      }
      @Override public void onNodeLeft(      String iNode){
        nodeLefts.incrementAndGet();
      }
      @Override public void onDatabaseChangeStatus(      String iNode,      String iDatabaseName,      ODistributedServerManager.DB_STATUS iNewStatus){
      }
    }
);
  }
  if (serverStarted++ == (SERVERS - 1)) {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          executeWhen(new Callable<Boolean>(){
            @Override public Boolean call() throws Exception {
              final ODatabaseDocumentTx database=poolFactory.get(getDatabaseURL(serverInstance.get(0)),"admin","admin").acquire();
              try {
                return database.countClass("Person") > (count * SERVERS) * 1 / 3;
              }
  finally {
                database.close();
              }
            }
          }
,new Callable(){
            @Override public Object call() throws Exception {
              Assert.assertTrue("Insert was too fast",inserting);
              banner("STARTING BACKUP SERVER " + (SERVERS - 1));
              OrientGraphFactory factory=new OrientGraphFactory("plocal:target/server" + (SERVERS - 1) + "/databases/"+ getDatabaseName());
              OrientGraphNoTx g=factory.getNoTx();
              backupInProgress=true;
              File file=null;
              try {
                file=File.createTempFile("orientdb_test_backup",".zip");
                if (file.exists())                 Assert.assertTrue(file.delete());
                g.getRawGraph().backup(new FileOutputStream(file),null,new Callable<Object>(){
                  @Override public Object call() throws Exception {
                    Thread.sleep(10000);
                    return null;
                  }
                }
,null,9,1000000);
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
 finally {
                banner("COMPLETED BACKUP SERVER " + (SERVERS - 1));
                backupInProgress=false;
                if (file != null)                 file.delete();
              }
              return null;
            }
          }
);
        }
 catch (        Exception e) {
          e.printStackTrace();
          Assert.fail("Error on execution flow");
        }
      }
    }
).start();
  }
}
