{
  final AtomicLong nanoIncrement=new AtomicLong();
  nanoIncrement.set(100);
  final OStoragePerformanceStatistic storagePerformanceStatistic=new OStoragePerformanceStatistic(1024,"test",1,new OStoragePerformanceStatistic.NanoTimer(){
    private long counter=0;
    @Override public long getNano(){
      return counter+=nanoIncrement.get();
    }
  }
,100000);
  Assert.assertFalse(storagePerformanceStatistic.isMeasurementEnabled());
  long[] speedData=getDataFunction.getData(storagePerformanceStatistic);
  for (  long datum : speedData) {
    Assert.assertEquals(datum,-1);
  }
  storagePerformanceStatistic.startMeasurement();
  final AtomicBoolean stop=new AtomicBoolean();
  final AtomicBoolean measurementStopped=new AtomicBoolean();
  final ExecutorService executor=Executors.newSingleThreadExecutor();
  final Future<Void> future=executor.submit(new Callable<Void>(){
    @Override public Void call() throws Exception {
      while (!stop.get()) {
        loadLoop.execute(storagePerformanceStatistic,measurementStopped.get());
      }
      return null;
    }
  }
);
  long notZeroSpeedCount=0;
  long msStart=System.currentTimeMillis();
  long counter=0;
  while (notZeroSpeedCount < 1000) {
    if (counter % 1000 == 0 && System.currentTimeMillis() - msStart > 1200000)     break;
    speedData=getDataFunction.getData(storagePerformanceStatistic);
    if (speedData[0] == -1) {
      Thread.yield();
    }
 else {
      notZeroSpeedCount++;
      assertDataFunction.assertData(speedData);
    }
    Thread.yield();
    counter++;
  }
  Assert.assertTrue(notZeroSpeedCount > 0);
  System.out.println(testName + " : not zero speed count " + notZeroSpeedCount);
  storagePerformanceStatistic.stopMeasurement();
  measurementStopped.set(true);
  speedData=getDataFunction.getData(storagePerformanceStatistic);
  if (speedData[0] > 0) {
    System.out.println(testName + " : check that values were not changed after stop measurement");
    nanoIncrement.set(10);
    Thread.sleep(200);
    assertDataFunction.assertData(getDataFunction.getData(storagePerformanceStatistic));
    Assert.assertFalse(storagePerformanceStatistic.isMeasurementEnabled());
  }
  stop.set(true);
  future.get();
  storagePerformanceStatistic.startMeasurement();
  measurementStopped.set(false);
  Thread.sleep(200);
  Assert.assertTrue(storagePerformanceStatistic.isMeasurementEnabled());
  speedData=getDataFunction.getData(storagePerformanceStatistic);
  for (  long datum : speedData) {
    Assert.assertEquals(datum,-1);
  }
  executor.shutdown();
}
