{
  if (target == null)   return drop();
  if (command.getContext().isAlreadyTraversed(target))   return drop();
  if (target.getInternalStatus() == ORecordElement.STATUS.NOT_LOADED)   try {
    target.reload();
  }
 catch (  final ORecordNotFoundException e) {
    return drop();
  }
  if (command.getPredicate() != null) {
    final Object conditionResult=command.getPredicate().evaluate(target,null,command.getContext());
    if (conditionResult != Boolean.TRUE)     return drop();
  }
  command.getContext().addTraversed(target);
  final List<Object> fields=new ArrayList<Object>();
  for (  Object cfgFieldObject : command.getFields()) {
    String cfgField=cfgFieldObject.toString();
    if ("*".equals(cfgField) || OSQLFilterItemFieldAll.FULL_NAME.equalsIgnoreCase(cfgField) || OSQLFilterItemFieldAny.FULL_NAME.equalsIgnoreCase(cfgField)) {
      Collections.addAll(fields,target.fieldNames());
      break;
    }
 else {
      final int pos=cfgField.indexOf('.');
      if (pos > -1) {
        final OClass cls=target.getSchemaClass();
        if (cls == null)         continue;
        final String className=cfgField.substring(0,pos);
        if (!cls.isSubClassOf(className))         continue;
        cfgField=cfgField.substring(pos + 1);
        fields.add(cfgField);
      }
 else       fields.add(cfgFieldObject);
    }
  }
  processFields(fields.iterator());
  if (target.isEmbedded())   return null;
  return target;
}
