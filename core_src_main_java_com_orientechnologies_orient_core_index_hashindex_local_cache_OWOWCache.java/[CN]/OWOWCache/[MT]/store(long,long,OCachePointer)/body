{
synchronized (syncObject) {
    final GroupKey groupKey=new GroupKey(fileId,pageIndex >>> 4);
    lockManager.acquireLock(Thread.currentThread(),groupKey,OLockManager.LOCK.EXCLUSIVE);
    try {
      WriteGroup writeGroup=writeGroups.get(groupKey);
      if (writeGroup == null) {
        writeGroup=new WriteGroup(System.currentTimeMillis());
        writeGroups.put(groupKey,writeGroup);
      }
      int entryIndex=(int)(pageIndex & 15);
      if (writeGroup.pages[entryIndex] == null) {
        dataPointer.incrementReferrer();
        writeGroup.pages[entryIndex]=dataPointer;
        cacheSize.incrementAndGet();
      }
 else {
        if (!writeGroup.pages[entryIndex].equals(dataPointer)) {
          writeGroup.pages[entryIndex].decrementReferrer();
          dataPointer.incrementReferrer();
          writeGroup.pages[entryIndex]=dataPointer;
        }
      }
      writeGroup.recencyBit=true;
    }
  finally {
      lockManager.releaseLock(Thread.currentThread(),groupKey,OLockManager.LOCK.EXCLUSIVE);
    }
    if (cacheSize.get() > cacheMaxSize) {
      Future future=commitExecutor.submit(new PeriodicFlushTask());
      try {
        future.get();
      }
 catch (      InterruptedException e) {
        Thread.interrupted();
        throw new OException("File flush was interrupted",e);
      }
catch (      Exception e) {
        throw new OException("File flush was abnormally terminated",e);
      }
    }
  }
}
