{
  if (deletedRecords.get(iRecordId) != null)   throw new ORecordNotFoundException("Record " + iRecordId + " was not found");
  if (OScenarioThreadLocal.INSTANCE.get() == RUN_MODE.RUNNING_DISTRIBUTED)   return wrapped.readRecord(iRecordId,iFetchPlan,iIgnoreCache,iCallback,loadTombstones,LOCKING_STRATEGY.DEFAULT);
  try {
    final String clusterName=getClusterNameByRID(iRecordId);
    final ODistributedConfiguration dbCfg=dManager.getDatabaseConfiguration(getName());
    if (!dbCfg.isReplicationActive(clusterName) && dbCfg.getPartitioningConfiguration(clusterName) == null)     return wrapped.readRecord(iRecordId,iFetchPlan,iIgnoreCache,iCallback,loadTombstones,LOCKING_STRATEGY.DEFAULT);
    final ODistributedPartitioningStrategy strategy=dManager.getPartitioningStrategy(dbCfg.getPartitionStrategy(clusterName));
    final ODistributedPartition partition=strategy.getPartition(dManager,getName(),clusterName);
    if (partition.getNodes().contains(dManager.getLocalNodeName()))     return wrapped.readRecord(iRecordId,iFetchPlan,iIgnoreCache,iCallback,loadTombstones,LOCKING_STRATEGY.DEFAULT);
    final Object result=sendRequest(getName(),clusterName,new OReadRecordTask(iRecordId),EXECUTION_MODE.RESPONSE);
    if (result instanceof ONeedRetryException)     throw (ONeedRetryException)result;
 else     if (result instanceof Throwable)     throw new ODistributedException("Error on execution distributed READ_RECORD",(Throwable)result);
    return new OStorageOperationResult<ORawBuffer>((ORawBuffer)result);
  }
 catch (  ONeedRetryException e) {
    throw e;
  }
catch (  Exception e) {
    handleDistributedException("Cannot route READ_RECORD operation against %s to the distributed node",e,iRecordId);
    return null;
  }
}
