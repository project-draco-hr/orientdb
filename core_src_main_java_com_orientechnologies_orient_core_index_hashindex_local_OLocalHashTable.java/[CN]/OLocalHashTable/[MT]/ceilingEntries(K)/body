{
  acquireSharedLock();
  try {
    final long hashCode=keyHashFunction.hashCode(key);
    BucketPath bucketPath=getBucket(hashCode);
    long bucketPointer=hashTree[bucketPath.nodeIndex][bucketPath.itemIndex + bucketPath.hashMapOffset];
    int fileLevel=getFileLevel(bucketPointer);
    long pageIndex=getPageIndex(bucketPointer);
    OCachePointer pagePointer=loadPage(pageIndex,fileLevel);
    try {
      OHashIndexBucket<K,V> bucket=new OHashIndexBucket<K,V>(pagePointer.getDataPointer(),directMemory,keySerializer,valueSerializer);
      while (bucket.size() == 0) {
        bucketPath=nextBucketToFind(bucketPath,bucket.getDepth());
        if (bucketPath == null)         return new OHashIndexBucket.Entry[0];
        releasePage(pageIndex,fileLevel);
        final long nextPointer=hashTree[bucketPath.nodeIndex][bucketPath.itemIndex + bucketPath.hashMapOffset];
        fileLevel=getFileLevel(nextPointer);
        pageIndex=getPageIndex(nextPointer);
        pagePointer=loadPage(pageIndex,fileLevel);
        bucket=new OHashIndexBucket<K,V>(pagePointer.getDataPointer(),directMemory,keySerializer,valueSerializer);
      }
      final int index=bucket.getIndex(key);
      final int startIndex;
      if (index >= 0)       startIndex=index;
 else       startIndex=-index - 1;
      final int endIndex=bucket.size();
      return convertBucketToEntries(bucket,startIndex,endIndex);
    }
  finally {
      releasePage(pageIndex,fileLevel);
    }
  }
 catch (  IOException ioe) {
    throw new OIndexException("Error during data retrieval",ioe);
  }
 finally {
    releaseSharedLock();
  }
}
