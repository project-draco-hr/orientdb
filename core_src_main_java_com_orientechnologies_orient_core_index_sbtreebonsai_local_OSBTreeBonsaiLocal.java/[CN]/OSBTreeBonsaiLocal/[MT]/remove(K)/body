{
  final OAtomicOperation atomicOperation;
  try {
    atomicOperation=startAtomicOperation();
  }
 catch (  IOException e) {
    throw new OSBTreeException("Error during sbtree entrie removal.",e);
  }
  Lock lock=fileLockManager.acquireExclusiveLock(fileId);
  try {
    BucketSearchResult bucketSearchResult=findBucket(key,atomicOperation);
    if (bucketSearchResult.itemIndex < 0) {
      endAtomicOperation(false);
      return null;
    }
    OBonsaiBucketPointer bucketPointer=bucketSearchResult.getLastPathItem();
    OCacheEntry keyBucketCacheEntry=loadPage(atomicOperation,fileId,bucketPointer.getPageIndex(),false);
    final V removed;
    keyBucketCacheEntry.acquireExclusiveLock();
    try {
      OSBTreeBonsaiBucket<K,V> keyBucket=new OSBTreeBonsaiBucket<K,V>(keyBucketCacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChangesTree(atomicOperation,keyBucketCacheEntry));
      removed=keyBucket.getEntry(bucketSearchResult.itemIndex).value;
      keyBucket.remove(bucketSearchResult.itemIndex);
    }
  finally {
      keyBucketCacheEntry.releaseExclusiveLock();
      releasePage(atomicOperation,keyBucketCacheEntry);
    }
    setSize(size() - 1,atomicOperation);
    endAtomicOperation(false);
    return removed;
  }
 catch (  Throwable e) {
    rollback();
    throw new OSBTreeException("Error during removing key " + key + " from sbtree "+ name,e);
  }
 finally {
    lock.unlock();
  }
}
