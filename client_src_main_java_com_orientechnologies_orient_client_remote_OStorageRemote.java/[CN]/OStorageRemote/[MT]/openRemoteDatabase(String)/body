{
  do {
    do {
      OChannelBinaryAsynchClient network=null;
      network=getNetwork(currentURL);
      try {
        openRemoteDatabase(network);
        return currentURL;
      }
 catch (      OIOException e) {
        if (network != null) {
          connectionManager.remove(network);
          network=null;
        }
        OLogManager.instance().error(this,"Cannot open database with url " + currentURL,e);
      }
catch (      OException e) {
        throw e;
      }
catch (      Exception e) {
        if (network != null) {
          try {
            connectionManager.remove(network);
          }
 catch (          Exception ex) {
            OLogManager.instance().debug(this,"Cannot remove connection or database url=" + currentURL,e);
          }
          network=null;
        }
        OLogManager.instance().error(this,"Cannot open database url=" + currentURL,e);
      }
    }
 while (connectionManager.getReusableConnections(currentURL) > 0);
    currentURL=useNewServerURL(currentURL);
  }
 while (currentURL != null);
  parseServerURLs();
synchronized (serverURLs) {
    throw new OStorageException("Cannot create a connection to remote server address(es): " + serverURLs);
  }
}
