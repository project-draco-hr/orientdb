{
  final long timer=OProfiler.getInstance().startChrono();
  final OCluster cluster=getClusterById(iClusterId);
  final boolean locked=acquireSharedLock();
  try {
    OPhysicalPosition ppos=cluster.getPhysicalPosition(iClusterPosition,new OPhysicalPosition());
    if (ppos == null)     return -1;
    if (iVersion > -1 && ppos.version != iVersion)     throw new OConcurrentModificationException("Can't update record #" + ORecordId.generateString(iClusterId,iClusterPosition) + " because it was modified by another user in the meanwhile of current transaction. Use pessimistic locking instead of optimistic or simply re-execute the transaction");
    data.updateRecord(ppos.dataPosition,iContent);
    return ++(ppos.version);
  }
 catch (  IOException e) {
    throw new OStorageException("Error on update record in cluster: " + iClusterId,e);
  }
 finally {
    releaseSharedLock(locked);
    OProfiler.getInstance().stopChrono("OStorageMemory.updateRecord",timer);
  }
}
