{
  Orient.instance().getProfiler().registerHookValue("db." + this.name + ".createRecord","Number of created records",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return recordCreated.get();
    }
  }
,"db.*.createRecord");
  Orient.instance().getProfiler().registerHookValue("db." + this.name + ".readRecord","Number of read records",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return recordRead.get();
    }
  }
,"db.*.readRecord");
  Orient.instance().getProfiler().registerHookValue("db." + this.name + ".updateRecord","Number of updated records",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return recordUpdated.get();
    }
  }
,"db.*.updateRecord");
  Orient.instance().getProfiler().registerHookValue("db." + this.name + ".deleteRecord","Number of deleted records",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return recordDeleted.get();
    }
  }
,"db.*.deleteRecord");
  Orient.instance().getProfiler().registerHookValue("db." + this.name + ".scanRecord","Number of read scanned",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return recordScanned.get();
    }
  }
,"db.*.scanRecord");
  Orient.instance().getProfiler().registerHookValue("db." + this.name + ".recyclePosition","Number of recycled records",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return recordRecycled.get();
    }
  }
,"db.*.recyclePosition");
  Orient.instance().getProfiler().registerHookValue("db." + this.name + ".conflictRecord","Number of conflicts during updating and deleting records",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return recordConflict.get();
    }
  }
,"db.*.conflictRecord");
  Orient.instance().getProfiler().registerHookValue("db." + this.name + ".txBegun","Number of transactions begun",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return txBegun.get();
    }
  }
,"db.*.txBegun");
  Orient.instance().getProfiler().registerHookValue("db." + this.name + ".txCommit","Number of committed transactions",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return txCommit.get();
    }
  }
,"db.*.txCommit");
  Orient.instance().getProfiler().registerHookValue("db." + this.name + ".txRollback","Number of rolled back transactions",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return txRollback.get();
    }
  }
,"db.*.txRollback");
}
