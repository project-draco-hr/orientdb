{
  if (iType == null) {
    if (iCollection.size() == 0)     return iCollection;
    Object firstValue=iCollection.iterator().next();
    if (firstValue == null)     return iCollection;
    if (OType.isSimpleType(firstValue.getClass())) {
      iType=iCollection instanceof List ? OType.EMBEDDEDLIST : OType.EMBEDDEDSET;
    }
 else     iType=iCollection instanceof List ? OType.LINKLIST : OType.LINKSET;
  }
  Collection<Object> result=null;
  final OType linkedType;
  if (iType.equals(OType.EMBEDDEDLIST) || iType.equals(OType.LINKLIST)) {
    result=new ArrayList<Object>();
  }
 else   if (iType.equals(OType.EMBEDDEDSET) || iType.equals(OType.LINKSET)) {
    result=new HashSet<Object>();
  }
 else   throw new IllegalArgumentException("Type " + iType + " must be a collection");
  if (iType.equals(OType.EMBEDDEDLIST) || iType.equals(OType.LINKLIST))   linkedType=OType.LINK;
 else   if (iType.equals(OType.EMBEDDEDSET) || iType.equals(OType.LINKSET))   linkedType=OType.EMBEDDED;
 else   throw new IllegalArgumentException("Type " + iType + " must be a collection");
  for (  Object o : iCollection) {
    result.add(typeToStream(o,linkedType,iEntityManager,iObj2RecHandler));
  }
  return result;
}
