{
  writeAheadLog.close();
  writeAheadLog=createWAL(3,6 * OWALPage.PAGE_SIZE);
  List<OWALRecord> writtenRecords=new ArrayList<OWALRecord>();
  OWALRecord walRecord=new TestRecord(OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET,false);
  writeAheadLog.log(walRecord);
  writtenRecords.add(walRecord);
  walRecord=new TestRecord(OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET,false);
  writeAheadLog.log(walRecord);
  writtenRecords.add(walRecord);
  writeAheadLog.flush();
  walRecord=new TestRecord(OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET,false);
  writeAheadLog.log(walRecord);
  writtenRecords.add(walRecord);
  walRecord=new TestRecord(OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET,false);
  OLogSequenceNumber end=writeAheadLog.log(walRecord);
  writtenRecords.add(walRecord);
  walRecord=new TestRecord(OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET,false);
  writeAheadLog.log(walRecord);
  writtenRecords.add(walRecord);
  writeAheadLog.close();
  RandomAccessFile rndFile=new RandomAccessFile(new File(testDir,"WriteAheadLogTest.0.wal"),"rw");
  rndFile.setLength(rndFile.length() - OWALPage.PAGE_SIZE / 2);
  rndFile.close();
  writeAheadLog=createWAL(3,6 * OWALPage.PAGE_SIZE);
  Assert.assertTrue(writeAheadLog.end().compareTo(end) >= 0);
  assertLogContent(writeAheadLog,writtenRecords.subList(0,4));
  Assert.assertNull(writeAheadLog.read(writtenRecords.get(4).getLsn()));
}
