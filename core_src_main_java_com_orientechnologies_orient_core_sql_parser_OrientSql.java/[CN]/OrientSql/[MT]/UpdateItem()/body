{
  OUpdateItem jjtn000=new OUpdateItem(JJTUPDATEITEM);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  try {
    jjtn000.left=Identifier();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case EQ:
      jj_consume_token(EQ);
    jjtn000.operator=OUpdateItem.OPERATOR_EQ;
  break;
case PLUSASSIGN:
jj_consume_token(PLUSASSIGN);
jjtn000.operator=OUpdateItem.OPERATOR_PLUSASSIGN;
break;
case MINUSASSIGN:
jj_consume_token(MINUSASSIGN);
jjtn000.operator=OUpdateItem.OPERATOR_MINUSASSIGN;
break;
case STARASSIGN:
jj_consume_token(STARASSIGN);
jjtn000.operator=OUpdateItem.OPERATOR_STARASSIGN;
break;
case SLASHASSIGN:
jj_consume_token(SLASHASSIGN);
jjtn000.operator=OUpdateItem.OPERATOR_SLASHASSIGN;
break;
default :
jj_la1[86]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jjtn000.right=Expression();
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
