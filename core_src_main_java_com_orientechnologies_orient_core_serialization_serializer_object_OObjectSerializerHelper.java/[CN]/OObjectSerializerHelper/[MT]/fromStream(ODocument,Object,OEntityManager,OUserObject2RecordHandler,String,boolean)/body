{
  OFetchHelper.checkFetchPlanValid(iFetchPlan);
  final long timer=OProfiler.getInstance().startChrono();
  final Class<?> pojoClass=iPojo.getClass();
  final List<Field> properties=getClassFields(pojoClass);
  String fieldName;
  Object fieldValue;
  final String idFieldName=setObjectID(iRecord.getIdentity(),iPojo);
  final String vFieldName=setObjectVersion(iRecord.getVersion(),iPojo);
  invokeCallback(iPojo,iRecord,OBeforeDeserialization.class);
  final String[] fieldNames=new String[properties.size()];
  int f=0;
  for (  Field p : properties) {
    fieldName=p.getName();
    fieldNames[f++]=fieldName;
    if (fieldName.equals(idFieldName) || fieldName.equals(vFieldName))     continue;
    if (iRecord.containsField(fieldName)) {
      fieldValue=iRecord.field(fieldName);
      if (fieldValue == null || !(fieldValue instanceof ODocument) || (fieldValue instanceof Collection<?> && (((Collection<?>)fieldValue).size() == 0 || !(((Collection<?>)fieldValue).iterator().next() instanceof ODocument))) || (!(fieldValue instanceof Map<?,?>) || ((Map<?,?>)fieldValue).size() == 0 || !(((Map<?,?>)fieldValue).values().iterator().next() instanceof ODocument))) {
        final Class<?> genericTypeClass=getGenericMultivalueType(p);
        if (genericTypeClass != null)         if (genericTypeClass.isEnum()) {
          if (fieldValue instanceof List) {
            final List<Object> list=(List<Object>)fieldValue;
            Object v;
            for (int i=0; i < list.size(); ++i) {
              v=list.get(i);
              if (v != null) {
                v=Enum.valueOf((Class<Enum>)genericTypeClass,v.toString());
                list.set(i,v);
              }
            }
          }
 else           if (fieldValue instanceof Set) {
            final Set<Object> newColl=new HashSet<Object>();
            final Set<Object> set=(Set<Object>)fieldValue;
            for (            Object v : set) {
              if (v != null) {
                v=Enum.valueOf((Class<Enum>)genericTypeClass,v.toString());
                newColl.add(v);
              }
            }
            fieldValue=newColl;
          }
 else           if (fieldValue instanceof Map) {
            final Map<String,Object> map=(Map<String,Object>)fieldValue;
            Object v;
            for (            Entry<String,?> entry : map.entrySet()) {
              v=entry.getValue();
              if (v != null) {
                v=Enum.valueOf((Class<Enum>)genericTypeClass,v.toString());
                map.put(entry.getKey(),v);
              }
            }
          }
        }
 else {
          if (fieldValue instanceof List) {
            final List<Object> list=(List<Object>)fieldValue;
            Object v;
            for (int i=0; i < list.size(); ++i) {
              v=list.get(i);
              if (v != null)               list.set(i,unserializeFieldValue(null,null,v));
            }
          }
 else           if (fieldValue instanceof Set) {
            final Set<Object> newColl=new HashSet<Object>();
            final Set<Object> set=(Set<Object>)fieldValue;
            for (            Object v : set)             if (v != null)             newColl.add(unserializeFieldValue(null,null,v));
            fieldValue=newColl;
          }
 else           if (fieldValue instanceof Map) {
            final Map<String,Object> map=(Map<String,Object>)fieldValue;
            Object v;
            for (            Entry<String,?> entry : map.entrySet()) {
              v=entry.getValue();
              if (v != null)               map.put(entry.getKey(),unserializeFieldValue(null,null,v));
            }
          }
        }
        setFieldValue(iPojo,fieldName,unserializeFieldValue(iPojo,fieldName,fieldValue));
      }
    }
  }
  final OFetchListener listener=new OObjectFetchListener();
  final OFetchContext context=new OObjectFetchContext(iFetchPlan,iLazyLoading,iEntityManager,iObj2RecHandler);
  OFetchHelper.fetch(iRecord,iPojo,OFetchHelper.buildFetchPlan(iFetchPlan),listener,context);
  invokeCallback(iPojo,iRecord,OAfterDeserialization.class);
  OProfiler.getInstance().stopChrono("Object.fromStream",timer);
  return iPojo;
}
