{
  final long timer=Orient.instance().getProfiler().startChrono();
  lock.acquireSharedLock();
  try {
    final ODataSegmentMemory data=getDataSegmentById(iDataSegmentId);
    final long offset=data.createRecord(iContent);
    final OCluster cluster=getClusterById(iRid.clusterId);
    final OPhysicalPosition ppos=new OPhysicalPosition(iDataSegmentId,offset,iRecordType);
    if (cluster.isHashBased()) {
      if (iRid.isNew()) {
        if (OGlobalConfiguration.USE_NODE_ID_CLUSTER_POSITION.getValueAsBoolean()) {
          ppos.clusterPosition=OClusterPositionFactory.INSTANCE.generateUniqueClusterPosition();
        }
 else {
          ppos.clusterPosition=OClusterPositionFactory.INSTANCE.valueOf(positionGenerator++);
        }
      }
 else {
        ppos.clusterPosition=iRid.clusterPosition;
      }
    }
    if (!cluster.addPhysicalPosition(ppos)) {
      data.readRecord(ppos.dataSegmentPos);
      throw new OStorageException("Record with given id " + iRid + " has already exists.");
    }
    iRid.clusterPosition=ppos.clusterPosition;
    if (iCallback != null)     iCallback.call(iRid,iRid.clusterPosition);
    if (iRecordVersion.getCounter() > -1 && iRecordVersion.compareTo(ppos.recordVersion) != 0) {
      cluster.updateVersion(iRid.clusterPosition,iRecordVersion);
      ppos.recordVersion=iRecordVersion;
    }
    return new OStorageOperationResult<OPhysicalPosition>(ppos);
  }
 catch (  IOException e) {
    throw new OStorageException("Error on create record in cluster: " + iRid.clusterId,e);
  }
 finally {
    lock.releaseSharedLock();
    Orient.instance().getProfiler().stopChrono(PROFILER_CREATE_RECORD,"Create a record in memory database",timer,"db.*.data.updateHole");
  }
}
