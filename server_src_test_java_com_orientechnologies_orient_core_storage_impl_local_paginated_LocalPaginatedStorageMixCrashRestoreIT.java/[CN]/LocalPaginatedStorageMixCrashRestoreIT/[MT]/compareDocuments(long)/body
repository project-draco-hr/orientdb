{
  long minTs=Long.MAX_VALUE;
  baseDocumentTx.activateOnCurrentThread();
  int clusterId=baseDocumentTx.getClusterIdByName("TestClass");
  OStorage baseStorage=baseDocumentTx.getStorage();
  OPhysicalPosition[] physicalPositions=baseStorage.ceilingPhysicalPositions(clusterId,new OPhysicalPosition(0));
  int recordsRestored=0;
  int recordsTested=0;
  while (physicalPositions.length > 0) {
    final ORecordId rid=new ORecordId(clusterId);
    for (    OPhysicalPosition physicalPosition : physicalPositions) {
      rid.clusterPosition=physicalPosition.clusterPosition;
      ODatabaseRecordThreadLocal.INSTANCE.set(baseDocumentTx);
      ODocument baseDocument=baseDocumentTx.load(rid);
      int id=baseDocument.<Integer>field("id");
      if (addedIds.contains(id)) {
        ODatabaseRecordThreadLocal.INSTANCE.set(testDocumentTx);
        List<ODocument> testDocuments=testDocumentTx.query(new OSQLSynchQuery<ODocument>("select from TestClass where id  = " + baseDocument.field("id")));
        if (testDocuments.size() == 0) {
          if (((Long)baseDocument.field("timestamp")) < minTs)           minTs=baseDocument.field("timestamp");
        }
 else {
          ODocument testDocument=testDocuments.get(0);
          Assert.assertEquals(testDocument.field("id"),baseDocument.field("id"));
          Assert.assertEquals(testDocument.field("timestamp"),baseDocument.field("timestamp"));
          Assert.assertEquals(testDocument.field("stringValue"),baseDocument.field("stringValue"));
          recordsRestored++;
        }
        recordsTested++;
      }
 else       if (updatedIds.contains(id)) {
        ODatabaseRecordThreadLocal.INSTANCE.set(testDocumentTx);
        List<ODocument> testDocuments=testDocumentTx.query(new OSQLSynchQuery<ODocument>("select from TestClass where id  = " + baseDocument.field("id")));
        if (testDocuments.size() == 0) {
          if (((Long)baseDocument.field("timestamp")) < minTs)           minTs=baseDocument.field("timestamp");
        }
 else {
          ODocument testDocument=testDocuments.get(0);
          if (testDocument.field("timestamp").equals(baseDocument.field("timestamp")) && testDocument.field("stringValue").equals(baseDocument.field("stringValue"))) {
            recordsRestored++;
          }
 else {
            if (((Long)baseDocument.field("timestamp")) < minTs)             minTs=baseDocument.field("timestamp");
          }
        }
        recordsTested++;
      }
      if (recordsTested % 10000 == 0)       System.out.println(recordsTested + " were tested, " + recordsRestored+ " were restored ...");
    }
    physicalPositions=baseStorage.higherPhysicalPositions(clusterId,physicalPositions[physicalPositions.length - 1]);
  }
  ODatabaseRecordThreadLocal.INSTANCE.set(testDocumentTx);
  System.out.println("Check deleted records");
  for (  Map.Entry<Integer,Long> deletedEntry : deletedIds.entrySet()) {
    int deletedId=deletedEntry.getKey();
    List<ODocument> testDocuments=testDocumentTx.query(new OSQLSynchQuery<ODocument>("select from TestClass where id  = " + deletedId));
    if (!testDocuments.isEmpty()) {
      if (deletedEntry.getValue() < minTs)       minTs=deletedEntry.getValue();
    }
 else     recordsRestored++;
    recordsTested++;
  }
  System.out.println("Deleted records were checked." + deletedIds.size() + " were verified.");
  System.out.println(recordsRestored + " records were restored. Total records " + recordsTested+ ". Max interval for lost records "+ (lastTs - minTs));
}
