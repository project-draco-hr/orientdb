{
  logChange(iRequest);
  final ODistributedDatabaseInfo databaseEntry=databases.get(iRequest.getRecord().getDatabase().getName());
  if (databaseEntry == null)   return;
  databaseEntry.storage.setSessionId(databaseEntry.sessionId);
  final ORecordInternal<?> record=iRequest.getRecord();
  try {
switch (iRequest.status) {
case OTransactionRecordEntry.CREATED:
      if (OLogManager.instance().isWarnEnabled())       OLogManager.instance().warn(this,"-> %s (%s mode) CREATE record cluster %d...",this,iRequestType,record.getIdentity().getClusterPosition());
    if (iRequestType == SYNCH_TYPE.SYNCH) {
      if (databaseEntry.storage.createRecord((ORecordId)record.getIdentity(),record.toStream(),record.getRecordType(),null) != record.getIdentity().getClusterPosition())       logIntegrityError(record,OTransactionRecordEntry.CREATED);
    }
 else     databaseEntry.storage.createRecord((ORecordId)record.getIdentity(),record.toStream(),record.getRecordType(),new ORecordCallback<Long>(){
      @Override public void call(      final Long iParamater){
        if (iParamater.longValue() != record.getIdentity().getClusterPosition())         logIntegrityError(record,OTransactionRecordEntry.CREATED);
      }
    }
);
  break;
case OTransactionRecordEntry.UPDATED:
if (OLogManager.instance().isWarnEnabled()) OLogManager.instance().warn(this,"-> %s (%s mode) UPDATE record %s...",this,iRequestType,record.getIdentity());
if (iRequestType == SYNCH_TYPE.SYNCH) {
if (databaseEntry.storage.updateRecord((ORecordId)record.getIdentity(),record.toStream(),record.getVersion() - 1,record.getRecordType(),null) != record.getVersion()) logIntegrityError(record,OTransactionRecordEntry.UPDATED);
}
 else databaseEntry.storage.updateRecord((ORecordId)record.getIdentity(),record.toStream(),record.getVersion() - 1,record.getRecordType(),new ORecordCallback<Integer>(){
@Override public void call(final Integer iParamater){
  if (iParamater.intValue() != record.getVersion())   logIntegrityError(record,OTransactionRecordEntry.UPDATED);
}
}
);
break;
case OTransactionRecordEntry.DELETED:
if (OLogManager.instance().isWarnEnabled()) OLogManager.instance().warn(this,"-> %s (%s mode) DELETE record %s...",this,iRequestType,record.getIdentity());
if (iRequestType == SYNCH_TYPE.SYNCH) {
if (!databaseEntry.storage.deleteRecord((ORecordId)record.getIdentity(),record.getVersion() - 1,null)) logIntegrityError(record,OTransactionRecordEntry.DELETED);
}
 else databaseEntry.storage.deleteRecord((ORecordId)record.getIdentity(),record.getVersion() - 1,new ORecordCallback<Boolean>(){
@Override public void call(final Boolean iParamater){
if (!iParamater.booleanValue()) logIntegrityError(record,OTransactionRecordEntry.DELETED);
}
}
);
break;
}
}
 catch (Exception e) {
handleError(iRequest,iRequestType,e);
}
}
