{
  final Runtime runtime=Runtime.getRuntime();
  int stgs=0;
  long diskCacheUsed=0;
  long diskCacheTotal=0;
  for (  OStorage stg : Orient.instance().getStorages()) {
    if (stg instanceof OLocalPaginatedStorage) {
      diskCacheUsed+=((OLocalPaginatedStorage)stg).getReadCache().getUsedMemory();
      diskCacheTotal+=OGlobalConfiguration.DISK_CACHE_SIZE.getValueAsLong() * 1024 * 1024;
      stgs++;
    }
  }
  try {
    MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
    ObjectName osMBeanName=ObjectName.getInstance(ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME);
    if (mbs.isInstanceOf(osMBeanName,"com.sun.management.OperatingSystemMXBean")) {
      final long osTotalMem=((Number)mbs.getAttribute(osMBeanName,"TotalPhysicalMemorySize")).longValue();
      final long osUsedMem=((Number)mbs.getAttribute(osMBeanName,"FreePhysicalMemorySize")).longValue();
      out.printf("OrientDB Memory profiler: Heap=%s of %s - DiskCache (%s dbs)=%s of %s - OS=%s of %s\n",OFileUtils.getSizeAsString(runtime.totalMemory() - runtime.freeMemory()),OFileUtils.getSizeAsString(runtime.maxMemory()),stgs,OFileUtils.getSizeAsString(diskCacheUsed),OFileUtils.getSizeAsString(diskCacheTotal),OFileUtils.getSizeAsString(osUsedMem),OFileUtils.getSizeAsString(osTotalMem));
      return;
    }
  }
 catch (  Exception e) {
  }
  out.printf("OrientDB Memory profiler: Heap=%s of %s - DiskCache (%s dbs)=%s of %s\n",OFileUtils.getSizeAsString(runtime.totalMemory() - runtime.freeMemory()),OFileUtils.getSizeAsString(runtime.maxMemory()),stgs,OFileUtils.getSizeAsString(diskCacheUsed),OFileUtils.getSizeAsString(diskCacheTotal));
}
