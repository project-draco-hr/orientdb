{
  List<ODatabaseDocumentTx> dbs=new LinkedList<ODatabaseDocumentTx>();
  for (  ServerRun server : checkConsistencyOnServers) {
    try {
      dbs.add(poolFactory.get("plocal:" + server.getDatabasePath(databaseName),"admin","admin").acquire());
    }
 catch (    Exception e) {
      fail(databaseName + " is not present on server" + server.getServerId());
    }
  }
  for (  ODatabaseDocumentTx db : dbs) {
    assertTrue(db.getMetadata().getSchema().existsClass("Person"));
  }
  int j=0;
  while (j <= dbs.size() - 2) {
    long count1=dbs.get(j).getMetadata().getSchema().getClass("Person").count();
    long count2=dbs.get(j + 1).getMetadata().getSchema().getClass("Person").count();
    assertEquals(count1,count2);
  }
  String checkOnServer="";
  for (  ServerRun server : checkConsistencyOnServers) {
    checkOnServer+=server.getServerInstance().getDistributedManager().getLocalNodeName() + ",";
  }
  checkOnServer=checkOnServer.substring(0,checkOnServer.length() - 1);
  List<ODocument> docsToCompare=new LinkedList<ODocument>();
  super.banner("Checking " + databaseName + " consistency among servers...\nChecking on servers {"+ checkOnServer+ "}.");
  try {
    for (int i=0; i < count; i++) {
      for (      ODatabaseDocumentTx db : dbs) {
        docsToCompare.add(loadRecord(db,i + baseCount));
      }
      for (      ODocument doc : docsToCompare) {
        assertTrue(doc != null);
      }
      int k=0;
      while (k <= docsToCompare.size() - 2) {
        assertEquals("Inconsistency detected. Record: " + docsToCompare.get(k).toString() + " ; Servers: "+ (k + 1)+ ","+ (k + 2),docsToCompare.get(k).field("@version"),docsToCompare.get(k + 1).field("@version"));
        assertEquals("Inconsistency detected. Record: " + docsToCompare.get(k).toString() + " ; Servers: "+ (k + 1)+ ","+ (k + 2),docsToCompare.get(k).field("name"),docsToCompare.get(k + 1).field("name"));
        assertEquals("Inconsistency detected. Record: " + docsToCompare.get(k).toString() + " ; Servers: "+ (k + 1)+ ","+ (k + 2),docsToCompare.get(k).field("surname"),docsToCompare.get(k + 1).field("surname"));
        assertEquals("Inconsistency detected. Record: " + docsToCompare.get(k).toString() + " ; Servers: "+ (k + 1)+ ","+ (k + 2),docsToCompare.get(k).field("birthday"),docsToCompare.get(k + 1).field("birthday"));
        assertEquals("Inconsistency detected. Record: " + docsToCompare.get(k).toString() + " ; Servers: "+ (k + 1)+ ","+ (k + 2),docsToCompare.get(k).field("children"),docsToCompare.get(k + 1).field("children"));
        k++;
      }
      docsToCompare.clear();
    }
    System.out.println("The database " + databaseName + " is consistent in the cluster.");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    for (    ODatabaseDocumentTx db : dbs) {
      ODatabaseRecordThreadLocal.INSTANCE.set(db);
      db.close();
      ODatabaseRecordThreadLocal.INSTANCE.set(null);
    }
  }
}
