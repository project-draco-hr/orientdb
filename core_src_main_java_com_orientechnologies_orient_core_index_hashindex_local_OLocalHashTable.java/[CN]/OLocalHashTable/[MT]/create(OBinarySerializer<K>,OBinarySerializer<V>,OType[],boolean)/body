{
  final OAtomicOperation atomicOperation;
  try {
    atomicOperation=startAtomicOperation();
  }
 catch (  IOException e) {
    throw new OIndexException("Error during hash table creation",e);
  }
  acquireExclusiveLock();
  try {
    try {
      if (keyTypes != null)       this.keyTypes=Arrays.copyOf(keyTypes,keyTypes.length);
 else       this.keyTypes=null;
      this.nullKeyIsSupported=nullKeyIsSupported;
      this.directory=new OHashTableDirectory(treeStateFileExtension,getName(),durableInNonTxMode,storage);
      fileStateId=addFile(atomicOperation,getName() + metadataConfigurationFileExtension);
      directory.create();
      final OCacheEntry hashStateEntry=addPage(atomicOperation,fileStateId);
      pinPage(atomicOperation,hashStateEntry);
      hashStateEntry.acquireExclusiveLock();
      try {
        OHashIndexFileLevelMetadataPage page=new OHashIndexFileLevelMetadataPage(hashStateEntry,getChangesTree(atomicOperation,hashStateEntry),true);
        hashStateEntryIndex=hashStateEntry.getPageIndex();
      }
  finally {
        hashStateEntry.releaseExclusiveLock();
        releasePage(atomicOperation,hashStateEntry);
      }
      final String fileName=getFullName();
      fileId=addFile(atomicOperation,fileName);
      setKeySerializer(keySerializer);
      setValueSerializer(valueSerializer);
      initHashTreeState(atomicOperation);
      if (nullKeyIsSupported)       nullBucketFileId=addFile(atomicOperation,getName() + nullBucketFileExtension);
      endAtomicOperation(false,null);
    }
 catch (    IOException e) {
      endAtomicOperation(true,e);
      throw e;
    }
catch (    Exception e) {
      endAtomicOperation(true,e);
      throw new OStorageException(null,e);
    }
  }
 catch (  IOException e) {
    throw new OIndexException("Error during local hash table creation",e);
  }
 finally {
    releaseExclusiveLock();
  }
}
