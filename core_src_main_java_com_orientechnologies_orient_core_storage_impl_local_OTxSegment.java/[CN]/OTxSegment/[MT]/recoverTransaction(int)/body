{
  final OPhysicalPosition ppos=new OPhysicalPosition();
  int recordsRecovered=0;
  final ORecordId rid=new ORecordId();
  final int size=(file.getFilledUpTo() / RECORD_SIZE);
  for (int i=0; i < size; ++i) {
    int offset=i * RECORD_SIZE;
    final byte status=file.readByte(offset);
    offset+=OConstants.SIZE_BYTE;
    if (status != STATUS_FREE) {
      final byte operation=file.readByte(offset);
      offset+=OConstants.SIZE_BYTE;
      final int txId=file.readInt(offset);
      if (txId == iTxId) {
        offset+=OConstants.SIZE_INT;
        rid.clusterId=file.readShort(offset);
        offset+=OConstants.SIZE_SHORT;
        rid.clusterPosition=file.readLong(offset);
        offset+=OConstants.SIZE_LONG;
        final int oldDataId=file.readInt(offset);
        offset+=OConstants.SIZE_INT;
        final long oldDataOffset=file.readLong(offset);
        offset+=OConstants.SIZE_LONG;
        final int recordVersion=file.readInt(offset);
        recoverTransactionEntry(status,operation,txId,rid,oldDataId,oldDataOffset,recordVersion,ppos);
        recordsRecovered++;
        file.writeByte(i * RECORD_SIZE,STATUS_FREE);
      }
    }
  }
  return recordsRecovered;
}
