{
  long pageIndex=ROOT_INDEX;
  final ArrayList<Long> path=new ArrayList<Long>();
  int hop=0;
  while (true) {
    path.add(pageIndex);
    final OCacheEntry bucketEntry=diskCache.load(fileId,pageIndex,false);
    final OSBTreeBucket.SBTreeEntry<K,V> entry;
    try {
      final OSBTreeBucket<K,V> keyBucket=new OSBTreeBucket<K,V>(bucketEntry,keySerializer,keyTypes,valueSerializer,ODurablePage.TrackMode.NONE);
      final int index=keyBucket.find(key);
      if (keyBucket.isLeaf())       return new BucketSearchResult(index,path);
      if (index >= 0)       entry=keyBucket.getEntry(index);
 else {
        final int insertionIndex=-index - 1;
        if (insertionIndex >= keyBucket.size())         entry=keyBucket.getEntry(insertionIndex - 1);
 else         entry=keyBucket.getEntry(insertionIndex);
      }
    }
  finally {
      diskCache.release(bucketEntry);
    }
    if (comparator.compare(key,entry.key) >= 0)     pageIndex=entry.rightChild;
 else     pageIndex=entry.leftChild;
    if (hop++ > 1000) {
      OLogManager.instance().error(this,"OSBTree reached maximum hop=%d. Index could be corrupted, due to a previous hard kill. Please drop and recreate it",hop);
      return null;
    }
  }
}
