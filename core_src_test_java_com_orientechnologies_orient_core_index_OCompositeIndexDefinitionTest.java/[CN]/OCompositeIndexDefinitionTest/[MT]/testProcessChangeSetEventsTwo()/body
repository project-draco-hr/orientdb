{
  final OCompositeIndexDefinition compositeIndexDefinition=new OCompositeIndexDefinition();
  compositeIndexDefinition.addIndex(new OPropertyIndexDefinition("testCollectionClass","fOne",OType.INTEGER));
  compositeIndexDefinition.addIndex(new OPropertyListIndexDefinition("testCollectionClass","fTwo",OType.STRING));
  compositeIndexDefinition.addIndex(new OPropertyIndexDefinition("testCollectionClass","fThree",OType.INTEGER));
  final ODocument doc=new ODocument();
  ORecordInternal.unsetDirty(doc);
  Assert.assertFalse(doc.isDirty());
  final OTrackedSet<String> trackedMap=new OTrackedSet<String>(doc);
  final List<OMultiValueChangeEvent<String,String>> firedEvents=new ArrayList<OMultiValueChangeEvent<String,String>>();
  trackedMap.add("l1");
  trackedMap.add("l2");
  trackedMap.add("l3");
  trackedMap.remove("l2");
  trackedMap.addChangeListener(new OMultiValueChangeListener<String,String>(){
    public void onAfterRecordChanged(    final OMultiValueChangeEvent<String,String> event){
      firedEvents.add(event);
    }
  }
);
  trackedMap.add("l4");
  trackedMap.remove("l1");
  Map<OCompositeKey,Integer> keysToAdd=new HashMap<OCompositeKey,Integer>();
  Map<OCompositeKey,Integer> keysToRemove=new HashMap<OCompositeKey,Integer>();
  for (  OMultiValueChangeEvent<String,String> multiValueChangeEvent : firedEvents)   compositeIndexDefinition.processChangeEvent(multiValueChangeEvent,keysToAdd,keysToRemove,2,3);
  Assert.assertEquals(keysToRemove.size(),1);
  Assert.assertEquals(keysToAdd.size(),1);
  Assert.assertTrue(keysToAdd.containsKey(new OCompositeKey(2,"l4",3)));
  Assert.assertTrue(keysToRemove.containsKey(new OCompositeKey(2,"l1",3)));
}
