{
  if (iItem == null || !(iItem instanceof OSQLFilterItemField))   return false;
  if (iCondition.getLeft() instanceof OSQLFilterItemField && iCondition.getRight() instanceof OSQLFilterItemField)   return false;
  final OSQLFilterItemField item=(OSQLFilterItemField)iItem;
  OProperty prop=iSchemaClass.getProperty(item.getRoot());
  while ((prop == null || !prop.isIndexed()) && iSchemaClass.getSuperClass() != null) {
    iSchemaClass=iSchemaClass.getSuperClass();
    prop=iSchemaClass.getProperty(item.getRoot());
  }
  if (prop != null && prop.isIndexed()) {
    final Object origValue=iCondition.getLeft() == iItem ? iCondition.getRight() : iCondition.getLeft();
    final OIndex<?> underlyingIndex=prop.getIndex().getUnderlying();
    if (iCondition.getOperator() instanceof OQueryOperatorBetween) {
      final Object[] betweenKeys=(Object[])origValue;
      betweenKeys[0]=OType.convert(betweenKeys[0],underlyingIndex.getKeyType().getDefaultJavaType());
      betweenKeys[2]=OType.convert(betweenKeys[2],underlyingIndex.getKeyType().getDefaultJavaType());
      iSearchInIndexTriples.add(new OSearchInIndexTriple(iCondition.getOperator(),origValue,underlyingIndex));
      return true;
    }
    if (iCondition.getOperator() instanceof OQueryOperatorIn) {
      final List origValues=(List)origValue;
      final List values=new ArrayList(origValues.size());
      for (      Object val : origValues) {
        val=OSQLHelper.getValue(val);
        val=OType.convert(val,underlyingIndex.getKeyType().getDefaultJavaType());
        values.add(val);
      }
      iSearchInIndexTriples.add(new OSearchInIndexTriple(iCondition.getOperator(),values,underlyingIndex));
      return true;
    }
    Object value=OSQLHelper.getValue(origValue);
    if (value == null)     return false;
    value=OType.convert(value,underlyingIndex.getKeyType().getDefaultJavaType());
    if (value == null)     return false;
    iSearchInIndexTriples.add(new OSearchInIndexTriple(iCondition.getOperator(),value,underlyingIndex));
    return true;
  }
  return false;
}
