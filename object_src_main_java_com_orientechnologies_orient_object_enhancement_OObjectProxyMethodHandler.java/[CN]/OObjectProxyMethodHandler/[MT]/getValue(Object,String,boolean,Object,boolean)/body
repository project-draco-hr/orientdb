{
  if (!idOrVersionField) {
    if (value == null) {
      if (!iIgnoreLoadedFields && loadedFields.containsKey(fieldName) && loadedFields.get(fieldName).compareTo(doc.getRecordVersion()) == 0) {
        return null;
      }
 else {
        final Object docValue=getDocFieldValue(self,fieldName);
        if (docValue != null) {
          value=lazyLoadField(self,fieldName,docValue,value);
        }
      }
    }
 else {
      if (((value instanceof Collection<?> || value instanceof Map<?,?>) && !(value instanceof OObjectLazyMultivalueElement)) || value.getClass().isArray()) {
        final Class<?> genericMultiValueType=OReflectionHelper.getGenericMultivalueType(OObjectEntitySerializer.getField(fieldName,self.getClass()));
        if (genericMultiValueType == null || !OReflectionHelper.isJavaType(genericMultiValueType)) {
          final Field f=OObjectEntitySerializer.getField(fieldName,self.getClass());
          if (OObjectEntitySerializer.isSerializedType(f) && !(value instanceof OObjectLazyCustomSerializer)) {
            value=manageSerializedCollections(self,fieldName,value);
          }
 else           if (genericMultiValueType != null && genericMultiValueType.isEnum() && !(value instanceof OObjectLazyEnumSerializer)) {
            value=manageEnumCollections(self,f.getName(),genericMultiValueType,value);
          }
 else {
            value=manageObjectCollections(self,fieldName,value);
          }
        }
 else {
          final Object docValue=getDocFieldValue(self,fieldName);
          if (docValue == null) {
            if (value.getClass().isArray()) {
              OClass schemaClass=doc.getSchemaClass();
              OProperty schemaProperty=null;
              if (schemaClass != null)               schemaProperty=schemaClass.getProperty(fieldName);
              doc.field(fieldName,OObjectEntitySerializer.typeToStream(value,schemaProperty != null ? schemaProperty.getType() : null,getDatabase(),doc));
            }
 else             doc.field(fieldName,value);
          }
 else           if (!loadedFields.containsKey(fieldName)) {
            value=manageArrayFieldObject(OObjectEntitySerializer.getField(fieldName,self.getClass()),self,docValue);
            Method setMethod=getSetMethod(self.getClass().getSuperclass(),getSetterFieldName(fieldName),value);
            setMethod.invoke(self,value);
          }
 else           if ((value instanceof Set || value instanceof Map) && loadedFields.get(fieldName).compareTo(doc.getRecordVersion()) < 0) {
            if (value instanceof Set)             value=new OObjectLazySet(self,(Set<OIdentifiable>)docValue,OObjectEntitySerializer.isCascadeDeleteField(self.getClass(),fieldName));
 else             value=new OObjectLazyMap(self,(Map<Object,OIdentifiable>)docValue,OObjectEntitySerializer.isCascadeDeleteField(self.getClass(),fieldName));
            final Method setMethod=getSetMethod(self.getClass().getSuperclass(),getSetterFieldName(fieldName),value);
            setMethod.invoke(self,value);
          }
        }
      }
 else       if (!loadedFields.containsKey(fieldName) || loadedFields.get(fieldName).compareTo(doc.getRecordVersion()) < 0) {
        final Object docValue=getDocFieldValue(self,fieldName);
        if (docValue != null && !docValue.equals(value)) {
          value=lazyLoadField(self,fieldName,docValue,value);
        }
      }
    }
  }
  return value;
}
