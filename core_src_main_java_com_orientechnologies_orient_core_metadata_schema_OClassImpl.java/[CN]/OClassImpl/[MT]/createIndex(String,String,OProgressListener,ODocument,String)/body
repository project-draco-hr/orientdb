{
  if (iType == null)   throw new IllegalArgumentException("Index type is null");
  iType=iType.toUpperCase();
  try {
    final INDEX_TYPE recognizedIdxType=INDEX_TYPE.valueOf(iType);
    if (!recognizedIdxType.isAutomaticIndexable())     throw new IllegalArgumentException("Index type '" + iType + "' cannot be used as automatic index against properties");
  }
 catch (  IllegalArgumentException e) {
  }
  if (fields.length == 0) {
    throw new OIndexException("List of fields to index cannot be empty.");
  }
  final Set<String> existingFieldNames=new HashSet<String>();
  OClassImpl currentClass=this;
  do {
    existingFieldNames.addAll(currentClass.properties.keySet());
    currentClass=(OClassImpl)currentClass.getSuperClass();
  }
 while (currentClass != null);
  for (  final String fieldToIndex : fields) {
    final String fieldName=OIndexDefinitionFactory.extractFieldName(fieldToIndex);
    if (!existingFieldNames.contains(fieldName.toLowerCase()))     throw new OIndexException("Index with name : '" + iName + "' cannot be created on class : '"+ name+ "' because field: '"+ fieldName+ "' is absent in class definition.");
  }
  final OIndexDefinition indexDefinition=OIndexDefinitionFactory.createIndexDefinition(this,Arrays.asList(fields),extractFieldTypes(fields));
  if (fields.length == 1) {
    final OProperty p=getProperty(fields[0]);
    if (p != null) {
      indexDefinition.setCollate(p.getCollate());
    }
  }
  return getDatabase().getMetadata().getIndexManager().createIndex(iName,iType,indexDefinition,polymorphicClusterIds,iProgressListener,metadata);
}
