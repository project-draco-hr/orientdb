{
  OMultiMatchPathItemArrows jjtn000=new OMultiMatchPathItemArrows(JJTMULTIMATCHPATHITEMARROWS);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  OMatchPathItem prevItem=null;
  OMatchPathItem nextItem=null;
  try {
    jj_consume_token(DOT);
    jj_consume_token(LPAREN);
    label_45:     while (true) {
      if (jj_2_128(2147483647)) {
        nextItem=OutPathItemOpt();
        jjtn000.items.add(nextItem);
      }
 else       if (jj_2_129(2147483647)) {
        nextItem=InPathItemOpt();
        jjtn000.items.add(nextItem);
      }
 else       if (jj_2_130(2147483647)) {
        nextItem=BothPathItemOpt();
        jjtn000.items.add(nextItem);
      }
 else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (prevItem != null && prevItem.filter == null) {
{
          if (true)           throw new OQueryParsingException("MATCH sub-pattern with no square brackets");
        }
      }
      prevItem=nextItem;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LT:
case DECR:
case MINUS:
        ;
      break;
default :
    jj_la1[245]=jj_gen;
  break label_45;
}
}
jj_consume_token(RPAREN);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LBRACE:
jjtn000.filter=MatchFilter();
break;
default :
jj_la1[246]=jj_gen;
;
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
