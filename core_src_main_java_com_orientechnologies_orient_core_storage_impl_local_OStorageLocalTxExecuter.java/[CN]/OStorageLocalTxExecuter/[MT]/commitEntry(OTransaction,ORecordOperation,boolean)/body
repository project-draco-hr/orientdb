{
  if (txEntry.type != ORecordOperation.DELETED && !txEntry.getRecord().isDirty())   return;
  final ORecordId rid=(ORecordId)txEntry.getRecord().getIdentity();
  if (rid.clusterId == ORID.CLUSTER_ID_INVALID && txEntry.getRecord() instanceof ODocument && ((ODocument)txEntry.getRecord()).getSchemaClass() != null) {
    rid.clusterId=((ODocument)txEntry.getRecord()).getSchemaClass().getDefaultClusterId();
  }
  final OCluster cluster=storage.getClusterById(rid.clusterId);
  final ODataLocal dataSegment=storage.getDataSegmentById(txEntry.dataSegmentId);
  if (cluster.getName().equals(OMetadata.CLUSTER_INDEX_NAME) || cluster.getName().equals(OMetadata.CLUSTER_MANUAL_INDEX_NAME))   return;
  if (!(cluster instanceof OClusterLocal || cluster instanceof OClusterLocalEH))   return;
  if (txEntry.getRecord() instanceof OTxListener)   ((OTxListener)txEntry.getRecord()).onEvent(txEntry,OTxListener.EVENT.BEFORE_COMMIT);
switch (txEntry.type) {
case ORecordOperation.LOADED:
    break;
case ORecordOperation.CREATED:
{
    byte[] stream=txEntry.getRecord().toStream();
    final ORecordId oldRID=rid.isNew() ? rid.copy() : rid;
    if (rid.isNew()) {
      txEntry.getRecord().onBeforeIdentityChanged(rid);
      rid.clusterId=cluster.getId();
    }
    if (rid.isNew()) {
      final OPhysicalPosition ppos;
      if (iUseLog)       ppos=createRecord(iTx.getId(),dataSegment,cluster,rid,stream,txEntry.getRecord().getRecordVersion(),txEntry.getRecord().getRecordType());
 else       ppos=iTx.getDatabase().getStorage().createRecord(txEntry.dataSegmentId,rid,stream,OVersionFactory.instance().createVersion(),txEntry.getRecord().getRecordType(),(byte)0,null).getResult();
      rid.clusterPosition=ppos.clusterPosition;
      txEntry.getRecord().getRecordVersion().copyFrom(ppos.recordVersion);
      txEntry.getRecord().onAfterIdentityChanged(txEntry.getRecord());
      iTx.updateIdentityAfterCommit(oldRID,rid);
    }
 else {
      if (iUseLog)       txEntry.getRecord().getRecordVersion().copyFrom(updateRecord(iTx.getId(),cluster,rid,stream,txEntry.getRecord().getRecordVersion(),txEntry.getRecord().getRecordType()));
 else       txEntry.getRecord().getRecordVersion().copyFrom(iTx.getDatabase().getStorage().updateRecord(rid,stream,txEntry.getRecord().getRecordVersion(),txEntry.getRecord().getRecordType(),(byte)0,null).getResult());
    }
    break;
  }
case ORecordOperation.UPDATED:
{
  byte[] stream=txEntry.getRecord().toStream();
  if (iUseLog)   txEntry.getRecord().getRecordVersion().copyFrom(updateRecord(iTx.getId(),cluster,rid,stream,txEntry.getRecord().getRecordVersion(),txEntry.getRecord().getRecordType()));
 else   txEntry.getRecord().getRecordVersion().copyFrom(iTx.getDatabase().getStorage().updateRecord(rid,stream,txEntry.getRecord().getRecordVersion(),txEntry.getRecord().getRecordType(),(byte)0,null).getResult());
  break;
}
case ORecordOperation.DELETED:
{
if (iUseLog) deleteRecord(iTx.getId(),cluster,rid.clusterPosition,txEntry.getRecord().getRecordVersion());
 else iTx.getDatabase().getStorage().deleteRecord(rid,txEntry.getRecord().getRecordVersion(),(byte)0,null);
}
break;
}
txEntry.getRecord().unsetDirty();
if (txEntry.getRecord() instanceof OTxListener) ((OTxListener)txEntry.getRecord()).onEvent(txEntry,OTxListener.EVENT.AFTER_COMMIT);
}
