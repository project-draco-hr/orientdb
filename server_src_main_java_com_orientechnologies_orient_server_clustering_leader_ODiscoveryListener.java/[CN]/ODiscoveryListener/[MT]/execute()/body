{
  try {
    dgram.setLength(recvBuffer.length);
    socket.receive(dgram);
    logger.setNode(dgram.getAddress() + ":" + dgram.getPort());
    logger.log(this,Level.FINE,TYPE.CLUSTER,DIRECTION.IN,"received multicast packet %d bytes from",dgram.getLength());
    final byte[] buffer=new byte[dgram.getLength()];
    System.arraycopy(dgram.getData(),0,buffer,0,buffer.length);
    try {
      String packet=new String(OSecurityManager.instance().decrypt(manager.getConfig().securityAlgorithm,manager.getConfig().securityKey,buffer));
      String[] parts=packet.trim().split("\\|");
      int i=0;
      if (!parts[i].startsWith(ODistributedServerConfiguration.PACKET_HEADER)) {
        logger.log(this,Level.FINE,TYPE.CLUSTER,DIRECTION.IN,"packet discarded because invalid");
        return;
      }
      if (Integer.parseInt(parts[++i]) != ODistributedServerConfiguration.PROTOCOL_VERSION) {
        logger.log(this,Level.FINE,TYPE.CLUSTER,DIRECTION.IN,"received bad multicast packet with version %s not equals to the current %d",parts[i],ODistributedServerConfiguration.PROTOCOL_VERSION);
        return;
      }
      if (!parts[++i].equals(manager.getConfig().name)) {
        logger.log(this,Level.FINE,TYPE.CLUSTER,DIRECTION.IN,"received bad multicast packet with cluster name %s not equals to the current %s",parts[i],manager.getConfig().name);
        return;
      }
      String configuredServerAddress=parts[++i];
      String sourceServerAddress=dgram.getAddress().getHostAddress();
      final int serverPort=Integer.parseInt(parts[++i]);
      if (configuredServerAddress.equals(binaryNetworkListener.getInboundAddr().getHostName()) && serverPort == binaryNetworkListener.getInboundAddr().getPort()) {
        logger.log(this,Level.FINE,TYPE.CLUSTER,DIRECTION.IN,"ignored because sent by myself");
        return;
      }
      if (manager.getLeader() == null) {
        logger.log(this,Level.FINE,TYPE.CLUSTER,DIRECTION.IN,"packet discarded because I'm not the leader");
        return;
      }
      manager.getLeader().connect2Peer(new String[]{sourceServerAddress,configuredServerAddress},serverPort);
    }
 catch (    Exception e) {
      logger.log(this,Level.FINE,TYPE.CLUSTER,DIRECTION.IN,"received wrong packet from multicast IP",e);
    }
  }
 catch (  Throwable t) {
    logger.error(this,TYPE.CLUSTER,DIRECTION.IN,"Error on executing request",t,null);
  }
 finally {
  }
}
