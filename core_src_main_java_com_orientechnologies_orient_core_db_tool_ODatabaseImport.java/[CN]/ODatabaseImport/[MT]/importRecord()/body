{
  String value=jsonReader.readString(OJSONReader.END_OBJECT,true);
  while (!value.isEmpty() && value.charAt(0) != '{') {
    value=value.substring(1);
  }
  record=null;
  try {
    record=ORecordSerializerJSON.INSTANCE.fromString(value,record,null);
    if (schemaImported && record.getIdentity().toString().equals(database.getStorage().getConfiguration().schemaRecordId)) {
      return null;
    }
    if (includeClusters != null) {
      if (!includeClusters.contains(database.getClusterNameById(record.getIdentity().getClusterId()))) {
        jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
        return null;
      }
    }
 else     if (excludeClusters != null) {
      if (excludeClusters.contains(database.getClusterNameById(record.getIdentity().getClusterId()))) {
        jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
        return null;
      }
    }
    if (record.getIdentity().getClusterId() == 0 && record.getIdentity().getClusterPosition() == 1)     return null;
    if (exporterVersion >= 3) {
      int oridsId=database.getClusterIdByName(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME);
      int indexId=database.getClusterIdByName(OMetadata.CLUSTER_INDEX_NAME);
      if (record.getIdentity().getClusterId() == indexId || record.getIdentity().getClusterId() == oridsId)       return null;
    }
    if (exporterVersion >= 4) {
      final int manualIndex=database.getClusterIdByName(OMetadata.CLUSTER_MANUAL_INDEX_NAME);
      if (record.getIdentity().getClusterId() == manualIndex)       return null;
    }
    final String rid=record.getIdentity().toString();
    if (!lhClustersAreUsed)     storeLocalClusterRecord();
 else     storeLHClusterRecord(new ORecordId(rid));
    if (!record.getIdentity().toString().equals(rid))     throw new OSchemaException("Imported record '" + record.getIdentity() + "' has rid different from the original: "+ rid);
  }
 catch (  Exception t) {
    if (record != null)     System.err.println("Error importing record " + record.getIdentity() + ". Source line "+ jsonReader.getLineNumber()+ ", column "+ jsonReader.getColumnNumber());
 else     System.err.println("Error importing record. Source line " + jsonReader.getLineNumber() + ", column "+ jsonReader.getColumnNumber());
    throw t;
  }
 finally {
    jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
  }
  return record.getIdentity();
}
