{
  final int beginFields=parserGetCurrentPosition();
  final int endFields=parserText.indexOf(')',beginFields + 1);
  if (endFields == -1)   throwSyntaxErrorException("Missed closed brace");
  final ArrayList<String> fieldNames=new ArrayList<String>();
  parserSetCurrentPosition(OStringSerializerHelper.getParameters(parserText,beginFields,endFields,fieldNames));
  if (fieldNames.size() == 0)   throwSyntaxErrorException("Set of fields is empty. Example: (name, surname)");
  for (int i=0; i < fieldNames.size(); ++i)   fieldNames.set(i,OStringSerializerHelper.removeQuotationMarks(fieldNames.get(i)));
  parserRequiredKeyword(KEYWORD_VALUES);
  parserSkipWhiteSpaces();
  if (parserIsEnded() || parserText.charAt(parserGetCurrentPosition()) != '(') {
    throwParsingException("Set of values is missed. Example: ('Bill', 'Stuart', 300)");
  }
  final int textEnd=parserText.lastIndexOf(')');
  int blockStart=parserGetCurrentPosition();
  int blockEnd=parserGetCurrentPosition();
  while (blockStart != textEnd) {
    blockStart=parserText.indexOf('(',blockStart - 1);
    blockEnd=OStringSerializerHelper.findEndBlock(parserText,'(',')',blockStart);
    if (blockEnd == -1)     throw new OCommandSQLParsingException("Missed closed brace. Use " + getSyntax(),parserText,blockStart);
    final List<String> values=OStringSerializerHelper.smartSplit(parserText,new char[]{','},blockStart + 1,blockEnd - 1,true);
    if (values.isEmpty()) {
      throw new OCommandSQLParsingException("Set of values is empty. Example: ('Bill', 'Stuart', 300). Use " + getSyntax(),parserText,blockStart);
    }
    if (values.size() != fieldNames.size()) {
      throw new OCommandSQLParsingException("Fields not match with values",parserText,blockStart);
    }
    final Map<String,Object> fields=new LinkedHashMap<String,Object>();
    for (int i=0; i < values.size(); ++i) {
      fields.put(fieldNames.get(i),OSQLHelper.parseValue(this,OStringSerializerHelper.decode(values.get(i).trim()),context));
    }
    newRecords.add(fields);
    blockStart=blockEnd;
  }
}
