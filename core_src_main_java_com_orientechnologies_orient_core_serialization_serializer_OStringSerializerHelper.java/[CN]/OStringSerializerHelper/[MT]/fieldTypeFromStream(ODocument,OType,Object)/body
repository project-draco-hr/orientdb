{
  if (iValue == null)   return null;
  if (iType == null)   iType=OType.EMBEDDED;
switch (iType) {
case STRING:
    if (iValue instanceof String) {
      final String s=(String)iValue;
      return decode(s.substring(1,s.length() - 1));
    }
  return iValue.toString();
case INTEGER:
if (iValue instanceof Integer) return iValue;
return new Integer(getStringContent(iValue));
case BOOLEAN:
if (iValue instanceof Boolean) return iValue;
return new Boolean(getStringContent(iValue));
case FLOAT:
if (iValue instanceof Float) return iValue;
return new Float(getStringContent(iValue));
case LONG:
if (iValue instanceof Long) return iValue;
return new Long(getStringContent(iValue));
case DOUBLE:
if (iValue instanceof Double) return iValue;
return new Double(getStringContent(iValue));
case SHORT:
if (iValue instanceof Short) return iValue;
return new Short(getStringContent(iValue));
case BYTE:
if (iValue instanceof Byte) return iValue;
return new Byte(getStringContent(iValue));
case BINARY:
return getBinaryContent(iValue);
case DATE:
case DATETIME:
if (iValue instanceof Date) return iValue;
return new Date(Long.parseLong(getStringContent(iValue)));
case LINK:
if (iValue instanceof ORID) return iValue.toString();
 else if (iValue instanceof String) return new ORecordId((String)iValue);
 else return ((ORecord<?>)iValue).getIdentity().toString();
case EMBEDDED:
return OStringSerializerAnyStreamable.INSTANCE.fromStream((String)iValue);
case EMBEDDEDMAP:
final String value=(String)iValue;
return ORecordSerializerSchemaAware2CSV.INSTANCE.embeddedMapFromStream(iDocument,null,value);
}
throw new IllegalArgumentException("Type " + iType + " does not support converting value: "+ iValue);
}
