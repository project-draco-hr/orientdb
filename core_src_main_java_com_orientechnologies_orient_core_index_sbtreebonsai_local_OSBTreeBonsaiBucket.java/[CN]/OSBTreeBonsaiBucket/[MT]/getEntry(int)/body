{
  int entryPosition=getIntValue(offset + entryIndex * OIntegerSerializer.INT_SIZE + POSITIONS_ARRAY_OFFSET);
  if (isLeaf) {
    K key=keySerializer.deserializeFromDirectMemory(directMemory,pagePointer + offset + entryPosition);
    entryPosition+=keySerializer.getObjectSizeInDirectMemory(directMemory,pagePointer + offset + entryPosition);
    V value=valueSerializer.deserializeFromDirectMemory(directMemory,pagePointer + offset + entryPosition);
    return new SBTreeEntry<K,V>(OBonsaiBucketPointer.NULL,OBonsaiBucketPointer.NULL,key,value);
  }
 else {
    OBonsaiBucketPointer leftChild=getBucketPointer(offset + entryPosition);
    entryPosition+=OBonsaiBucketPointer.SIZE;
    OBonsaiBucketPointer rightChild=getBucketPointer(offset + entryPosition);
    entryPosition+=OBonsaiBucketPointer.SIZE;
    K key=keySerializer.deserializeFromDirectMemory(directMemory,pagePointer + offset + entryPosition);
    return new SBTreeEntry<K,V>(leftChild,rightChild,key,null);
  }
}
