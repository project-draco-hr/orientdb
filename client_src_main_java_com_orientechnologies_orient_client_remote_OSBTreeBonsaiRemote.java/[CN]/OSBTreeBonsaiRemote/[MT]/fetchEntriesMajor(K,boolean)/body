{
  final byte[] keyStream=new byte[keySerializer.getObjectSize(key)];
  keySerializer.serialize(key,keyStream,0);
  final OStorageRemote storage=(OStorageRemote)ODatabaseRecordThreadLocal.INSTANCE.get().getStorage().getUnderlying();
  return storage.networkOperation(new OStorageRemoteOperation<List<Map.Entry<K,V>>>(){
    @Override public List<Map.Entry<K,V>> execute(    final OChannelBinaryAsynchClient client) throws IOException {
      try {
        storage.beginRequest(client,OChannelBinaryProtocol.REQUEST_SBTREE_BONSAI_GET_ENTRIES_MAJOR);
        OCollectionNetworkSerializer.INSTANCE.writeCollectionPointer(client,getCollectionPointer());
        client.writeBytes(keyStream);
        client.writeBoolean(inclusive);
        if (client.getSrvProtocolVersion() >= 21)         client.writeInt(128);
      }
  finally {
        storage.endRequest(client);
      }
      List<Map.Entry<K,V>> list=null;
      try {
        storage.beginResponse(client);
        byte[] stream=client.readBytes();
        int offset=0;
        final int count=OIntegerSerializer.INSTANCE.deserializeLiteral(stream,0);
        offset+=OIntegerSerializer.INT_SIZE;
        list=new ArrayList<Map.Entry<K,V>>(count);
        for (int i=0; i < count; i++) {
          final K resultKey=keySerializer.deserialize(stream,offset);
          offset+=keySerializer.getObjectSize(stream,offset);
          final V resultValue=valueSerializer.deserialize(stream,offset);
          offset+=valueSerializer.getObjectSize(stream,offset);
          list.add(new TreeEntry<K,V>(resultKey,resultValue));
        }
      }
  finally {
        storage.endResponse(client);
      }
      return list;
    }
  }
,"Cannot get first key from sb-tree bonsai");
}
