{
  acquireExclusiveLock();
  try {
    content=Snappy.compress(content);
    int entryContentLength=content.length + 2 * OByteSerializer.BYTE_SIZE + OLongSerializer.LONG_SIZE;
    if (entryContentLength < OLocalPage.MAX_RECORD_SIZE) {
      byte[] entryContent=new byte[entryContentLength];
      int entryPosition=0;
      entryContent[entryPosition]=recordType;
      entryPosition++;
      System.arraycopy(content,0,entryContent,entryPosition,content.length);
      entryPosition+=content.length;
      entryContent[entryPosition]=1;
      entryPosition++;
      OLongSerializer.INSTANCE.serializeNative(-1L,entryContent,entryPosition);
      AddEntryResult addEntryResult=addEntry(recordVersion,entryContent);
      size++;
      return createPhysicalPosition(recordType,addEntryResult.pagePointer,addEntryResult.recordVersion);
    }
 else {
      int entrySize=content.length + OByteSerializer.BYTE_SIZE;
      int fullEntryPosition=0;
      byte[] fullEntry=new byte[entrySize];
      fullEntry[fullEntryPosition]=recordType;
      fullEntryPosition++;
      System.arraycopy(content,0,fullEntry,fullEntryPosition,content.length);
      long prevPageRecordPointer=-1;
      long firstPagePointer=-1;
      ORecordVersion version=null;
      int from=0;
      int to=from + (OLocalPage.MAX_RECORD_SIZE - OByteSerializer.BYTE_SIZE - OLongSerializer.LONG_SIZE);
      do {
        byte[] entryContent=new byte[to - from + OByteSerializer.BYTE_SIZE + OLongSerializer.LONG_SIZE];
        System.arraycopy(fullEntry,from,entryContent,0,to - from);
        if (from > 0)         entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE]=0;
 else         entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE]=1;
        OLongSerializer.INSTANCE.serializeNative(-1L,entryContent,entryContent.length - OLongSerializer.LONG_SIZE);
        final AddEntryResult addEntryResult=addEntry(recordVersion,entryContent);
        if (firstPagePointer == -1) {
          firstPagePointer=addEntryResult.pagePointer;
          version=addEntryResult.recordVersion;
        }
        long addedPagePointer=addEntryResult.pagePointer;
        if (prevPageRecordPointer >= 0) {
          long prevPageIndex=prevPageRecordPointer >>> 16;
          int prevPageRecordPosition=(int)(prevPageRecordPointer & 0xFFFF);
          long prevPageMemoryPointer=diskCache.loadForWrite(fileId,prevPageIndex);
          try {
            final OLocalPage prevPage=new OLocalPage(prevPageMemoryPointer,false);
            long recordPointer=prevPage.getRecordPointer(prevPageRecordPosition);
            int prevPageRecordSize=prevPage.getRecordSize(prevPageRecordPosition);
            OLongSerializer.INSTANCE.serializeInDirectMemory(addedPagePointer,directMemory,recordPointer + prevPageRecordSize - OLongSerializer.LONG_SIZE);
          }
  finally {
            diskCache.release(fileId,prevPageIndex);
          }
        }
        prevPageRecordPointer=addedPagePointer;
        from=to;
        to=to + (OLocalPage.MAX_RECORD_SIZE - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE);
        if (to > fullEntry.length)         to=fullEntry.length;
      }
 while (from < to);
      size++;
      return createPhysicalPosition(recordType,firstPagePointer,version);
    }
  }
  finally {
    releaseExclusiveLock();
  }
}
