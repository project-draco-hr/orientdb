{
  long fileId=buffer.openFile(fileConfiguration,".tst");
  long[] pointers;
  pointers=new long[6];
  for (int i=0; i < 6; i++) {
    pointers[i]=buffer.loadAndLockForWrite(fileId,i);
    directMemory.set(pointers[i],new byte[]{(byte)i,1,2,seed,4,5,6,7},8);
    buffer.releaseWriteLock(fileId,i);
  }
  Deque<OCacheEntry> am=buffer.getAm();
  Deque<OCacheEntry> a1in=buffer.getA1in();
  Deque<OCacheEntry> a1out=buffer.getA1out();
  Assert.assertTrue(am.isEmpty());
  for (int i=0; i < 2; i++) {
    OCacheEntry entry=generateEntry(fileId,i,ODirectMemory.NULL_POINTER);
    Assert.assertTrue(a1out.contains(entry));
  }
  for (int i=2; i < 6; i++) {
    OCacheEntry entry=generateEntry(fileId,i,pointers[i]);
    Assert.assertTrue(a1in.contains(entry));
  }
  Assert.assertEquals(buffer.getFilledUpTo(fileId),6);
  buffer.flushBuffer();
  for (int i=0; i < 6; i++) {
    assertFile(i,new byte[]{(byte)i,1,2,seed,4,5,6,7});
  }
}
