{
  checkForRebuild();
  if (iRangeFrom.getClass() != iRangeTo.getClass())   throw new IllegalArgumentException("Range from-to parameters are of different types");
  acquireExclusiveLock();
  try {
    final OMVRBTreeEntry<Object,OIdentifiable> firstEntry;
    if (iInclusive)     firstEntry=map.getCeilingEntry(iRangeFrom,OMVRBTree.PartialSearchMode.LOWEST_BOUNDARY);
 else     firstEntry=map.getHigherEntry(iRangeFrom);
    if (firstEntry == null)     return Collections.emptySet();
    final int firstEntryIndex=map.getPageIndex();
    final OMVRBTreeEntry<Object,OIdentifiable> lastEntry;
    if (iInclusive)     lastEntry=map.getHigherEntry(iRangeTo);
 else     lastEntry=map.getCeilingEntry(iRangeTo,OMVRBTree.PartialSearchMode.LOWEST_BOUNDARY);
    final int lastEntryIndex;
    if (lastEntry != null)     lastEntryIndex=map.getPageIndex();
 else     lastEntryIndex=-1;
    OMVRBTreeEntry<Object,OIdentifiable> entry=firstEntry;
    map.setPageIndex(firstEntryIndex);
    final Set<ODocument> result=new ODocumentFieldsHashSet();
    while (entry != null && !(entry == lastEntry && map.getPageIndex() == lastEntryIndex) && !(maxEntriesToFetch > -1 && result.size() == maxEntriesToFetch)) {
      final ODocument document=new ODocument();
      document.field("key",entry.getKey());
      document.field("rid",entry.getValue().getIdentity());
      document.unsetDirty();
      result.add(document);
      entry=OMVRBTree.next(entry);
    }
    return result;
  }
  finally {
    releaseExclusiveLock();
  }
}
