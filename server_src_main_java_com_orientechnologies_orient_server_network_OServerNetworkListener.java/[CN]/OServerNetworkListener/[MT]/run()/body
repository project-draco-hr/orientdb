{
  try {
    while (active) {
      try {
        final Socket socket=serverSocket.accept();
        final int max=OGlobalConfiguration.NETWORK_MAX_CONCURRENT_SESSIONS.getValueAsInteger();
        int conns=server.getClientConnectionManager().getTotal();
        if (conns >= max) {
          server.getClientConnectionManager().cleanExpiredConnections();
          conns=server.getClientConnectionManager().getTotal();
          if (conns >= max) {
            OLogManager.instance().warn(this,"Reached maximum number of concurrent connections (max=%d, current=%d), reject incoming connection from %s",max,conns,socket.getRemoteSocketAddress());
            socket.close();
            Thread.sleep(100);
            continue;
          }
        }
        socket.setPerformancePreferences(0,2,1);
        socket.setSendBufferSize(socketBufferSize);
        socket.setReceiveBufferSize(socketBufferSize);
        final ONetworkProtocol protocol=protocolType.newInstance();
        protocol.config(this,server,socket,configuration);
      }
 catch (      Throwable e) {
        if (active)         OLogManager.instance().error(this,"Error on client connection",e);
      }
 finally {
      }
    }
  }
  finally {
    try {
      if (serverSocket != null && !serverSocket.isClosed())       serverSocket.close();
    }
 catch (    IOException ioe) {
    }
  }
}
