{
  if ("@class".equals(iFieldName)) {
    setClassName(iPropertyValue.toString());
    return this;
  }
 else   if ("@rid".equals(iFieldName)) {
    _recordId.fromString(iPropertyValue.toString());
    return this;
  }
  final int lastSep=_allowChainedAccess ? iFieldName.lastIndexOf('.') : -1;
  if (lastSep > -1) {
    final Object subObject=field(iFieldName.substring(0,lastSep));
    if (subObject != null) {
      final String subFieldName=iFieldName.substring(lastSep + 1);
      if (subObject instanceof ODocument) {
        ((ODocument)subObject).field(subFieldName,iPropertyValue);
        return (ODocument)(((ODocument)subObject).isEmbedded() ? this : subObject);
      }
 else       if (subObject instanceof Map<?,?>)       ((Map<String,Object>)subObject).put(subFieldName,iPropertyValue);
 else       if (OMultiValue.isMultiValue(subObject)) {
        for (        Object subObjectItem : OMultiValue.getMultiValueIterable(subObject)) {
          if (subObjectItem instanceof ODocument) {
            if (!((ODocument)subObjectItem).isEmbedded())             throw new IllegalArgumentException("Property '" + iFieldName + "' points to linked collection of items. You can only change embedded documents in this way");
            ((ODocument)subObjectItem).field(subFieldName,iPropertyValue);
          }
 else           if (subObjectItem instanceof Map<?,?>) {
            ((Map<String,Object>)subObjectItem).put(subFieldName,iPropertyValue);
          }
        }
        return this;
      }
    }
    return null;
  }
  iFieldName=checkFieldName(iFieldName);
  checkForLoading();
  checkForFields();
  final boolean knownProperty=_fieldValues.containsKey(iFieldName);
  final Object oldValue=_fieldValues.get(iFieldName);
  if (knownProperty)   if (iPropertyValue == null) {
    if (oldValue == null)     return this;
  }
 else {
    try {
      if (iPropertyValue.equals(oldValue)) {
        if (!(iPropertyValue instanceof ORecordElement))         setDirty();
        return this;
      }
      if (OType.isSimpleType(iPropertyValue) && iPropertyValue.equals(oldValue))       return this;
    }
 catch (    Exception e) {
      OLogManager.instance().warn(this,"Error on checking the value of property %s against the record %s",e,iFieldName,getIdentity());
    }
  }
  setFieldType(iFieldName,iFieldType);
  if (iFieldType == null && _clazz != null) {
    final OProperty prop=_clazz.getProperty(iFieldName);
    if (prop != null)     iFieldType=prop.getType();
  }
  if (iPropertyValue != null)   if (iFieldType != null)   iPropertyValue=ODocumentHelper.convertField(this,iFieldName,iFieldType.getDefaultJavaType(),iPropertyValue);
 else   if (iPropertyValue instanceof Enum)   iPropertyValue=iPropertyValue.toString();
  removeCollectionChangeListener(iFieldName);
  removeCollectionTimeLine(iFieldName);
  _fieldValues.put(iFieldName,iPropertyValue);
  addCollectionChangeListener(iFieldName,iPropertyValue);
  if (_status != STATUS.UNMARSHALLING) {
    setDirty();
    if (_trackingChanges && _recordId.isValid()) {
      if (_fieldOriginalValues == null)       _fieldOriginalValues=new HashMap<String,Object>();
      if (!_fieldOriginalValues.containsKey(iFieldName))       _fieldOriginalValues.put(iFieldName,oldValue);
    }
  }
  return this;
}
