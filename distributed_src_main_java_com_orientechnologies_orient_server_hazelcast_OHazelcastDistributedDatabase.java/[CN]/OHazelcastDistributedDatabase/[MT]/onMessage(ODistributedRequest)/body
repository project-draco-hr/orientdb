{
  OScenarioThreadLocal.INSTANCE.set(OScenarioThreadLocal.RUN_MODE.RUNNING_DISTRIBUTED);
  try {
    final OAbstractRemoteTask task=iRequest.getTask();
    if (ODistributedServerLog.isDebugEnabled())     ODistributedServerLog.debug(this,manager.getLocalNodeName(),iRequest.getSenderNodeName(),DIRECTION.OUT,"received request: %s",iRequest);
    final Serializable responsePayload;
    OUser origin=null;
    try {
      if (task.isRequiredOpenDatabase())       initDatabaseInstance();
      ODatabaseRecordThreadLocal.INSTANCE.set(database);
      task.setNodeSource(iRequest.getSenderNodeName());
      if (database != null) {
        origin=database.getUser();
        try {
          if (lastUser == null || !(lastUser.getName()).equals(iRequest.getUserName()))           lastUser=database.getMetadata().getSecurity().getUser(iRequest.getUserName());
          database.setUser(lastUser);
        }
 catch (        Throwable ex) {
          OLogManager.instance().error(this,"failed to convert to OUser " + ex.getMessage());
        }
      }
      responsePayload=manager.executeOnLocalNode(iRequest,database);
    }
  finally {
      if (database != null)       database.setUser(origin);
    }
    if (ODistributedServerLog.isDebugEnabled())     ODistributedServerLog.debug(this,manager.getLocalNodeName(),iRequest.getSenderNodeName(),DIRECTION.OUT,"sending back response '%s' to request %d (%s)",responsePayload,iRequest.getId(),task);
    final OHazelcastDistributedResponse response=new OHazelcastDistributedResponse(iRequest.getId(),manager.getLocalNodeName(),iRequest.getSenderNodeName(),responsePayload);
    try {
      final IQueue<ODistributedResponse> queue=msgService.getQueue(OHazelcastDistributedMessageService.getResponseQueueName(iRequest.getSenderNodeName()));
      if (!queue.offer(response,OGlobalConfiguration.DISTRIBUTED_QUEUE_TIMEOUT.getValueAsLong(),TimeUnit.MILLISECONDS))       throw new ODistributedException("Timeout on dispatching response to the thread queue " + iRequest.getSenderNodeName());
    }
 catch (    Exception e) {
      throw new ODistributedException("Cannot dispatch response to the thread queue " + iRequest.getSenderNodeName(),e);
    }
  }
  finally {
    OScenarioThreadLocal.INSTANCE.set(OScenarioThreadLocal.RUN_MODE.DEFAULT);
  }
}
