{
  checkForRebuild();
  key=getCollatingValue(key);
  final ODatabase database=getDatabase();
  final boolean txIsActive=database.getTransaction().isActive();
  if (!txIsActive)   keyLockManager.acquireExclusiveLock(key);
  try {
    modificationLock.requestModificationLock();
    try {
      acquireSharedLock();
      startStorageAtomicOperation();
      try {
        Set<OIdentifiable> values=indexEngine.get(key);
        if (values == null) {
          commitStorageAtomicOperation();
          return false;
        }
        if (value == null) {
          indexEngine.remove(key);
        }
 else         if (values.remove(value)) {
          if (values.isEmpty())           indexEngine.remove(key);
 else           indexEngine.put(key,values);
          commitStorageAtomicOperation();
          return true;
        }
        commitStorageAtomicOperation();
        return false;
      }
 catch (      RuntimeException e) {
        rollbackStorageAtomicOperation();
        throw new OIndexException("Error during removal of entry by key",e);
      }
 finally {
        releaseSharedLock();
      }
    }
  finally {
      modificationLock.releaseModificationLock();
    }
  }
  finally {
    if (!txIsActive)     keyLockManager.releaseExclusiveLock(key);
  }
}
