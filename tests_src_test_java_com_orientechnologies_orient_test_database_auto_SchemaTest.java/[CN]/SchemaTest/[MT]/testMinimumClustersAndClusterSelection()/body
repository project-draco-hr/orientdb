{
  ODatabaseDocumentTx databaseDocumentTx=new ODatabaseDocumentTx(url);
  databaseDocumentTx.open("admin","admin");
  databaseDocumentTx.command(new OCommandSQL("alter database minimumclusters 3")).execute();
  try {
    databaseDocumentTx.command(new OCommandSQL("create class multipleclusters")).execute();
    databaseDocumentTx.close();
    databaseDocumentTx.open("admin","admin");
    databaseDocumentTx.reload();
    Assert.assertFalse(databaseDocumentTx.existsCluster("multipleclusters"));
    for (int i=0; i < 3; ++i) {
      Assert.assertTrue(databaseDocumentTx.existsCluster("multipleclusters_" + i));
    }
    for (int i=0; i < 6; ++i) {
      new ODocument("multipleclusters").field("num",i).save();
    }
    for (int i=0; i < 3; ++i) {
      Assert.assertEquals(databaseDocumentTx.countClusterElements(databaseDocumentTx.getClusterIdByName("multipleclusters_" + i)),2);
    }
    int deleted=databaseDocumentTx.command(new OCommandSQL("delete from cluster:multipleclusters_2")).execute();
    Assert.assertEquals(deleted,2);
    databaseDocumentTx.command(new OCommandSQL("alter class multipleclusters clusterselection balanced")).execute();
    databaseDocumentTx.reload();
    databaseDocumentTx.getMetadata().getSchema().reload();
    for (int i=0; i < 2; ++i) {
      new ODocument("multipleclusters").field("num",i).save();
    }
    Assert.assertEquals(databaseDocumentTx.countClusterElements(databaseDocumentTx.getClusterIdByName("multipleclusters_2")),2);
  }
  finally {
    databaseDocumentTx.command(new OCommandSQL("alter database minimumclusters 1")).execute();
  }
}
