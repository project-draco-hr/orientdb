{
  checkOpeness();
  if (content == null)   throw new IllegalArgumentException("Record is null");
  final long timer=Orient.instance().getProfiler().startChrono();
  final OPhysicalPosition ppos=new OPhysicalPosition(-1,-1,recordType);
  if (cluster.isLHBased()) {
    if (rid.isNew()) {
      if (OGlobalConfiguration.USE_NODE_ID_CLUSTER_POSITION.getValueAsBoolean()) {
        ppos.clusterPosition=OClusterPositionFactory.INSTANCE.generateUniqueClusterPosition();
      }
 else {
        ppos.clusterPosition=OClusterPositionFactory.INSTANCE.valueOf(positionGenerator++);
      }
    }
 else {
      ppos.clusterPosition=rid.clusterPosition;
    }
  }
  try {
    if (!cluster.addPhysicalPosition(ppos))     throw new OStorageException("Record with given id " + rid + " has already exists.");
    rid.clusterPosition=ppos.clusterPosition;
    lock.acquireExclusiveLock();
    try {
      lockManager.acquireLock(Thread.currentThread(),rid,LOCK.EXCLUSIVE);
      try {
        ppos.dataSegmentId=dataSegment.getId();
        ppos.dataSegmentPos=dataSegment.addRecord(rid,content);
        cluster.updateDataSegmentPosition(ppos.clusterPosition,ppos.dataSegmentId,ppos.dataSegmentPos);
        if (recordVersion.getCounter() > -1 && recordVersion.compareTo(ppos.recordVersion) > 0) {
          cluster.updateVersion(rid.clusterPosition,recordVersion);
          ppos.recordVersion=recordVersion;
        }
        return ppos;
      }
  finally {
        lockManager.releaseLock(Thread.currentThread(),rid,LOCK.EXCLUSIVE);
      }
    }
  finally {
      lock.releaseExclusiveLock();
    }
  }
 catch (  IOException ioe) {
    try {
      if (ppos.clusterPosition != null && ppos.clusterPosition.compareTo(OClusterPosition.INVALID_POSITION) != 0)       cluster.removePhysicalPosition(ppos.clusterPosition);
    }
 catch (    IOException e) {
      OLogManager.instance().error(this,"Error on removing physical position in cluster: " + cluster,e);
    }
    OLogManager.instance().error(this,"Error on creating record in cluster: " + cluster,ioe);
    return null;
  }
 finally {
    Orient.instance().getProfiler().stopChrono(PROFILER_CREATE_RECORD,"Create a record in local database",timer,"db.*.createRecord");
  }
}
