{
  OIndexCursor cursor;
  OIndexDefinition definition=index.getDefinition();
  int idxSize=definition.getFields().size();
  int paramsSize=keyParams.size();
  double distance=0;
  Object spatial=iContext.getVariable("spatial");
  if (spatial != null) {
    if (spatial instanceof Number) {
      distance=((Double)OType.convert(spatial,Double.class)).doubleValue();
    }
 else     if (spatial instanceof Map) {
      Map<String,Object> params=(Map<String,Object>)spatial;
      Object dst=params.get("maxDistance");
      if (dst != null && dst instanceof Number) {
        distance=((Double)OType.convert(dst,Double.class)).doubleValue();
      }
    }
  }
  Object key=null;
  if (keyParams.size() > 1) {
    key=new OSpatialCompositeKey(keyParams).setMaxDistance(distance).setContext(iContext);
  }
 else {
    key=keyParams.get(0);
    if (key instanceof Map) {
      ((Map)key).put(SpatialQueryBuilderAbstract.GEO_FILTER,SpatialQueryBuilderNear.NAME);
    }
  }
  Object indexResult=index.get(key);
  if (indexResult == null || indexResult instanceof OIdentifiable)   cursor=new OIndexCursorSingleValue((OIdentifiable)indexResult,new OSpatialCompositeKey(keyParams));
 else   cursor=new OIndexCursorCollectionValue(((Collection<OIdentifiable>)indexResult).iterator(),new OSpatialCompositeKey(keyParams));
  iContext.setVariable("$luceneIndex",true);
  return cursor;
}
