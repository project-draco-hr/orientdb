{
  final String fieldName;
  fieldName=getFieldName(m);
  Object valueToSet=args[0];
  if (valueToSet == null) {
    doc.field(fieldName,valueToSet);
  }
 else   if (!valueToSet.getClass().isAnonymousClass()) {
    if (valueToSet instanceof Proxy) {
      ODocument docToSet=OObjectEntitySerializer.getDocument((Proxy)valueToSet);
      if (OObjectEntitySerializer.isEmbeddedField(self.getClass(),fieldName))       docToSet.addOwner(doc);
      doc.field(fieldName,docToSet);
    }
 else     if (valueToSet instanceof OIdentifiable) {
      if (valueToSet instanceof ODocument && OObjectEntitySerializer.isEmbeddedField(self.getClass(),fieldName))       ((ODocument)valueToSet).addOwner(doc);
      doc.field(fieldName,valueToSet);
    }
 else     if (((valueToSet instanceof Collection<?> || valueToSet instanceof Map<?,?>)) || valueToSet.getClass().isArray()) {
      Class<?> genericMultiValueType=OReflectionHelper.getGenericMultivalueType(getField(fieldName,self.getClass()));
      if (genericMultiValueType != null && !OReflectionHelper.isJavaType(genericMultiValueType)) {
        if (!(valueToSet instanceof OLazyObjectMultivalueElement)) {
          if (valueToSet instanceof Collection<?>) {
            valueToSet=manageCollectionSave(fieldName,(Collection<?>)valueToSet);
          }
 else           if (valueToSet instanceof Map<?,?>) {
            valueToSet=manageMapSave(fieldName,(Map<?,?>)valueToSet);
          }
 else           if (valueToSet.getClass().isArray()) {
            valueToSet=manageArraySave(fieldName,(Object[])valueToSet);
          }
        }
      }
 else {
        if (OObjectEntitySerializer.isToSerialize(valueToSet.getClass())) {
          doc.field(fieldName,OObjectEntitySerializer.serializeFieldValue(getField(fieldName,self.getClass()).getType(),valueToSet));
        }
 else {
          if (valueToSet.getClass().isArray()) {
            OClass schemaClass=doc.getSchemaClass();
            OProperty schemaProperty=null;
            if (schemaClass != null)             schemaProperty=schemaClass.getProperty(fieldName);
            doc.field(fieldName,OObjectEntitySerializer.typeToStream(valueToSet,schemaProperty != null ? schemaProperty.getType() : null,getDatabase(),doc));
          }
 else           doc.field(fieldName,valueToSet);
        }
      }
    }
 else {
      if (OObjectEntitySerializer.isToSerialize(valueToSet.getClass())) {
        doc.field(fieldName,OObjectEntitySerializer.serializeFieldValue(getField(fieldName,self.getClass()).getType(),valueToSet));
      }
 else {
        doc.field(fieldName,valueToSet);
      }
    }
    args[0]=valueToSet;
    loadedFields.put(fieldName,doc.getVersion());
  }
 else {
    OLogManager.instance().warn(this,"Setting property '%s' in proxied class '%s' with an anonymous class '%s'. The document won't have this property.",fieldName,self.getClass().getName(),valueToSet.getClass().getName());
  }
  return proceed.invoke(self,args);
}
