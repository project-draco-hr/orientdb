{
  if (iValue == null)   return null;
  if (iValue.length() == 0)   return "";
  if (iValue.length() > 1)   if (iValue.charAt(0) == '"' && iValue.charAt(iValue.length() - 1) == '"')   return OStringSerializerHelper.decode(iValue.substring(1,iValue.length() - 1));
 else   if (iValue.charAt(0) == OStringSerializerHelper.BINARY_BEGINEND && iValue.charAt(iValue.length() - 1) == OStringSerializerHelper.BINARY_BEGINEND)   return OStringSerializerHelper.getBinaryContent(iValue);
 else   if (iValue.charAt(0) == OStringSerializerHelper.LIST_BEGIN && iValue.charAt(iValue.length() - 1) == OStringSerializerHelper.LIST_END) {
    final ArrayList<String> coll=new ArrayList<String>();
    OStringSerializerHelper.getCollection(iValue,0,coll,OStringSerializerHelper.LIST_BEGIN,OStringSerializerHelper.LIST_END,OStringSerializerHelper.COLLECTION_SEPARATOR);
    return coll;
  }
 else   if (iValue.charAt(0) == OStringSerializerHelper.SET_BEGIN && iValue.charAt(iValue.length() - 1) == OStringSerializerHelper.SET_END) {
    final Set<String> coll=new HashSet<String>();
    OStringSerializerHelper.getCollection(iValue,0,coll,OStringSerializerHelper.SET_BEGIN,OStringSerializerHelper.SET_END,OStringSerializerHelper.COLLECTION_SEPARATOR);
    return coll;
  }
 else   if (iValue.charAt(0) == OStringSerializerHelper.MAP_BEGIN && iValue.charAt(iValue.length() - 1) == OStringSerializerHelper.MAP_END) {
    return OStringSerializerHelper.getMap(iValue);
  }
  if (iValue.charAt(0) == ORID.PREFIX)   return new ORecordId(iValue);
  boolean integer=true;
  char c;
  for (int index=0; index < iValue.length(); ++index) {
    c=iValue.charAt(index);
    if (c < '0' || c > '9')     if ((index == 0 && (c == '+' || c == '-')))     continue;
 else     if (c == DECIMAL_SEPARATOR)     integer=false;
 else {
      if (index > 0) {
        if (!integer && c == 'E') {
          if (index < iValue.length())           index++;
          if (iValue.charAt(index) == '-')           continue;
        }
        final String v=iValue.substring(0,index);
        if (c == 'f')         return new Float(v);
 else         if (c == 'c')         return new BigDecimal(v);
 else         if (c == 'l')         return new Long(v);
 else         if (c == 'd')         return new Double(v);
 else         if (c == 'b')         return new Byte(v);
 else         if (c == 'a' || c == 't')         return new Date(Long.parseLong(v));
 else         if (c == 's')         return new Short(v);
      }
      return iValue;
    }
  }
  if (integer) {
    try {
      return new Integer(iValue);
    }
 catch (    NumberFormatException e) {
      return new Long(iValue);
    }
  }
 else   if ("NaN".equals(iValue) || "Infinity".equals(iValue))   return new Double(iValue);
 else   return new BigDecimal(iValue);
}
