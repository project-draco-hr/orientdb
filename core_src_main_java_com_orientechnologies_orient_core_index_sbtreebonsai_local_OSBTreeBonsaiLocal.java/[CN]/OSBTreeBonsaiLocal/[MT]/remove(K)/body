{
  startOperation();
  try {
    final OAtomicOperation atomicOperation;
    try {
      atomicOperation=startAtomicOperation(true);
    }
 catch (    IOException e) {
      throw OException.wrapException(new OSBTreeBonsaiLocalException("Error during sbtree entrie removal",this),e);
    }
    Lock lock=fileLockManager.acquireExclusiveLock(fileId);
    try {
      BucketSearchResult bucketSearchResult=findBucket(key,atomicOperation);
      if (bucketSearchResult.itemIndex < 0) {
        endAtomicOperation(false,null);
        return null;
      }
      OBonsaiBucketPointer bucketPointer=bucketSearchResult.getLastPathItem();
      OCacheEntry keyBucketCacheEntry=loadPage(atomicOperation,fileId,bucketPointer.getPageIndex(),false);
      final V removed;
      keyBucketCacheEntry.acquireExclusiveLock();
      try {
        OSBTreeBonsaiBucket<K,V> keyBucket=new OSBTreeBonsaiBucket<K,V>(keyBucketCacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChanges(atomicOperation,keyBucketCacheEntry),this);
        removed=keyBucket.getEntry(bucketSearchResult.itemIndex).value;
        keyBucket.remove(bucketSearchResult.itemIndex);
      }
  finally {
        keyBucketCacheEntry.releaseExclusiveLock();
        releasePage(atomicOperation,keyBucketCacheEntry);
      }
      setSize(size() - 1,atomicOperation);
      endAtomicOperation(false,null);
      return removed;
    }
 catch (    IOException e) {
      rollback(e);
      throw OException.wrapException(new OSBTreeBonsaiLocalException("Error during removing key " + key + " from sbtree "+ getName(),this),e);
    }
catch (    RuntimeException e) {
      rollback(e);
      throw e;
    }
 finally {
      lock.unlock();
    }
  }
  finally {
    completeOperation();
  }
}
