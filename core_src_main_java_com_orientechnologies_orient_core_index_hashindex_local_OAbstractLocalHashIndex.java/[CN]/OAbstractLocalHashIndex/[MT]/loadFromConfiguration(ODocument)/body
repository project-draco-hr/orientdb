{
  acquireExclusiveLock();
  try {
    final ORID rid=(ORID)configuration.field(CONFIG_MAP_RID,ORID.class);
    if (rid == null)     throw new OIndexException("Error during deserialization of index definition: '" + CONFIG_MAP_RID + "' attribute is null");
    identity=rid;
    this.configuration=configuration;
    name=configuration.field(OIndexInternal.CONFIG_NAME);
    type=configuration.field(OIndexInternal.CONFIG_TYPE);
    storage=(OStorageLocal)getDatabase().getStorage();
    final ODocument indexDefinitionDoc=configuration.field(OIndexInternal.INDEX_DEFINITION);
    if (indexDefinitionDoc != null) {
      try {
        final String indexDefClassName=configuration.field(OIndexInternal.INDEX_DEFINITION_CLASS);
        final Class<?> indexDefClass=Class.forName(indexDefClassName);
        indexDefinition=(OIndexDefinition)indexDefClass.getDeclaredConstructor().newInstance();
        indexDefinition.fromStream(indexDefinitionDoc);
      }
 catch (      final ClassNotFoundException e) {
        throw new OIndexException("Error during deserialization of index definition",e);
      }
catch (      final NoSuchMethodException e) {
        throw new OIndexException("Error during deserialization of index definition",e);
      }
catch (      final InvocationTargetException e) {
        throw new OIndexException("Error during deserialization of index definition",e);
      }
catch (      final InstantiationException e) {
        throw new OIndexException("Error during deserialization of index definition",e);
      }
catch (      final IllegalAccessException e) {
        throw new OIndexException("Error during deserialization of index definition",e);
      }
      clustersToIndex.clear();
      final Collection<? extends String> clusters=configuration.field(CONFIG_CLUSTERS);
      if (clusters != null)       clustersToIndex.addAll(clusters);
      keyHashFunction.setValueSerializer((OBinarySerializer<Object>)detectKeySerializer(indexDefinition));
      localHashTable.load(name,storage);
    }
    return true;
  }
  finally {
    releaseExclusiveLock();
  }
}
