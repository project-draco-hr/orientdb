{
  if (attribute == null)   throw new IllegalArgumentException("attribute is null");
  final String stringValue=iValue != null ? iValue.toString() : null;
switch (attribute) {
case LINKEDCLASS:
    setLinkedClass(getDatabase().getMetadata().getSchema().getClass(stringValue));
  break;
case LINKEDTYPE:
setLinkedType(OType.valueOf(stringValue));
break;
case MIN:
setMin(stringValue);
break;
case MANDATORY:
setMandatory(Boolean.parseBoolean(stringValue));
break;
case READONLY:
setReadonly(Boolean.parseBoolean(stringValue));
break;
case MAX:
setMax(stringValue);
break;
case DEFAULTVALUE:
setDefaultValue(stringValue);
break;
case NAME:
setName(stringValue);
break;
case NOTNULL:
setNotNull(Boolean.parseBoolean(stringValue));
break;
case REGEXP:
setRegexp(stringValue);
break;
case TYPE:
setType(OType.valueOf(stringValue.toUpperCase(Locale.ENGLISH)));
break;
case COLLATE:
setCollate(stringValue);
break;
case CUSTOM:
int indx=stringValue != null ? stringValue.indexOf('=') : -1;
if (indx < 0) {
if ("clear".equalsIgnoreCase(stringValue)) {
clearCustom();
}
 else throw new IllegalArgumentException("Syntax error: expected <name> = <value> or clear, instead found: " + iValue);
}
 else {
String customName=stringValue.substring(0,indx).trim();
String customValue=stringValue.substring(indx + 1).trim();
if (customValue.isEmpty()) removeCustom(customName);
 else setCustom(customName,customValue);
}
break;
}
}
