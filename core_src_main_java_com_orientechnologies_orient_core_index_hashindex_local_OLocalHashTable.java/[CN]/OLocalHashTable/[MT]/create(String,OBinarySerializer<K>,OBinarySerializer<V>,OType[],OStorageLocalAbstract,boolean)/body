{
  acquireExclusiveLock();
  try {
    this.storage=storageLocal;
    this.keyTypes=keyTypes;
    this.nullKeyIsSupported=nullKeyIsSupported;
    this.diskCache=storage.getDiskCache();
    if (this.diskCache == null)     throw new IllegalStateException("Disk cache was not initialized on storage level");
    this.name=name;
    initStores(metadataConfigurationFileExtension,treeStateFileExtension);
    treeStateStore.create(-1);
    fileStateId=diskCache.openFile(name + metadataConfigurationFileExtension);
    hashStateEntry=diskCache.allocateNewPage(fileStateId);
    diskCache.pinPage(hashStateEntry);
    final OCachePointer cachePointer=hashStateEntry.getCachePointer();
    cachePointer.acquireExclusiveLock();
    try {
      OHashIndexFileLevelMetadataPage page=new OHashIndexFileLevelMetadataPage(cachePointer.getDataPointer(),ODurablePage.TrackMode.NONE,true);
      createFileMetadata(0,page);
      hashStateEntry.markDirty();
    }
  finally {
      cachePointer.releaseExclusiveLock();
      diskCache.release(hashStateEntry);
    }
    setKeySerializer(keySerializer);
    setValueSerializer(valueSerializer);
    initHashTreeState();
    if (nullKeyIsSupported)     nullBucketFileId=diskCache.openFile(name + nullBucketFileExtension);
  }
 catch (  IOException e) {
    throw new OIndexException("Error during local hash table creation.",e);
  }
 finally {
    releaseExclusiveLock();
  }
}
