{
  if (!checkForClose(force))   return;
  final long timer=Orient.instance().getProfiler().startChrono();
  lock.acquireExclusiveLock();
  try {
    status=STATUS.CLOSING;
    if (!onDelete)     makeFullCheckpoint();
    if (writeAheadLog != null) {
      fuzzyCheckpointExecutor.shutdown();
      if (!fuzzyCheckpointExecutor.awaitTermination(OGlobalConfiguration.WAL_FUZZY_CHECKPOINT_SHUTDOWN_TIMEOUT.getValueAsInteger(),TimeUnit.SECONDS))       throw new OStorageException("Can not terminate fuzzy checkpoint task");
      checkpointExecutor.shutdown();
      if (!checkpointExecutor.awaitTermination(OGlobalConfiguration.WAL_FULL_CHECKPOINT_SHUTDOWN_TIMEOUT.getValueAsInteger(),TimeUnit.SECONDS))       throw new OStorageException("Can not terminate full checkpoint task");
    }
    for (    OCluster cluster : clusters)     if (cluster != null)     cluster.close(!onDelete);
    clusters.clear();
    clusterMap.clear();
    if (configuration != null)     configuration.close();
    level2Cache.shutdown();
    super.close(force,onDelete);
    if (!onDelete)     diskCache.close();
 else     diskCache.delete();
    if (writeAheadLog != null)     writeAheadLog.delete();
    if (onDelete)     dirtyFlag.delete();
 else {
      dirtyFlag.clearDirty();
      dirtyFlag.close();
    }
    Orient.instance().unregisterStorage(this);
    status=STATUS.CLOSED;
  }
 catch (  InterruptedException ie) {
    OLogManager.instance().error(this,"Error on closing of storage '" + name,ie,OStorageException.class);
    Thread.interrupted();
  }
catch (  IOException e) {
    OLogManager.instance().error(this,"Error on closing of storage '" + name,e,OStorageException.class);
  }
 finally {
    lock.releaseExclusiveLock();
    Orient.instance().getProfiler().stopChrono("db." + name + ".close","Close a database",timer,"db.*.close");
  }
}
