{
  List<Class<?>> classes=new ArrayList<Class<?>>();
  ArrayList<File> directories=new ArrayList<File>();
  try {
    ClassLoader cld=Thread.currentThread().getContextClassLoader();
    if (cld == null) {
      throw new ClassNotFoundException("Can't get class loader.");
    }
    Enumeration<URL> resources=cld.getResources(iPackageName.replace('.','/'));
    while (resources.hasMoreElements()) {
      URL res=resources.nextElement();
      if (res.getProtocol().equalsIgnoreCase("jar")) {
        JarURLConnection conn=(JarURLConnection)res.openConnection();
        JarFile jar=conn.getJarFile();
        for (        JarEntry e : Collections.list(jar.entries())) {
          if (e.getName().startsWith(iPackageName.replace('.','/')) && e.getName().endsWith(CLASS_EXTENSION) && !e.getName().contains("$")) {
            String className=e.getName().replace("/",".").substring(0,e.getName().length() - 6);
            classes.add(Class.forName(className));
          }
        }
      }
 else       directories.add(new File(URLDecoder.decode(res.getPath(),"UTF-8")));
    }
  }
 catch (  NullPointerException x) {
    throw new ClassNotFoundException(iPackageName + " does not appear to be " + "a valid package (Null pointer exception)");
  }
catch (  UnsupportedEncodingException encex) {
    throw new ClassNotFoundException(iPackageName + " does not appear to be " + "a valid package (Unsupported encoding)");
  }
catch (  IOException ioex) {
    throw new ClassNotFoundException("IOException was thrown when trying " + "to get all resources for " + iPackageName);
  }
  for (  File directory : directories) {
    if (directory.exists()) {
      File[] files=directory.listFiles();
      for (      File file : files) {
        classes.addAll(findClasses(file,iPackageName));
      }
    }
 else {
      throw new ClassNotFoundException(iPackageName + " (" + directory.getPath()+ ") does not appear to be a valid package");
    }
  }
  return classes;
}
