{
  OLockManager.LOCK lock=writeLock ? OLockManager.LOCK.EXCLUSIVE : OLockManager.LOCK.SHARED;
synchronized (syncObject) {
    for (    LRUEntry entry : fetchedOnce) {
      lockManager.acquireLock(Thread.currentThread(),new FileLockKey(entry.fileName,entry.pageIndex),lock);
      try {
        if (entry.isDirty) {
          flushData(entry.fileName,entry.pageIndex,entry.dataPointer);
          entry.isDirty=false;
        }
      }
  finally {
        lockManager.releaseLock(Thread.currentThread(),new FileLockKey(entry.fileName,entry.pageIndex),lock);
      }
    }
    for (    LRUEntry entry : fetchedSeveralTimes) {
      lockManager.acquireLock(Thread.currentThread(),new FileLockKey(entry.fileName,entry.pageIndex),lock);
      try {
        if (entry.isDirty) {
          flushData(entry.fileName,entry.pageIndex,entry.dataPointer);
          entry.isDirty=false;
        }
      }
  finally {
        lockManager.releaseLock(Thread.currentThread(),new FileLockKey(entry.fileName,entry.pageIndex),lock);
      }
    }
    for (    OMultiFileSegment multiFileSegment : openFiles.values())     multiFileSegment.synch();
  }
}
