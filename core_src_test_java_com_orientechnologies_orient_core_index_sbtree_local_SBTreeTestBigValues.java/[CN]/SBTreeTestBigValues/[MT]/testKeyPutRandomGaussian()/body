{
  NavigableSet<Integer> keys=new TreeSet<Integer>();
  long seed=System.currentTimeMillis();
  System.out.println("testKeyPutRandomGaussian seed : " + seed);
  MersenneTwisterFast random=new MersenneTwisterFast(seed);
  while (keys.size() < KEYS_COUNT) {
    int key=(int)(random.nextGaussian() * Integer.MAX_VALUE / 2 + Integer.MAX_VALUE);
    if (key < 0)     continue;
    sbTree.put(key,createValue(key,OSBTreeValuePage.MAX_BINARY_VALUE_SIZE + 4));
    keys.add(key);
    doReset();
  }
  Assert.assertEquals(sbTree.firstKey(),keys.first());
  doReset();
  Assert.assertEquals(sbTree.lastKey(),keys.last());
  doReset();
  for (  int key : keys) {
    Assert.assertEquals(sbTree.get(key),createValue(key,OSBTreeValuePage.MAX_BINARY_VALUE_SIZE + 4));
    doReset();
  }
}
