{
  final StringBuilder buffer=new StringBuilder();
  buffer.append(OStringSerializerHelper.COLLECTION_BEGIN);
  final int size=iValue instanceof Collection<?> ? ((Collection<Object>)iValue).size() : Array.getLength(iValue);
  final Iterator<Object> iterator=iValue instanceof Collection<?> ? ((Collection<Object>)iValue).iterator() : null;
  Object o;
  for (int i=0; i < size; ++i) {
    if (iValue instanceof Collection<?>)     o=iterator.next();
 else     o=Array.get(iValue,i);
    if (i > 0)     buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);
    if (o == null)     continue;
    ODocument document=null;
    final OClass linkedClass;
    if (!(o instanceof ORecord<?>)) {
      final String fieldBound=OObjectSerializerHelper.getDocumentBoundField(o.getClass());
      if (fieldBound != null) {
        OObjectSerializerHelper.invokeCallback(o,null,OBeforeSerialization.class);
        document=(ODocument)OObjectSerializerHelper.getFieldValue(o,fieldBound);
        OObjectSerializerHelper.invokeCallback(o,document,OAfterSerialization.class);
      }
      linkedClass=iLinkedClass;
    }
 else {
      document=(ODocument)o;
      linkedClass=document.getSchemaClass();
    }
    if (document != null && iLinkedType != OType.LINK)     buffer.append(OStringSerializerHelper.EMBEDDED);
    if (linkedClass != null || document != null) {
      if (document == null)       document=OObjectSerializerHelper.toStream(o,new ODocument((ODatabaseRecord<?>)iDatabase,o.getClass().getSimpleName()),iDatabase instanceof ODatabaseObjectTx ? ((ODatabaseObjectTx)iDatabase).getEntityManager() : OEntityManagerInternal.INSTANCE,iLinkedClass,iObjHandler != null ? iObjHandler : new OUserObject2RecordHandler(){
        public Object getUserObjectByRecord(        ORecordInternal<?> iRecord,        final String iFetchPlan){
          return iRecord;
        }
        public ORecordInternal<?> getRecordByUserObject(        Object iPojo,        boolean iIsMandatory){
          return new ODocument(linkedClass);
        }
        public boolean existsUserObjectByRecord(        ORecordInternal<?> iRecord){
          return false;
        }
      }
,null,iSaveOnlyDirty);
      buffer.append(toString(document,null,iObjHandler,iMarshalledRecords));
    }
 else {
      buffer.append(OStringSerializerHelper.fieldTypeToString(iDatabase,iLinkedType,o));
    }
    if (document != null && iLinkedType != OType.LINK)     buffer.append(OStringSerializerHelper.EMBEDDED);
  }
  buffer.append(OStringSerializerHelper.COLLECTION_END);
  return buffer.toString();
}
