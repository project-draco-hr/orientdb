{
  checkForDatabase();
  final List<String> items=OStringSerializerHelper.smartSplit(iText,' ',' ');
  if (items.size() < 2) {
    try {
      syntaxError("backupDatabase",getClass().getMethod("backupDatabase",String.class));
    }
 catch (    NoSuchMethodException ignored) {
    }
    return;
  }
  final String fileName=items.size() <= 0 || items.get(1).charAt(0) == '-' ? null : items.get(1);
  if (fileName == null || fileName.trim().isEmpty()) {
    try {
      syntaxError("backupDatabase",getClass().getMethod("backupDatabase",String.class));
      return;
    }
 catch (    NoSuchMethodException ignored) {
    }
  }
  int bufferSize=Integer.parseInt(properties.get("backupBufferSize"));
  int compressionLevel=Integer.parseInt(properties.get("backupCompressionLevel"));
  boolean incremental=false;
  for (int i=2; i < items.size(); ++i) {
    final String item=items.get(i);
    final int sep=item.indexOf('=');
    final String parName;
    final String parValue;
    if (sep > -1) {
      parName=item.substring(1,sep);
      parValue=item.substring(sep + 1);
    }
 else {
      parName=item.substring(1);
      parValue=null;
    }
    if (parName.equalsIgnoreCase("incremental"))     incremental=true;
 else     if (parName.equalsIgnoreCase("bufferSize"))     bufferSize=Integer.parseInt(parValue);
 else     if (parName.equalsIgnoreCase("compressionLevel"))     compressionLevel=Integer.parseInt(parValue);
  }
  final long startTime=System.currentTimeMillis();
  String fName=null;
  try {
    if (incremental) {
      out.println(new StringBuilder("Executing incremental backup of database '" + currentDatabaseName + "' to: ").append(iText).append("..."));
      fName=currentDatabase.incrementalBackup(fileName);
      message("\nIncremental Backup executed in %.2f seconds stored in file %s",((float)(System.currentTimeMillis() - startTime) / 1000),fName);
    }
 else {
      out.println(new StringBuilder("Executing full backup of database '" + currentDatabaseName + "' to: ").append(iText).append("..."));
      final FileOutputStream fos=new FileOutputStream(fileName);
      try {
        currentDatabase.backup(fos,null,null,this,compressionLevel,bufferSize);
      }
  finally {
        fos.flush();
        fos.close();
        message("\nBackup executed in %.2f seconds",((float)(System.currentTimeMillis() - startTime) / 1000));
      }
    }
  }
 catch (  ODatabaseExportException e) {
    printError(e);
  }
}
