{
  Orient.instance().getProfiler().registerHookValue("system.memory.alerts","Number of alerts received by JVM to free memory resources",METRIC_TYPE.COUNTER,new OProfilerHookValue(){
    public Object getValue(){
      return alertTimes;
    }
  }
);
  Orient.instance().getProfiler().registerHookValue("system.memory.lastGC","Date of last System.gc() invocation",METRIC_TYPE.STAT,new OProfilerHookValue(){
    public Object getValue(){
      return lastGC;
    }
  }
);
  while (true) {
    try {
      monitorQueue.remove();
      if (Thread.interrupted())       break;
      alertTimes++;
      long maxMemory=Runtime.getRuntime().maxMemory();
      long freeMemory=Runtime.getRuntime().freeMemory();
      int freeMemoryPer=(int)(freeMemory * 100 / maxMemory);
      if (OLogManager.instance().isDebugEnabled())       OLogManager.instance().debug(this,"Free memory is low %s of %s (%d%%), calling listeners to free memory...",OFileUtils.getSizeAsString(freeMemory),OFileUtils.getSizeAsString(maxMemory),freeMemoryPer);
      final long timer=Orient.instance().getProfiler().startChrono();
synchronized (listeners) {
        for (        ListenerWrapper listener : listeners.keySet()) {
          try {
            listener.listener.memoryUsageLow(freeMemory,freeMemoryPer);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
      Orient.instance().getProfiler().stopChrono("OMemoryWatchDog.freeResources","WatchDog free resources",timer);
    }
 catch (    InterruptedException e) {
      break;
    }
catch (    Exception e) {
    }
 finally {
      monitorRef=new SoftReference<Object>(new Object(),monitorQueue);
    }
  }
  OLogManager.instance().debug(this,"[OMemoryWatchDog] shutdowning...");
synchronized (listeners) {
    listeners.clear();
  }
  monitorRef=null;
}
