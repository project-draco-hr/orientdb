{
  fetchLimit=getQueryFetchLimit();
  final long startFetching=System.currentTimeMillis();
  if (iTarget instanceof ORecordIteratorClusters) {
    final int[] clusterIds=((ORecordIteratorClusters)iTarget).getClusterIds();
    if (clusterIds.length > 1) {
      final long totalRecords=getDatabase().getStorage().count(clusterIds);
      if (totalRecords > OGlobalConfiguration.QUERY_PARALLEL_MINIMUM_RECORDS.getValueAsLong()) {
        parallel=true;
        OLogManager.instance().debug(this,"Activated parallel query automatically. clusterIds=%d, totalRecords=%d",clusterIds.length,totalRecords);
      }
    }
  }
  try {
    if (parallel) {
      parallelExec(iTarget);
    }
 else {
      int queryScanThresholdWarning=OGlobalConfiguration.QUERY_SCAN_THRESHOLD_TIP.getValueAsInteger();
      for (int browsed=0; iTarget.hasNext(); browsed++) {
        final OIdentifiable next=iTarget.next();
        if (next == null)         break;
        final ORID identity=next.getIdentity();
        if (uniqueResult != null) {
          if (uniqueResult.contains(identity))           continue;
          if (identity.isValid())           uniqueResult.add(identity);
        }
        if (!executeSearchRecord(next))         return false;
        if (queryScanThresholdWarning > 0 && browsed > queryScanThresholdWarning && compiledFilter != null) {
          reportTip(String.format("Query '%s' fetched more than %d records: to speed up the execution, create an index or change the query to use an existent index",parserText,queryScanThresholdWarning));
          queryScanThresholdWarning=0;
        }
      }
    }
    return true;
  }
  finally {
    context.setVariable("fetchingFromTargetElapsed",(System.currentTimeMillis() - startFetching));
  }
}
