{
  OLogManager.instance().warn(this,"DISTRIBUTED <-[%s/%s] align request starting from %d.%d",nodeSource,databaseName,lastRunId,lastOperationId);
  int aligned=0;
  final ODistributedServerManager dManager=getDistributedServerManager();
  final String localNode=dManager.getLocalNodeId();
  final OStorageSynchronizer synchronizer=getDatabaseSynchronizer();
  final ODatabaseJournal log=synchronizer.getLog();
  for (Iterator<Long> it=log.browse(new long[]{lastRunId,lastOperationId}); it.hasNext(); ) {
    final long pos=it.next();
    final OAbstractDistributedTask<?> operation=log.getOperation(pos);
    OLogManager.instance().warn(this,"DISTRIBUTED ->[%s/%s] operation %s",nodeSource,databaseName,operation);
    operation.setNodeSource(localNode);
    operation.setDatabaseName(databaseName);
    operation.setMode(EXECUTION_MODE.SYNCHRONOUS);
    dManager.sendOperation2Node(nodeSource,(OAbstractDistributedTask<?>)operation);
    operation.setAsCompleted(synchronizer,pos);
    aligned++;
  }
  OLogManager.instance().warn(this,"DISTRIBUTED ->[%s/%s] aligned %d operations",nodeSource,databaseName,aligned);
  dManager.sendOperation2Node(nodeSource,new OAlignResponseDistributedTask(localNode,databaseName,EXECUTION_MODE.FIRE_AND_FORGET,aligned));
  return aligned;
}
