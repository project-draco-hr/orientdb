{
  final int NUMS=100000;
  tree.put(1,1);
  tree.put(55,1);
  System.out.println("Inserting " + NUMS + " values in OrientDB-TreeMap...");
  for (int i=0; i < NUMS; ++i) {
    tree.put(getKey(i),i);
  }
  data.printSnapshot();
  Assert.assertTrue(tree.size() == NUMS);
  System.out.println("Navigate the tree in ascending order...");
  int counter=0;
  for (  @SuppressWarnings("unused") Comparable<Integer> k : tree.navigableKeySet()) {
    ++counter;
  }
  data.printSnapshot();
  Assert.assertTrue(counter == NUMS);
  System.out.println("Check each value in sequence...");
  for (int i=0; i < NUMS; i++) {
    if (tree.get(getKey(i)) != i)     System.err.println("Find error at " + i + "!!!");
  }
  data.printSnapshot();
  System.out.println("Check each value in inverse order...");
  for (int i=NUMS - 1; i >= 0; i--) {
    if (tree.get(getKey(i)) != i)     System.err.println("Find error at " + i + "!!!");
  }
  data.printSnapshot();
  if (tree instanceof OMVRBTree<?,?>) {
    System.out.println("Total nodes: " + ((OMVRBTree<?,?>)tree).getNodes());
  }
  System.out.println("Delete all the elements one by one...");
  for (int i=NUMS - 1; i >= 0; i--)   tree.remove(getKey(i));
  data.printSnapshot();
  Assert.assertTrue(tree.size() == 0);
  System.out.println("Delete all the elements one by one...");
  for (int i=NUMS - 1; i >= 0; i--)   tree.put(getKey(i),i);
  Assert.assertTrue(tree.size() == NUMS);
  System.out.println("Inserting " + NUMS + " values in OrientDB-TreeMap...");
  for (int i=0; i < NUMS; i++)   tree.remove(getKey(i));
  data.printSnapshot();
  Assert.assertTrue(tree.size() == 0);
}
