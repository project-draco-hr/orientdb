{
  Set<Integer> keys=new HashSet<Integer>();
  MersenneTwisterFast random=new MersenneTwisterFast();
  keys.clear();
  while (keys.size() < KEYS_COUNT) {
    int key=(int)(random.nextGaussian() * Integer.MAX_VALUE / 2 + Integer.MAX_VALUE);
    if (key < 0)     continue;
    localSBTree.put(key,new ORecordId(key % 32000,OClusterPositionFactory.INSTANCE.valueOf(key)));
    keys.add(key);
    Assert.assertEquals(localSBTree.get(key),new ORecordId(key % 32000,OClusterPositionFactory.INSTANCE.valueOf(key)));
  }
  for (  int key : keys)   Assert.assertEquals(localSBTree.get(key),new ORecordId(key % 32000,OClusterPositionFactory.INSTANCE.valueOf(key)));
}
