{
  List<ONodeId> keys=new ArrayList<ONodeId>();
  keys.clear();
  while (keys.size() < KEYS_COUNT) {
    ONodeId key=ONodeId.generateUniqueId();
    OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionNodeId(key));
    if (extendibleHashingCluster.addPhysicalPosition(position)) {
      keys.add(key);
      Assert.assertNotNull(extendibleHashingCluster.getPhysicalPosition(position),"key " + key);
    }
  }
  Collections.sort(keys);
  for (  ONodeId key : keys) {
    OClusterPosition lhKey=extendibleHashingCluster.ceilingPositions(new OPhysicalPosition(new OClusterPositionNodeId(key)))[0].clusterPosition;
    Assert.assertEquals(new OClusterPositionNodeId(key),lhKey,"" + key);
  }
  for (int j=0, keysSize=keys.size() - 1; j < keysSize; j++) {
    ONodeId key=keys.get(j);
    OClusterPosition lhKey=extendibleHashingCluster.higherPositions(new OPhysicalPosition(new OClusterPositionNodeId(key)))[0].clusterPosition;
    Assert.assertEquals(new OClusterPositionNodeId(keys.get(j + 1)),lhKey,"" + j);
  }
}
