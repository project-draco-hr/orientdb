{
  if (!(iCommand instanceof OSerializableStream))   throw new OCommandExecutionException("Cannot serialize the command to be executed to the server side.");
  Object result=null;
  final boolean live=iCommand instanceof OLiveQuery;
  final ODatabaseDocument database=ODatabaseRecordThreadLocal.INSTANCE.get();
  try {
    OChannelBinaryAsynchClient network=null;
    do {
      OStorageRemoteThreadLocal.INSTANCE.get().commandExecuting=true;
      try {
        final boolean asynch=iCommand instanceof OCommandRequestAsynch && ((OCommandRequestAsynch)iCommand).isAsynchronous();
        try {
          network=beginRequest(OChannelBinaryProtocol.REQUEST_COMMAND);
          if (live) {
            network.writeByte((byte)'l');
          }
 else {
            network.writeByte((byte)(asynch ? 'a' : 's'));
          }
          network.writeBytes(OStreamSerializerAnyStreamable.INSTANCE.toStream(iCommand));
        }
  finally {
          endRequest(network);
        }
        try {
          beginResponse(network);
          boolean addNextRecord=true;
          if (asynch) {
            byte status;
            while ((status=network.readByte()) > 0) {
              final ORecord record=(ORecord)OChannelBinaryProtocol.readIdentifiable(network);
              if (record == null)               continue;
switch (status) {
case 1:
                if (addNextRecord) {
                  addNextRecord=iCommand.getResultListener().result(record);
                  database.getLocalCache().updateRecord(record);
                }
              break;
case 2:
            database.getLocalCache().updateRecord(record);
        }
      }
    }
 else {
      result=readSynchResult(network,database);
      if (live) {
        final ODocument doc=((List<ODocument>)result).get(0);
        final Integer token=doc.field("token");
        final Boolean unsubscribe=doc.field("unsubscribe");
        if (token != null) {
          if (Boolean.TRUE.equals(unsubscribe)) {
            this.asynchEventListener.unregisterLiveListener(token);
          }
 else {
            OLiveResultListener listener=(OLiveResultListener)iCommand.getResultListener();
            ORemoteConnectionPool pool=this.engine.getConnectionManager().getPool(network.getServerURL());
            this.asynchEventListener.registerLiveListener(pool,token,listener);
          }
        }
 else {
          throw new OStorageException("Cannot execute live query, returned null token");
        }
      }
    }
    break;
  }
  finally {
    endResponse(network);
  }
}
 catch (OModificationOperationProhibitedException mope) {
  handleDBFreeze();
}
catch (Exception e) {
  handleException(network,"Error on executing command: " + iCommand,e);
}
 finally {
  OStorageRemoteThreadLocal.INSTANCE.get().commandExecuting=false;
}
}
 while (true);
}
  finally {
if (iCommand.getResultListener() != null && !live) iCommand.getResultListener().end();
}
return result;
}
