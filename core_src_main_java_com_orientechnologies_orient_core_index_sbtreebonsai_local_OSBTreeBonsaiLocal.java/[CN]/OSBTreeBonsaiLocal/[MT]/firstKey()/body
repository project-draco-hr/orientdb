{
  startOperation();
  try {
    atomicOperationsManager.acquireReadLock(this);
    try {
      final Lock lock=fileLockManager.acquireSharedLock(fileId);
      try {
        LinkedList<PagePathItemUnit> path=new LinkedList<PagePathItemUnit>();
        OBonsaiBucketPointer bucketPointer=rootBucketPointer;
        OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
        OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,rootBucketPointer.getPageIndex(),false);
        int itemIndex=0;
        OSBTreeBonsaiBucket<K,V> bucket=new OSBTreeBonsaiBucket<K,V>(cacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChangesTree(atomicOperation,cacheEntry),this);
        try {
          while (true) {
            if (bucket.isLeaf()) {
              if (bucket.isEmpty()) {
                if (path.isEmpty()) {
                  return null;
                }
 else {
                  PagePathItemUnit pagePathItemUnit=path.removeLast();
                  bucketPointer=pagePathItemUnit.bucketPointer;
                  itemIndex=pagePathItemUnit.itemIndex + 1;
                }
              }
 else {
                return bucket.getKey(0);
              }
            }
 else {
              if (bucket.isEmpty() || itemIndex > bucket.size()) {
                if (path.isEmpty()) {
                  return null;
                }
 else {
                  PagePathItemUnit pagePathItemUnit=path.removeLast();
                  bucketPointer=pagePathItemUnit.bucketPointer;
                  itemIndex=pagePathItemUnit.itemIndex + 1;
                }
              }
 else {
                path.add(new PagePathItemUnit(bucketPointer,itemIndex));
                if (itemIndex < bucket.size()) {
                  OSBTreeBonsaiBucket.SBTreeEntry<K,V> entry=bucket.getEntry(itemIndex);
                  bucketPointer=entry.leftChild;
                }
 else {
                  OSBTreeBonsaiBucket.SBTreeEntry<K,V> entry=bucket.getEntry(itemIndex - 1);
                  bucketPointer=entry.rightChild;
                }
                itemIndex=0;
              }
            }
            releasePage(atomicOperation,cacheEntry);
            cacheEntry=loadPage(atomicOperation,fileId,bucketPointer.getPageIndex(),false);
            bucket=new OSBTreeBonsaiBucket<K,V>(cacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChangesTree(atomicOperation,cacheEntry),this);
          }
        }
  finally {
          releasePage(atomicOperation,cacheEntry);
        }
      }
  finally {
        lock.unlock();
      }
    }
 catch (    IOException e) {
      throw OException.wrapException(new OSBTreeBonsaiLocalException("Error during finding first key in sbtree [" + getName() + "]",this),e);
    }
 finally {
      atomicOperationsManager.releaseReadLock(this);
    }
  }
  finally {
    completeOperation();
  }
}
