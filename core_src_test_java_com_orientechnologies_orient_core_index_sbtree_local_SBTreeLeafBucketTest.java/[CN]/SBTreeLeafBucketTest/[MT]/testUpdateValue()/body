{
  long seed=System.currentTimeMillis();
  System.out.println("testUpdateValue seed : " + seed);
  TreeSet<Long> keys=new TreeSet<Long>();
  Random random=new Random(seed);
  while (keys.size() < 2 * OSBTreeBucket.MAX_PAGE_SIZE_BYTES / OLongSerializer.LONG_SIZE) {
    keys.add(random.nextLong());
  }
  ODirectMemoryPointer pointer=new ODirectMemoryPointer(OSBTreeBucket.MAX_PAGE_SIZE_BYTES + ODurablePage.PAGE_PADDING);
  OCachePointer cachePointer=new OCachePointer(pointer,new OLogSequenceNumber(0,0));
  OCacheEntry cacheEntry=new OCacheEntry(0,0,cachePointer,false);
  cachePointer.incrementReferrer();
  OSBTreeBucket<Long,OIdentifiable> treeBucket=new OSBTreeBucket<Long,OIdentifiable>(cacheEntry,true,OLongSerializer.INSTANCE,null,OLinkSerializer.INSTANCE,ODurablePage.TrackMode.FULL);
  Map<Long,Integer> keyIndexMap=new HashMap<Long,Integer>();
  int index=0;
  for (  Long key : keys) {
    if (!treeBucket.addEntry(index,new OSBTreeBucket.SBTreeEntry<Long,OIdentifiable>(-1,-1,key,new OSBTreeValue<OIdentifiable>(false,-1,new ORecordId(index,index))),true))     break;
    keyIndexMap.put(key,index);
    index++;
  }
  Assert.assertEquals(keyIndexMap.size(),treeBucket.size());
  for (int i=0; i < treeBucket.size(); i++)   treeBucket.updateValue(i,new OSBTreeValue<OIdentifiable>(false,-1,new ORecordId(i + 5,i + 5)));
  for (  Map.Entry<Long,Integer> keyIndexEntry : keyIndexMap.entrySet()) {
    OSBTreeBucket.SBTreeEntry<Long,OIdentifiable> entry=treeBucket.getEntry(keyIndexEntry.getValue());
    Assert.assertEquals(entry,new OSBTreeBucket.SBTreeEntry<Long,OIdentifiable>(-1,-1,keyIndexEntry.getKey(),new OSBTreeValue<OIdentifiable>(false,-1,new ORecordId(keyIndexEntry.getValue() + 5,keyIndexEntry.getValue() + 5))));
    Assert.assertEquals(keyIndexEntry.getKey(),treeBucket.getKey(keyIndexEntry.getValue()));
  }
  cachePointer.decrementReferrer();
}
