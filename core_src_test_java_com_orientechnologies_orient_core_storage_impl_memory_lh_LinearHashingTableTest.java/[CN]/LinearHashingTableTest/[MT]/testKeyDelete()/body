{
  OLinearHashingTable<OClusterPosition,OPhysicalPosition> linearHashingTable=new OLinearHashingTable<OClusterPosition,OPhysicalPosition>();
  for (int i=0; i < KEYS_COUNT; i++) {
    final OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionLong(i));
    linearHashingTable.put(position);
  }
  for (int i=0; i < KEYS_COUNT; i++) {
    if (i % 3 == 0) {
      final OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionLong(i));
      Assert.assertEquals(position,linearHashingTable.delete(position.clusterPosition));
    }
  }
  for (int i=0; i < KEYS_COUNT; i++) {
    if (i % 3 == 0) {
      OClusterPosition position=new OClusterPositionLong(i);
      Assert.assertFalse(linearHashingTable.contains(position));
    }
 else {
      OClusterPosition position=new OClusterPositionLong(i);
      Assert.assertTrue(linearHashingTable.contains(position));
    }
  }
}
