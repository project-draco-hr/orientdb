{
  if (cachedClusterNodes.size() <= 1)   return;
synchronized (installDatabaseLock) {
    for (    Entry<String,Object> entry : getConfigurationMap().entrySet()) {
      if (entry.getKey().startsWith(CONFIG_DATABASE_PREFIX)) {
        final String databaseName=entry.getKey().substring(CONFIG_DATABASE_PREFIX.length());
        final ODocument config=(ODocument)entry.getValue();
        final Boolean autoDeploy=config.field("autoDeploy");
        if (autoDeploy != null && autoDeploy) {
          final Boolean hotAlignment=config.field("hotAlignment");
          final String dbPath=serverInstance.getDatabaseDirectory() + databaseName;
          final Set<String> configuredDatabases=serverInstance.getAvailableStorageNames().keySet();
          if (configuredDatabases.contains(databaseName)) {
            if (iStartup && hotAlignment != null && !hotAlignment) {
              ODistributedServerLog.warn(this,getLocalNodeName(),null,DIRECTION.NONE,"dropping local database %s in %s and get a fresh copy from a remote node...",databaseName,dbPath);
              Orient.instance().unregisterStorageByName(databaseName);
              OFileUtils.deleteRecursively(new File(dbPath));
            }
 else             continue;
          }
          final OHazelcastDistributedDatabase distrDatabase=messageService.registerDatabase(databaseName);
          distrDatabase.setWaitForTaskType(ODeployDatabaseTask.class,false);
          try {
            distrDatabase.configureDatabase(false,false);
            final Map<String,Object> results=(Map<String,Object>)sendRequest(databaseName,null,new ODeployDatabaseTask(),EXECUTION_MODE.RESPONSE);
            for (            Entry<String,Object> r : results.entrySet()) {
              final Object value=r.getValue();
              if (value instanceof Boolean) {
                continue;
              }
 else               if (value instanceof Exception) {
                ODistributedServerLog.error(this,getLocalNodeName(),r.getKey(),DIRECTION.IN,"error on installing database %s in %s",(Exception)value,databaseName,dbPath);
              }
 else               if (value instanceof ODistributedDatabaseChunk) {
                ODistributedDatabaseChunk chunk=(ODistributedDatabaseChunk)value;
                final String fileName=Orient.getTempPath() + "install_" + databaseName+ ".zip";
                ODistributedServerLog.info(this,getLocalNodeName(),r.getKey(),DIRECTION.IN,"copying remote database '%s' to: %s",databaseName,fileName);
                final File file=new File(fileName);
                if (file.exists())                 file.delete();
                FileOutputStream out=null;
                try {
                  out=new FileOutputStream(fileName,false);
                  long fileSize=writeDatabaseChunk(1,chunk,out);
                  for (int chunkNum=2; !chunk.last; chunkNum++) {
                    distrDatabase.setWaitForTaskType(OCopyDatabaseChunkTask.class,true);
                    final Object result=sendRequest2Node(databaseName,r.getKey(),new OCopyDatabaseChunkTask(chunk.filePath,chunkNum,chunk.offset + chunk.buffer.length),EXECUTION_MODE.RESPONSE);
                    if (result instanceof Boolean)                     continue;
 else {
                      chunk=(ODistributedDatabaseChunk)result;
                      fileSize+=writeDatabaseChunk(chunkNum,chunk,out);
                    }
                  }
                  ODistributedServerLog.info(this,getLocalNodeName(),null,DIRECTION.NONE,"database copied correctly, size=%s",OFileUtils.getSizeAsString(fileSize));
                }
 catch (                Exception e) {
                  ODistributedServerLog.error(this,getLocalNodeName(),null,DIRECTION.NONE,"error on transferring database '%s' to '%s'",e,databaseName,fileName);
                }
 finally {
                  try {
                    if (out != null) {
                      out.flush();
                      out.close();
                    }
                  }
 catch (                  IOException e) {
                  }
                }
                installDatabase(distrDatabase,databaseName,dbPath,r.getKey(),fileName);
                return;
              }
 else               throw new IllegalArgumentException("Type " + value + " not supported");
            }
            throw new ODistributedException("No response received from remote nodes for auto-deploy of database");
          }
  finally {
            distrDatabase.setWaitForTaskType(null,false);
          }
        }
      }
    }
  }
}
