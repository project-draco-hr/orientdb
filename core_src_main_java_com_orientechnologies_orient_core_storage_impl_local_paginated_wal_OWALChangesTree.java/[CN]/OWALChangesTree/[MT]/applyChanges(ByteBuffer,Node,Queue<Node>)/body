{
  if (node.left != null)   applyChanges(buffer,node.left,processedNodes);
  int activeStart=node.start;
  final Iterator<Node> pNodesIterator=processedNodes.iterator();
  while (pNodesIterator.hasNext()) {
    final Node pNode=pNodesIterator.next();
    if (pNode.end > activeStart && pNode.version > node.version)     activeStart=pNode.end;
    if (pNode.end <= node.start)     pNodesIterator.remove();
  }
  processedNodes.add(node);
  if (activeStart < node.end) {
    final int vLength=node.end - activeStart;
    buffer.position(activeStart);
    buffer.put(node.value,activeStart - node.start,vLength);
  }
  if (node.right != null)   applyChanges(buffer,node.right,processedNodes);
}
