{
  final Map<Object,Object> newParams=new HashMap<Object,Object>(params.size());
  for (  Entry<Object,Object> entry : params.entrySet()) {
    final Object value=entry.getValue();
    if (value instanceof Set<?> && ((Set<?>)value).iterator().next() instanceof ORecord) {
      final Set<ORID> newSet=new HashSet<ORID>();
      for (      ORecord rec : (Set<ORecord>)value) {
        newSet.add(rec.getIdentity());
      }
      newParams.put(entry.getKey(),newSet);
    }
 else     if (value instanceof List<?> && ((List<?>)value).get(0) instanceof ORecord) {
      final List<ORID> newList=new ArrayList<ORID>();
      for (      ORecord rec : (List<ORecord>)value) {
        newList.add(rec.getIdentity());
      }
      newParams.put(entry.getKey(),newList);
    }
 else     if (value instanceof Map<?,?> && ((Map<?,?>)value).values().iterator().next() instanceof ORecord) {
      final Map<Object,ORID> newMap=new HashMap<Object,ORID>();
      for (      Entry<?,ORecord> mapEntry : ((Map<?,ORecord>)value).entrySet()) {
        newMap.put(mapEntry.getKey(),mapEntry.getValue().getIdentity());
      }
      newParams.put(entry.getKey(),newMap);
    }
 else     if (entry.getValue() instanceof OIdentifiable) {
      if (!((OIdentifiable)entry.getValue()).getIdentity().isPersistent() && ((OIdentifiable)entry.getValue()).getIdentity().isValid()) {
        throw new ODatabaseException("Impossible use as query parameter a not persistent record");
      }
      newParams.put(entry.getKey(),((OIdentifiable)entry.getValue()).getIdentity());
    }
 else     newParams.put(entry.getKey(),entry.getValue());
  }
  return newParams;
}
