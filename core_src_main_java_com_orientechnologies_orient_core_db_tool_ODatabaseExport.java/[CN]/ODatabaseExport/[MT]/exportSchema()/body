{
  listener.onMessage("\nExporting schema...");
  writer.beginObject(1,true,"schema");
  OSchema s=((OMetadataInternal)database.getMetadata()).getImmutableSchemaSnapshot();
  writer.writeAttribute(2,true,"version",s.getVersion());
  writer.writeAttribute(2,false,"blob-clusters",s.getBlobClusters());
  if (!s.getClasses().isEmpty()) {
    writer.beginCollection(2,true,"classes");
    final List<OClass> classes=new ArrayList<OClass>(s.getClasses());
    Collections.sort(classes);
    for (    OClass cls : classes) {
      if (includeClasses != null) {
        if (!includeClasses.contains(cls.getName().toUpperCase()))         continue;
      }
 else       if (excludeClasses != null) {
        if (excludeClasses.contains(cls.getName().toUpperCase()))         continue;
      }
      writer.beginObject(3,true,null);
      writer.writeAttribute(0,false,"name",cls.getName());
      writer.writeAttribute(0,false,"default-cluster-id",cls.getDefaultClusterId());
      writer.writeAttribute(0,false,"cluster-ids",cls.getClusterIds());
      if (cls.getOverSize() > 1)       writer.writeAttribute(0,false,"oversize",cls.getClassOverSize());
      if (cls.isStrictMode())       writer.writeAttribute(0,false,"strictMode",cls.isStrictMode());
      if (!cls.getSuperClasses().isEmpty())       writer.writeAttribute(0,false,"super-classes",cls.getSuperClassesNames());
      if (cls.getShortName() != null)       writer.writeAttribute(0,false,"short-name",cls.getShortName());
      if (cls.isAbstract())       writer.writeAttribute(0,false,"abstract",cls.isAbstract());
      writer.writeAttribute(0,false,"cluster-selection",cls.getClusterSelection().getName());
      if (!cls.properties().isEmpty()) {
        writer.beginCollection(4,true,"properties");
        final List<OProperty> properties=new ArrayList<OProperty>(cls.declaredProperties());
        Collections.sort(properties);
        for (        OProperty p : properties) {
          writer.beginObject(5,true,null);
          writer.writeAttribute(0,false,"name",p.getName());
          writer.writeAttribute(0,false,"type",p.getType().toString());
          if (p.isMandatory())           writer.writeAttribute(0,false,"mandatory",p.isMandatory());
          if (p.isReadonly())           writer.writeAttribute(0,false,"readonly",p.isReadonly());
          if (p.isNotNull())           writer.writeAttribute(0,false,"not-null",p.isNotNull());
          if (p.getLinkedClass() != null)           writer.writeAttribute(0,false,"linked-class",p.getLinkedClass().getName());
          if (p.getLinkedType() != null)           writer.writeAttribute(0,false,"linked-type",p.getLinkedType().toString());
          if (p.getMin() != null)           writer.writeAttribute(0,false,"min",p.getMin());
          if (p.getMax() != null)           writer.writeAttribute(0,false,"max",p.getMax());
          if (p.getCollate() != null)           writer.writeAttribute(0,false,"collate",p.getCollate().getName());
          if (p.getDefaultValue() != null)           writer.writeAttribute(0,false,"default-value",p.getDefaultValue());
          final Set<String> customKeys=p.getCustomKeys();
          final Map<String,String> custom=new HashMap<String,String>();
          for (          String key : customKeys)           custom.put(key,p.getCustom(key));
          if (!custom.isEmpty())           writer.writeAttribute(0,false,"customFields",custom);
          writer.endObject(0,false);
        }
        writer.endCollection(4,true);
      }
      final Set<String> customKeys=cls.getCustomKeys();
      final Map<String,String> custom=new HashMap<String,String>();
      for (      String key : customKeys)       custom.put(key,cls.getCustom(key));
      if (!custom.isEmpty())       writer.writeAttribute(0,false,"customFields",custom);
      writer.endObject(3,true);
    }
    writer.endCollection(2,true);
  }
  writer.endObject(1,true);
  listener.onMessage("OK (" + s.getClasses().size() + " classes)");
}
