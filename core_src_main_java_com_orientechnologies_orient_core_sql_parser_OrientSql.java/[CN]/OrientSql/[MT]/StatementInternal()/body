{
  OStatementInternal jjtn000=new OStatementInternal(JJTSTATEMENTINTERNAL);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  OStatement result=null;
  try {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SELECT:
case TRAVERSE:
case MATCH:
case INSERT:
case CREATE:
case DELETE:
case UPDATE:
case RETURN:
case PROFILE:
case TRUNCATE:
case FIND:
case ALTER:
case DROP:
case REBUILD:
case OPTIMIZE:
case GRANT:
case REVOKE:
case BEGIN:
case COMMIT:
case IF:
case SLEEP:
case CONSOLE:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SELECT:
case TRAVERSE:
        result=QueryStatement();
      break;
default :
    jj_la1[6]=jj_gen;
  if (jj_2_6(2)) {
    result=DeleteStatement();
  }
 else   if (jj_2_7(2)) {
    result=DeleteVertexStatement();
  }
 else   if (jj_2_8(2)) {
    result=DeleteEdgeStatement();
  }
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INSERT:
      result=InsertStatement();
    break;
default :
  jj_la1[7]=jj_gen;
if (jj_2_9(2)) {
  result=CreateClassStatement();
}
 else if (jj_2_10(2)) {
  result=CreatePropertyStatement();
}
 else if (jj_2_11(2)) {
  result=CreateIndexStatement();
}
 else if (jj_2_12(2)) {
  result=CreateClusterStatement();
}
 else if (jj_2_13(2)) {
  result=CreateLinkStatement();
}
 else if (jj_2_14(2)) {
  result=CreateFunctionStatement();
}
 else if (jj_2_15(2147483647)) {
  result=CreateVertexStatementNoTarget();
}
 else if (jj_2_16(2147483647)) {
  result=CreateVertexStatement();
}
 else if (jj_2_17(2147483647)) {
  result=CreateVertexStatementEmpty();
}
 else if (jj_2_18(2147483647)) {
  result=CreateVertexStatementEmptyNoTarget();
}
 else if (jj_2_19(2147483647)) {
  result=CreateEdgeStatement();
}
 else if (jj_2_20(2147483647)) {
  result=UpdateEdgeStatement();
}
 else if (jj_2_21(2147483647)) {
  result=UpdateStatement();
}
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case MATCH:
    result=MatchStatement();
  break;
case PROFILE:
result=ProfileStorageStatement();
break;
default :
jj_la1[8]=jj_gen;
if (jj_2_22(2147483647)) {
result=TruncateClassStatement();
}
 else if (jj_2_23(2147483647)) {
result=TruncateClusterStatement();
}
 else if (jj_2_24(2147483647)) {
result=FindReferencesStatement();
}
 else if (jj_2_25(2147483647)) {
result=TruncateRecordStatement();
}
 else if (jj_2_26(2147483647)) {
result=AlterClassStatement();
}
 else if (jj_2_27(2147483647)) {
result=DropClassStatement();
}
 else if (jj_2_28(2147483647)) {
result=AlterPropertyStatement();
}
 else if (jj_2_29(2147483647)) {
result=DropPropertyStatement();
}
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case REBUILD:
result=RebuildIndexStatement();
break;
default :
jj_la1[9]=jj_gen;
if (jj_2_30(2)) {
result=DropIndexStatement();
}
 else if (jj_2_31(2147483647)) {
result=AlterClusterStatement();
}
 else if (jj_2_32(2)) {
result=DropClusterStatement();
}
 else if (jj_2_33(2)) {
result=AlterDatabaseStatement();
}
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case OPTIMIZE:
result=OptimizeDatabaseStatement();
break;
case GRANT:
result=GrantStatement();
break;
case REVOKE:
result=RevokeStatement();
break;
case BEGIN:
result=BeginStatement();
break;
case COMMIT:
result=CommitStatement();
break;
case RETURN:
result=ReturnStatement();
break;
case SLEEP:
result=SleepStatement();
break;
case CONSOLE:
result=ConsoleStatement();
break;
case IF:
result=IfStatement();
break;
default :
jj_la1[10]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
}
}
}
}
}
}
}
break;
case EXPLAIN:
result=ExplainStatement();
break;
case LET:
result=LetStatement();
break;
default :
jj_la1[11]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return result;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
