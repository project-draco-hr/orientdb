{
  if (hi < lo)   return null;
  final int mid=(lo + hi) / 2;
  OTreeMapEntry<K,V> left=null;
  if (lo < mid)   left=buildFromSorted(level + 1,lo,mid - 1,redLevel,it,str,defaultVal);
  K key;
  V value;
  if (it != null) {
    if (defaultVal == null) {
      OTreeMapEntry<K,V> entry=(OTreeMapEntry<K,V>)it.next();
      key=entry.getKey();
      value=entry.getValue();
    }
 else {
      key=(K)it.next();
      value=defaultVal;
    }
  }
 else {
    key=(K)str.readObject();
    value=(defaultVal != null ? defaultVal : (V)str.readObject());
  }
  final OTreeMapEntry<K,V> middle=createEntry(key,value);
  if (level == redLevel)   middle.setColor(RED);
  if (left != null) {
    middle.setLeft(left);
    left.setParent(middle);
  }
  if (mid < hi) {
    OTreeMapEntry<K,V> right=buildFromSorted(level + 1,mid + 1,hi,redLevel,it,str,defaultVal);
    middle.setRight(right);
    right.setParent(middle);
  }
  return middle;
}
