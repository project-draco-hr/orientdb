{
  acquireExclusiveLock();
  try {
    long lastPage=diskCache.getFilledUpTo(fileId) - 1;
    boolean isNewPage=false;
    if (lastPage < 0) {
      lastPage=0;
      isNewPage=true;
    }
    OCacheEntry cacheEntry=diskCache.load(fileId,lastPage,false);
    OCachePointer cachePointer=cacheEntry.getCachePointer();
    cachePointer.acquireExclusiveLock();
    try {
      startAtomicOperation();
      final ODurablePage.TrackMode trackMode=getTrackMode();
      OClusterPositionMapBucket bucket=new OClusterPositionMapBucket(cachePointer.getDataPointer(),trackMode);
      if (bucket.isFull()) {
        cachePointer.releaseExclusiveLock();
        diskCache.release(cacheEntry);
        isNewPage=true;
        cacheEntry=diskCache.allocateNewPage(fileId);
        cachePointer=cacheEntry.getCachePointer();
        cachePointer.acquireExclusiveLock();
        bucket=new OClusterPositionMapBucket(cachePointer.getDataPointer(),trackMode);
      }
      final long index=bucket.add(pageIndex,recordPosition);
      final OClusterPosition result=OClusterPositionFactory.INSTANCE.valueOf(index + cacheEntry.getPageIndex() * OClusterPositionMapBucket.MAX_ENTRIES);
      logPageChanges(bucket,fileId,cacheEntry.getPageIndex(),isNewPage);
      cacheEntry.markDirty();
      endAtomicOperation(false);
      return result;
    }
 catch (    Exception e) {
      endAtomicOperation(true);
      throw new OStorageException("Error during creation of mapping between logical adn physical record position.",e);
    }
 finally {
      cachePointer.releaseExclusiveLock();
      diskCache.release(cacheEntry);
    }
  }
  finally {
    releaseExclusiveLock();
  }
}
