{
  ONotInCondition jjtn000=new ONotInCondition(JJTNOTINCONDITION);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  OExpression lastExpression;
  try {
    jjtn000.left=Expression();
    jj_consume_token(NOT);
    InOperator();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LBRACKET:
      jj_consume_token(LBRACKET);
    lastExpression=Expression();
  jjtn000.rightCollection=new java.util.ArrayList();
jjtn000.rightCollection.add(lastExpression);
label_32: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
  ;
break;
default :
jj_la1[152]=jj_gen;
break label_32;
}
jj_consume_token(COMMA);
lastExpression=Expression();
jjtn000.rightCollection.add(lastExpression);
}
jj_consume_token(RBRACKET);
break;
default :
jj_la1[153]=jj_gen;
if (jj_2_87(2)) {
jj_consume_token(LPAREN);
jjtn000.rightStatement=SelectStatement();
jj_consume_token(RPAREN);
}
 else if (jj_2_88(2)) {
jj_consume_token(LPAREN);
jjtn000.rightParam=InputParameter();
jj_consume_token(RPAREN);
}
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case HOOK:
case COLON:
jjtn000.rightParam=InputParameter();
break;
default :
jj_la1[154]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
