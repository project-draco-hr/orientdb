{
  final int[] hash=calculateHash(key);
  byte keySignature=OLinearHashingHashCalculatorFactory.INSTANCE.calculateSignature(key);
  byte signature=primaryIndex.getChainSignature(hash[0]);
  int pageNumberToUse=hash[0];
  int chainDisplacement=primaryIndex.getChainDisplacement(hash[0]);
  byte groupNumber=calculateGroupNumber(hash[0],hash[1]);
  int pageNumber=groupOverflowTable.getPageForGroup(groupNumber);
  int prevPage=hash[0];
  while (true) {
    if (keySignature > signature) {
      if (chainDisplacement >= 253) {
        return false;
      }
 else {
        prevPage=pageNumberToUse;
        pageNumberToUse=pageNumber + chainDisplacement;
        int realPosInSecondaryIndex=pageIndicator.getRealPosInSecondaryIndex(pageNumberToUse);
        signature=secondaryIndex.getChainSignature(realPosInSecondaryIndex);
        chainDisplacement=secondaryIndex.getChainDisplacement(realPosInSecondaryIndex);
      }
    }
 else {
      OLinearHashingBucket bucket=file.get(pageNumberToUse);
      int position=bucket.deleteKey(key);
      if (position >= 0) {
        while (chainDisplacement < 253) {
          prevPage=pageNumberToUse;
          pageNumberToUse=pageNumber + chainDisplacement;
          int realPosInSecondaryIndex=pageIndicator.getRealPosInSecondaryIndex(pageNumberToUse);
          chainDisplacement=secondaryIndex.getChainDisplacement(realPosInSecondaryIndex);
          OLinearHashingBucket secondBucket=file.get(pageNumberToUse);
          List<V> smallestRecords=secondBucket.getSmallestRecords(OLinearHashingBucket.BUCKET_MAX_SIZE - bucket.size);
          if (smallestRecords.isEmpty()) {
          }
 else {
            bucket.add(smallestRecords);
            for (            V smallestRecord : smallestRecords) {
              if (secondBucket.deleteKey(smallestRecord.clusterPosition) < 0) {
                throw new IllegalStateException("error while deleting record to move it to predecessor bucket");
              }
            }
            secondaryIndex.updateSignature(realPosInSecondaryIndex,secondBucket.keys,secondBucket.size);
          }
          if (prevPage == hash[0]) {
            if (primaryIndex.getChainDisplacement(hash[0]) > 253) {
              primaryIndex.updateSignature(hash[0],Byte.MAX_VALUE);
            }
 else {
              primaryIndex.updateSignature(hash[0],bucket.keys,bucket.size);
            }
          }
 else {
            int indexPosition=pageIndicator.getRealPosInSecondaryIndex(prevPage);
            if (primaryIndex.getChainDisplacement(hash[0]) > 253) {
              secondaryIndex.updateSignature(indexPosition,Byte.MAX_VALUE);
            }
 else {
              secondaryIndex.updateSignature(indexPosition,bucket.keys,bucket.size);
            }
          }
          bucket=secondBucket;
        }
        if (pageNumberToUse == hash[0]) {
          int displacement=primaryIndex.decrementDisplacement(hash[0],bucket.size);
          if (displacement <= 253) {
            primaryIndex.updateSignature(hash[0],bucket.keys,bucket.size);
          }
 else {
            primaryIndex.updateSignature(hash[0],Byte.MAX_VALUE);
          }
        }
 else {
          int realPosInSecondaryIndex=pageIndicator.getRealPosInSecondaryIndex(pageNumberToUse);
          if (bucket.size == 0) {
            secondaryIndex.remove(realPosInSecondaryIndex);
            pageIndicator.unset(pageNumberToUse);
            if (prevPage == hash[0]) {
              int displacement=primaryIndex.decrementDisplacement(hash[0],file.get(hash[0]).size,true);
              if (displacement > 253) {
                primaryIndex.updateSignature(hash[0],Byte.MAX_VALUE);
              }
            }
 else {
              int prevIndexPosition=pageIndicator.getRealPosInSecondaryIndex(prevPage);
              int displacement=secondaryIndex.decrementDisplacement(prevIndexPosition,file.get(prevPage).size,true);
              if (displacement > 253) {
                secondaryIndex.updateSignature(prevIndexPosition,Byte.MAX_VALUE);
              }
            }
          }
 else {
            int displacement=secondaryIndex.decrementDisplacement(realPosInSecondaryIndex,bucket.size);
            if (displacement <= 253) {
              secondaryIndex.updateSignature(realPosInSecondaryIndex,bucket.keys,bucket.size);
            }
 else {
              secondaryIndex.updateSignature(realPosInSecondaryIndex,Byte.MAX_VALUE);
            }
          }
        }
      }
 else {
        return false;
      }
      size--;
      mergeBucketIfNeeded();
      return true;
    }
  }
}
