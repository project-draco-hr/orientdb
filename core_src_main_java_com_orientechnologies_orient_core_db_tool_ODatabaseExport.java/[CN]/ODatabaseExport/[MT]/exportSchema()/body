{
  listener.onMessage("\nExporting schema...");
  writer.beginObject(1,true,"schema");
  OSchemaProxy s=(OSchemaProxy)database.getMetadata().getSchema();
  writer.writeAttribute(2,true,"version",s.getVersion());
  if (s.getClasses().size() > 0) {
    writer.beginCollection(2,true,"classes");
    final List<OClass> classes=new ArrayList<OClass>(s.getClasses());
    Collections.sort(classes);
    for (    OClass cls : classes) {
      writer.beginObject(3,true,null);
      writer.writeAttribute(0,false,"name",cls.getName());
      writer.writeAttribute(0,false,"default-cluster-id",cls.getDefaultClusterId());
      writer.writeAttribute(0,false,"cluster-ids",cls.getClusterIds());
      if (cls.getSuperClass() != null)       writer.writeAttribute(0,false,"super-class",cls.getSuperClass().getName());
      if (cls.getShortName() != null)       writer.writeAttribute(0,false,"short-name",cls.getShortName());
      if (cls.properties().size() > 0) {
        writer.beginCollection(4,true,"properties");
        final List<OProperty> properties=new ArrayList<OProperty>(cls.declaredProperties());
        Collections.sort(properties);
        for (        OProperty p : properties) {
          writer.beginObject(5,true,null);
          writer.writeAttribute(0,false,"name",p.getName());
          writer.writeAttribute(0,false,"type",p.getType().toString());
          writer.writeAttribute(0,false,"mandatory",p.isMandatory());
          writer.writeAttribute(0,false,"not-null",p.isNotNull());
          if (p.getLinkedClass() != null)           writer.writeAttribute(0,false,"linked-class",p.getLinkedClass().getName());
          if (p.getLinkedType() != null)           writer.writeAttribute(0,false,"linked-type",p.getLinkedType().toString());
          if (p.getMin() != null)           writer.writeAttribute(0,false,"min",p.getMin());
          if (p.getMax() != null)           writer.writeAttribute(0,false,"max",p.getMax());
          writer.endObject(0,false);
        }
        writer.endCollection(4,true);
      }
      writer.endObject(3,true);
    }
    writer.endCollection(2,true);
  }
  writer.endObject(1,true);
  listener.onMessage("OK (" + s.getClasses().size() + " classes)");
}
