{
  super.onServerStarted(server);
  if (serverStarted++ == (SERVERS - 1)) {
    lastServerOn=true;
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          executeWhen(new Callable<Boolean>(){
            @Override public Boolean call() throws Exception {
              final ODatabaseDocumentTx database=poolFactory.get(getDatabaseURL(serverInstance.get(0)),"admin","admin").acquire();
              try {
                return database.countClass("Person") > (count * SERVERS) * 1 / 3;
              }
  finally {
                database.close();
              }
            }
          }
,new Callable(){
            @Override public Object call() throws Exception {
              Assert.assertTrue("Insert was too fast",inserting);
              banner("SIMULATE FAILURE ON SERVER " + (SERVERS - 1));
              serverInstance.get(SERVERS - 1).crashServer();
              lastServerOn=false;
              executeWhen(new Callable<Boolean>(){
                @Override public Boolean call() throws Exception {
                  final ODatabaseDocumentTx database=poolFactory.get(getDatabaseURL(serverInstance.get(0)),"admin","admin").acquire();
                  try {
                    return database.countClass("Person") > (count * SERVERS) * 2 / 3;
                  }
  finally {
                    database.close();
                  }
                }
              }
,new Callable(){
                @Override public Object call() throws Exception {
                  Assert.assertTrue("Insert was too fast",inserting);
                  banner("RESTARTING SERVER " + (SERVERS - 1) + "...");
                  try {
                    serverInstance.get(SERVERS - 1).startServer(getDistributedServerConfiguration(serverInstance.get(SERVERS - 1)));
                    lastServerOn=true;
                  }
 catch (                  Exception e) {
                    e.printStackTrace();
                  }
                  return null;
                }
              }
);
              return null;
            }
          }
);
        }
 catch (        Exception e) {
          e.printStackTrace();
          Assert.fail("Error on execution flow");
        }
      }
    }
).start();
  }
}
