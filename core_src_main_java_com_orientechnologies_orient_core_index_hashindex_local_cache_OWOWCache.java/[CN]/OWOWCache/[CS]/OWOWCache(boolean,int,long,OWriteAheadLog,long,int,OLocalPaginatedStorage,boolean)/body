{
  filesLock.acquireWriteLock();
  try {
    this.files=new ConcurrentHashMap<Long,OFileClassic>();
    this.syncOnPageFlush=syncOnPageFlush;
    this.pageSize=pageSize;
    this.groupTTL=groupTTL;
    this.writeAheadLog=writeAheadLog;
    this.cacheMaxSize=cacheMaxSize;
    this.storageLocal=storageLocal;
    this.storagePath=storageLocal.getVariableParser().resolveVariables(storageLocal.getStoragePath());
    final OBinarySerializerFactory binarySerializerFactory=storageLocal.getComponentsFactory().binarySerializerFactory;
    this.stringSerializer=binarySerializerFactory.getObjectSerializer(OType.STRING);
    if (checkMinSize && this.cacheMaxSize < MIN_CACHE_SIZE)     this.cacheMaxSize=MIN_CACHE_SIZE;
    if (pageFlushInterval > 0)     commitExecutor.scheduleWithFixedDelay(new PeriodicFlushTask(),pageFlushInterval,pageFlushInterval,TimeUnit.MILLISECONDS);
  }
  finally {
    filesLock.releaseWriteLock();
  }
}
