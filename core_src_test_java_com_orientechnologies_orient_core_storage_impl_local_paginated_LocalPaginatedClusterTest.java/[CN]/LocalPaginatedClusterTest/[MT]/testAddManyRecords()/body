{
  final int records=10000;
  long seed=System.currentTimeMillis();
  MersenneTwisterFast mersenneTwisterFast=new MersenneTwisterFast(seed);
  System.out.println("testAddManyRecords seed : " + seed);
  Map<Long,byte[]> positionRecordMap=new HashMap<Long,byte[]>();
  int recordVersion=0;
  recordVersion++;
  recordVersion++;
  for (int i=0; i < records; i++) {
    int recordSize=mersenneTwisterFast.nextInt(2 * OClusterPage.MAX_RECORD_SIZE) + 1;
    byte[] smallRecord=new byte[recordSize];
    mersenneTwisterFast.nextBytes(smallRecord);
    final OPhysicalPosition physicalPosition=paginatedCluster.createRecord(smallRecord,recordVersion,(byte)2);
    positionRecordMap.put(physicalPosition.clusterPosition,smallRecord);
  }
  for (  Map.Entry<Long,byte[]> entry : positionRecordMap.entrySet()) {
    ORawBuffer rawBuffer=paginatedCluster.readRecord(entry.getKey());
    Assert.assertNotNull(rawBuffer);
    Assert.assertEquals(rawBuffer.version,recordVersion);
    Assert.assertEquals(rawBuffer.buffer,entry.getValue());
    Assert.assertEquals(rawBuffer.recordType,2);
  }
}
