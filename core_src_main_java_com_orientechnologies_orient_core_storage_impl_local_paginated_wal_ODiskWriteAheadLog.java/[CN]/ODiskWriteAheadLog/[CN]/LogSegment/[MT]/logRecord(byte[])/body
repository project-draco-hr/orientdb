{
  flushNewData=true;
  int pageOffset=(int)(filledUpTo % OWALPage.PAGE_SIZE);
  long pageIndex=filledUpTo / OWALPage.PAGE_SIZE;
  if (pageOffset == 0 && pageIndex > 0)   pageIndex--;
  int pos=0;
  boolean firstChunk=true;
  OLogSequenceNumber lsn=null;
  while (pos < record.length) {
    if (currentPage == null) {
      ODirectMemoryPointer pointer=new ODirectMemoryPointer(OWALPage.PAGE_SIZE);
      currentPage=new OWALPage(pointer,true);
      pagesCache.add(currentPage);
      filledUpTo+=OWALPage.RECORDS_OFFSET;
    }
    int freeSpace=currentPage.getFreeSpace();
    if (freeSpace < OWALPage.MIN_RECORD_SIZE) {
      filledUpTo+=freeSpace + OWALPage.RECORDS_OFFSET;
      ODirectMemoryPointer pointer=new ODirectMemoryPointer(OWALPage.PAGE_SIZE);
      currentPage=new OWALPage(pointer,true);
      pagesCache.add(currentPage);
      pageIndex++;
      freeSpace=currentPage.getFreeSpace();
    }
    final OWALPage walPage=currentPage;
synchronized (walPage) {
      final int entrySize=OWALPage.calculateSerializedSize(record.length - pos);
      int addedChunkOffset;
      if (entrySize <= freeSpace) {
        if (pos == 0)         addedChunkOffset=walPage.appendRecord(record,false,!firstChunk);
 else         addedChunkOffset=walPage.appendRecord(Arrays.copyOfRange(record,pos,record.length),false,!firstChunk);
        pos=record.length;
      }
 else {
        int chunkSize=OWALPage.calculateRecordSize(freeSpace);
        if (chunkSize > record.length - pos)         chunkSize=record.length - pos;
        addedChunkOffset=walPage.appendRecord(Arrays.copyOfRange(record,pos,pos + chunkSize),true,!firstChunk);
        pos+=chunkSize;
      }
      if (firstChunk)       lsn=new OLogSequenceNumber(order,pageIndex * OWALPage.PAGE_SIZE + addedChunkOffset);
      int spaceDiff=freeSpace - walPage.getFreeSpace();
      filledUpTo+=spaceDiff;
      firstChunk=false;
    }
  }
  if (pagesCache.size() > maxPagesCacheSize) {
    OLogManager.instance().info(this,"Max cache limit is reached (%d vs. %d), sync flush is performed",maxPagesCacheSize,pagesCache.size());
    flush();
  }
  last=lsn;
  return last;
}
