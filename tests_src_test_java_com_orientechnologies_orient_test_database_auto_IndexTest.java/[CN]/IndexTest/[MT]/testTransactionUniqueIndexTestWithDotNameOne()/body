{
  ODatabaseDocumentTx db=new ODatabaseDocumentTx(database.getURL());
  db.open("admin","admin");
  if (!db.getMetadata().getSchema().existsClass("TransactionUniqueIndexWithDotTest")) {
    final OClass termClass=db.getMetadata().getSchema().createClass("TransactionUniqueIndexWithDotTest");
    termClass.createProperty("label",OType.STRING).createIndex(INDEX_TYPE.UNIQUE);
    db.getMetadata().getSchema().save();
  }
  ODocument docOne=new ODocument("TransactionUniqueIndexWithDotTest");
  docOne.field("label","A");
  docOne.save();
  final List<ODocument> resultBeforeCommit=db.query(new OSQLSynchQuery<ODocument>("select from  index:TransactionUniqueIndexWithDotTest.label"));
  Assert.assertEquals(resultBeforeCommit.size(),1);
  long countClassBefore=db.countClass("TransactionUniqueIndexWithDotTest");
  db.begin();
  try {
    ODocument docTwo=new ODocument("TransactionUniqueIndexWithDotTest");
    docTwo.field("label","A");
    docTwo.save();
    db.commit();
    Assert.fail();
  }
 catch (  OResponseProcessingException e) {
    Assert.assertTrue(e.getCause() instanceof ORecordDuplicatedException);
  }
catch (  ORecordDuplicatedException oie) {
  }
  Assert.assertEquals(((List<ODocument>)db.command(new OCommandSQL("select from TransactionUniqueIndexWithDotTest")).execute()).size(),countClassBefore);
  final List<ODocument> resultAfterCommit=db.query(new OSQLSynchQuery<ODocument>("select from  index:TransactionUniqueIndexWithDotTest.label"));
  Assert.assertEquals(resultAfterCommit.size(),1);
}
