{
  OType[] numberTypes=new OType[]{OType.BYTE,OType.DOUBLE,OType.FLOAT,OType.SHORT,OType.INTEGER,OType.LONG};
  for (  OType t : numberTypes) {
    if (sourceType == OType.DATETIME && t == OType.BYTE)     continue;
    testEquals(sourceType,t);
  }
  for (  OType t : numberTypes) {
    testEquals(t,sourceType);
  }
  if (sourceType != OType.DATETIME) {
    Assert.assertTrue(comparator.isEqual(field(sourceType,value10AsSourceType),field(OType.STRING,value10AsSourceType.toString())));
    Assert.assertFalse(comparator.isEqual(field(sourceType,value10AsSourceType),field(OType.STRING,"9")));
    Assert.assertFalse(comparator.isEqual(field(sourceType,value10AsSourceType),field(OType.STRING,"11")));
    Assert.assertFalse(comparator.isEqual(field(sourceType,value10AsSourceType.intValue() * 2),field(OType.STRING,"11")));
    Assert.assertTrue(comparator.isEqual(field(OType.STRING,value10AsSourceType.toString()),field(sourceType,value10AsSourceType)));
    Assert.assertFalse(comparator.isEqual(field(OType.STRING,value10AsSourceType.toString()),field(sourceType,value10AsSourceType.intValue() - 1)));
    Assert.assertFalse(comparator.isEqual(field(OType.STRING,value10AsSourceType.toString()),field(sourceType,value10AsSourceType.intValue() + 1)));
    Assert.assertFalse(comparator.isEqual(field(OType.STRING,"" + value10AsSourceType.intValue() * 2),field(sourceType,value10AsSourceType.intValue())));
  }
}
