{
  ODocument record1=new ODocument();
  record1.field("value","This is the first version").save();
  final ODatabaseListener listener=new ODatabaseListener(){
    @Override public void onAfterTxCommit(    ODatabase iDatabase){
    }
    @Override public void onAfterTxRollback(    ODatabase iDatabase){
    }
    @Override public void onBeforeTxBegin(    ODatabase iDatabase){
    }
    @Override public void onBeforeTxCommit(    ODatabase iDatabase){
      throw new RuntimeException("Rollback test");
    }
    @Override public void onBeforeTxRollback(    ODatabase iDatabase){
    }
    @Override public void onClose(    ODatabase iDatabase){
    }
    @Override public void onBeforeCommand(    OCommandRequestText iCommand,    OCommandExecutor executor){
    }
    @Override public void onAfterCommand(    OCommandRequestText iCommand,    OCommandExecutor executor,    Object result){
    }
    @Override public void onCreate(    ODatabase iDatabase){
    }
    @Override public void onDelete(    ODatabase iDatabase){
    }
    @Override public void onOpen(    ODatabase iDatabase){
    }
    @Override public boolean onCorruptionRepairDatabase(    ODatabase iDatabase,    final String iReason,    String iWhatWillbeFixed){
      return true;
    }
  }
;
  database.registerListener(listener);
  database.begin();
  try {
    database.commit();
    Assert.assertTrue(false);
  }
 catch (  OTransactionException e) {
    Assert.assertTrue(true);
  }
 finally {
    database.unregisterListener(listener);
  }
}
