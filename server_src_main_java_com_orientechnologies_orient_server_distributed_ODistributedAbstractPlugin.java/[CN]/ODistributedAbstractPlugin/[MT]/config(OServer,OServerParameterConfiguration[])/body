{
  serverInstance=oServer;
  oServer.setVariable("ODistributedAbstractPlugin",this);
  for (  OServerParameterConfiguration param : iParams) {
    if (param.name.equalsIgnoreCase("enabled")) {
      if (!Boolean.parseBoolean(OSystemVariableResolver.resolveSystemVariables(param.value))) {
        enabled=false;
        return;
      }
    }
 else     if (param.name.equalsIgnoreCase("alias"))     alias=param.value;
 else     if (param.name.startsWith(PAR_DEF_DISTRIB_DB_CONFIG)) {
      if (loadDatabaseConfiguration("*",OSystemVariableResolver.resolveSystemVariables(param.value)) == null)       throw new OConfigurationException("Error on loading distributed database configuration");
    }
 else     if (param.name.equalsIgnoreCase("conflict.resolver.impl"))     try {
      confictResolverClass=(Class<? extends OReplicationConflictResolver>)Class.forName(param.value);
    }
 catch (    ClassNotFoundException e) {
      OLogManager.instance().error(this,"Cannot find the conflict resolver implementation '%s'",e,param.value);
    }
 else     if (param.name.equalsIgnoreCase("alignment.startup"))     alignmentStartup=Boolean.parseBoolean(param.value);
 else     if (param.name.equalsIgnoreCase("alignment.timer"))     alignmentTimer=Integer.parseInt(param.value);
 else     if (param.name.startsWith("replication.strategy.")) {
      try {
        strategies.put(param.name.substring("replication.strategy.".length()),(OReplicationStrategy)Class.forName(param.value).newInstance());
      }
 catch (      Exception e) {
        OLogManager.instance().error(this,"Cannot create replication strategy instance '%s'",e,param.value);
        e.printStackTrace();
      }
    }
  }
synchronized (databaseConfiguration) {
    if (!databaseConfiguration.containsKey("*"))     throw new OConfigurationException("Invalid cluster configuration: cannot find settings '" + PAR_DEF_DISTRIB_DB_CONFIG + "' for the default database");
  }
  if (serverInstance.getUser(REPLICATOR_USER) == null)   try {
    serverInstance.addUser(REPLICATOR_USER,null,"database.passthrough");
    serverInstance.saveConfiguration();
  }
 catch (  IOException e) {
    throw new OConfigurationException("Error on creating 'replicator' user",e);
  }
}
