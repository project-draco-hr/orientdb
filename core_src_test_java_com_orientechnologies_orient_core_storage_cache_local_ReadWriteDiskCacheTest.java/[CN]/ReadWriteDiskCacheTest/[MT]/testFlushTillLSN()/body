{
  closeBufferAndDeleteFile();
  File file=new File(storageLocal.getConfiguration().getDirectory());
  if (!file.exists())   file.mkdir();
  writeAheadLog=new ODiskWriteAheadLog(1024,-1,10 * 1024,null,storageLocal);
  final OStorageSegmentConfiguration segmentConfiguration=new OStorageSegmentConfiguration(storageLocal.getConfiguration(),"readWriteDiskCacheTest.tst",0);
  segmentConfiguration.fileType=OFileClassic.NAME;
  writeBuffer=new OWOWCache(false,8 + systemOffset,10000,writeAheadLog,100,2 * (8 + systemOffset + 2 * OWOWCache.PAGE_PADDING),2 * (8 + systemOffset + 2 * OWOWCache.PAGE_PADDING) + 4 * (8 + systemOffset + 2 * OWOWCache.PAGE_PADDING),storageLocal,false,10);
  readBuffer=new O2QCache(4 * (8 + systemOffset + 2 * OWOWCache.PAGE_PADDING),8 + systemOffset,false);
  long fileId=readBuffer.addFile(fileName,writeBuffer);
  OLogSequenceNumber lsnToFlush=null;
  for (int i=0; i < 8; i++) {
    OCacheEntry cacheEntry=readBuffer.load(fileId,i,false,writeBuffer,0);
    if (cacheEntry == null) {
      cacheEntry=readBuffer.allocateNewPage(fileId,writeBuffer);
      Assert.assertEquals(cacheEntry.getPageIndex(),i);
    }
    OCachePointer dataPointer=cacheEntry.getCachePointer();
    dataPointer.acquireExclusiveLock();
    OLogSequenceNumber pageLSN=writeAheadLog.log(new WriteAheadLogTest.TestRecord(30,false));
    setLsn(dataPointer.getDataPointer(),pageLSN);
    lsnToFlush=pageLSN;
    cacheEntry.markDirty();
    dataPointer.releaseExclusiveLock();
    readBuffer.release(cacheEntry,writeBuffer);
  }
  Thread.sleep(1000);
  Assert.assertEquals(writeAheadLog.getFlushedLsn(),lsnToFlush);
}
