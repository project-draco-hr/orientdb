{
  listener.onMessage("\nNon merge mode (-merge=false): removing all default non security classes");
  OSchema schema=database.getMetadata().getSchema();
  Collection<OClass> classes=schema.getClasses();
  OClass orole=schema.getClass(ORole.CLASS_NAME);
  OClass ouser=schema.getClass(OUser.CLASS_NAME);
  OClass oidentity=schema.getClass(OIdentity.CLASS_NAME);
  final Map<String,OClass> classesToDrop=new HashMap<String,OClass>();
  for (  OClass dbClass : classes) {
    String className=dbClass.getName();
    if (!dbClass.isSuperClassOf(orole) && !dbClass.isSuperClassOf(ouser) && !dbClass.isSuperClassOf(oidentity)) {
      classesToDrop.put(className,dbClass);
    }
  }
  int removedClasses=0;
  while (!classesToDrop.isEmpty()) {
    final AbstractList<String> classesReadyToDrop=new ArrayList<String>();
    for (    String className : classesToDrop.keySet()) {
      boolean isSuperClass=false;
      for (      OClass dbClass : classesToDrop.values()) {
        List<OClass> parentClasses=dbClass.getSuperClasses();
        if (parentClasses != null) {
          for (          OClass parentClass : parentClasses) {
            if (className.equalsIgnoreCase(parentClass.getName())) {
              isSuperClass=true;
              break;
            }
          }
        }
      }
      if (!isSuperClass) {
        classesReadyToDrop.add(className);
      }
    }
    for (    String className : classesReadyToDrop) {
      schema.dropClass(className);
      classesToDrop.remove(className);
      removedClasses++;
      listener.onMessage("\n- Class " + className + " was removed.");
    }
  }
  schema.save();
  schema.reload();
  listener.onMessage("\nRemoved " + removedClasses + " classes.");
}
