{
  int entryPosition=getIntValue(entryIndex * OIntegerSerializer.INT_SIZE + POSITIONS_ARRAY_OFFSET);
  if (isLeaf) {
    K key=deserializeFromDirectMemory(keySerializer,entryPosition);
    entryPosition+=getObjectSizeInDirectMemory(keySerializer,entryPosition);
    boolean isLinkValue=getByteValue(entryPosition) > 0;
    long link=-1;
    V value=null;
    if (isLinkValue)     link=deserializeFromDirectMemory(OLongSerializer.INSTANCE,entryPosition + OByteSerializer.BYTE_SIZE);
 else     value=deserializeFromDirectMemory(valueSerializer,entryPosition + OByteSerializer.BYTE_SIZE);
    return new SBTreeEntry<K,V>(-1,-1,key,new OSBTreeValue<V>(link >= 0,link,value));
  }
 else {
    long leftChild=getLongValue(entryPosition);
    entryPosition+=OLongSerializer.LONG_SIZE;
    long rightChild=getLongValue(entryPosition);
    entryPosition+=OLongSerializer.LONG_SIZE;
    K key=deserializeFromDirectMemory(keySerializer,entryPosition);
    return new SBTreeEntry<K,V>(leftChild,rightChild,key,null);
  }
}
