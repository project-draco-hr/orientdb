{
  Object joinRuntimeValue=null;
  if (joinFieldName != null)   joinRuntimeValue=((ODocument)input).field(joinFieldName);
 else   if (joinValue != null)   joinRuntimeValue=resolve(joinValue);
  Object result=lookup(joinRuntimeValue);
  if (result != null) {
    if (linkFieldType != null) {
      if (linkFieldType == OType.LINK) {
        if (result instanceof Collection<?>) {
          if (!((Collection)result).isEmpty())           result=((Collection)result).iterator().next();
 else           result=null;
        }
      }
 else       if (linkFieldType == OType.LINKSET) {
        if (!(result instanceof Collection)) {
          final Set<OIdentifiable> res=new HashSet<OIdentifiable>();
          res.add((OIdentifiable)result);
          result=res;
        }
      }
 else       if (linkFieldType == OType.LINKLIST) {
        if (!(result instanceof Collection)) {
          final List<OIdentifiable> res=new ArrayList<OIdentifiable>();
          res.add((OIdentifiable)result);
          result=res;
        }
      }
    }
    if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
        if (lookup != null) {
          final String[] lookupParts=lookup.split("\\.");
          final ODocument linkedDoc=new ODocument(lookupParts[0]);
          linkedDoc.field(lookupParts[1],joinRuntimeValue);
          linkedDoc.save();
          result=linkedDoc;
        }
 else         throw new OConfigurationException("Cannot create linked document because target class is unknown. Use 'lookup' field");
      break;
case ERROR:
    processor.getStats().incrementErrors();
  log("%s: ERROR Cannot resolve join for value '%s'",getName(),joinRuntimeValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log("%s: WARN Cannot resolve join for value '%s'",getName(),joinRuntimeValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException("[Link transformer] Cannot resolve join for value '" + joinRuntimeValue + "'");
}
}
}
((ODocument)input).field(linkFieldName,result);
return input;
}
