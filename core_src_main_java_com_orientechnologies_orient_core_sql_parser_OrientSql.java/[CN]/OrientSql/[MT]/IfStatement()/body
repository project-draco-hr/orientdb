{
  OIfStatement jjtn000=new OIfStatement(JJTIFSTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  OStatement last;
  try {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    jjtn000.expression=OrBlock();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_58:     while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SELECT:
case TRAVERSE:
case MATCH:
case INSERT:
case CREATE:
case DELETE:
case UPDATE:
case RETURN:
case LET:
case PROFILE:
case TRUNCATE:
case FIND:
case ALTER:
case DROP:
case REBUILD:
case OPTIMIZE:
case EXPLAIN:
case GRANT:
case REVOKE:
case BEGIN:
case COMMIT:
case IF:
case SLEEP:
case CONSOLE:
case SEMICOLON:
        ;
      break;
default :
    jj_la1[343]=jj_gen;
  break label_58;
}
if (jj_2_136(2147483647)) {
last=StatementSemicolon();
jjtn000.statements.add(last);
}
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IF:
  last=IfStatement();
jjtn000.statements.add(last);
break;
case SEMICOLON:
jj_consume_token(SEMICOLON);
break;
default :
jj_la1[344]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
}
jj_consume_token(RBRACE);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
