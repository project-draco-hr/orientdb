{
  OSessionStoragePerformanceStatistic sessionStoragePerformanceStatistic=new OSessionStoragePerformanceStatistic(1024,new OSessionStoragePerformanceStatistic.NanoTimer(){
    private long counter=0;
    @Override public long getNano(){
      return counter+=100;
    }
  }
);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesReadFromCache(),0);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getReadSpeedFromCacheInMB(),-1);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getReadSpeedFromCacheInMB(),-1);
  sessionStoragePerformanceStatistic.startCommitTimer();
  for (int i=0; i < 100; i++) {
    sessionStoragePerformanceStatistic.startPageReadFromCacheTimer();
    sessionStoragePerformanceStatistic.stopPageReadFromCacheTimer();
  }
  sessionStoragePerformanceStatistic.stopCommitTimer();
  Assert.assertEquals(sessionStoragePerformanceStatistic.getAmountOfPagesReadFromCache(),100);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getReadSpeedFromCacheInPages(),10000000);
  Assert.assertEquals(sessionStoragePerformanceStatistic.getReadSpeedFromCacheInMB(),10000000 / 1024);
  final ODocument doc=sessionStoragePerformanceStatistic.toDocument();
  Assert.assertEquals(doc.field("amountOfPagesReadFromCache"),100L);
  Assert.assertEquals(doc.field("readSpeedFromCacheInPages"),10000000L);
  Assert.assertEquals(doc.field("readSpeedFromCacheInMB"),10000000L / 1024);
}
