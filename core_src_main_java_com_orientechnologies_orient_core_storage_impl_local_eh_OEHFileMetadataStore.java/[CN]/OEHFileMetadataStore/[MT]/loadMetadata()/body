{
  final int len=file.readInt(0);
  final OEHFileMetadata[] metadata=new OEHFileMetadata[len];
  final int bufferSize=file.readInt(OIntegerSerializer.INT_SIZE);
  final byte[] buffer=new byte[bufferSize];
  file.read(2 * OIntegerSerializer.INT_SIZE,buffer,buffer.length);
  int offset=0;
  int i=0;
  while (offset < bufferSize) {
    final String incrementSize=OStringSerializer.INSTANCE.deserializeNative(buffer,offset);
    offset+=OStringSerializer.INSTANCE.getObjectSize(incrementSize);
    final String path=OStringSerializer.INSTANCE.deserializeNative(buffer,offset);
    offset+=OStringSerializer.INSTANCE.getObjectSize(path);
    final String type=OStringSerializer.INSTANCE.deserializeNative(buffer,offset);
    offset+=OStringSerializer.INSTANCE.getObjectSize(type);
    final long bucketsCount=OLongSerializer.INSTANCE.deserializeNative(buffer,offset);
    offset+=OLongSerializer.LONG_SIZE;
    final long tombstone=OLongSerializer.INSTANCE.deserializeNative(buffer,offset);
    offset+=OLongSerializer.LONG_SIZE;
    final OStorageFileConfiguration fileConfiguration=new OStorageFileConfiguration(null,path,type,"0",incrementSize);
    final OSingleFileSegment singleFileSegment=new OSingleFileSegment(storage,fileConfiguration);
    final OEHFileMetadata bucketFile=new OEHFileMetadata();
    bucketFile.setFile(singleFileSegment);
    bucketFile.setBucketsCount(bucketsCount);
    bucketFile.setTombstonePosition(tombstone);
    metadata[i]=bucketFile;
    i++;
  }
  return metadata;
}
