{
  final OTransactionIndexChanges indexChanges=database.getTransaction().getIndexChanges(delegate.getName());
  if (indexChanges == null)   return super.iterateEntries(keys,ascSortOrder);
  final List<Object> sortedKeys=new ArrayList<Object>(keys);
  if (ascSortOrder)   Collections.sort(sortedKeys,ODefaultComparator.INSTANCE);
 else   Collections.sort(sortedKeys,Collections.reverseOrder(ODefaultComparator.INSTANCE));
  final OIndexCursor txCursor=new OIndexAbstractCursor(){
    private Iterator<Object> keysIterator=sortedKeys.iterator();
    private Iterator<OIdentifiable> valuesIterator=new OEmptyIterator<OIdentifiable>();
    private Object key;
    @Override public Map.Entry<Object,OIdentifiable> nextEntry(){
      if (valuesIterator.hasNext())       return nextEntryInternal();
      if (keysIterator == null)       return null;
      Set<OIdentifiable> result=null;
      while (result == null && keysIterator.hasNext()) {
        key=keysIterator.next();
        result=calculateTxValue(key,indexChanges);
        if (result != null && result.isEmpty())         result=null;
      }
      if (result == null) {
        keysIterator=null;
        return null;
      }
      valuesIterator=result.iterator();
      return nextEntryInternal();
    }
    private Map.Entry<Object,OIdentifiable> nextEntryInternal(){
      final OIdentifiable identifiable=valuesIterator.next();
      return new Map.Entry<Object,OIdentifiable>(){
        @Override public Object getKey(){
          return key;
        }
        @Override public OIdentifiable getValue(){
          return identifiable;
        }
        @Override public OIdentifiable setValue(        OIdentifiable value){
          throw new UnsupportedOperationException("setValue");
        }
      }
;
    }
  }
;
  if (indexChanges.cleared)   return txCursor;
  final OIndexCursor backedCursor=super.iterateEntries(keys,ascSortOrder);
  return new OIndexTxCursor(txCursor,backedCursor,ascSortOrder,indexChanges);
}
