{
  waitNodeIsOnline();
  if (Boolean.FALSE.equals(tokenBased) || requestType == OChannelBinaryProtocol.REQUEST_CONNECT || requestType == OChannelBinaryProtocol.REQUEST_DB_OPEN || (tokenHandler == null)) {
    connection=OClientConnectionManager.instance().getConnection(clientTxId,this);
    if (clientTxId < 0) {
      short protocolId=0;
      if (connection != null)       protocolId=connection.data.protocolVersion;
      connection=OClientConnectionManager.instance().connect(this);
      if (connection != null) {
        connection.data.protocolVersion=protocolId;
        connection.data.sessionId=clientTxId;
      }
    }
  }
 else {
    if (requestType != OChannelBinaryProtocol.REQUEST_CONNECT && requestType != OChannelBinaryProtocol.REQUEST_DB_OPEN) {
      byte[] tokenBytes=channel.readBytes();
      try {
        this.token=tokenHandler.parseBinaryToken(tokenBytes);
      }
 catch (      Exception e) {
        throw new OException("error on token parse",e);
      }
      if (this.token == null || !this.token.getIsVerified()) {
        throw new OSecurityException("The token provided is not a valid token, signature doesn't match");
      }
      if (tokenBased == null)       tokenBased=Boolean.TRUE;
      if (token != null) {
        if (!tokenHandler.validateBinaryToken(token)) {
          throw new OSecurityException("The token provided is expired");
        }
        connection=new OClientConnection(clientTxId,this);
        if (tokenHandler != null)         connection.data=tokenHandler.getProtocolDataFromToken(token);
        String db=token.getDatabase();
        String type=token.getDatabaseType();
        if (db != null && type != null) {
          final ODatabaseDocumentTx database=new ODatabaseDocumentTx(type + ":" + db);
          if (connection.data.serverUser) {
            database.resetInitialization();
            database.setProperty(ODatabase.OPTIONS.SECURITY.toString(),OSecurityServerUser.class);
            database.open(connection.data.serverUsername,null);
          }
 else           database.open(token);
          connection.database=database;
        }
        if (connection.data.serverUser) {
          connection.serverUser=server.getUser(connection.data.serverUsername);
        }
      }
    }
  }
  if (connection != null) {
    connection.acquire();
    if (connection.database != null) {
      connection.database.activateOnCurrentThread();
      connection.data.lastDatabase=connection.database.getName();
      connection.data.lastUser=connection.database.getUser() != null ? connection.database.getUser().getName() : null;
    }
 else {
      connection.data.lastDatabase=null;
      connection.data.lastUser=null;
    }
    ++connection.data.totalRequests;
    setDataCommandInfo("Listening");
    connection.data.commandDetail="-";
    connection.data.lastCommandReceived=System.currentTimeMillis();
  }
 else {
    ODatabaseRecordThreadLocal.INSTANCE.remove();
    if (requestType != OChannelBinaryProtocol.REQUEST_DB_CLOSE && requestType != OChannelBinaryProtocol.REQUEST_SHUTDOWN) {
      OLogManager.instance().debug(this,"Found unknown session %d, shutdown current connection",clientTxId);
      shutdown();
      throw new OIOException("Found unknown session " + clientTxId);
    }
  }
  OServerPluginHelper.invokeHandlerCallbackOnBeforeClientRequest(server,connection,(byte)requestType);
}
