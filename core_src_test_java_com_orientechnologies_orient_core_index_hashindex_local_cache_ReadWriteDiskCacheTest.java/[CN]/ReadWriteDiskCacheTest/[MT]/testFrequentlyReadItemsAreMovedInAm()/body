{
  long fileId=buffer.openFile(fileName);
  OCacheEntry[] entries=new OCacheEntry[10];
  for (int i=0; i < 10; i++) {
    entries[i]=buffer.load(fileId,i,false);
    entries[i].getCachePointer().acquireExclusiveLock();
    entries[i].markDirty();
    entries[i].getCachePointer().getDataPointer().set(systemOffset,new byte[]{(byte)i,1,2,seed,4,5,6,(byte)i},0,8);
    setLsn(entries[i].getCachePointer().getDataPointer(),new OLogSequenceNumber(1,i));
    entries[i].getCachePointer().releaseExclusiveLock();
    buffer.release(entries[i]);
  }
  buffer.clear();
  for (int i=0; i < 10; i++)   assertFile(i,new byte[]{(byte)i,1,2,seed,4,5,6,(byte)i},new OLogSequenceNumber(1,i));
  for (int i=0; i < 8; i++) {
    entries[i]=buffer.load(fileId,i,false);
    buffer.release(entries[i]);
  }
  for (int i=2; i < 4; i++) {
    entries[i]=buffer.load(fileId,i,false);
    buffer.release(entries[i]);
  }
  LRUList am=buffer.getAm();
  LRUList a1in=buffer.getA1in();
  LRUList a1out=buffer.getA1out();
  Assert.assertEquals(am.size(),2);
  Assert.assertEquals(a1in.size(),2);
  Assert.assertEquals(a1out.size(),2);
  for (int i=2; i < 4; i++) {
    OCacheEntry lruEntry=generateEntry(fileId,i,entries[i].getCachePointer().getDataPointer(),false,new OLogSequenceNumber(1,i));
    Assert.assertEquals(am.get(fileId,i),lruEntry);
  }
  for (int i=4; i < 6; i++) {
    OCacheEntry lruEntry=generateRemovedEntry(fileId,i);
    Assert.assertEquals(a1out.get(fileId,i),lruEntry);
  }
  for (int i=6; i < 8; i++) {
    OCacheEntry lruEntry=generateEntry(fileId,i,entries[i].getCachePointer().getDataPointer(),false,new OLogSequenceNumber(1,i));
    Assert.assertEquals(a1in.get(fileId,i),lruEntry);
  }
}
