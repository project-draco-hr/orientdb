{
  Object fieldValue;
  if (p.isMandatory())   if (!iRecord.containsField(p.getName()))   throw new OValidationException("The field '" + p.getName() + "' is mandatory");
  if (iRecord instanceof ODocument)   fieldValue=((ODocument)iRecord).rawField(p.getName());
 else   fieldValue=iRecord.field(p.getName());
  if (p.isNotNull() && fieldValue == null)   throw new OValidationException("The field '" + p.getName() + "' is null");
  if (fieldValue != null && p.getRegexp() != null) {
    if (!fieldValue.toString().matches(p.getRegexp()))     throw new OValidationException("The field '" + p.getName() + "' doesn't match the regular expression '"+ p.getRegexp()+ "'. Field value is: "+ fieldValue);
  }
  final OType type=p.getType();
  if (fieldValue != null && type != null) {
switch (type) {
case LINK:
      if (!(fieldValue instanceof OIdentifiable))       throw new OValidationException("The field '" + p.getName() + "' has been declared as LINK but the value is not a record or a record-id");
    final ORecord<?> linkedRecord=((OIdentifiable)fieldValue).getRecord();
  if (linkedRecord != null && p.getLinkedClass() != null) {
    if (!(linkedRecord instanceof ODocument))     throw new OValidationException("The field '" + p.getName() + "' has been declared as LINK of type '"+ p.getLinkedClass()+ "' but the value is the record "+ linkedRecord.getIdentity()+ " that is not a document");
    if (((ODocument)linkedRecord).getSchemaClass() != null && !p.getLinkedClass().isSuperClassOf(((ODocument)linkedRecord).getSchemaClass()))     throw new OValidationException("The field '" + p.getName() + "' has been declared as LINK of type '"+ p.getLinkedClass().getName()+ "' but the value is the document "+ linkedRecord.getIdentity()+ " of class '"+ ((ODocument)linkedRecord).getSchemaClass()+ "'");
  }
}
}
if (p.getMin() != null) {
String min=p.getMin();
if (p.getType().equals(OType.STRING) && (fieldValue != null && ((String)fieldValue).length() < Integer.parseInt(min))) throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' contains less characters than "+ min+ " requested");
 else if (p.getType().equals(OType.BINARY) && (fieldValue != null && ((byte[])fieldValue).length < Integer.parseInt(min))) throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' contains less bytes than "+ min+ " requested");
 else if (p.getType().equals(OType.INTEGER) && (fieldValue != null && type.asInt(fieldValue) < Integer.parseInt(min))) throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' is minor than "+ min);
 else if (p.getType().equals(OType.LONG) && (fieldValue != null && type.asLong(fieldValue) < Long.parseLong(min))) throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' is minor than "+ min);
 else if (p.getType().equals(OType.FLOAT) && (fieldValue != null && type.asFloat(fieldValue) < Float.parseFloat(min))) throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' is minor than "+ min);
 else if (p.getType().equals(OType.DOUBLE) && (fieldValue != null && type.asDouble(fieldValue) < Double.parseDouble(min))) throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' is minor than "+ min);
 else if (p.getType().equals(OType.DATE)) {
try {
  if (fieldValue != null && ((Date)fieldValue).before(iRecord.getDatabase().getStorage().getConfiguration().getDateFormatInstance().parse(min)))   throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' contains the date "+ fieldValue+ "that is before the date accepted ("+ min+ ")");
}
 catch (ParseException e) {
}
}
 else if (p.getType().equals(OType.DATETIME)) {
try {
  if (fieldValue != null && ((Date)fieldValue).before(iRecord.getDatabase().getStorage().getConfiguration().getDateTimeFormatInstance().parse(min)))   throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' contains the datetime "+ fieldValue+ "that is before the datetime accepted ("+ min+ ")");
}
 catch (ParseException e) {
}
}
 else if ((p.getType().equals(OType.EMBEDDEDLIST) || p.getType().equals(OType.EMBEDDEDSET) || p.getType().equals(OType.LINKLIST)|| p.getType().equals(OType.LINKSET)) && (fieldValue != null && ((Collection<?>)fieldValue).size() < Integer.parseInt(min))) throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' contains less items then "+ min+ " requested");
}
if (p.getMax() != null) {
String max=p.getMax();
if (p.getType().equals(OType.STRING) && (fieldValue != null && ((String)fieldValue).length() > Integer.parseInt(max))) throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' contains more characters than "+ max+ " requested");
 else if (p.getType().equals(OType.BINARY) && (fieldValue != null && ((byte[])fieldValue).length > Integer.parseInt(max))) throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' contains more bytes than "+ max+ " requested");
 else if (p.getType().equals(OType.INTEGER) && (fieldValue != null && type.asInt(fieldValue) > Integer.parseInt(max))) throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' is major than "+ max);
 else if (p.getType().equals(OType.LONG) && (fieldValue != null && type.asLong(fieldValue) > Long.parseLong(max))) throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' is major than "+ max);
 else if (p.getType().equals(OType.FLOAT) && (fieldValue != null && type.asFloat(fieldValue) > Float.parseFloat(max))) throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' is major than "+ max);
 else if (p.getType().equals(OType.DOUBLE) && (fieldValue != null && type.asDouble(fieldValue) > Double.parseDouble(max))) throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' is major than "+ max);
 else if (p.getType().equals(OType.DATE)) {
try {
  if (fieldValue != null && ((Date)fieldValue).before(iRecord.getDatabase().getStorage().getConfiguration().getDateFormatInstance().parse(max)))   throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' contains the date "+ fieldValue+ "that is after the date accepted ("+ max+ ")");
}
 catch (ParseException e) {
}
}
 else if (p.getType().equals(OType.DATETIME)) {
try {
  if (fieldValue != null && ((Date)fieldValue).before(iRecord.getDatabase().getStorage().getConfiguration().getDateTimeFormatInstance().parse(max)))   throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' contains the datetime "+ fieldValue+ "that is after the datetime accepted ("+ max+ ")");
}
 catch (ParseException e) {
}
}
 else if ((p.getType().equals(OType.EMBEDDEDLIST) || p.getType().equals(OType.EMBEDDEDSET) || p.getType().equals(OType.LINKLIST)|| p.getType().equals(OType.LINKSET)) && (fieldValue != null && ((Collection<?>)fieldValue).size() > Integer.parseInt(max))) throw new OValidationException("The field '" + iRecord.getClassName() + "."+ p.getName()+ "' contains more items then "+ max+ " requested");
}
}
