{
  return new OIndexCursor(){
    private int nextEntriesIndex;
    private OHashIndexBucket.Entry<Object,V>[] entries;
    private Iterator<OIdentifiable> currentIterator=Collections.emptyIterator();
    private Object currentKey;
{
      OHashIndexBucket.Entry<Object,V> firstEntry=hashTable.firstEntry();
      if (firstEntry == null)       entries=new OHashIndexBucket.Entry[0];
 else       entries=hashTable.ceilingEntries(firstEntry.key);
      if (entries.length == 0)       currentIterator=null;
    }
    @Override public Map.Entry<Object,OIdentifiable> next(    int prefetchSize){
      if (currentIterator == null)       return null;
      if (currentIterator.hasNext())       return nextCursorValue();
      while (currentIterator != null && !currentIterator.hasNext()) {
        if (entries.length == 0) {
          currentIterator=null;
          return null;
        }
        final OHashIndexBucket.Entry<Object,V> bucketEntry=entries[nextEntriesIndex];
        currentKey=bucketEntry.key;
        V value=bucketEntry.value;
        if (valuesTransformer != null)         currentIterator=valuesTransformer.transformFromValue(value).iterator();
 else         currentIterator=Collections.singletonList((OIdentifiable)value).iterator();
        nextEntriesIndex++;
        if (nextEntriesIndex >= entries.length) {
          entries=hashTable.higherEntries(entries[entries.length - 1].key);
          nextEntriesIndex=0;
        }
      }
      if (currentIterator != null && !currentIterator.hasNext())       return nextCursorValue();
      currentIterator=null;
      return null;
    }
    private Map.Entry<Object,OIdentifiable> nextCursorValue(){
      final OIdentifiable identifiable=currentIterator.next();
      return new Map.Entry<Object,OIdentifiable>(){
        @Override public Object getKey(){
          return currentKey;
        }
        @Override public OIdentifiable getValue(){
          return identifiable;
        }
        @Override public OIdentifiable setValue(        OIdentifiable value){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
}
