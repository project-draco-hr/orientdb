{
  acquireSharedLock();
  try {
    OAtomicOperation atomicOperation=storage.getAtomicOperationsManager().getCurrentOperation();
    final long filledUpTo=getFilledUpTo(atomicOperation,diskCache,fileId);
    for (long pageIndex=filledUpTo - 1; pageIndex >= 0; pageIndex--) {
      OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,pageIndex,false,diskCache);
      try {
        OClusterPositionMapBucket bucket=new OClusterPositionMapBucket(cacheEntry,getChangesTree(atomicOperation,cacheEntry));
        final int bucketSize=bucket.getSize();
        for (int index=bucketSize - 1; index >= 0; index--) {
          if (bucket.exists(index))           return pageIndex * OClusterPositionMapBucket.MAX_ENTRIES + index;
        }
      }
  finally {
        diskCache.release(cacheEntry);
      }
    }
    return ORID.CLUSTER_POS_INVALID;
  }
  finally {
    releaseSharedLock();
  }
}
