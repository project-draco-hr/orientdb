{
  resetLastValidBackup();
  if (deletedRecords.get(iRecordId) != null)   throw new ORecordNotFoundException(iRecordId);
  if (OScenarioThreadLocal.INSTANCE.get() == RUN_MODE.RUNNING_DISTRIBUTED) {
    return wrapped.updateRecord(iRecordId,updateContent,iContent,iVersion,iRecordType,iMode,iCallback);
  }
  try {
    final String clusterName=getClusterNameByRID(iRecordId);
    final ODistributedConfiguration dbCfg=dManager.getDatabaseConfiguration(getName());
    final String localNodeName=dManager.getLocalNodeName();
    checkNodeIsMaster(localNodeName,dbCfg);
    final List<String> nodes=dbCfg.getServers(clusterName,null);
    if (nodes.isEmpty()) {
      return (OStorageOperationResult<Integer>)ODistributedAbstractPlugin.runInDistributedMode(new Callable(){
        @Override public Object call() throws Exception {
          return wrapped.updateRecord(iRecordId,updateContent,iContent,iVersion,iRecordType,iMode,iCallback);
        }
      }
);
    }
    nodes.remove(localNodeName);
    dManager.getAvailableNodes(nodes,getName());
    final int clusterId=iRecordId.clusterId;
    Boolean executionModeSynch=dbCfg.isExecutionModeSynchronous(clusterName);
    if (executionModeSynch == null)     executionModeSynch=iMode == 0;
    final boolean syncMode=executionModeSynch;
    return (OStorageOperationResult<Integer>)executeRecordOperationInLock(syncMode,clusterId,new OCallable<Object,OCallable<Void,ODistributedRequestId>>(){
      @Override public Object call(      OCallable<Void,ODistributedRequestId> unlockCallback){
        final OUpdateRecordTask task=new OUpdateRecordTask(iRecordId,iContent,iVersion,iRecordType);
        final OStorageOperationResult<Integer> localResult;
        final ODistributedDatabase ddb=acquireRecordLock(iRecordId);
        try {
          task.prepareUndoOperation();
          localResult=(OStorageOperationResult<Integer>)ODistributedAbstractPlugin.runInDistributedMode(new Callable(){
            @Override public Object call() throws Exception {
              return wrapped.updateRecord(iRecordId,updateContent,iContent,iVersion,iRecordType,iMode,iCallback);
            }
          }
);
        }
 catch (        RuntimeException e) {
          throw e;
        }
catch (        Exception e) {
          OException.wrapException(new ODistributedException("Cannot delete record " + iRecordId),e);
          return null;
        }
 finally {
          ddb.unlockRecord(iRecordId);
        }
        if (!nodes.isEmpty()) {
          if (syncMode) {
            final ODistributedResponse dResponse=dManager.sendRequest(getName(),Collections.singleton(clusterName),nodes,task,EXECUTION_MODE.RESPONSE,localResult.getResult(),unlockCallback);
            final Object payload=dResponse.getPayload();
            if (payload instanceof Exception) {
              executeUndoOnLocalServer(dResponse.getRequestId(),task);
              if (payload instanceof ONeedRetryException)               throw (ONeedRetryException)payload;
              throw OException.wrapException(new ODistributedException("Error on execution distributed UPDATE_RECORD"),(Exception)payload);
            }
            return new OStorageOperationResult<Integer>((Integer)payload);
          }
          asynchronousExecution(new OAsynchDistributedOperation(getName(),Collections.singleton(clusterName),nodes,task,null,localResult.getResult(),unlockCallback));
        }
        return localResult;
      }
    }
);
  }
 catch (  ONeedRetryException e) {
    throw e;
  }
catch (  Exception e) {
    handleDistributedException("Cannot route UPDATE_RECORD operation for %s to the distributed node",e,iRecordId);
    return null;
  }
}
