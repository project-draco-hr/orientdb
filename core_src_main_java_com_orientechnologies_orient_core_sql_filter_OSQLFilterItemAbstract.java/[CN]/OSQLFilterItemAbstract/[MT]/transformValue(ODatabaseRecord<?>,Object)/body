{
  if (iResult != null && operationsChain != null) {
    int operator=-2;
    try {
      for (      OPair<Integer,List<String>> op : operationsChain) {
        operator=op.key.intValue();
        if (operator == OSQLFilterFieldOperator.SIZE.id)         iResult=iResult != null ? ((Collection<?>)iResult).size() : 0;
 else         if (operator == OSQLFilterFieldOperator.LENGTH.id)         iResult=iResult != null ? iResult.toString().length() : 0;
 else         if (operator == OSQLFilterFieldOperator.TOUPPERCASE.id)         iResult=iResult != null ? iResult.toString().toUpperCase() : 0;
 else         if (operator == OSQLFilterFieldOperator.TOLOWERCASE.id)         iResult=iResult != null ? iResult.toString().toLowerCase() : 0;
 else         if (operator == OSQLFilterFieldOperator.TRIM.id)         iResult=iResult != null ? iResult.toString().trim() : null;
 else         if (operator == OSQLFilterFieldOperator.FIELD.id) {
          if (iResult != null) {
            ODocument record;
            if (iResult instanceof String) {
              record=new ODocument(iDatabase,new ORecordId((String)iResult));
            }
 else             if (iResult instanceof ORID)             record=new ODocument(iDatabase,(ORID)iResult);
 else             if (iResult instanceof ORecord<?>)             record=(ODocument)iResult;
 else             throw new IllegalArgumentException("Field " + name + " is not a ODocument object");
            try {
              record.load();
              iResult=iResult != null ? record.field(op.value.get(0)) : null;
            }
 catch (            ORecordNotFoundException e) {
              iResult=null;
            }
          }
        }
 else         if (operator == OSQLFilterFieldOperator.CHARAT.id) {
          int index=Integer.parseInt(op.value.get(0));
          iResult=iResult != null ? iResult.toString().substring(index,index + 1) : null;
        }
 else         if (operator == OSQLFilterFieldOperator.INDEXOF.id && op.value.get(0).length() > 2) {
          String toFind=op.value.get(0).substring(1,op.value.get(0).length() - 1);
          int startIndex=op.value.size() > 1 ? Integer.parseInt(op.value.get(1)) : 0;
          iResult=iResult != null ? iResult.toString().indexOf(toFind,startIndex) : null;
        }
 else         if (operator == OSQLFilterFieldOperator.SUBSTRING.id) {
          int endIndex=op.value.size() > 1 ? Integer.parseInt(op.value.get(1)) : op.value.get(0).length();
          iResult=iResult != null ? iResult.toString().substring(Integer.parseInt(op.value.get(0)),endIndex) : null;
        }
 else         if (operator == OSQLFilterFieldOperator.FORMAT.id)         iResult=iResult != null ? String.format(op.value.get(0),iResult) : null;
 else         if (operator == OSQLFilterFieldOperator.LEFT.id) {
          final int len=Integer.parseInt(op.value.get(0));
          iResult=iResult != null ? iResult.toString().substring(0,len <= iResult.toString().length() ? len : iResult.toString().length()) : null;
        }
 else         if (operator == OSQLFilterFieldOperator.RIGHT.id) {
          final int offset=Integer.parseInt(op.value.get(0));
          iResult=iResult != null ? iResult.toString().substring(offset <= iResult.toString().length() - 1 ? offset : iResult.toString().length() - 1) : null;
        }
 else         if (operator == OSQLFilterFieldOperator.ASSTRING.id)         iResult=iResult != null ? iResult.toString() : null;
 else         if (operator == OSQLFilterFieldOperator.ASINTEGER.id)         iResult=iResult != null ? new Integer(iResult.toString()) : null;
 else         if (operator == OSQLFilterFieldOperator.ASFLOAT.id)         iResult=iResult != null ? new Float(iResult.toString()) : null;
 else         if (operator == OSQLFilterFieldOperator.ASBOOLEAN.id) {
          if (iResult != null) {
            if (iResult instanceof String)             iResult=new Boolean((String)iResult);
 else             if (iResult instanceof Number) {
              final int bValue=((Number)iResult).intValue();
              if (bValue == 0)               iResult=Boolean.FALSE;
 else               if (bValue == 1)               iResult=Boolean.TRUE;
 else               iResult=null;
            }
          }
        }
 else         if (operator == OSQLFilterFieldOperator.ASDATE.id) {
          if (iResult != null) {
            if (iResult instanceof Long)             iResult=new Date((Long)iResult);
 else             iResult=iDatabase.getStorage().getConfiguration().getDateFormatInstance().parse(iResult.toString());
          }
        }
 else         if (operator == OSQLFilterFieldOperator.ASDATETIME.id) {
          if (iResult != null) {
            if (iResult instanceof Long)             iResult=new Date((Long)iResult);
 else             iResult=iDatabase.getStorage().getConfiguration().getDateTimeFormatInstance().parse(iResult.toString());
          }
        }
      }
    }
 catch (    ParseException e) {
      OLogManager.instance().exception("Error on conversion of value '%s' using field operator %s",e,OCommandExecutionException.class,iResult,OSQLFilterFieldOperator.getById(operator));
    }
  }
  return iResult;
}
