{
  final OModifiableInteger counter=new OModifiableInteger();
  OSessionStoragePerformanceStatistic statistic=new OSessionStoragePerformanceStatistic(200,new OSessionStoragePerformanceStatistic.NanoTimer(){
    @Override public long getNano(){
      counter.increment(100);
      return counter.getValue();
    }
  }
,true);
  OSessionStoragePerformanceStatistic.PerformanceCountersHolder performanceCountersHolder=new OSessionStoragePerformanceStatistic.PerformanceCountersHolder();
  statistic.startComponentOperation("c3po");
  statistic.incrementPageAccessOnCacheLevel(false);
  counter.setValue(0);
  statistic.completeComponentOperation();
  statistic.startComponentOperation("c3po");
  statistic.incrementPageAccessOnCacheLevel(true);
  counter.setValue(100);
  statistic.completeComponentOperation();
  statistic.startComponentOperation("c3po");
  statistic.incrementPageAccessOnCacheLevel(true);
  counter.setValue(200);
  statistic.completeComponentOperation();
  statistic.startComponentOperation("c3po");
  statistic.incrementPageAccessOnCacheLevel(true);
  counter.setValue(300);
  statistic.completeComponentOperation();
  statistic.pushSystemCounters(performanceCountersHolder);
  Assert.assertEquals(performanceCountersHolder.getCacheHits(),100);
  performanceCountersHolder=new OSessionStoragePerformanceStatistic.PerformanceCountersHolder();
  statistic.pushComponentCounters("c3po",performanceCountersHolder);
  Assert.assertEquals(performanceCountersHolder.getCacheHits(),100);
  statistic.startComponentOperation("c3po");
  counter.setValue(300);
  statistic.startPageReadFromCacheTimer();
  statistic.stopPageReadFromCacheTimer();
  counter.setValue(400);
  statistic.startPageReadFromCacheTimer();
  statistic.stopPageReadFromCacheTimer();
  counter.setValue(500);
  statistic.completeComponentOperation();
  statistic.startComponentOperation("c3po");
  counter.setValue(500);
  statistic.startPageReadFromCacheTimer();
  counter.increment(100);
  statistic.stopPageReadFromCacheTimer();
  counter.setValue(700);
  statistic.completeComponentOperation();
  performanceCountersHolder=new OSessionStoragePerformanceStatistic.PerformanceCountersHolder();
  statistic.pushSystemCounters(performanceCountersHolder);
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesReadFromCache(),1);
  Assert.assertEquals(performanceCountersHolder.getReadSpeedFromCacheInPages(),5000000);
  performanceCountersHolder=new OSessionStoragePerformanceStatistic.PerformanceCountersHolder();
  statistic.pushComponentCounters("c3po",performanceCountersHolder);
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesReadFromCache(),1);
  Assert.assertEquals(performanceCountersHolder.getReadSpeedFromCacheInPages(),5000000);
  statistic.startComponentOperation("c3po");
  counter.setValue(700);
  statistic.startPageReadFromFileTimer();
  statistic.stopPageReadFromFileTimer(1);
  counter.setValue(800);
  statistic.startPageReadFromFileTimer();
  statistic.stopPageReadFromFileTimer(1);
  counter.setValue(900);
  statistic.completeComponentOperation();
  statistic.startComponentOperation("c3po");
  counter.setValue(900);
  statistic.startPageReadFromFileTimer();
  statistic.stopPageReadFromFileTimer(2);
  statistic.completeComponentOperation();
  performanceCountersHolder=new OSessionStoragePerformanceStatistic.PerformanceCountersHolder();
  statistic.pushSystemCounters(performanceCountersHolder);
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesReadFromFile(),2);
  Assert.assertEquals(performanceCountersHolder.getReadSpeedFromFileInPages(),20000000);
  performanceCountersHolder=new OSessionStoragePerformanceStatistic.PerformanceCountersHolder();
  statistic.pushComponentCounters("c3po",performanceCountersHolder);
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesReadFromFile(),2);
  Assert.assertEquals(performanceCountersHolder.getReadSpeedFromFileInPages(),20000000);
  statistic.startComponentOperation("c3po");
  counter.setValue(1100);
  statistic.startPageWriteInCacheTimer();
  statistic.stopPageWriteInCacheTimer();
  counter.setValue(1200);
  statistic.startPageWriteInCacheTimer();
  statistic.stopPageWriteInCacheTimer();
  counter.setValue(1300);
  statistic.completeComponentOperation();
  statistic.startComponentOperation("c3po");
  counter.setValue(1300);
  statistic.startPageWriteInCacheTimer();
  counter.increment(100);
  statistic.stopPageWriteInCacheTimer();
  counter.setValue(1500);
  statistic.completeComponentOperation();
  performanceCountersHolder=new OSessionStoragePerformanceStatistic.PerformanceCountersHolder();
  statistic.pushSystemCounters(performanceCountersHolder);
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesWrittenInCache(),1);
  Assert.assertEquals(performanceCountersHolder.getWriteSpeedInCacheInPages(),5000000);
  performanceCountersHolder=new OSessionStoragePerformanceStatistic.PerformanceCountersHolder();
  statistic.pushComponentCounters("c3po",performanceCountersHolder);
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesWrittenInCache(),1);
  Assert.assertEquals(performanceCountersHolder.getWriteSpeedInCacheInPages(),5000000);
  statistic.startComponentOperation("c3po");
  counter.setValue(1500);
  statistic.startCommitTimer();
  statistic.stopCommitTimer();
  counter.setValue(1600);
  statistic.startCommitTimer();
  statistic.stopCommitTimer();
  counter.setValue(1700);
  statistic.completeComponentOperation();
  statistic.startComponentOperation("c3po");
  counter.setValue(1600);
  statistic.startCommitTimer();
  counter.increment(100);
  statistic.stopCommitTimer();
  statistic.completeComponentOperation();
  performanceCountersHolder=new OSessionStoragePerformanceStatistic.PerformanceCountersHolder();
  statistic.pushSystemCounters(performanceCountersHolder);
  Assert.assertEquals(performanceCountersHolder.getCommitTimeAvg(),200);
}
