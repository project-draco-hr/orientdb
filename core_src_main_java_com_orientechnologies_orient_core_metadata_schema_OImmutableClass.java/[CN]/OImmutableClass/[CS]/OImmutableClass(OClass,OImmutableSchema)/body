{
  isAbstract=oClass.isAbstract();
  strictMode=oClass.isStrictMode();
  this.schema=schema;
  if (oClass.getSuperClass() != null)   superClassName=oClass.getSuperClass().getName();
 else   superClassName=null;
  name=oClass.getName();
  streamAbleName=oClass.getStreamableName();
  clusterSelection=oClass.getClusterSelection();
  defaultClusterId=oClass.getDefaultClusterId();
  clusterIds=oClass.getClusterIds();
  polymorphicClusterIds=oClass.getPolymorphicClusterIds();
  baseClassesNames=new ArrayList<String>();
  for (  OClass baseClass : oClass.getBaseClasses())   baseClassesNames.add(baseClass.getName());
  overSize=oClass.getOverSize();
  classOverSize=oClass.getClassOverSize();
  shortName=oClass.getShortName();
  javaClass=oClass.getJavaClass();
  properties=new HashMap<String,OProperty>();
  for (  OProperty p : oClass.declaredProperties())   properties.put(p.getName().toLowerCase(),new OImmutableProperty(p,this));
  customFields=new HashMap<String,String>();
  for (  String key : oClass.getCustomKeys())   customFields.put(key,oClass.getCustom(key));
}
