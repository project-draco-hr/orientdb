{
  if (o instanceof Proxy) {
    final ODocument iRecord=getDocument((Proxy)o);
    Class<?> pojoClass=o.getClass().getSuperclass();
    invokeCallback(pojoClass,o,iRecord,OBeforeSerialization.class);
    invokeCallback(pojoClass,o,iRecord,OAfterSerialization.class);
    return o;
  }
  Proxy proxiedObject=(Proxy)db.newInstance(o.getClass());
  try {
    return toStream(o,proxiedObject,db);
  }
 catch (  IllegalArgumentException e) {
    throw new OSerializationException("Error serializing object of class " + o.getClass(),e);
  }
catch (  IllegalAccessException e) {
    throw new OSerializationException("Error serializing object of class " + o.getClass(),e);
  }
}
