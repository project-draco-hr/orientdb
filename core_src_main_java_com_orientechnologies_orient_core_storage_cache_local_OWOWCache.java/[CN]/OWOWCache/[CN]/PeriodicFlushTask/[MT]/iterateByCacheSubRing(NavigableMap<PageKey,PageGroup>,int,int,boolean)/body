{
  final Iterator<Map.Entry<PageKey,PageGroup>> entriesIterator=subMap.entrySet().iterator();
  final long currentTime=System.currentTimeMillis();
  final long maxSegmentDistance=writeAheadLog == null ? -1 : (long)(writeAheadLog.getPreferredSegmentCount() * MAX_LSN_SEGMENT_DISTANCE_FACTOR);
  int flushedRegions=0;
  long lastPageIndex=-1;
  while (entriesIterator.hasNext()) {
    Map.Entry<PageKey,PageGroup> entry=entriesIterator.next();
    final PageGroup group=entry.getValue();
    final PageKey pageKey=entry.getKey();
    if (lastPageIndex >= 0) {
      if (pageKey.pageIndex != lastPageIndex + 1) {
        flushedRegions++;
        if (flushedWritePages > writePagesToFlush && flushedRegions >= 4)         break;
      }
    }
    final OCachePointer pagePointer=group.page;
    final boolean weakLockMode=currentTime - group.creationTime < groupTTL && !forceFlush && !tooOldLsn(pagePointer.getLastFlushedLsn(),maxSegmentDistance);
    if (group.recencyBit && weakLockMode) {
      group.recencyBit=false;
      continue;
    }
    final Lock groupLock=lockManager.acquireExclusiveLock(entry.getKey());
    try {
      if (group.recencyBit && weakLockMode) {
        group.recencyBit=false;
        continue;
      }
 else {
        group.recencyBit=false;
        if (weakLockMode) {
          if (!pagePointer.tryAcquireSharedLock())           continue;
        }
 else         pagePointer.acquireSharedLock();
        try {
          final ByteBuffer buffer=pagePointer.getSharedBuffer();
          flushPage(pageKey.fileId,pageKey.pageIndex,buffer);
          final OLogSequenceNumber flushedLSN=ODurablePage.getLogSequenceNumberFromPage(buffer);
          pagePointer.setLastFlushedLsn(flushedLSN);
        }
  finally {
          pagePointer.releaseSharedLock();
        }
        pagePointer.decrementWritersReferrer();
        pagePointer.setWritersListener(null);
        entriesIterator.remove();
      }
    }
  finally {
      lockManager.releaseLock(groupLock);
    }
    lastPageKey=pageKey;
    flushedWritePages++;
    lastPageIndex=pageKey.pageIndex;
    writeCacheSize.decrement();
  }
  return flushedWritePages;
}
