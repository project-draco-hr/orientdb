{
  if (deletedRecords.get(iRecordId) != null)   throw new ORecordNotFoundException("Record " + iRecordId + " was not found");
  try {
    final String clusterName=getClusterNameByRID(iRecordId);
    final ODistributedConfiguration dbCfg=dManager.getDatabaseConfiguration(getName());
    final List<String> nodes=dbCfg.getServers(clusterName,null);
    if (nodes.isEmpty() || nodes.contains(dManager.getLocalNodeName()) && dbCfg.getReadQuorum(clusterName) <= 1) {
      return (OStorageOperationResult<ORawBuffer>)ODistributedAbstractPlugin.runInDistributedMode(new Callable(){
        @Override public Object call() throws Exception {
          return wrapped.readRecord(iRecordId,iFetchPlan,iIgnoreCache,iCallback);
        }
      }
);
    }
    final Object result=dManager.sendRequest(getName(),Collections.singleton(clusterName),nodes,new OReadRecordTask(iRecordId),EXECUTION_MODE.RESPONSE);
    if (result instanceof ONeedRetryException)     throw (ONeedRetryException)result;
 else     if (result instanceof Exception)     throw OException.wrapException(new ODistributedException("Error on execution distributed READ_RECORD"),(Exception)result);
    return new OStorageOperationResult<ORawBuffer>((ORawBuffer)result);
  }
 catch (  ONeedRetryException e) {
    throw e;
  }
catch (  Exception e) {
    handleDistributedException("Cannot route READ_RECORD operation for %s to the distributed node",e,iRecordId);
    return null;
  }
}
