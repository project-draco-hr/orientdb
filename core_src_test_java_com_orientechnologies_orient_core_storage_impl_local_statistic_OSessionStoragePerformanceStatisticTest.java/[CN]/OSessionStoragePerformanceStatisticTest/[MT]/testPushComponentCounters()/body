{
  final OModifiableInteger counterOne=new OModifiableInteger();
  OSessionStoragePerformanceStatistic sessionStoragePerformanceStatisticOne=new OSessionStoragePerformanceStatistic(100,new OSessionStoragePerformanceStatistic.NanoTimer(){
    @Override public long getNano(){
      counterOne.increment(100);
      return counterOne.getValue();
    }
  }
,false);
  OSessionStoragePerformanceStatistic.PerformanceCountersHolder performanceCountersHolder=new OSessionStoragePerformanceStatistic.PerformanceCountersHolder();
  final Map<String,OSessionStoragePerformanceStatistic.PerformanceCountersHolder> counters=new HashMap<String,OSessionStoragePerformanceStatistic.PerformanceCountersHolder>();
  sessionStoragePerformanceStatisticOne.pushComponentCounters(counters);
  sessionStoragePerformanceStatisticOne.pushComponentCounters("c3po",performanceCountersHolder);
  sessionStoragePerformanceStatisticOne.startComponentOperation("c3po");
  sessionStoragePerformanceStatisticOne.incrementPageAccessOnCacheLevel(false);
  sessionStoragePerformanceStatisticOne.incrementPageAccessOnCacheLevel(false);
  sessionStoragePerformanceStatisticOne.incrementPageAccessOnCacheLevel(false);
  sessionStoragePerformanceStatisticOne.incrementPageAccessOnCacheLevel(true);
  sessionStoragePerformanceStatisticOne.startPageReadFromCacheTimer();
  counterOne.increment(50);
  sessionStoragePerformanceStatisticOne.stopPageReadFromCacheTimer();
  sessionStoragePerformanceStatisticOne.startPageReadFromCacheTimer();
  counterOne.increment(50);
  sessionStoragePerformanceStatisticOne.stopPageReadFromCacheTimer();
  sessionStoragePerformanceStatisticOne.startPageReadFromCacheTimer();
  sessionStoragePerformanceStatisticOne.stopPageReadFromCacheTimer();
  sessionStoragePerformanceStatisticOne.startPageReadFromFileTimer();
  sessionStoragePerformanceStatisticOne.stopPageReadFromFileTimer(2);
  sessionStoragePerformanceStatisticOne.startPageWriteInCacheTimer();
  counterOne.increment(200);
  sessionStoragePerformanceStatisticOne.stopPageWriteInCacheTimer();
  sessionStoragePerformanceStatisticOne.completeComponentOperation();
  OSessionStoragePerformanceStatistic sessionStoragePerformanceStatisticTwo=new OSessionStoragePerformanceStatistic(100,new OSessionStoragePerformanceStatistic.NanoTimer(){
    private long counter=0;
    @Override public long getNano(){
      return counter+=100;
    }
  }
,false);
  sessionStoragePerformanceStatisticTwo.startComponentOperation("c3po");
  sessionStoragePerformanceStatisticTwo.incrementPageAccessOnCacheLevel(true);
  sessionStoragePerformanceStatisticTwo.completeComponentOperation();
  sessionStoragePerformanceStatisticTwo.startComponentOperation("c1po");
  sessionStoragePerformanceStatisticTwo.startPageReadFromCacheTimer();
  sessionStoragePerformanceStatisticTwo.stopPageReadFromCacheTimer();
  sessionStoragePerformanceStatisticTwo.startPageReadFromFileTimer();
  sessionStoragePerformanceStatisticTwo.stopPageReadFromFileTimer(1);
  sessionStoragePerformanceStatisticTwo.startPageWriteInCacheTimer();
  sessionStoragePerformanceStatisticTwo.stopPageWriteInCacheTimer();
  sessionStoragePerformanceStatisticTwo.completeComponentOperation();
  sessionStoragePerformanceStatisticOne.pushComponentCounters("c3po",performanceCountersHolder);
  Assert.assertEquals(performanceCountersHolder.getCacheHits(),sessionStoragePerformanceStatisticOne.getCacheHits());
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesPerOperation(),sessionStoragePerformanceStatisticOne.getAmountOfPagesPerOperation("c3po"));
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesReadFromCache(),sessionStoragePerformanceStatisticOne.getAmountOfPagesReadFromCache("c3po"));
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesReadFromFile(),sessionStoragePerformanceStatisticOne.getAmountOfPagesReadFromFile("c3po"));
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesWrittenInCache(),sessionStoragePerformanceStatisticOne.getAmountOfPagesWrittenInCache("c3po"));
  Assert.assertEquals(performanceCountersHolder.getReadSpeedFromCacheInPages(),sessionStoragePerformanceStatisticOne.getReadSpeedFromCacheInPages("c3po"));
  Assert.assertEquals(performanceCountersHolder.getReadSpeedFromFileInPages(),sessionStoragePerformanceStatisticOne.getReadSpeedFromFileInPages("c3po"));
  Assert.assertEquals(performanceCountersHolder.getWriteSpeedInCacheInPages(),sessionStoragePerformanceStatisticOne.getWriteSpeedInCacheInPages("c3po"));
  performanceCountersHolder=new OSessionStoragePerformanceStatistic.PerformanceCountersHolder();
  sessionStoragePerformanceStatisticTwo.pushComponentCounters("c3po",performanceCountersHolder);
  Assert.assertEquals(performanceCountersHolder.getCacheHits(),sessionStoragePerformanceStatisticTwo.getCacheHits());
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesPerOperation(),sessionStoragePerformanceStatisticTwo.getAmountOfPagesPerOperation("c3po"));
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesReadFromCache(),sessionStoragePerformanceStatisticTwo.getAmountOfPagesReadFromCache("c3po"));
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesReadFromFile(),sessionStoragePerformanceStatisticTwo.getAmountOfPagesReadFromFile("c3po"));
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesWrittenInCache(),sessionStoragePerformanceStatisticTwo.getAmountOfPagesWrittenInCache("c3po"));
  Assert.assertEquals(performanceCountersHolder.getReadSpeedFromCacheInPages(),sessionStoragePerformanceStatisticTwo.getReadSpeedFromCacheInPages("c3po"));
  Assert.assertEquals(performanceCountersHolder.getReadSpeedFromFileInPages(),sessionStoragePerformanceStatisticTwo.getReadSpeedFromFileInPages("c3po"));
  Assert.assertEquals(performanceCountersHolder.getWriteSpeedInCacheInPages(),sessionStoragePerformanceStatisticTwo.getWriteSpeedInCacheInPages("c3po"));
  sessionStoragePerformanceStatisticOne.pushComponentCounters("c3po",performanceCountersHolder);
  Assert.assertEquals(performanceCountersHolder.getCacheHits(),40);
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesPerOperation(),1);
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesReadFromCache(),sessionStoragePerformanceStatisticOne.getAmountOfPagesReadFromCache("c3po"));
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesReadFromFile(),sessionStoragePerformanceStatisticOne.getAmountOfPagesReadFromFile("c3po"));
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesWrittenInCache(),sessionStoragePerformanceStatisticOne.getAmountOfPagesWrittenInCache("c3po"));
  Assert.assertEquals(performanceCountersHolder.getReadSpeedFromCacheInPages(),sessionStoragePerformanceStatisticOne.getReadSpeedFromCacheInPages("c3po"));
  Assert.assertEquals(performanceCountersHolder.getReadSpeedFromFileInPages(),sessionStoragePerformanceStatisticOne.getReadSpeedFromFileInPages("c3po"));
  Assert.assertEquals(performanceCountersHolder.getWriteSpeedInCacheInPages(),sessionStoragePerformanceStatisticOne.getWriteSpeedInCacheInPages("c3po"));
  performanceCountersHolder=new OSessionStoragePerformanceStatistic.PerformanceCountersHolder();
  sessionStoragePerformanceStatisticOne.pushComponentCounters("c3po",performanceCountersHolder);
  sessionStoragePerformanceStatisticTwo.pushComponentCounters("c1po",performanceCountersHolder);
  Assert.assertEquals(performanceCountersHolder.getCacheHits(),sessionStoragePerformanceStatisticOne.getCacheHits());
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesPerOperation(),2);
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesReadFromCache(),4);
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesReadFromFile(),3);
  Assert.assertEquals(performanceCountersHolder.getAmountOfPagesWrittenInCache(),2);
  Assert.assertEquals(performanceCountersHolder.getReadSpeedFromCacheInPages(),8000000);
  Assert.assertEquals(performanceCountersHolder.getReadSpeedFromFileInPages(),15000000);
  Assert.assertEquals(performanceCountersHolder.getWriteSpeedInCacheInPages(),5000000);
  sessionStoragePerformanceStatisticOne.pushComponentCounters(counters);
  sessionStoragePerformanceStatisticTwo.pushComponentCounters(counters);
  Assert.assertEquals(counters.get("c3po").getCacheHits(),40);
  Assert.assertEquals(counters.get("c3po").getAmountOfPagesPerOperation(),1);
  Assert.assertEquals(counters.get("c3po").getAmountOfPagesReadFromCache(),3);
  Assert.assertEquals(counters.get("c3po").getAmountOfPagesReadFromFile(),2);
  Assert.assertEquals(counters.get("c3po").getReadSpeedFromCacheInPages(),7500000);
  Assert.assertEquals(counters.get("c3po").getReadSpeedFromFileInPages(),20000000);
  Assert.assertEquals(counters.get("c3po").getWriteSpeedInCacheInPages(),3333333);
  Assert.assertEquals(counters.get("c1po").getCacheHits(),-1);
  Assert.assertEquals(counters.get("c1po").getAmountOfPagesPerOperation(),1);
  Assert.assertEquals(counters.get("c1po").getAmountOfPagesReadFromCache(),1);
  Assert.assertEquals(counters.get("c1po").getAmountOfPagesReadFromFile(),1);
  Assert.assertEquals(counters.get("c1po").getReadSpeedFromCacheInPages(),10000000);
  Assert.assertEquals(counters.get("c1po").getReadSpeedFromFileInPages(),10000000);
  Assert.assertEquals(counters.get("c1po").getWriteSpeedInCacheInPages(),10000000);
}
