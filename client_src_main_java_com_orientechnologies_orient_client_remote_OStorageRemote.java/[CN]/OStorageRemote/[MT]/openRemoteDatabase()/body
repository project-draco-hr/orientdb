{
  minPool=OGlobalConfiguration.CLIENT_CHANNEL_MIN_POOL.getValueAsInteger();
  maxPool=OGlobalConfiguration.CLIENT_CHANNEL_MAX_POOL.getValueAsInteger();
  connectionDbType=ODatabaseDocument.TYPE;
  if (connectionOptions != null && connectionOptions.size() > 0) {
    if (connectionOptions.containsKey(PARAM_MIN_POOL))     minPool=Integer.parseInt(connectionOptions.get(PARAM_MIN_POOL).toString());
    if (connectionOptions.containsKey(PARAM_MAX_POOL))     maxPool=Integer.parseInt(connectionOptions.get(PARAM_MAX_POOL).toString());
    if (connectionOptions.containsKey(PARAM_DB_TYPE))     connectionDbType=connectionOptions.get(PARAM_DB_TYPE).toString();
  }
  setSessionId(-1);
  createConnectionPool();
  boolean availableConnections;
synchronized (networkPool) {
    availableConnections=!networkPool.isEmpty();
  }
  while (availableConnections) {
    try {
      OChannelBinaryClient network=null;
      try {
        network=beginRequest(OChannelBinaryProtocol.REQUEST_DB_OPEN);
        sendClientInfo(network);
        network.writeString(name);
        if (network.getSrvProtocolVersion() >= 8)         network.writeString(connectionDbType);
        network.writeString(connectionUserName);
        network.writeString(connectionUserPassword);
      }
  finally {
        endRequest(network);
      }
      final int sessionId;
      try {
        beginResponse(network);
        sessionId=network.readInt();
        setSessionId(sessionId);
        OLogManager.instance().debug(this,"Client connected with session id: " + sessionId);
        readDatabaseInformation(network);
        updateClusterConfiguration(network.readBytes());
        if (network.getSrvProtocolVersion() >= 14)         network.readString();
        status=STATUS.OPEN;
        return;
      }
  finally {
        endResponse(network);
      }
    }
 catch (    IOException e) {
      OLogManager.instance().debug(this,"Error while reading response on creation of connection ",e);
    }
catch (    OTimeoutException e) {
      OLogManager.instance().debug(this,"Error while reading response on creation of connection ",e);
    }
catch (    Exception e) {
      handleException("Cannot create a connection to remote server address(es): " + serverURLs,e);
    }
    createConnectionPool();
synchronized (networkPool) {
      availableConnections=!networkPool.isEmpty();
    }
  }
  throw new OStorageException("Cannot create a connection to remote server address(es): " + serverURLs);
}
