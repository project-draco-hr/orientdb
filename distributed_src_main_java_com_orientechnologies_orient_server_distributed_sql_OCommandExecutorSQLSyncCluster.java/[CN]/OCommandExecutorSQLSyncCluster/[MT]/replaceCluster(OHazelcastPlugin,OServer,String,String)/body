{
  final ODistributedConfiguration cfg=dManager.getDatabaseConfiguration(databaseName);
  final String dbPath=serverInstance.getDatabaseDirectory() + databaseName;
  final String nodeName=dManager.getLocalNodeName();
  final List<String> nodesWhereClusterIsCfg=cfg.getServers(clusterName,null);
  nodesWhereClusterIsCfg.remove(nodeName);
  if (nodesWhereClusterIsCfg.isEmpty())   throw new OCommandExecutionException("Cannot synchronize cluster '" + clusterName + "' because is not configured on any running nodes");
  final OSyncClusterTask task=new OSyncClusterTask(clusterName);
  final Map<String,Object> results=(Map<String,Object>)dManager.sendRequest(databaseName,null,nodesWhereClusterIsCfg,task,ODistributedRequest.EXECUTION_MODE.RESPONSE,0);
  File tempFile=null;
  FileOutputStream out=null;
  try {
    tempFile=new File(Orient.getTempPath() + "/backup_" + databaseName+ "_"+ clusterName+ "_toInstall.zip");
    if (tempFile.exists())     tempFile.delete();
 else     tempFile.getParentFile().mkdirs();
    tempFile.createNewFile();
    long fileSize=0;
    out=new FileOutputStream(tempFile,false);
    for (    Map.Entry<String,Object> r : results.entrySet()) {
      final Object value=r.getValue();
      if (value instanceof Boolean) {
        continue;
      }
 else       if (value instanceof Throwable) {
        ODistributedServerLog.error(null,nodeName,r.getKey(),ODistributedServerLog.DIRECTION.IN,"error on installing cluster %s in %s",(Exception)value,databaseName,dbPath);
      }
 else       if (value instanceof ODistributedDatabaseChunk) {
        ODistributedDatabaseChunk chunk=(ODistributedDatabaseChunk)value;
        final File completedFile=new File(tempFile.getAbsolutePath() + ".completed");
        if (completedFile.exists())         completedFile.delete();
        fileSize=writeDatabaseChunk(nodeName,1,chunk,out);
        for (int chunkNum=2; !chunk.last; chunkNum++) {
          final Object result=dManager.sendRequest(databaseName,null,Collections.singletonList(r.getKey()),new OCopyDatabaseChunkTask(chunk.filePath,chunkNum,chunk.offset + chunk.buffer.length,false),ODistributedRequest.EXECUTION_MODE.RESPONSE,0);
          if (result instanceof Boolean)           continue;
 else           if (result instanceof Exception) {
            ODistributedServerLog.error(null,nodeName,r.getKey(),ODistributedServerLog.DIRECTION.IN,"error on installing database %s in %s (chunk #%d)",(Exception)result,databaseName,dbPath,chunkNum);
          }
 else           if (result instanceof ODistributedDatabaseChunk) {
            chunk=(ODistributedDatabaseChunk)result;
            fileSize+=writeDatabaseChunk(nodeName,chunkNum,chunk,out);
          }
        }
        out.flush();
        new File(tempFile.getAbsolutePath() + ".completed").createNewFile();
      }
    }
    final String tempDirectoryPath=Orient.getTempPath() + "/backup_" + databaseName+ "_"+ clusterName+ "_toInstall";
    final File tempDirectory=new File(tempDirectoryPath);
    tempDirectory.mkdirs();
    OZIPCompressionUtil.uncompressDirectory(new FileInputStream(tempFile),tempDirectory.getAbsolutePath(),null);
    final OAbstractPaginatedStorage stg=(OAbstractPaginatedStorage)getDatabase().getStorage().getUnderlying();
    final OPaginatedCluster cluster=(OPaginatedCluster)stg.getClusterByName(clusterName);
    final File tempClusterFile=new File(tempDirectoryPath + "/" + clusterName+ OPaginatedCluster.DEF_EXTENSION);
    cluster.replaceFile(tempClusterFile);
    getDatabase().getLocalCache().invalidate();
    return String.format("Cluster correctly replaced, transferred %d bytes",fileSize);
  }
 catch (  Exception e) {
    ODistributedServerLog.error(null,nodeName,null,ODistributedServerLog.DIRECTION.NONE,"error on transferring database '%s' to '%s'",e,databaseName,tempFile);
    throw OException.wrapException(new ODistributedException("Error on transferring database"),e);
  }
 finally {
    try {
      if (out != null) {
        out.flush();
        out.close();
      }
    }
 catch (    IOException e) {
    }
  }
}
