{
  checkOpeness();
  final ORecordId rid=(ORecordId)iRecord.getIdentity();
  if (rid == null)   throw new ODatabaseException("Cannot delete record because it has no identity. Probably was created from scratch or contains projections of fields rather than a full record");
  if (!rid.isValid())   return;
  checkSecurity(ODatabaseSecurityResources.CLUSTER,ORole.PERMISSION_DELETE,getClusterNameById(rid.clusterId));
  setCurrentDatabaseinThreadLocal();
  try {
    ORecord<?> rec=iRecord.getRecord();
    if (iCallTriggers && (!prohibitTombstones || !rec.getRecordVersion().isTombstone()))     callbackHooks(TYPE.BEFORE_DELETE,rec);
    final ORecordVersion realVersion=mvcc ? iVersion : OVersionFactory.instance().createUntrackedVersion();
    try {
      final OStorageOperationResult<Boolean> operationResult;
      if (prohibitTombstones)       operationResult=new OStorageOperationResult<Boolean>(underlying.cleanOutRecord(rid,realVersion,iRequired,(byte)iMode.ordinal()));
 else       operationResult=underlying.delete(rid,realVersion,iRequired,(byte)iMode.ordinal());
      if (iCallTriggers) {
        if (!operationResult.isMoved() && (!prohibitTombstones || !rec.getRecordVersion().isTombstone()))         callbackHooks(TYPE.AFTER_DELETE,rec);
 else         if (!prohibitTombstones || !rec.getRecordVersion().isTombstone())         callbackHooks(TYPE.DELETE_REPLICATED,rec);
      }
      if (!operationResult.isMoved()) {
        getLevel1Cache().deleteRecord(rid);
      }
    }
 catch (    Throwable t) {
      if (iCallTriggers)       callbackHooks(TYPE.DELETE_FAILED,rec);
      throw t;
    }
  }
 catch (  OException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new ODatabaseException("Error on deleting record in cluster #" + iRecord.getIdentity().getClusterId(),t);
  }
}
