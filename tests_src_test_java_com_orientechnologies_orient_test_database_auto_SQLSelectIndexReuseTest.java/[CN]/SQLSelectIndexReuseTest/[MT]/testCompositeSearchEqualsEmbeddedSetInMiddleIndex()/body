{
  long oldIndexUsage=profiler.getCounter("db.demo.query.indexUsed");
  long oldcompositeIndexUsed=profiler.getCounter("db.demo.query.compositeIndexUsed");
  long oldcompositeIndexUsed2=profiler.getCounter("db.demo.query.compositeIndexUsed.2");
  long oldcompositeIndexUsed3=profiler.getCounter("db.demo.query.compositeIndexUsed.3");
  long oldcompositeIndexUsed33=profiler.getCounter("db.demo.query.compositeIndexUsed.3.3");
  if (oldIndexUsage == -1) {
    oldIndexUsage=0;
  }
  if (oldcompositeIndexUsed == -1) {
    oldcompositeIndexUsed=0;
  }
  if (oldcompositeIndexUsed2 == -1) {
    oldcompositeIndexUsed2=0;
  }
  if (oldcompositeIndexUsed3 == -1)   oldcompositeIndexUsed3=0;
  if (oldcompositeIndexUsed33 == -1)   oldcompositeIndexUsed33=0;
  final List<ODocument> result=database.command(new OSQLSynchQuery<ODocument>("select * from sqlSelectIndexReuseTestClass " + "where prop9 = 0 and fEmbeddedSetTwo contains 92 and prop8 > 2")).execute();
  final Set<Integer> embeddedSet=new HashSet<Integer>(3);
  embeddedSet.add(90);
  embeddedSet.add(91);
  embeddedSet.add(92);
  Assert.assertEquals(result.size(),3);
  for (int i=0; i < 3; i++) {
    final ODocument document=new ODocument();
    document.field("prop8",i * 2 + 4);
    document.field("prop9",0);
    document.field("fEmbeddedSet",embeddedSet);
    Assert.assertEquals(containsDocument(result,document),1);
  }
  Assert.assertEquals(profiler.getCounter("db.demo.query.indexUsed"),oldIndexUsage + 1);
  Assert.assertEquals(profiler.getCounter("db.demo.query.compositeIndexUsed"),oldcompositeIndexUsed + 1);
  Assert.assertEquals(profiler.getCounter("db.demo.query.compositeIndexUsed.2"),oldcompositeIndexUsed2);
  Assert.assertEquals(profiler.getCounter("db.demo.query.compositeIndexUsed.3"),oldcompositeIndexUsed3 + 1);
  Assert.assertEquals(profiler.getCounter("db.demo.query.compositeIndexUsed.3.3"),oldcompositeIndexUsed33 + 1);
}
