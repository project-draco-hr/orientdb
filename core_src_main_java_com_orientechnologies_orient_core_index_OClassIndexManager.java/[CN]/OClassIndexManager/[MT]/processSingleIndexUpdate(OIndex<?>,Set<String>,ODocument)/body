{
  final OIndexDefinition indexDefinition=index.getDefinition();
  final List<String> indexFields=indexDefinition.getFields();
  if (indexFields.isEmpty())   return;
  final String indexField=indexFields.get(0);
  if (!dirtyFields.contains(indexField))   return;
  final OMultiValueChangeTimeLine<?,?> multiValueChangeTimeLine=iRecord.getCollectionTimeLine(indexField);
  if (multiValueChangeTimeLine != null) {
    final OIndexDefinitionMultiValue indexDefinitionMultiValue=(OIndexDefinitionMultiValue)indexDefinition;
    final Map<Object,Integer> keysToAdd=new HashMap<Object,Integer>();
    final Map<Object,Integer> keysToRemove=new HashMap<Object,Integer>();
    for (    OMultiValueChangeEvent<?,?> changeEvent : multiValueChangeTimeLine.getMultiValueChangeEvents()) {
      indexDefinitionMultiValue.processChangeEvent(changeEvent,keysToAdd,keysToRemove);
    }
    for (    final Object keyToRemove : keysToRemove.keySet())     removeFromIndex(index,keyToRemove,iRecord);
    for (    final Object keyToAdd : keysToAdd.keySet())     putInIndex(index,keyToAdd,iRecord.getIdentity());
  }
 else {
    final Object origValue=indexDefinition.createValue(iRecord.getOriginalValue(indexField));
    final Object newValue=indexDefinition.getDocumentValueToIndex(iRecord);
    processIndexUpdateFieldAssignment(index,iRecord,origValue,newValue);
  }
}
