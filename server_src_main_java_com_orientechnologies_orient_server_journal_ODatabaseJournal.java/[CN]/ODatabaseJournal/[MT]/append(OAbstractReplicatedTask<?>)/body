{
  final OPERATION_TYPES iOperationType=task.getOperationType();
  final long iRunId=task.getRunId();
  final long iOperationId=task.getOperationSerial();
  lock.acquireExclusiveLock();
  try {
    long offset=0;
    int varSize=0;
switch (iOperationType) {
case RECORD_CREATE:
case RECORD_UPDATE:
case RECORD_DELETE:
{
        varSize=ORecordId.PERSISTENT_SIZE;
        final ORecordId rid=((OAbstractRecordReplicatedTask<?>)task).getRid();
        ODistributedServerLog.debug(this,cluster.getLocalNodeId(),null,DIRECTION.NONE,"journaled operation %s against db '%s' rid %s as #%d.%d",iOperationType.toString(),storage.getName(),rid,iRunId,iOperationId);
        if (isUpdatingLast(iRunId,iOperationId))         offset=getOffset2Update(iRunId,iOperationId,iOperationType,varSize);
 else         offset=appendOperationLogHeader(iOperationType,varSize);
        file.writeShort(offset + OFFSET_VARDATA,(short)rid.clusterId);
        file.writeLong(offset + OFFSET_VARDATA + OBinaryProtocol.SIZE_SHORT,rid.clusterPosition.longValue());
        break;
      }
case SQL_COMMAND:
{
      final OCommandSQL cmd=new OCommandSQL(task.getPayload());
      final String cmdText=cmd.getText();
      final byte[] cmdBinary=cmdText.getBytes();
      varSize=cmdBinary.length;
      ODistributedServerLog.debug(this,cluster.getLocalNodeId(),null,DIRECTION.NONE,"journaled operation %s against db '%s' cmd '%s' as #%d.%d",iOperationType.toString(),storage.getName(),cmdText,iRunId,iOperationId);
      offset=appendOperationLogHeader(iOperationType,varSize);
      file.write(offset + OFFSET_VARDATA,cmdText.getBytes());
      break;
    }
}
file.writeLong(offset + OFFSET_VARDATA + varSize+ OBinaryProtocol.SIZE_INT,iRunId);
file.writeLong(offset + OFFSET_VARDATA + varSize+ OBinaryProtocol.SIZE_INT+ OBinaryProtocol.SIZE_LONG,iOperationId);
if (synchEnabled) file.synch();
return offset + OFFSET_VARDATA + varSize+ OBinaryProtocol.SIZE_INT+ OBinaryProtocol.SIZE_LONG+ OBinaryProtocol.SIZE_LONG;
}
  finally {
lock.releaseExclusiveLock();
}
}
