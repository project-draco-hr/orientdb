{
  acquireExclusiveLock();
  try {
    if (recreateIndexesThread != null && recreateIndexesThread.isAlive())     return;
    final ODatabaseRecord db=getDatabase();
    document=db.load(new ORecordId(getDatabase().getStorage().getConfiguration().indexMgrRecordId));
    final ODocument doc=new ODocument();
    document.copyTo(doc);
    final ODatabaseDocumentTx newDb=new ODatabaseDocumentTx(db.getURL());
    Runnable recreateIndexesTask=new Runnable(){
      @Override public void run(){
        try {
          newDb.setProperty(ODatabase.OPTIONS.SECURITY.toString(),Boolean.FALSE);
          newDb.open("admin","nopass");
          ODatabaseRecordThreadLocal.INSTANCE.set(newDb);
          try {
            final int dataId=newDb.getStorage().getDataSegmentIdByName(OMetadataDefault.DATASEGMENT_INDEX_NAME);
            if (dataId > -1)             newDb.getStorage().dropDataSegment(OMetadataDefault.DATASEGMENT_INDEX_NAME);
            final int clusterId=newDb.getStorage().getClusterIdByName(OMetadataDefault.CLUSTER_INDEX_NAME);
            if (clusterId > -1)             newDb.dropCluster(clusterId,false);
            newDb.addDataSegment(OMetadataDefault.DATASEGMENT_INDEX_NAME,null);
            newDb.getStorage().addCluster(OClusterLocal.TYPE,OMetadataDefault.CLUSTER_INDEX_NAME,null,OMetadataDefault.DATASEGMENT_INDEX_NAME,true);
          }
 catch (          IllegalArgumentException ex) {
            OLogManager.instance().info(this,"Creating 'index' data-segment to store all the index content...");
            newDb.addDataSegment(OMetadataDefault.DATASEGMENT_INDEX_NAME,null);
            final OCluster indexCluster=newDb.getStorage().getClusterById(newDb.getStorage().getClusterIdByName(OMetadataDefault.CLUSTER_INDEX_NAME));
            try {
              indexCluster.set(ATTRIBUTES.DATASEGMENT,OMetadataDefault.DATASEGMENT_INDEX_NAME);
              OLogManager.instance().info(this,"Data-segment 'index' create correctly. Indexes will store content into this data-segment");
            }
 catch (            IOException e) {
              OLogManager.instance().error(this,"Error changing data segment for cluster 'index'",e);
            }
          }
          final Collection<ODocument> idxs=doc.field(CONFIG_INDEXES);
          if (idxs == null) {
            OLogManager.instance().warn(this,"List of indexes is empty.");
            return;
          }
          int ok=0;
          int errors=0;
          for (          ODocument idx : idxs) {
            try {
              String indexType=idx.field(OIndexInternal.CONFIG_TYPE);
              if (indexType == null) {
                OLogManager.instance().error(this,"Index type is null, will process other record.");
                errors++;
                continue;
              }
              final OIndexInternal<?> index=OIndexes.createIndex(newDb,indexType);
              OIndexInternal.IndexMetadata indexMetadata=index.loadMetadata(idx);
              OIndexDefinition indexDefinition=indexMetadata.getIndexDefinition();
              if (indexDefinition == null || !indexDefinition.isAutomatic()) {
                OLogManager.instance().info(this,"Index %s is not automatic index and will be added as is.",indexMetadata.getName());
                if (index.loadFromConfiguration(idx)) {
                  addIndexInternal(index);
                  setDirty();
                  save();
                  ok++;
                }
 else {
                  getDatabase().unregisterListener(index.getInternal());
                  index.delete();
                  errors++;
                }
                OLogManager.instance().info(this,"Index %s was added in DB index list.",index.getName());
              }
 else {
                String indexName=indexMetadata.getName();
                Set<String> clusters=indexMetadata.getClustersToIndex();
                String type=indexMetadata.getType();
                if (indexName != null && indexDefinition != null && clusters != null && !clusters.isEmpty() && type != null) {
                  OLogManager.instance().info(this,"Start creation of index %s",indexName);
                  index.create(indexName,indexDefinition,defaultClusterName,clusters,false,new OIndexRebuildOutputListener(index));
                  index.setRebuildingFlag();
                  addIndexInternal(index);
                  OLogManager.instance().info(this,"Index %s was successfully created and rebuild is going to be started.",indexName);
                  index.rebuild(new OIndexRebuildOutputListener(index));
                  index.flush();
                  setDirty();
                  save();
                  ok++;
                  OLogManager.instance().info(this,"Rebuild of %s index was successfully finished.",indexName);
                }
 else {
                  errors++;
                  OLogManager.instance().error(this,"Information about index was restored incorrectly, following data were loaded : " + "index name - %s, index definition %s, clusters %s, type %s.",indexName,indexDefinition,clusters,type);
                }
              }
            }
 catch (            Exception e) {
              OLogManager.instance().error(this,"Error during addition of index %s",idx);
              errors++;
            }
          }
          rebuildCompleted=true;
          newDb.close();
          OLogManager.instance().info(this,"%d indexes were restored successfully, %d errors",ok,errors);
        }
 catch (        Exception e) {
          OLogManager.instance().error(this,"Error when attempt to restore indexes after crash was performed.");
        }
      }
    }
;
    recreateIndexesThread=new Thread(recreateIndexesTask);
    recreateIndexesThread.start();
  }
  finally {
    releaseExclusiveLock();
  }
}
