{
  final List<Object> list=new ArrayList<Object>();
  final ODocument doc=new ODocument();
  list.add(doc);
  boolean hasNonAggregates=false;
  final Map<String,Object> proj=select.getProjections();
  for (  Map.Entry<String,Object> p : proj.entrySet()) {
    if (!(p.getValue() instanceof OSQLFunctionRuntime)) {
      hasNonAggregates=true;
      break;
    }
  }
  if (hasNonAggregates) {
    for (    Map.Entry<String,Object> entry : iResults.entrySet()) {
      final List<Object> resultSet=(List<Object>)entry.getValue();
      for (      Object r : resultSet) {
        if (r instanceof ODocument) {
          final ODocument d=(ODocument)r;
          for (          Map.Entry<String,Object> p : proj.entrySet()) {
            if (!(p.getValue() instanceof OSQLFunctionRuntime))             d.field(p.getKey(),p.getValue());
          }
        }
      }
    }
  }
  final List<Object> toMerge=new ArrayList<Object>();
  for (  Map.Entry<String,Object> p : proj.entrySet()) {
    if (p.getValue() instanceof OSQLFunctionRuntime) {
      final OSQLFunctionRuntime f=(OSQLFunctionRuntime)p.getValue();
      toMerge.clear();
      for (      Map.Entry<String,Object> entry : iResults.entrySet()) {
        final List<Object> resultSet=(List<Object>)entry.getValue();
        for (        Object r : resultSet) {
          if (r instanceof ODocument) {
            final ODocument d=(ODocument)r;
            toMerge.add(d.rawField(p.getKey()));
          }
        }
      }
      doc.field(p.getKey(),f.getFunction().mergeDistributedResult(toMerge));
    }
  }
  return list;
}
