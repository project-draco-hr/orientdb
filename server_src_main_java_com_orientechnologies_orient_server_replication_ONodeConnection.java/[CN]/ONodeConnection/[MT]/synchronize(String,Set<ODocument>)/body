{
  final long time=System.currentTimeMillis();
  logger.setDatabase(iDatabaseName);
  logger.log(this,Level.INFO,TYPE.REPLICATION,DIRECTION.IN,"synchronization started. Storing delta of updates...");
  try {
    ODocument cfg=new ODocument().field("nodes",iDbCfg,OType.EMBEDDEDSET);
    final OChannelBinaryClient network=beginRequest(OClusterProtocol.REQUEST_NODE2NODE_REPLICATION_SYNCHRONIZE);
    try {
      network.writeString(iDatabaseName);
      network.writeBytes(cfg.toStream());
      network.flush();
    }
  finally {
      endRequest();
    }
    beginResponse();
    try {
      int ops=0;
      final ORecordOperation opLog=new ORecordOperation();
      final int nodes=network.readInt();
      for (int n=0; n < nodes; ++n) {
        final String nodeId=network.readString();
        final int logEntries=network.readInt();
        for (int l=0; l < logEntries; ++l) {
          final byte[] buffer=network.readBytes();
          if (buffer == null)           continue;
          opLog.fromStream(buffer);
          ops++;
          logger.log(this,Level.INFO,TYPE.REPLICATION,DIRECTION.IN,"#%d received record %s",ops,opLog.record.getIdentity());
          replicator.getOperationLog(nodeId,iDatabaseName).appendLog(opLog.serial,opLog.type,(ORecordId)opLog.record.getIdentity());
        }
      }
      logger.log(this,Level.INFO,TYPE.REPLICATION,DIRECTION.IN,"synchronization completed. Received %d operations from remote node (%dms)",ops,(System.currentTimeMillis() - time));
    }
  finally {
      endResponse();
    }
  }
 catch (  OException e) {
    throw e;
  }
catch (  Exception e) {
    throw new OIOException("REPL DB (" + iDatabaseName + ") error on synchronization",e);
  }
}
