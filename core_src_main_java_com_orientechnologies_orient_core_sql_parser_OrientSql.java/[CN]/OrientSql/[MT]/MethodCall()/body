{
  OMethodCall jjtn000=new OMethodCall(JJTMETHODCALL);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  try {
    jj_consume_token(DOT);
    Identifier();
    jj_consume_token(LPAREN);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case NULL:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case THIS:
case RECORD_ATTRIBUTE:
case INTEGER_LITERAL:
case FLOATING_POINT_LITERAL:
case CHARACTER_LITERAL:
case STRING_LITERAL:
case TRUE:
case FALSE:
case LPAREN:
case LBRACE:
case LBRACKET:
case HOOK:
case COLON:
case MINUS:
case IN:
case KEY:
case IDENTIFIER:
case 142:
      Expression();
    label_19:     while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
        ;
      break;
default :
    jj_la1[85]=jj_gen;
  break label_19;
}
jj_consume_token(COMMA);
Expression();
}
break;
default :
jj_la1[86]=jj_gen;
;
}
jj_consume_token(RPAREN);
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
}
