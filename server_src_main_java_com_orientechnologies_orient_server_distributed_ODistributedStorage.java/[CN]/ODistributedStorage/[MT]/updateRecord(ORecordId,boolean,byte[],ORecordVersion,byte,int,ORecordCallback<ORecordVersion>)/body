{
  if (deletedRecords.get(iRecordId) != null)   throw new ORecordNotFoundException("Record " + iRecordId + " was not found");
  if (OScenarioThreadLocal.INSTANCE.get() == RUN_MODE.RUNNING_DISTRIBUTED)   return wrapped.updateRecord(iRecordId,updateContent,iContent,iVersion,iRecordType,iMode,iCallback);
  try {
    final String clusterName=getClusterNameByRID(iRecordId);
    final ODistributedConfiguration dbCfg=dManager.getDatabaseConfiguration(getName());
    final List<String> nodes=dbCfg.getServers(clusterName,null);
    if (nodes.isEmpty())     return wrapped.updateRecord(iRecordId,updateContent,iContent,iVersion,iRecordType,iMode,iCallback);
    Boolean executionModeSynch=dbCfg.isExecutionModeSynchronous(clusterName);
    if (executionModeSynch == null)     executionModeSynch=iMode == 0;
    if (executionModeSynch) {
      final OStorageOperationResult<ORawBuffer> previousContent=readRecord(iRecordId,null,false,null,false,LOCKING_STRATEGY.DEFAULT);
      final Object result=dManager.sendRequest(getName(),Collections.singleton(clusterName),nodes,new OUpdateRecordTask(iRecordId,previousContent.getResult().getBuffer(),previousContent.getResult().version,iContent,iVersion),EXECUTION_MODE.RESPONSE);
      if (result instanceof ONeedRetryException)       throw (ONeedRetryException)result;
 else       if (result instanceof Throwable)       throw new ODistributedException("Error on execution distributed UPDATE_RECORD",(Throwable)result);
      return new OStorageOperationResult<ORecordVersion>((ORecordVersion)result);
    }
    final OStorageOperationResult<ORecordVersion> localResult=wrapped.updateRecord(iRecordId,updateContent,iContent,iVersion,iRecordType,iMode,iCallback);
    nodes.remove(0);
    if (!nodes.isEmpty()) {
      final OStorageOperationResult<ORawBuffer> previousContent=readRecord(iRecordId,null,false,null,false,LOCKING_STRATEGY.DEFAULT);
      asynchronousExecution(new OAsynchDistributedOperation(getName(),Collections.singleton(clusterName),nodes,new OUpdateRecordTask(iRecordId,previousContent.getResult().getBuffer(),previousContent.getResult().version,iContent,iVersion)));
    }
    return localResult;
  }
 catch (  ONeedRetryException e) {
    throw e;
  }
catch (  Exception e) {
    handleDistributedException("Cannot route UPDATE_RECORD operation against %s to the distributed node",e,iRecordId);
    return null;
  }
}
