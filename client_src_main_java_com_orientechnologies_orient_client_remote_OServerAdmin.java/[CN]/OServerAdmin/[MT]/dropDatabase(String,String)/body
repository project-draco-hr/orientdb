{
  boolean retry=true;
  while (retry)   try {
    final OChannelBinaryAsynchClient network=storage.beginRequest(OChannelBinaryProtocol.REQUEST_DB_DROP);
    try {
      network.writeString(iDatabaseName);
      network.writeString(storageType);
    }
  finally {
      storage.endRequest(network);
    }
    storage.getResponse(network);
    retry=false;
  }
 catch (  OModificationOperationProhibitedException oope) {
    retry=handleDBFreeze();
  }
catch (  Exception e) {
    throw OException.wrapException(new OStorageException("Cannot delete the remote storage: " + storage.getName()),e);
  }
  final Set<OStorage> underlyingStorages=new HashSet<OStorage>();
  for (  OStorage s : Orient.instance().getStorages()) {
    if (s.getType().equals(storage.getType()) && s.getName().equals(storage.getName())) {
      underlyingStorages.add(s.getUnderlying());
      Orient.instance().unregisterStorage(s);
    }
  }
  for (  OStorage s : underlyingStorages) {
    Orient.instance().unregisterStorage(s);
  }
  ODatabaseRecordThreadLocal.INSTANCE.remove();
  return this;
}
