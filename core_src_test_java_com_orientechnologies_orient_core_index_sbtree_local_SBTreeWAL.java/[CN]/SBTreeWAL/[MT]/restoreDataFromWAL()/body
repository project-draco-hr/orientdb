{
  OStoragePerformanceStatistic storagePerformanceStatistic=new OStoragePerformanceStatistic(OGlobalConfiguration.DISK_CACHE_PAGE_SIZE.getValueAsInteger() * 1024,"test",1);
  ODiskWriteAheadLog log=new ODiskWriteAheadLog(4,-1,10 * 1024L * OWALPage.PAGE_SIZE,null,actualStorage);
  OLogSequenceNumber lsn=log.begin();
  List<OWALRecord> atomicUnit=new ArrayList<OWALRecord>();
  boolean atomicChangeIsProcessed=false;
  while (lsn != null) {
    OWALRecord walRecord=log.read(lsn);
    atomicUnit.add(walRecord);
    if (!atomicChangeIsProcessed) {
      Assert.assertTrue(walRecord instanceof OAtomicUnitStartRecord);
      atomicChangeIsProcessed=true;
    }
 else     if (walRecord instanceof OAtomicUnitEndRecord) {
      atomicChangeIsProcessed=false;
      for (      OWALRecord restoreRecord : atomicUnit) {
        if (restoreRecord instanceof OAtomicUnitStartRecord || restoreRecord instanceof OAtomicUnitEndRecord || restoreRecord instanceof ONonTxOperationPerformedWALRecord|| restoreRecord instanceof OFileCreatedWALRecord)         continue;
        final OUpdatePageRecord updatePageRecord=(OUpdatePageRecord)restoreRecord;
        final long fileId=updatePageRecord.getFileId();
        final long pageIndex=updatePageRecord.getPageIndex();
        if (!expectedWriteCache.isOpen(fileId))         expectedReadCache.openFile(fileId,expectedWriteCache);
        OCacheEntry cacheEntry=expectedReadCache.load(fileId,pageIndex,true,expectedWriteCache,0,storagePerformanceStatistic);
        if (cacheEntry == null) {
          do {
            cacheEntry=expectedReadCache.allocateNewPage(fileId,expectedWriteCache,storagePerformanceStatistic);
          }
 while (cacheEntry.getPageIndex() != pageIndex);
        }
        cacheEntry.acquireExclusiveLock();
        try {
          ODurablePage durablePage=new ODurablePage(cacheEntry,null);
          durablePage.restoreChanges(updatePageRecord.getChanges());
          durablePage.setLsn(updatePageRecord.getLsn());
          cacheEntry.markDirty();
        }
  finally {
          cacheEntry.releaseExclusiveLock();
          expectedReadCache.release(cacheEntry,expectedWriteCache,storagePerformanceStatistic);
        }
      }
      atomicUnit.clear();
    }
 else {
      Assert.assertTrue(walRecord instanceof OUpdatePageRecord || walRecord instanceof ONonTxOperationPerformedWALRecord || walRecord instanceof OFileCreatedWALRecord);
    }
    lsn=log.next(lsn);
  }
  Assert.assertTrue(atomicUnit.isEmpty());
  log.close();
}
