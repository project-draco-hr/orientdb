{
  if (!getNodeSource().equals(iManager.getLocalNodeName())) {
    if (database == null)     throw new ODistributedException("Database instance is null");
    final String databaseName=database.getName();
    final Lock lock=iManager.getLock("sync." + databaseName);
    if (lock.tryLock()) {
      try {
        final Long lastDeployment=(Long)iManager.getConfigurationMap().get(DEPLOYDB + databaseName);
        if (lastDeployment != null && lastDeployment.longValue() == random) {
          ODistributedServerLog.debug(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.NONE,"skip deploying database '%s' because already executed",databaseName);
          return Boolean.FALSE;
        }
        iManager.getConfigurationMap().put(DEPLOYDB + databaseName,random);
        iManager.setDatabaseStatus(getNodeSource(),databaseName,ODistributedServerManager.DB_STATUS.SYNCHRONIZING);
        iManager.setDatabaseStatus(iManager.getLocalNodeName(),databaseName,ODistributedServerManager.DB_STATUS.SYNCHRONIZING);
        ODistributedServerLog.info(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.OUT,"deploying database %s...",databaseName);
        OLogSequenceNumber endLSN=null;
        File backupFile=((ODistributedStorage)database.getStorage()).getLastValidBackup();
        if (backupFile == null || !backupFile.exists()) {
          backupFile=new File(Orient.getTempPath() + "/backup_" + database.getName()+ ".zip");
          final int compressionRate=OGlobalConfiguration.DISTRIBUTED_DEPLOYDB_TASK_COMPRESSION.getValueAsInteger();
          ODistributedServerLog.info(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.OUT,"creating backup of database '%s' (compressionRate=%d) in directory: %s...",databaseName,compressionRate,backupFile.getAbsolutePath());
          if (backupFile.exists())           backupFile.delete();
 else           backupFile.getParentFile().mkdirs();
          backupFile.createNewFile();
          final FileOutputStream fileOutputStream=new FileOutputStream(backupFile);
          final File completedFile=new File(backupFile.getAbsolutePath() + ".completed");
          if (completedFile.exists())           completedFile.delete();
          endLSN=((OAbstractPaginatedStorage)database.getStorage().getUnderlying()).getLSN();
          new Thread(new Runnable(){
            @Override public void run(){
              Thread.currentThread().setName("OrientDB SyncDatabase node=" + iManager.getLocalNodeName() + " db="+ databaseName);
              try {
                database.backup(fileOutputStream,null,null,new OCommandOutputListener(){
                  @Override public void onMessage(                  String iText){
                    if (iText.startsWith("\n"))                     iText=iText.substring(1);
                    OLogManager.instance().info(this,iText);
                  }
                }
,OGlobalConfiguration.DISTRIBUTED_DEPLOYDB_TASK_COMPRESSION.getValueAsInteger(),CHUNK_MAX_SIZE);
                ODistributedServerLog.info(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.OUT,"backup of database '%s' completed. lastOperationId=%d...",databaseName,requestId);
              }
 catch (              IOException e) {
                OLogManager.instance().error(this,"Cannot execute backup of database '%s' for deploy database",e,databaseName);
              }
 finally {
                try {
                  fileOutputStream.close();
                }
 catch (                IOException e) {
                }
                try {
                  completedFile.createNewFile();
                }
 catch (                IOException e) {
                  OLogManager.instance().error(this,"Cannot create file of backup completed: %s",e,completedFile);
                }
              }
            }
          }
).start();
          ((ODistributedStorage)database.getStorage()).setLastValidBackup(backupFile);
        }
 else {
          ODistributedServerLog.info(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.OUT,"reusing last backup of database '%s' in directory: %s...",databaseName,backupFile.getAbsolutePath());
        }
        final ODistributedDatabaseChunk chunk=new ODistributedDatabaseChunk(requestId,backupFile,0,CHUNK_MAX_SIZE,endLSN,false);
        ODistributedServerLog.info(this,iManager.getLocalNodeName(),getNodeSource(),ODistributedServerLog.DIRECTION.OUT,"- transferring chunk #%d offset=%d size=%s...",1,0,OFileUtils.getSizeAsNumber(chunk.buffer.length));
        if (chunk.last)         iManager.setDatabaseStatus(iManager.getLocalNodeName(),databaseName,ODistributedServerManager.DB_STATUS.ONLINE);
        return chunk;
      }
  finally {
        lock.unlock();
        ODistributedServerLog.info(this,iManager.getLocalNodeName(),getNodeSource(),ODistributedServerLog.DIRECTION.OUT,"deploy database task completed");
      }
    }
 else     ODistributedServerLog.debug(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.NONE,"skip deploying database %s because another node is doing it",databaseName);
  }
 else   ODistributedServerLog.debug(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.NONE,"skip deploying database from the same node");
  return Boolean.FALSE;
}
