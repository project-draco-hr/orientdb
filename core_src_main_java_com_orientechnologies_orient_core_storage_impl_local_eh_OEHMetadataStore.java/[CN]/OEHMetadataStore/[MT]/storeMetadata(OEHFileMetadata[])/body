{
  int size=0;
  for (  OEHFileMetadata extendibleHashingFile : files) {
    final String name;
    if (extendibleHashingFile.getFile() != null)     name=extendibleHashingFile.getFile().getName();
 else     name="";
    size+=OStringSerializer.INSTANCE.getObjectSize(name);
    size+=2 * OLongSerializer.LONG_SIZE;
  }
  if (file.getFilledUpTo() < size + 2 * OIntegerSerializer.INT_SIZE)   file.allocateSpace(size - file.getFilledUpTo());
  byte[] buffer=new byte[size];
  int offset=0;
  for (  OEHFileMetadata extendibleHashingFile : files) {
    OStringSerializer.INSTANCE.serializeNative(extendibleHashingFile.getFile().getName(),buffer,offset);
    offset+=OStringSerializer.INSTANCE.getObjectSizeNative(buffer,offset);
    OLongSerializer.INSTANCE.serializeNative(extendibleHashingFile.geBucketsCount(),buffer,offset);
    offset+=OLongSerializer.LONG_SIZE;
    OLongSerializer.INSTANCE.serializeNative(extendibleHashingFile.getTombstonePosition(),buffer,offset);
    offset+=OLongSerializer.LONG_SIZE;
  }
  file.writeInt(0,files.length);
  file.writeInt(OIntegerSerializer.INT_SIZE,buffer.length);
  file.write(2 * OIntegerSerializer.INT_SIZE,buffer);
}
