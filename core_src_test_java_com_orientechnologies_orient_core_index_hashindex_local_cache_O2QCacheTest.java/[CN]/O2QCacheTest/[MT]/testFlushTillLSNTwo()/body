{
  closeBufferAndDeleteFile();
  File file=new File(storageLocal.getConfiguration().getDirectory());
  if (!file.exists())   file.mkdir();
  writeAheadLog=new OWriteAheadLog(2,-1,4 * OWALPage.PAGE_SIZE,2 * 100 * OWALPage.PAGE_SIZE,storageLocal);
  final OStorageSegmentConfiguration segmentConfiguration=new OStorageSegmentConfiguration(storageLocal.getConfiguration(),"o2QCacheTest",0);
  segmentConfiguration.fileType=OFileFactory.CLASSIC;
  buffer=new O2QCache(4 * (8 + systemOffset),2,directMemory,writeAheadLog,8 + systemOffset,storageLocal,true);
  Assert.assertNull(writeAheadLog.getFlushedLSN());
  long fileId=buffer.openFile(fileConfiguration,".tst");
  OLogSequenceNumber lsnToFlush=null;
  for (int i=0; i < 8; i++) {
    long dataPointer=buffer.load(fileId,i);
    OLogSequenceNumber lsn=writeAheadLog.logRecord(new OUpdatePageRecord(i,"test" + i));
    setLsn(dataPointer,lsn);
    if (i == 5)     lsnToFlush=lsn;
    buffer.markDirty(fileId,i);
    buffer.release(fileId,i);
  }
  Assert.assertEquals(writeAheadLog.getFlushedLSN(),lsnToFlush);
  Assert.assertEquals(buffer.getAm().size(),0);
  Assert.assertEquals(buffer.getA1out().size(),2);
  Assert.assertEquals(buffer.getA1in().size(),4);
  writeAheadLog.close(false);
  writeAheadLog=new OWriteAheadLog(2,-1,4 * OWALPage.PAGE_SIZE,2 * 100 * OWALPage.PAGE_SIZE,storageLocal);
  OWALRecord record=writeAheadLog.read(writeAheadLog.begin());
  for (int i=0; i < 6; i++) {
    Assert.assertEquals(record,new OUpdatePageRecord(i,"test" + i));
    OLogSequenceNumber lsn=writeAheadLog.next(record.getLsn());
    if (lsn != null)     record=writeAheadLog.read(lsn);
  }
  Assert.assertNull(writeAheadLog.next(record.getLsn()));
}
