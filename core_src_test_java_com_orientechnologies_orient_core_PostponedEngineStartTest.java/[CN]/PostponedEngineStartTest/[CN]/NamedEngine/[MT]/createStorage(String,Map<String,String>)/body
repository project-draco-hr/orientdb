{
  return new OStorage(){
    @Override public List<String> backup(    OutputStream out,    Map<String,Object> options,    Callable<Object> callable,    OCommandOutputListener iListener,    int compressionLevel,    int bufferSize) throws IOException {
      return null;
    }
    @Override public void restore(    InputStream in,    Map<String,Object> options,    Callable<Object> callable,    OCommandOutputListener iListener) throws IOException {
    }
    @Override public boolean existsResource(    String iName){
      return false;
    }
    @Override public <T>T removeResource(    String iName){
      return null;
    }
    @Override public <T>T getResource(    String iName,    Callable<T> iCallback){
      return null;
    }
    @Override public void open(    String iUserName,    String iUserPassword,    Map<String,Object> iProperties){
    }
    @Override public void create(    Map<String,Object> iProperties){
    }
    @Override public boolean exists(){
      return false;
    }
    @Override public void reload(){
    }
    @Override public void delete(){
    }
    @Override public void close(){
    }
    @Override public void close(    boolean iForce,    boolean onDelete){
    }
    @Override public boolean isClosed(){
      return false;
    }
    @Override public OStorageOperationResult<OPhysicalPosition> createRecord(    ORecordId iRecordId,    byte[] iContent,    int iRecordVersion,    byte iRecordType,    int iMode,    ORecordCallback<Long> iCallback){
      return null;
    }
    @Override public OStorageOperationResult<ORawBuffer> readRecord(    ORecordId iRid,    String iFetchPlan,    boolean iIgnoreCache,    ORecordCallback<ORawBuffer> iCallback){
      return null;
    }
    @Override public OStorageOperationResult<ORawBuffer> readRecordIfVersionIsNotLatest(    ORecordId rid,    String fetchPlan,    boolean ignoreCache,    int recordVersion) throws ORecordNotFoundException {
      return null;
    }
    @Override public OStorageOperationResult<Integer> updateRecord(    ORecordId iRecordId,    boolean updateContent,    byte[] iContent,    int iVersion,    byte iRecordType,    int iMode,    ORecordCallback<Integer> iCallback){
      return null;
    }
    @Override public OStorageOperationResult<Integer> recyclePosition(    ORecordId iRecordId,    byte[] iContent,    int iVersion,    byte iRecordType){
      return null;
    }
    @Override public OStorageOperationResult<Boolean> deleteRecord(    ORecordId iRecordId,    int iVersion,    int iMode,    ORecordCallback<Boolean> iCallback){
      return null;
    }
    @Override public ORecordMetadata getRecordMetadata(    ORID rid){
      return null;
    }
    @Override public boolean cleanOutRecord(    ORecordId recordId,    int recordVersion,    int iMode,    ORecordCallback<Boolean> callback){
      return false;
    }
    @Override public List<ORecordOperation> commit(    OTransaction iTx,    Runnable callback){
      return null;
    }
    @Override public OUncompletedCommit<List<ORecordOperation>> initiateCommit(    OTransaction iTx,    Runnable callback){
      return null;
    }
    @Override public void rollback(    OTransaction iTx){
    }
    @Override public OStorageConfiguration getConfiguration(){
      return null;
    }
    @Override public int getClusters(){
      return 0;
    }
    @Override public Set<String> getClusterNames(){
      return null;
    }
    @Override public OCluster getClusterById(    int iId){
      return null;
    }
    @Override public Collection<? extends OCluster> getClusterInstances(){
      return null;
    }
    @Override public int addCluster(    String iClusterName,    boolean forceListBased,    Object... iParameters){
      return 0;
    }
    @Override public int addCluster(    String iClusterName,    int iRequestedId,    boolean forceListBased,    Object... iParameters){
      return 0;
    }
    @Override public boolean dropCluster(    String iClusterName,    boolean iTruncate){
      return false;
    }
    @Override public boolean dropCluster(    int iId,    boolean iTruncate){
      return false;
    }
    @Override public long count(    int iClusterId){
      return 0;
    }
    @Override public long count(    int iClusterId,    boolean countTombstones){
      return 0;
    }
    @Override public long count(    int[] iClusterIds){
      return 0;
    }
    @Override public long count(    int[] iClusterIds,    boolean countTombstones){
      return 0;
    }
    @Override public long getSize(){
      return 0;
    }
    @Override public long countRecords(){
      return 0;
    }
    @Override public int getDefaultClusterId(){
      return 0;
    }
    @Override public void setDefaultClusterId(    int defaultClusterId){
    }
    @Override public int getClusterIdByName(    String iClusterName){
      return 0;
    }
    @Override public String getPhysicalClusterNameById(    int iClusterId){
      return null;
    }
    @Override public boolean checkForRecordValidity(    OPhysicalPosition ppos){
      return false;
    }
    @Override public String getName(){
      return null;
    }
    @Override public String getURL(){
      return null;
    }
    @Override public long getVersion(){
      return 0;
    }
    @Override public void synch(){
    }
    @Override public Object command(    OCommandRequestText iCommand){
      return null;
    }
    @Override public long[] getClusterDataRange(    int currentClusterId){
      return new long[0];
    }
    @Override public <V>V callInLock(    Callable<V> iCallable,    boolean iExclusiveLock){
      return null;
    }
    @Override public OPhysicalPosition[] higherPhysicalPositions(    int clusterId,    OPhysicalPosition physicalPosition){
      return new OPhysicalPosition[0];
    }
    @Override public OPhysicalPosition[] lowerPhysicalPositions(    int clusterId,    OPhysicalPosition physicalPosition){
      return new OPhysicalPosition[0];
    }
    @Override public OPhysicalPosition[] ceilingPhysicalPositions(    int clusterId,    OPhysicalPosition physicalPosition){
      return new OPhysicalPosition[0];
    }
    @Override public OPhysicalPosition[] floorPhysicalPositions(    int clusterId,    OPhysicalPosition physicalPosition){
      return new OPhysicalPosition[0];
    }
    @Override public STATUS getStatus(){
      return null;
    }
    @Override public String getType(){
      return null;
    }
    @Override public void checkForClusterPermissions(    String iClusterName){
    }
    @Override public OStorage getUnderlying(){
      return null;
    }
    @Override public boolean isRemote(){
      return false;
    }
    @Override public boolean isDistributed(){
      return false;
    }
    @Override public boolean isAssigningClusterIds(){
      return false;
    }
    @Override public OSBTreeCollectionManager getSBtreeCollectionManager(){
      return null;
    }
    @Override public OCurrentStorageComponentsFactory getComponentsFactory(){
      return null;
    }
    @Override public OStorageOperationResult<Boolean> hideRecord(    ORecordId recordId,    int mode,    ORecordCallback<Boolean> callback){
      return null;
    }
    @Override public OCluster getClusterByName(    String clusterName){
      return null;
    }
    @Override public ORecordConflictStrategy getConflictStrategy(){
      return null;
    }
    @Override public void setConflictStrategy(    ORecordConflictStrategy iResolver){
    }
    @Override public String incrementalBackup(    String backupDirectory){
      return null;
    }
    @Override public void restoreFromIncrementalBackup(    String filePath){
    }
    @Override public void shutdown(){
    }
  }
;
}
