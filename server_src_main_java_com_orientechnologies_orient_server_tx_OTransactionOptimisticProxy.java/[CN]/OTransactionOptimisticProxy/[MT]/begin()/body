{
  super.begin();
  OException toThrow=null;
  try {
    setUsingLog(channel.readByte() == 1);
    Map<ORecord,byte[]> lazyDeserialize=new IdentityHashMap<ORecord,byte[]>();
    byte lastTxStatus;
    for (lastTxStatus=channel.readByte(); lastTxStatus == 1; lastTxStatus=channel.readByte()) {
      final byte recordStatus=channel.readByte();
      final ORecordId rid=channel.readRID();
      final byte recordType=channel.readByte();
      final ORecordOperation entry=new OTransactionEntryProxy(recordType);
      entry.type=recordStatus;
switch (recordStatus) {
case ORecordOperation.CREATED:
        byte[] content=channel.readBytes();
      ORecordInternal.fill(entry.getRecord(),rid,OVersionFactory.instance().createVersion(),null,true);
    lazyDeserialize.put(entry.getRecord(),content);
  createdRecords.put(rid.copy(),entry.getRecord());
break;
case ORecordOperation.UPDATED:
ORecordVersion version=channel.readVersion();
byte[] bytes=channel.readBytes();
ORecordInternal.fill(entry.getRecord(),rid,version,null,true);
lazyDeserialize.put(entry.getRecord(),bytes);
if (protocolVersion >= 23) ORecordInternal.setContentChanged(entry.getRecord(),channel.readBoolean());
break;
case ORecordOperation.DELETED:
final ORecord rec=rid.getRecord();
ORecordVersion deleteVersion=channel.readVersion();
if (rec == null) toThrow=new OConcurrentModificationException(rid.getIdentity(),new OSimpleVersion(-1),deleteVersion,ORecordOperation.DELETED);
ORecordInternal.setVersion(rec,deleteVersion.getCounter());
entry.setRecord(rec);
break;
default :
throw new OTransactionException("Unrecognized tx command: " + recordStatus);
}
tempEntries.put(entry.getRecord().getIdentity(),entry);
}
String dbSerializerName="";
if (database != null) dbSerializerName=database.getSerializer().toString();
String name=oNetworkProtocolBinary.getRecordSerializerName();
for (Map.Entry<ORecord,byte[]> entry : lazyDeserialize.entrySet()) {
ORecord record=entry.getKey();
if (ORecordInternal.getRecordType(record) == ODocument.RECORD_TYPE && !dbSerializerName.equals(name)) {
try {
ORecordSerializer ser=ORecordSerializerFactory.instance().getFormat(name);
ONetworkThreadLocalSerializer.setNetworkSerializer(ser);
record.fromStream(entry.getValue());
}
  finally {
ONetworkThreadLocalSerializer.setNetworkSerializer(null);
}
record.setDirty();
}
 else {
record.fromStream(entry.getValue());
record.setDirty();
}
}
if (toThrow != null) throw toThrow;
if (lastTxStatus == -1) throw new OTransactionAbortedException("Transaction aborted by the client");
final ODocument remoteIndexEntries=new ODocument(channel.readBytes());
fillIndexOperations(remoteIndexEntries);
for (Entry<ORID,ORecordOperation> entry : tempEntries.entrySet()) {
if (entry.getValue().type == ORecordOperation.UPDATED) {
final ORecord record=entry.getValue().record.getRecord();
final ORecord loadedRecord=record.getIdentity().copy().getRecord();
if (loadedRecord == null) throw new ORecordNotFoundException(record.getIdentity().toString());
if (ORecordInternal.getRecordType(loadedRecord) == ODocument.RECORD_TYPE && ORecordInternal.getRecordType(loadedRecord) == ORecordInternal.getRecordType(record)) {
((ODocument)loadedRecord).merge((ODocument)record,false,false);
((ODocument)loadedRecord).setDirty();
loadedRecord.getRecordVersion().copyFrom(record.getRecordVersion());
entry.getValue().record=loadedRecord;
updatedRecords.put((ORecordId)entry.getKey(),entry.getValue().getRecord());
}
}
addRecord(entry.getValue().getRecord(),entry.getValue().type,null);
}
tempEntries.clear();
for (ORecord record : createdRecords.values()) unmarshallRecord(record);
for (ORecord record : updatedRecords.values()) unmarshallRecord(record);
}
 catch (IOException e) {
rollback();
throw OException.wrapException(new OSerializationException("Cannot read transaction record from the network. Transaction aborted"),e);
}
}
