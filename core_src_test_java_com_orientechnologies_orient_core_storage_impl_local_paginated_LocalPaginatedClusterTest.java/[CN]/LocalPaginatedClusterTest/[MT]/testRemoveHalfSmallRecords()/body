{
  final int records=10000;
  long seed=System.currentTimeMillis();
  MersenneTwisterFast mersenneTwisterFast=new MersenneTwisterFast(seed);
  System.out.println("testRemoveHalfSmallRecords seed : " + seed);
  Map<Long,byte[]> positionRecordMap=new HashMap<Long,byte[]>();
  int recordVersion=0;
  recordVersion++;
  recordVersion++;
  for (int i=0; i < records; i++) {
    int recordSize=mersenneTwisterFast.nextInt(OClusterPage.MAX_RECORD_SIZE - 1) + 1;
    byte[] smallRecord=new byte[recordSize];
    mersenneTwisterFast.nextBytes(smallRecord);
    final OPhysicalPosition physicalPosition=paginatedCluster.createRecord(smallRecord,recordVersion,(byte)2);
    positionRecordMap.put(physicalPosition.clusterPosition,smallRecord);
  }
  int deletedRecords=0;
  Assert.assertEquals(records,paginatedCluster.getEntries());
  Set<Long> deletedPositions=new HashSet<Long>();
  Iterator<Long> positionIterator=positionRecordMap.keySet().iterator();
  while (positionIterator.hasNext()) {
    long clusterPosition=positionIterator.next();
    if (mersenneTwisterFast.nextBoolean()) {
      deletedPositions.add(clusterPosition);
      Assert.assertTrue(paginatedCluster.deleteRecord(clusterPosition));
      deletedRecords++;
      Assert.assertEquals(records - deletedRecords,paginatedCluster.getEntries());
      positionIterator.remove();
    }
  }
  Assert.assertEquals(paginatedCluster.getEntries(),records - deletedRecords);
  for (  long deletedPosition : deletedPositions) {
    Assert.assertNull(paginatedCluster.readRecord(deletedPosition));
    Assert.assertFalse(paginatedCluster.deleteRecord(deletedPosition));
  }
  for (  Map.Entry<Long,byte[]> entry : positionRecordMap.entrySet()) {
    ORawBuffer rawBuffer=paginatedCluster.readRecord(entry.getKey());
    Assert.assertNotNull(rawBuffer);
    Assert.assertEquals(rawBuffer.version,recordVersion);
    Assert.assertEquals(rawBuffer.buffer,entry.getValue());
    Assert.assertEquals(rawBuffer.recordType,2);
  }
}
