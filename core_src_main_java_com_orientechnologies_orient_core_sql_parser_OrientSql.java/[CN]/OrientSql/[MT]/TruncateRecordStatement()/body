{
  OTruncateRecordStatement jjtn000=new OTruncateRecordStatement(JJTTRUNCATERECORDSTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  ORid lastRecord;
  try {
    jj_consume_token(TRUNCATE);
    jj_consume_token(RECORD);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INTEGER_LITERAL:
case MINUS:
case 199:
      jjtn000.record=Rid();
    break;
case LBRACKET:
  jj_consume_token(LBRACKET);
jjtn000.records=new ArrayList<ORid>();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INTEGER_LITERAL:
case MINUS:
case 199:
lastRecord=Rid();
jjtn000.records.add(lastRecord);
label_46: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[261]=jj_gen;
break label_46;
}
jj_consume_token(COMMA);
lastRecord=Rid();
jjtn000.records.add(lastRecord);
}
break;
default :
jj_la1[262]=jj_gen;
;
}
jj_consume_token(RBRACKET);
break;
default :
jj_la1[263]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
