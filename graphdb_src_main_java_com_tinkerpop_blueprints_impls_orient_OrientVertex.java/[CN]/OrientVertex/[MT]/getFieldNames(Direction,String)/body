{
  if (iClassNames != null && iClassNames.length == 1 && iClassNames[0].equalsIgnoreCase("E"))   iClassNames=null;
  final List<String> result=new ArrayList<String>();
  if (settings.isUseVertexFieldsForEdgeLabels()) {
    if (iClassNames == null) {
      return null;
    }
    OSchemaProxy schema=getGraph().getRawGraph().getMetadata().getSchema();
    Set<String> allClassNames=new HashSet<String>();
    for (    String className : iClassNames) {
      allClassNames.add(className);
      OClass clazz=schema.getClass(className);
      if (clazz != null) {
        Collection<OClass> subClasses=clazz.getAllSubclasses();
        for (        OClass subClass : subClasses) {
          allClassNames.add(subClass.getName());
        }
      }
    }
    for (    String className : allClassNames) {
switch (iDirection) {
case OUT:
        result.add(CONNECTION_OUT_PREFIX + className);
      break;
case IN:
    result.add(CONNECTION_IN_PREFIX + className);
  break;
case BOTH:
result.add(CONNECTION_OUT_PREFIX + className);
result.add(CONNECTION_IN_PREFIX + className);
break;
}
}
}
 else {
if (iDirection == Direction.OUT) result.add(OrientBaseGraph.CONNECTION_OUT);
 else if (iDirection == Direction.IN) result.add(OrientBaseGraph.CONNECTION_IN);
 else {
result.add(OrientBaseGraph.CONNECTION_OUT);
result.add(OrientBaseGraph.CONNECTION_IN);
}
}
return result.toArray(new String[result.size()]);
}
