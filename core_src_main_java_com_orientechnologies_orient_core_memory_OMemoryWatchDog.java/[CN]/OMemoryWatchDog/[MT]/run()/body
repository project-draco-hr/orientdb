{
  Orient.instance().getProfiler().registerHookValue("system.memory.alerts","Number of alerts received by JVM to free memory resources",METRIC_TYPE.COUNTER,new OProfilerHookValue(){
    public Object getValue(){
      return alertTimes;
    }
  }
);
  Orient.instance().getProfiler().registerHookValue("system.memory.lastGC","Date of last System.gc() invocation",METRIC_TYPE.STAT,new OProfilerHookValue(){
    public Object getValue(){
      return lastGC;
    }
  }
);
  long autoFreeCheckEveryMs=OGlobalConfiguration.MEMORY_AUTOFREE_CHECK_EVERY.getValueAsLong();
  Orient.instance().getTimer().schedule(new TimerTask(){
    @Override public void run(){
      MemoryUsage heapMemory=memBean.getHeapMemoryUsage();
      final long usedHeap=heapMemory.getUsed();
      final long maxHeap=heapMemory.getMax();
      final int usedMemoryPer=(int)(usedHeap * 100 / maxHeap);
      if (OLogManager.instance().isDebugEnabled())       OLogManager.instance().debug(this,"Checking if memory is lower than configured (%s): used %s of %s (%d%%)",OFileUtils.getSizeAsString(autoFreeHeapThreshold),OFileUtils.getSizeAsString(usedHeap),OFileUtils.getSizeAsString(maxHeap),usedMemoryPer);
      if (!isMemoryAvailable()) synchronized (listeners) {
        for (        ListenerWrapper listener : listeners.keySet()) {
          try {
            listener.listener.lowMemory(maxHeap - usedHeap,100 - usedMemoryPer);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
,autoFreeCheckEveryMs,autoFreeCheckEveryMs);
  while (true) {
    try {
      final Reference<?> res=monitorQueue.remove(CHECK_TIMEOUT);
      if (Thread.interrupted())       break;
      if (res != null) {
        alertTimes++;
        MemoryUsage heapMemory=memBean.getHeapMemoryUsage();
        final long usedHeap=heapMemory.getUsed();
        final long maxHeap=heapMemory.getMax();
        final int usedMemoryPer=(int)(usedHeap * 100 / maxHeap);
        if (OLogManager.instance().isDebugEnabled())         OLogManager.instance().debug(this,"Free memory is low %s of %s (%d%%), calling listeners to free memory...",OFileUtils.getSizeAsString(maxHeap - usedHeap),OFileUtils.getSizeAsString(maxHeap),100 - usedMemoryPer);
        final long timer=Orient.instance().getProfiler().startChrono();
synchronized (listeners) {
          for (          ListenerWrapper listener : listeners.keySet()) {
            try {
              listener.listener.lowMemory(maxHeap - usedHeap,100 - usedMemoryPer);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
        Orient.instance().getProfiler().stopChrono("OMemoryWatchDog.freeResources","WatchDog free resources",timer);
      }
    }
 catch (    InterruptedException e) {
      break;
    }
catch (    Exception ignored) {
    }
 finally {
      monitorRef=new SoftReference<Object>(new Object(),monitorQueue);
    }
  }
  OLogManager.instance().debug(this,"[OMemoryWatchDog] shutdowning...");
synchronized (listeners) {
    listeners.clear();
  }
  monitorRef=null;
}
