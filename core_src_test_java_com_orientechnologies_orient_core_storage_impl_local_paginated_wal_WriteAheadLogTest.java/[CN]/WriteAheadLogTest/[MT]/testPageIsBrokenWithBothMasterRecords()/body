{
  writeAheadLog.logRecord(new OSetPageDataRecord(20,"test"));
  writeAheadLog.logRecord(new OSetPageDataRecord(20,"test"));
  OLogSequenceNumber numberToDelete=writeAheadLog.logRecord(new OSetPageDataRecord(20,"test"));
  writeAheadLog.logFuzzyCheckPointStart();
  writeAheadLog.logFuzzyCheckPointStart();
  Assert.assertNotNull(writeAheadLog.getLastCheckpoint());
  long logSize=writeAheadLog.size();
  writeAheadLog.close();
  RandomAccessFile walFile=new RandomAccessFile(new File(writeAheadLog.getWalLocation(),"WriteAheadLogTest.0.wal"),"rw");
  Assert.assertEquals(logSize,walFile.length());
  walFile.seek(numberToDelete.getPosition() + 2 * OIntegerSerializer.INT_SIZE + 1);
  int bt=walFile.read();
  bt++;
  walFile.seek(numberToDelete.getPosition() + 2 * OIntegerSerializer.INT_SIZE + 1);
  walFile.write(bt);
  walFile.close();
  writeAheadLog=createWAL();
  OLogSequenceNumber lsn=writeAheadLog.begin();
  lsn=writeAheadLog.next(lsn);
  lsn=writeAheadLog.next(lsn);
  try {
    writeAheadLog.read(lsn);
    Assert.fail();
  }
 catch (  OWriteAheadLogRecordIsBrokenException e) {
  }
  writeAheadLog.restore();
  lsn=writeAheadLog.begin();
  lsn=writeAheadLog.next(lsn);
  lsn=writeAheadLog.next(lsn);
  Assert.assertNull(lsn);
  Assert.assertNull(writeAheadLog.getLastCheckpoint());
  Assert.assertEquals(writeAheadLog.size(),new File(writeAheadLog.getWalLocation(),"WriteAheadLogTest.0.wal").length());
  writeAheadLog.close();
  writeAheadLog=createWAL();
  Assert.assertNull(writeAheadLog.getLastCheckpoint());
}
