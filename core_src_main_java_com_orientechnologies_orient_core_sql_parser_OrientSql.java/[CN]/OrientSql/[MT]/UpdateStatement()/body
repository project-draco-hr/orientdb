{
  OUpdateStatement jjtn000=new OUpdateStatement(JJTUPDATESTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  OUpdateOperations lastOperations;
  try {
    jj_consume_token(UPDATE);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INTEGER_LITERAL:
case MINUS:
case 149:
      jjtn000.targetRid=Rid();
    break;
case TO:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case IN:
case KEY:
case IDENTIFIER:
  jjtn000.targetClass=Identifier();
break;
case CLUSTER_IDENTIFIER:
jjtn000.targetCluster=Cluster();
break;
case INDEX_IDENTIFIER:
case INDEXVALUES_IDENTIFIER:
case INDEXVALUESASC_IDENTIFIER:
case INDEXVALUESDESC_IDENTIFIER:
jjtn000.targetIndex=IndexIdentifier();
break;
default :
jj_la1[40]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
label_2: while (true) {
lastOperations=UpdateOperations();
jjtn000.operations.add(lastOperations);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case INCREMENT:
;
break;
default :
jj_la1[41]=jj_gen;
break label_2;
}
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case UPSERT:
jj_consume_token(UPSERT);
jjtn000.upsert=true;
break;
default :
jj_la1[42]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case RETURN:
jj_consume_token(RETURN);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case BEFORE:
jj_consume_token(BEFORE);
jjtn000.returnBefore=true;
break;
case AFTER:
jj_consume_token(AFTER);
jjtn000.returnAfter=true;
break;
default :
jj_la1[43]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case NULL:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case THIS:
case RECORD_ATTRIBUTE:
case INTEGER_LITERAL:
case FLOATING_POINT_LITERAL:
case CHARACTER_LITERAL:
case STRING_LITERAL:
case TRUE:
case FALSE:
case LPAREN:
case LBRACE:
case LBRACKET:
case HOOK:
case COLON:
case MINUS:
case STAR:
case IN:
case KEY:
case IDENTIFIER:
case 149:
jjtn000.returnProjection=Projection();
break;
default :
jj_la1[44]=jj_gen;
;
}
break;
default :
jj_la1[45]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case WHERE:
jj_consume_token(WHERE);
jjtn000.whereClause=WhereClause();
break;
default :
jj_la1[46]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LOCK:
jj_consume_token(LOCK);
jj_consume_token(RECORD);
jjtn000.lockRecord=true;
break;
default :
jj_la1[47]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIMIT:
jjtn000.limit=Limit();
break;
default :
jj_la1[48]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TIMEOUT:
jjtn000.timeout=Timeout();
break;
default :
jj_la1[49]=jj_gen;
;
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
