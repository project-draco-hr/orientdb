{
  final ODistributedConfiguration cfg=getDatabaseConfiguration(databaseName);
  final Collection<String> nodes=cfg.getServers(null,nodeName);
  if (nodes.isEmpty()) {
    ODistributedServerLog.warn(this,nodeName,null,DIRECTION.NONE,"Cannot request full deploy of database '%s' because there are no nodes available with such database",databaseName);
    return false;
  }
  final List<String> selectedNodes=new ArrayList<String>();
  if (!iAskToAllNodes) {
    final Iterator<String> it=nodes.iterator();
    while (it.hasNext()) {
      final String f=it.next();
      if (isNodeAvailable(f,databaseName)) {
        selectedNodes.add(f);
        break;
      }
    }
  }
  if (selectedNodes.isEmpty())   selectedNodes.addAll(nodes);
  ODistributedServerLog.warn(this,nodeName,selectedNodes.toString(),DIRECTION.OUT,"Requesting deploy of database '%s' on local server...",databaseName);
  final OAbstractReplicatedTask deployTask=new OSyncDatabaseTask();
  final Map<String,Object> results=(Map<String,Object>)sendRequest(databaseName,null,selectedNodes,deployTask,getNextMessageIdCounter(),ODistributedRequest.EXECUTION_MODE.RESPONSE,null,null).getPayload();
  ODistributedServerLog.debug(this,nodeName,selectedNodes.toString(),DIRECTION.OUT,"Deploy returned: %s",results);
  final String dbPath=serverInstance.getDatabaseDirectory() + databaseName;
  for (  Map.Entry<String,Object> r : results.entrySet()) {
    final Object value=r.getValue();
    if (value instanceof Boolean)     continue;
 else     if (value instanceof Throwable) {
      ODistributedServerLog.error(this,nodeName,r.getKey(),DIRECTION.IN,"Error on installing database '%s' in %s",(Exception)value,databaseName,dbPath);
    }
 else     if (value instanceof ODistributedDatabaseChunk) {
      if (backupDatabase)       backupCurrentDatabase(databaseName);
      final Set<String> toSyncClusters=installDatabaseFromNetwork(dbPath,databaseName,distrDatabase,r.getKey(),(ODistributedDatabaseChunk)value,false);
      for (      String cl : toSyncClusters) {
        OCommandExecutorSQLHASyncCluster.replaceCluster(this,serverInstance,databaseName,cl);
      }
      return true;
    }
 else     throw new IllegalArgumentException("Type " + value + " not supported");
  }
  throw new ODistributedException("No response received from remote nodes for auto-deploy of database '" + databaseName + "'");
}
