{
  final int records=10000;
  long seed=System.currentTimeMillis();
  MersenneTwisterFast mersenneTwisterFast=new MersenneTwisterFast(seed);
  System.out.println("testUpdateManyBigRecords seed : " + seed);
  Map<OClusterPosition,byte[]> positionRecordMap=new HashMap<OClusterPosition,byte[]>();
  Set<OClusterPosition> updatedPositions=new HashSet<OClusterPosition>();
  ORecordVersion recordVersion=OVersionFactory.instance().createVersion();
  recordVersion.increment();
  recordVersion.increment();
  for (int i=0; i < records; i++) {
    int recordSize=mersenneTwisterFast.nextInt(2 * OLocalPage.MAX_RECORD_SIZE) + OLocalPage.MAX_RECORD_SIZE + 1;
    byte[] bigRecord=new byte[recordSize];
    mersenneTwisterFast.nextBytes(bigRecord);
    final OClusterPosition clusterPosition=paginatedCluster.createRecord(bigRecord,recordVersion,(byte)2);
    positionRecordMap.put(clusterPosition,bigRecord);
  }
  ORecordVersion newRecordVersion=OVersionFactory.instance().createVersion();
  newRecordVersion.copyFrom(recordVersion);
  newRecordVersion.increment();
  for (  OClusterPosition clusterPosition : positionRecordMap.keySet()) {
    if (mersenneTwisterFast.nextBoolean()) {
      int recordSize=mersenneTwisterFast.nextInt(2 * OLocalPage.MAX_RECORD_SIZE) + OLocalPage.MAX_RECORD_SIZE + 1;
      byte[] bigRecord=new byte[recordSize];
      mersenneTwisterFast.nextBytes(bigRecord);
      paginatedCluster.updateRecord(clusterPosition,bigRecord,newRecordVersion,(byte)3);
      positionRecordMap.put(clusterPosition,bigRecord);
      updatedPositions.add(clusterPosition);
    }
  }
  for (  Map.Entry<OClusterPosition,byte[]> entry : positionRecordMap.entrySet()) {
    ORawBuffer rawBuffer=paginatedCluster.readRecord(entry.getKey());
    Assert.assertNotNull(rawBuffer);
    Assert.assertEquals(rawBuffer.buffer,entry.getValue());
    if (updatedPositions.contains(entry.getKey())) {
      Assert.assertEquals(rawBuffer.version,newRecordVersion);
      Assert.assertEquals(rawBuffer.recordType,3);
    }
 else {
      Assert.assertEquals(rawBuffer.version,recordVersion);
      Assert.assertEquals(rawBuffer.recordType,2);
    }
  }
}
