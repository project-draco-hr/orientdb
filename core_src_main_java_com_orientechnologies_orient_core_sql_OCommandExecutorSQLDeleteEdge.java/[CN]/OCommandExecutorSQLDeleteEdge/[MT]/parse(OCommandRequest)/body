{
  database=getDatabase();
  database.checkSecurity(ODatabaseSecurityResources.COMMAND,ORole.PERMISSION_READ);
  init(((OCommandRequestText)iRequest).getText());
  parserRequiredKeyword("DELETE");
  parserRequiredKeyword("EDGE");
  OClass clazz=null;
  String temp=parseOptionalWord(true);
  while (temp != null) {
    if (temp.equals("FROM")) {
      from=new ORecordId(parserRequiredWord(false));
      if (rid != null)       throwSyntaxErrorException("FROM '" + from + "' is not allowed when specify a RID ("+ rid+ ")");
    }
 else     if (temp.equals("TO")) {
      to=new ORecordId(parserRequiredWord(false));
      if (rid != null)       throwSyntaxErrorException("TO '" + to + "' is not allowed when specify a RID ("+ rid+ ")");
    }
 else     if (temp.startsWith("#")) {
      rid=new ORecordId(temp);
      if (from != null || to != null)       throwSyntaxErrorException("Specifying the RID " + rid + " is not allowed with FROM/TO");
    }
 else     if (temp.equals(KEYWORD_WHERE)) {
      if (clazz == null)       clazz=database.getMetadata().getSchema().getClass(OGraphDatabase.EDGE_CLASS_NAME);
      final String condition=parserGetCurrentPosition() > -1 ? " " + parserText.substring(parserGetCurrentPosition()) : "";
      final StringBuilder q=new StringBuilder();
      q.append("select from ");
      q.append(clazz.getName());
      boolean where=false;
      if (from != null) {
        q.append(" ");
        q.append(KEYWORD_WHERE);
        q.append(" out = ");
        q.append(from);
        where=true;
      }
      if (to != null) {
        q.append(" ");
        if (!where) {
          q.append(KEYWORD_WHERE);
          where=true;
        }
 else         q.append("and");
        q.append(" in = ");
        q.append(to);
      }
      if (condition != null) {
        q.append(" ");
        if (!where) {
          q.append(KEYWORD_WHERE);
          where=true;
        }
 else         q.append("and");
        q.append(condition);
      }
      query=database.command(new OSQLAsynchQuery<ODocument>(q.toString(),this));
      break;
    }
 else     if (temp.length() > 0) {
      clazz=database.getMetadata().getSchema().getClass(temp);
      if (clazz == null)       throw new OCommandSQLParsingException("Class '" + temp + " was not found");
    }
    temp=parseOptionalWord(true);
    if (parserIsEnded())     break;
  }
  if (from == null && to == null && rid == null && clazz == null)   query=database.command(new OSQLAsynchQuery<ODocument>("select from E",this));
  return this;
}
