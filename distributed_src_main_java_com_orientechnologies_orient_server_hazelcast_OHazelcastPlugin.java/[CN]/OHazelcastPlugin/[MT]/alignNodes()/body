{
  if (remoteClusterNodes.isEmpty())   return;
  setStatus("aligning");
synchronized (synchronizers) {
    for (    Entry<String,OStorageSynchronizer> entry : synchronizers.entrySet()) {
      final String databaseName=entry.getKey();
      try {
        final long[] lastOperationId=entry.getValue().getLog().getLastOperationId();
        OLogManager.instance().warn(this,"DISTRIBUTED --> send align request in broadcast for database %s",databaseName);
synchronized (pendingAlignments) {
          for (          String node : remoteClusterNodes.keySet()) {
            pendingAlignments.put(node + "/" + databaseName,Boolean.FALSE);
            OLogManager.instance().info(this,"DISTRIBUTED ->[%s/%s] setting node in alignment state",node,databaseName);
          }
        }
        sendOperation2Nodes(remoteClusterNodes.keySet(),new OAlignRequestDistributedTask(getLocalNodeId(),databaseName,EXECUTION_MODE.ASYNCHRONOUS,lastOperationId[0],lastOperationId[1]));
      }
 catch (      IOException e) {
        OLogManager.instance().warn(this,"DISTRIBUTED -> error on retrieve last operation id from the log for db %s",databaseName);
      }
    }
  }
}
