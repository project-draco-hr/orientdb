{
  final long timer=System.currentTimeMillis();
  lock.acquireExclusiveLock();
  try {
    if (root == null)     return;
    OLogManager.instance().info(this,"Starting optimization of RB+Tree...");
    if (entryPoints.size() == 0)     entryPoints.add((OTreeMapEntryPersistent<K,V>)root);
    int nodes=0;
    Set<OTreeMapEntryPersistent<K,V>> tmp=new HashSet<OTreeMapEntryPersistent<K,V>>();
    for (    OTreeMapEntryPersistent<K,V> entryPoint : entryPoints)     for (OTreeMapEntryPersistent<K,V> e=getMostLeftNode(entryPoint); e != null; e=e.getNextInMemory()) {
      for (      OTreeMapEntryPersistent<K,V> t : tmp)       if (t == e)       OLogManager.instance().error(this,"ERROR");
      tmp.add(e);
      ++nodes;
    }
    OLogManager.instance().info(this,"Found %d nodes in memory, %d items on disk, threshold=%d, entryPoints=%d",nodes,size,entryPointSize * entryPointThresholdFactor,entryPoints.size());
    if (nodes < entryPointSize * entryPointThresholdFactor)     return;
    final int distance;
    if (nodes <= entryPointSize)     distance=1;
 else     distance=nodes / entryPointSize + 1;
    tmpEntryPoints.clear();
    OLogManager.instance().info(this,"Compacting nodes with distance = %d",distance);
    int nodeCounter=0;
    OTreeMapEntryPersistent<K,V> lastNode=null;
    for (    OTreeMapEntryPersistent<K,V> entryPoint : entryPoints)     for (OTreeMapEntryPersistent<K,V> e=getMostLeftNode(entryPoint); e != null; e=e.getNextInMemory()) {
      ++nodeCounter;
      if (tmpEntryPoints.size() == 0 || nodeCounter % distance == 0)       tmpEntryPoints.add(e);
      lastNode=e;
    }
    if (tmpEntryPoints.size() > 1 && tmpEntryPoints.get(tmpEntryPoints.size() - 1) != lastNode)     tmpEntryPoints.add(lastNode);
    final List<OTreeMapEntryPersistent<K,V>> a=entryPoints;
    entryPoints=tmpEntryPoints;
    tmpEntryPoints=a;
    tmpEntryPoints.clear();
    for (    OTreeMapEntryPersistent<K,V> entryPoint : entryPoints)     entryPoint.disconnect();
    nodes=0;
    for (    OTreeMapEntryPersistent<K,V> entryPoint : entryPoints)     for (OTreeMapEntryPersistent<K,V> e=getMostLeftNode(entryPoint); e != null; e=e.getNextInMemory())     ++nodes;
    OLogManager.instance().info(this,"Now Found %d nodes in memory and threshold=%d. EntryPoints=%d",nodes,entryPointSize * entryPointThresholdFactor,entryPoints.size());
  }
  finally {
    lock.releaseExclusiveLock();
    OProfiler.getInstance().stopChrono("OTreeMapPersistent.optimize",timer);
    OLogManager.instance().info(this,"Optimization completed in %d ms\n",System.currentTimeMillis() - timer);
  }
}
