{
  super.onServerStarted(server);
  if (serverStarted == 0) {
    server.server.getDistributedManager().registerLifecycleListener(new ODistributedLifecycleListener(){
      @Override public boolean onNodeJoining(      String iNode){
        return true;
      }
      @Override public void onNodeJoined(      String iNode){
        nodeReJoined.add(iNode);
      }
      @Override public void onNodeLeft(      String iNode){
        nodeReJoined.clear();
        nodeLefts.incrementAndGet();
      }
      @Override public void onDatabaseChangeStatus(      String iNode,      String iDatabaseName,      ODistributedServerManager.DB_STATUS iNewStatus){
      }
    }
);
  }
  if (serverStarted++ == (SERVERS - 1)) {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          executeWhen(0,new OCallable<Boolean,ODatabaseDocumentTx>(){
            @Override public Boolean call(            ODatabaseDocumentTx database){
              return database.countClass("Person") > (count * writerCount * (SERVERS - 1)* 1 / 5);
            }
          }
,new OCallable<Boolean,ODatabaseDocumentTx>(){
            @Override public Boolean call(            final ODatabaseDocumentTx database){
              Assert.assertTrue("Insert was too fast",inserting);
              banner("RESTARTING SERVER " + (SERVERS - 1));
              delayWriter=10;
              try {
                final String nodeName=server.server.getDistributedManager().getLocalNodeName();
                ((OHazelcastPlugin)serverInstance.get(0).getServerInstance().getDistributedManager()).restartNode(nodeName);
              }
 catch (              Exception e) {
                e.printStackTrace();
              }
              return null;
            }
          }
);
        }
 catch (        Exception e) {
          e.printStackTrace();
          Assert.fail("Error on execution flow");
        }
      }
    }
).start();
  }
}
