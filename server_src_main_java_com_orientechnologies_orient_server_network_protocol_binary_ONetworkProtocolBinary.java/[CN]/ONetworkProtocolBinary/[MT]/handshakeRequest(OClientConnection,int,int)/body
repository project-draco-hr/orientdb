{
  long timer=0;
  try {
    timer=Orient.instance().getProfiler().startChrono();
    try {
      connection=onBeforeHandshakeRequest(connection,channel);
    }
 catch (    Exception e) {
      sendError(null,clientTxId,e);
      handleConnectionError(null,e);
      afterOperationRequest(null);
      sendShutdown();
      return;
    }
    OLogManager.instance().debug(this,"Request id:" + clientTxId + " type:"+ requestType);
    try {
switch (requestType) {
case OChannelBinaryProtocol.REQUEST_CONNECT:
        connect(connection);
      break;
case OChannelBinaryProtocol.REQUEST_DB_OPEN:
    openDatabase(connection);
  break;
case OChannelBinaryProtocol.REQUEST_SHUTDOWN:
shutdownConnection(connection);
break;
case OChannelBinaryProtocol.REQUEST_DB_REOPEN:
reopenDatabase(connection);
break;
}
}
  finally {
requests++;
afterOperationRequest(connection);
}
}
 catch (IOException e) {
OLogManager.instance().debug(this,"I/O Error on client clientId=%d reqType=%d",clientTxId,requestType,e);
sendShutdown();
}
catch (OException e) {
sendErrorOrDropConnection(connection,clientTxId,e);
}
catch (RuntimeException e) {
sendErrorOrDropConnection(connection,clientTxId,e);
}
catch (Throwable t) {
sendErrorOrDropConnection(connection,clientTxId,t);
}
 finally {
Orient.instance().getProfiler().stopChrono("server.network.requests","Total received requests",timer,"server.network.requests");
OSerializationThreadLocal.INSTANCE.get().clear();
}
}
