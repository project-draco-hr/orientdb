{
  writeAheadLog.close();
  OLocalPaginatedStorage paginatedStorage=mock(OLocalPaginatedStorage.class);
  when(paginatedStorage.getName()).thenReturn("WriteAheadLogTest");
  when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());
  writeAheadLog=new ODiskWriteAheadLog(2,-1,2 * OWALPage.PAGE_SIZE,paginatedStorage);
  List<OWALRecord> writtenRecords=new ArrayList<OWALRecord>();
  Random rnd=new Random();
  OWALRecord walRecord=new OFuzzyCheckpointStartRecord(null,new OLogSequenceNumber(-1,-1));
  writeAheadLog.log(walRecord);
  writtenRecords.add(walRecord);
  walRecord=new OFuzzyCheckpointStartRecord(null,new OLogSequenceNumber(-1,-1));
  writeAheadLog.log(walRecord);
  writtenRecords.add(walRecord);
  int firstSegmentIndex=-1;
  int counter=2;
  long logSize=writeAheadLog.size() + 1;
  long prevLogSize=0;
  while (logSize > prevLogSize) {
    int contentSize=rnd.nextInt(OWALPage.PAGE_SIZE - 128) + 128;
    walRecord=new TestRecord(contentSize,false);
    writeAheadLog.log(walRecord);
    writtenRecords.add(walRecord);
    prevLogSize=logSize;
    logSize=writeAheadLog.size();
    if (firstSegmentIndex < 0 && logSize > 2 * OWALPage.PAGE_SIZE)     firstSegmentIndex=counter;
    counter++;
  }
  walRecord=new OFuzzyCheckpointStartRecord(null,new OLogSequenceNumber(-1,-1));
  OLogSequenceNumber end=writeAheadLog.log(walRecord);
  writtenRecords.add(walRecord);
  assertLogContent(writeAheadLog,writtenRecords.subList(firstSegmentIndex + 1,writtenRecords.size()));
  Assert.assertEquals(walRecord.getLsn(),writeAheadLog.getLastCheckpoint());
  Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstSegmentIndex).getLsn()));
  Assert.assertEquals(writeAheadLog.end(),end);
  Assert.assertEquals(writeAheadLog.begin(),writtenRecords.get(firstSegmentIndex + 1).getLsn());
}
