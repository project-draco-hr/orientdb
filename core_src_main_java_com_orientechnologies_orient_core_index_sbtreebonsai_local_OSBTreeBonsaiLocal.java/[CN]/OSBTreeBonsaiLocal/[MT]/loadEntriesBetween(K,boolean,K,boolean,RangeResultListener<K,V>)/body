{
  atomicOperationsManager.acquireReadLock(this);
  try {
    acquireSharedLock();
    try {
      OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
      BucketSearchResult bucketSearchResultFrom=findBucket(keyFrom,atomicOperation);
      OBonsaiBucketPointer bucketPointerFrom=bucketSearchResultFrom.getLastPathItem();
      int indexFrom;
      if (bucketSearchResultFrom.itemIndex >= 0) {
        indexFrom=fromInclusive ? bucketSearchResultFrom.itemIndex : bucketSearchResultFrom.itemIndex + 1;
      }
 else {
        indexFrom=-bucketSearchResultFrom.itemIndex - 1;
      }
      BucketSearchResult bucketSearchResultTo=findBucket(keyTo,atomicOperation);
      OBonsaiBucketPointer bucketPointerTo=bucketSearchResultTo.getLastPathItem();
      int indexTo;
      if (bucketSearchResultTo.itemIndex >= 0) {
        indexTo=toInclusive ? bucketSearchResultTo.itemIndex : bucketSearchResultTo.itemIndex - 1;
      }
 else {
        indexTo=-bucketSearchResultTo.itemIndex - 2;
      }
      int startIndex=indexFrom;
      int endIndex;
      OBonsaiBucketPointer bucketPointer=bucketPointerFrom;
      resultsLoop:       while (true) {
        final OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,bucketPointer.getPageIndex(),false,diskCache);
        try {
          OSBTreeBonsaiBucket<K,V> bucket=new OSBTreeBonsaiBucket<K,V>(cacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChangesTree(atomicOperation,cacheEntry));
          if (!bucketPointer.equals(bucketPointerTo))           endIndex=bucket.size() - 1;
 else           endIndex=indexTo;
          for (int i=startIndex; i <= endIndex; i++) {
            if (!listener.addResult(bucket.getEntry(i)))             break resultsLoop;
          }
          if (bucketPointer.equals(bucketPointerTo))           break;
          bucketPointer=bucket.getRightSibling();
          if (bucketPointer.getPageIndex() < 0)           break;
        }
  finally {
          releasePage(atomicOperation,cacheEntry,diskCache);
        }
        startIndex=0;
      }
    }
  finally {
      releaseSharedLock();
    }
  }
 catch (  IOException ioe) {
    throw new OSBTreeException("Error during fetch of values between key " + keyFrom + " and key "+ keyTo+ " in sbtree "+ name);
  }
 finally {
    atomicOperationsManager.releaseReadLock(this);
  }
}
