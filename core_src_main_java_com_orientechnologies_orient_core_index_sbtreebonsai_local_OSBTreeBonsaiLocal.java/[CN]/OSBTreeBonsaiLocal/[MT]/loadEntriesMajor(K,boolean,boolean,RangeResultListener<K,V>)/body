{
  if (!ascSortOrder)   throw new IllegalStateException("Descending sort order is not supported.");
  atomicOperationsManager.acquireReadLock(this);
  try {
    final Lock lock=fileLockManager.acquireSharedLock(fileId);
    try {
      OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
      BucketSearchResult bucketSearchResult=findBucket(key,atomicOperation);
      OBonsaiBucketPointer bucketPointer=bucketSearchResult.getLastPathItem();
      int index;
      if (bucketSearchResult.itemIndex >= 0) {
        index=inclusive ? bucketSearchResult.itemIndex : bucketSearchResult.itemIndex + 1;
      }
 else {
        index=-bucketSearchResult.itemIndex - 1;
      }
      do {
        final OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,bucketPointer.getPageIndex(),false);
        try {
          OSBTreeBonsaiBucket<K,V> bucket=new OSBTreeBonsaiBucket<K,V>(cacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChangesTree(atomicOperation,cacheEntry));
          int bucketSize=bucket.size();
          for (int i=index; i < bucketSize; i++) {
            if (!listener.addResult(bucket.getEntry(i)))             return;
          }
          bucketPointer=bucket.getRightSibling();
          index=0;
        }
  finally {
          releasePage(atomicOperation,cacheEntry);
        }
      }
 while (bucketPointer.getPageIndex() >= 0);
    }
  finally {
      lock.unlock();
    }
  }
 catch (  IOException ioe) {
    throw new OSBTreeException("Error during fetch of major values for key " + key + " in sbtree "+ getName(),ioe);
  }
 finally {
    atomicOperationsManager.releaseReadLock(this);
  }
}
