{
  long documentIndexed=0;
  final boolean intentInstalled=getDatabase().declareIntent(new OIntentMassiveInsert());
  modificationLock.requestModificationLock();
  try {
    acquireExclusiveLock();
    try {
      rebuildThread=Thread.currentThread();
      rebuilding=true;
      try {
        indexEngine.clear();
      }
 catch (      Exception e) {
      }
      int documentNum=0;
      long documentTotal=0;
      for (      final String cluster : clustersToIndex)       documentTotal+=getDatabase().countClusterElements(cluster);
      if (iProgressListener != null)       iProgressListener.onBegin(this,documentTotal,true);
      for (      final String clusterName : clustersToIndex)       try {
        for (        final ORecord<?> record : getDatabase().browseCluster(clusterName)) {
          if (Thread.interrupted())           throw new OCommandExecutionException("The index rebuild has been interrupted");
          if (record instanceof ODocument) {
            final ODocument doc=(ODocument)record;
            if (indexDefinition == null)             throw new OConfigurationException("Index '" + name + "' cannot be rebuilt because has no a valid definition ("+ indexDefinition+ ")");
            final Object fieldValue=indexDefinition.getDocumentValueToIndex(doc);
            if (fieldValue != null) {
              try {
                if (fieldValue instanceof Collection) {
                  for (                  final Object fieldValueItem : (Collection<?>)fieldValue) {
                    put(fieldValueItem,doc);
                  }
                }
 else                 put(fieldValue,doc);
              }
 catch (              OIndexException e) {
                OLogManager.instance().error(this,"Exception during index rebuild. Exception was caused by following key/ value pair - key %s, value %s." + " Rebuild will continue from this point.",e,fieldValue,doc.getIdentity());
              }
              ++documentIndexed;
            }
          }
          documentNum++;
          if (iProgressListener != null)           iProgressListener.onProgress(this,documentNum,documentNum * 100f / documentTotal);
        }
      }
 catch (      NoSuchElementException e) {
      }
      if (indexEngine instanceof OMVRBTreeIndexEngine)       flush();
      unload();
      if (iProgressListener != null)       iProgressListener.onCompletition(this,true);
    }
 catch (    final Exception e) {
      if (iProgressListener != null)       iProgressListener.onCompletition(this,false);
      try {
        indexEngine.clear();
      }
 catch (      Exception e2) {
      }
      throw new OIndexException("Error on rebuilding the index for clusters: " + clustersToIndex,e);
    }
 finally {
      rebuilding=false;
      rebuildThread=null;
      if (intentInstalled)       getDatabase().declareIntent(null);
      releaseExclusiveLock();
    }
  }
  finally {
    modificationLock.releaseModificationLock();
  }
  return documentIndexed;
}
