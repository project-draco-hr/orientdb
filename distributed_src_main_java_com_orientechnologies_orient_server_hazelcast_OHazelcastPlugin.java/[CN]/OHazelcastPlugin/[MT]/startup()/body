{
  if (!enabled)   return;
  status=STATUS.STARTING;
  OLogManager.instance().info(this,"Starting distributed server '%s'...",getLocalNodeName());
  cachedClusterNodes.clear();
  try {
    hazelcastInstance=Hazelcast.newHazelcastInstance(new FileSystemXmlConfig(hazelcastConfigFile));
    nodeId=hazelcastInstance.getCluster().getLocalMember().getUuid();
    timeOffset=System.currentTimeMillis() - hazelcastInstance.getCluster().getClusterTime();
    cachedClusterNodes.put(getLocalNodeName(),hazelcastInstance.getCluster().getLocalMember());
    OServer.registerServerInstance(getLocalNodeName(),serverInstance);
    final IMap<String,Object> configurationMap=getConfigurationMap();
    configurationMap.addEntryListener(this,true);
    for (    Member m : hazelcastInstance.getCluster().getMembers()) {
      final String memberName=getNodeName(m);
      if (memberName != null)       cachedClusterNodes.put(memberName,m);
    }
    messageService=new OHazelcastDistributedMessageService(this);
    loadDistributedDatabases();
    installNewDatabases();
    setStatus(STATUS.ONLINE);
    super.startup();
  }
 catch (  FileNotFoundException e) {
    throw new OConfigurationException("Error on creating Hazelcast instance",e);
  }
}
