{
  Deque<TreeMap<OIndex<?>,List<Object>>> indexKeysMapQueue=lockedKeys.get();
  if (indexKeysMapQueue == null) {
    indexKeysMapQueue=new ArrayDeque<TreeMap<OIndex<?>,List<Object>>>();
    lockedKeys.set(indexKeysMapQueue);
  }
  final TreeMap<OIndex<?>,List<Object>> indexKeysMap=new TreeMap<OIndex<?>,List<Object>>();
  final Set<String> dirtyFields=new HashSet<String>(Arrays.asList(record.getDirtyFields()));
  if (dirtyFields.isEmpty())   return;
  for (  final OIndex<?> index : indexes) {
    if (index instanceof OIndexUnique) {
      final OIndexRecorder indexRecorder=new OIndexRecorder((OIndexUnique)index);
      processIndexUpdate(record,dirtyFields,indexRecorder);
      indexKeysMap.put(index,indexRecorder.getAffectedKeys());
    }
  }
  for (  Map.Entry<OIndex<?>,List<Object>> entry : indexKeysMap.entrySet()) {
    final OIndexInternal<?> index=entry.getKey().getInternal();
    index.lockKeysForUpdateNoTx(entry.getValue());
  }
  indexKeysMapQueue.push(indexKeysMap);
  for (  Map.Entry<OIndex<?>,List<Object>> entry : indexKeysMap.entrySet()) {
    final OIndex<?> index=entry.getKey();
    for (    Object keyItem : entry.getValue()) {
      index.checkEntry(record,keyItem);
    }
  }
}
