{
  OBonsaiBucketPointer head=OBonsaiBucketPointer.NULL;
  OBonsaiBucketPointer tail=subTreesToDelete.peek();
  int bucketCount=0;
  OAtomicOperation atomicOperation=storage.getAtomicOperationsManager().getCurrentOperation();
  while (!subTreesToDelete.isEmpty()) {
    final OBonsaiBucketPointer bucketPointer=subTreesToDelete.poll();
    OCacheEntry cacheEntry=diskCache.load(fileId,bucketPointer.getPageIndex(),false);
    cacheEntry.acquireExclusiveLock();
    try {
      final OSBTreeBonsaiBucket<K,V> bucket=new OSBTreeBonsaiBucket<K,V>(cacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChangesTree(atomicOperation,cacheEntry));
      addChildrenToQueue(subTreesToDelete,bucket);
      bucket.setFreeListPointer(head);
      head=bucketPointer;
    }
  finally {
      cacheEntry.releaseExclusiveLock();
      diskCache.release(cacheEntry);
    }
    bucketCount++;
  }
  if (head.isValid()) {
    final OCacheEntry sysCacheEntry=diskCache.load(fileId,SYS_BUCKET.getPageIndex(),false);
    sysCacheEntry.acquireExclusiveLock();
    try {
      final OSysBucket sysBucket=new OSysBucket(sysCacheEntry,getChangesTree(atomicOperation,sysCacheEntry));
      attachFreeListHead(tail,sysBucket.getFreeListHead());
      sysBucket.setFreeListHead(head);
      sysBucket.setFreeListLength(sysBucket.freeListLength() + bucketCount);
    }
  finally {
      sysCacheEntry.releaseExclusiveLock();
      diskCache.release(sysCacheEntry);
    }
  }
}
