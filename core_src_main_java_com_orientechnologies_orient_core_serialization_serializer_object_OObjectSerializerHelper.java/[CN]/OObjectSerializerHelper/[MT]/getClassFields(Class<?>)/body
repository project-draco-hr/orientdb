{
synchronized (classes) {
    if (classes.containsKey(iClass.getName()))     return classes.get(iClass.getName());
    final List<Field> properties=new ArrayList<Field>();
    classes.put(iClass.getName(),properties);
    String fieldName;
    Class<?> fieldType;
    int fieldModifier;
    boolean autoBinding;
    for (Class<?> currentClass=iClass; currentClass != Object.class; ) {
      for (      Field f : currentClass.getDeclaredFields()) {
        fieldModifier=f.getModifiers();
        if (Modifier.isStatic(fieldModifier) || Modifier.isNative(fieldModifier) || Modifier.isTransient(fieldModifier))         continue;
        fieldName=f.getName();
        fieldType=f.getType();
        properties.add(f);
        autoBinding=true;
        if (f.getAnnotation(OAccess.class) == null || f.getAnnotation(OAccess.class).value() == OAccess.OAccessType.PROPERTY)         autoBinding=true;
 else         if (jpaAccessClass != null) {
          Annotation ann=f.getAnnotation(jpaAccessClass);
          if (ann != null) {
            autoBinding=true;
          }
        }
        if (f.getAnnotation(ODocumentInstance.class) != null)         boundDocumentFields.put(iClass,fieldName);
        boolean idFound=false;
        if (f.getAnnotation(OId.class) != null) {
          fieldIds.put(iClass,fieldName);
          idFound=true;
        }
 else         if (jpaIdClass != null && f.getAnnotation(jpaIdClass) != null) {
          fieldIds.put(iClass,fieldName);
          idFound=true;
        }
        if (idFound) {
          if (fieldType.isPrimitive())           OLogManager.instance().warn(OObjectSerializerHelper.class,"Field '%s' can't be a literal to manage the Record Id",f.toString());
 else           if (!ORID.class.isAssignableFrom(fieldType) && fieldType != String.class && fieldType != Object.class && !Number.class.isAssignableFrom(fieldType))           OLogManager.instance().warn(OObjectSerializerHelper.class,"Field '%s' can't be managed as type: %s",f.toString(),fieldType);
        }
        boolean vFound=false;
        if (f.getAnnotation(OVersion.class) != null) {
          fieldVersions.put(iClass,fieldName);
          vFound=true;
        }
 else         if (jpaVersionClass != null && f.getAnnotation(jpaVersionClass) != null) {
          fieldVersions.put(iClass,fieldName);
          vFound=true;
        }
        if (vFound) {
          if (fieldType.isPrimitive())           OLogManager.instance().warn(OObjectSerializerHelper.class,"Field '%s' can't be a literal to manage the Version",f.toString());
 else           if (fieldType != String.class && fieldType != Object.class && !Number.class.isAssignableFrom(fieldType))           OLogManager.instance().warn(OObjectSerializerHelper.class,"Field '%s' can't be managed as type: %s",f.toString(),fieldType);
        }
        if (jpaEmbeddedClass != null && f.getAnnotation(jpaEmbeddedClass) != null) {
          if (embeddedFields.get(iClass) == null)           embeddedFields.put(iClass,new ArrayList<String>());
          embeddedFields.get(iClass).add(fieldName);
        }
        if (autoBinding)         try {
          String getterName="get" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);
          Method m=currentClass.getMethod(getterName,NO_ARGS);
          getters.put(iClass.getName() + "." + fieldName,m);
        }
 catch (        Exception e) {
          registerFieldGetter(iClass,fieldName,f);
        }
 else         registerFieldGetter(iClass,fieldName,f);
        if (autoBinding)         try {
          String getterName="set" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);
          Method m=currentClass.getMethod(getterName,f.getType());
          setters.put(iClass.getName() + "." + fieldName,m);
        }
 catch (        Exception e) {
          registerFieldSetter(iClass,fieldName,f);
        }
 else         registerFieldSetter(iClass,fieldName,f);
      }
      registerCallbacks(iClass,currentClass);
      currentClass=currentClass.getSuperclass();
      if (currentClass.equals(ODocument.class))       currentClass=Object.class;
    }
    return properties;
  }
}
