{
  if (id == null || !OHookThreadLocal.INSTANCE.push(id))   return RESULT.RECORD_NOT_CHANGED;
  try {
    final ORecord rec=id.getRecord();
    if (rec == null)     return RESULT.RECORD_NOT_CHANGED;
    RUN_MODE runMode=OScenarioThreadLocal.INSTANCE.get();
    boolean recordChanged=false;
    for (    ORecordHook hook : hooks.keySet()) {
switch (runMode) {
case DEFAULT:
        if (getStorage().isDistributed() && hook.getDistributedExecutionMode() == DISTRIBUTED_EXECUTION_MODE.TARGET_NODE)         continue;
      break;
case RUNNING_DISTRIBUTED:
    if (hook.getDistributedExecutionMode() == DISTRIBUTED_EXECUTION_MODE.SOURCE_NODE)     continue;
}
final RESULT res=hook.onTrigger(iType,rec);
if (res == RESULT.RECORD_CHANGED) recordChanged=true;
 else if (res == RESULT.SKIP_IO) return res;
 else if (res == RESULT.SKIP) return res;
 else if (res == RESULT.RECORD_REPLACED) return res;
}
return recordChanged ? RESULT.RECORD_CHANGED : RESULT.RECORD_NOT_CHANGED;
}
  finally {
OHookThreadLocal.INSTANCE.pop(id);
}
}
