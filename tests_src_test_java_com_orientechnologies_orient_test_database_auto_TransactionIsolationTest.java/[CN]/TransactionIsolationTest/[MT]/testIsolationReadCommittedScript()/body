{
  final ODatabaseDocumentTx db1=new ODatabaseDocumentTx(url);
  db1.open("admin","admin");
  final ODocument record1=new ODocument();
  record1.field("name","This is the first version").save();
  Future<List<OIdentifiable>> txFuture=Orient.instance().submit(new Callable<List<OIdentifiable>>(){
    @Override public List<OIdentifiable> call() throws Exception {
      String cmd="";
      cmd+="begin isolation READ_COMMITTED;";
      cmd+="let r1 = select from " + record1.getIdentity() + ";";
      cmd+="sleep 2000;";
      cmd+="let r2 = select from " + record1.getIdentity() + " nocache;";
      cmd+="commit;";
      cmd+="return $r2;";
      db1.activateOnCurrentThread();
      return db1.command(new OCommandScript("sql",cmd)).execute();
    }
  }
);
  Thread.sleep(500);
  ODatabaseDocumentTx db2=new ODatabaseDocumentTx(url);
  db2.open("admin","admin");
  ODocument record2=db2.load(record1.getIdentity());
  record2.field("name","This is the second version").save();
  List<OIdentifiable> txRecord=txFuture.get();
  Assert.assertNotNull(txRecord);
  Assert.assertEquals(txRecord.size(),1);
  Assert.assertEquals(((ODocument)txRecord.get(0).getRecord()).field("name"),"This is the second version");
  db2.close();
  db1.activateOnCurrentThread();
  db1.close();
}
