{
  final List<String> fieldNames=new ArrayList<String>();
  for (  OPair<String,String> pair : orderedFields) {
    fieldNames.add(pair.getKey());
  }
  final Set<OIndex<?>> indexes=iSchemaClass.getInvolvedIndexes(fieldNames);
  for (  OIndex<?> index : indexes) {
    if (orderByOptimizer.canBeUsedByOrderBy(index,orderedFields)) {
      final boolean ascSortOrder=orderedFields.get(0).getValue().equals(KEYWORD_ASC);
      final Object key;
      if (ascSortOrder) {
        key=index.getFirstKey();
      }
 else {
        key=index.getLastKey();
      }
      if (index.getKeySize() == 0) {
        return null;
      }
      fullySortedByIndex=true;
      if (context.isRecordingMetrics()) {
        context.setVariable("indexIsUsedInOrderBy",true);
        context.setVariable("fullySortedByIndex",fullySortedByIndex);
        Set<String> idxNames=(Set<String>)context.getVariable("involvedIndexes");
        if (idxNames == null) {
          idxNames=new HashSet<String>();
          context.setVariable("involvedIndexes",idxNames);
        }
        idxNames.add(index.getName());
      }
      final List<OIndexCursor> cursors=new ArrayList<OIndexCursor>();
      OIndexCursor cursor=null;
      if (key != null) {
        if (ascSortOrder) {
          cursor=index.iterateEntriesMajor(key,true,true);
        }
 else {
          cursor=index.iterateEntriesMinor(key,true,false);
        }
      }
      if (cursor != null)       cursors.add(cursor);
      if (index.getMetadata() != null && !index.getDefinition().isNullValuesIgnored()) {
        Object nullValue=index.get(null);
        if (nullValue != null) {
          if (nullValue instanceof Collection)           cursors.add(new OIndexCursorCollectionValue((Collection)nullValue,null));
 else           cursors.add(new OIndexCursorSingleValue((OIdentifiable)nullValue,null));
        }
      }
      return new OCompositeIndexCursor(cursors);
    }
  }
  metricRecorder.recordOrderByOptimizationMetric(false,this.fullySortedByIndex);
  return null;
}
