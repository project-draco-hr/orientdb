{
  ODatabaseDocumentTx databaseDocumentTx=(ODatabaseDocumentTx)database.getUnderlying();
  final OSchema schema=databaseDocumentTx.getMetadata().getSchema();
  final OClass indexPaginationTest=schema.createClass("IndexPaginationTestClass");
  indexPaginationTest.createProperty("prop",OType.INTEGER);
  indexPaginationTest.createIndex("IndexPaginationTest",INDEX_TYPE.UNIQUE,"prop","@rid");
  List<ORID> rids=new ArrayList<ORID>();
  for (int i=99; i >= 0; i--) {
    final ODocument document=new ODocument("IndexPaginationTestClass");
    document.field("prop",i / 2);
    document.save();
    rids.add(document.getIdentity());
  }
  List<ODocument> result=databaseDocumentTx.query(new OSQLSynchQuery<ODocument>("select from index:IndexPaginationTest limit 5 order by key"));
  Assert.assertEquals(result.size(),5);
  int lastKey=-1;
  ORID lastRid=null;
  for (  ODocument document : result) {
    if (lastKey > -1)     Assert.assertTrue(lastKey <= (Integer)document.<OCompositeKey>field("key").getKeys().get(0));
    lastKey=(Integer)document.<OCompositeKey>field("key").getKeys().get(0);
    lastRid=document.field("rid",OType.LINK);
    Assert.assertTrue(rids.remove(document.<ORID>field("rid")));
  }
  while (true) {
    result=databaseDocumentTx.query(new OSQLSynchQuery<ODocument>("select from index:IndexPaginationTest where key > ? limit 5  order by key"),new OCompositeKey(lastKey,lastRid));
    if (result.isEmpty())     break;
    Assert.assertEquals(result.size(),5);
    for (    ODocument document : result) {
      if (lastKey > -1)       Assert.assertTrue(lastKey <= (Integer)document.<OCompositeKey>field("key").getKeys().get(0));
      lastKey=(Integer)document.<OCompositeKey>field("key").getKeys().get(0);
      lastRid=document.field("rid",OType.LINK);
      Assert.assertTrue(rids.remove(document.<ORID>field("rid",OType.LINK)));
    }
  }
  Assert.assertTrue(rids.isEmpty());
}
