{
  OObjectDatabaseTx database=OObjectDatabasePool.global().acquire(url,"admin","admin");
  ORID rid=null;
  try {
    OObjectSerializerContext serializerContext=new OObjectSerializerContext();
    serializerContext.bind(new OObjectSerializer<SecurityRole,String>(){
      @Override public Object serializeFieldValue(      Class<?> type,      SecurityRole role){
        return role.name();
      }
      @Override public Object unserializeFieldValue(      Class<?> type,      String str){
        return SecurityRole.getByName(str);
      }
    }
,database);
    OObjectSerializerHelper.bindSerializerContext(null,serializerContext);
    database.getEntityManager().registerEntityClasses("com.orientechnologies.orient.test.domain.customserialization");
    Sec s=new Sec();
    s.getSecurityRoleList().add(SecurityRole.LOGIN);
    Assert.assertTrue(s.getSecurityRoleList().contains(SecurityRole.LOGIN));
    s=database.save(s);
    rid=database.getRecordByUserObject(s,false).getIdentity();
    database.close();
    database=OObjectDatabasePool.global().acquire(url,"admin","admin");
    s=database.load(rid);
    Assert.assertTrue(s.getSecurityRoleList().contains(SecurityRole.LOGIN));
  }
  finally {
    database.close();
  }
}
