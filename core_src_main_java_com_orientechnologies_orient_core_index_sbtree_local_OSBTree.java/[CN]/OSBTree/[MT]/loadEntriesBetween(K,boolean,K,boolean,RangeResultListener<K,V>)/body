{
  acquireSharedLock();
  try {
    PartialSearchMode partialSearchModeFrom;
    if (fromInclusive)     partialSearchModeFrom=PartialSearchMode.LOWEST_BOUNDARY;
 else     partialSearchModeFrom=PartialSearchMode.HIGHEST_BOUNDARY;
    BucketSearchResult bucketSearchResultFrom=findBucket(keyFrom,partialSearchModeFrom);
    long pageIndexFrom=bucketSearchResultFrom.getLastPathItem();
    int indexFrom;
    if (bucketSearchResultFrom.itemIndex >= 0) {
      indexFrom=fromInclusive ? bucketSearchResultFrom.itemIndex : bucketSearchResultFrom.itemIndex + 1;
    }
 else {
      indexFrom=-bucketSearchResultFrom.itemIndex - 1;
    }
    PartialSearchMode partialSearchModeTo;
    if (toInclusive)     partialSearchModeTo=PartialSearchMode.HIGHEST_BOUNDARY;
 else     partialSearchModeTo=PartialSearchMode.LOWEST_BOUNDARY;
    BucketSearchResult bucketSearchResultTo=findBucket(keyTo,partialSearchModeTo);
    long pageIndexTo=bucketSearchResultTo.getLastPathItem();
    int indexTo;
    if (bucketSearchResultTo.itemIndex >= 0) {
      indexTo=toInclusive ? bucketSearchResultTo.itemIndex : bucketSearchResultTo.itemIndex - 1;
    }
 else {
      indexTo=-bucketSearchResultTo.itemIndex - 2;
    }
    int startIndex=indexFrom;
    int endIndex;
    long pageIndex=pageIndexFrom;
    resultsLoop:     while (true) {
      long nextPageIndex=-1;
      final OCacheEntry cacheEntry=diskCache.load(fileId,pageIndex,false);
      final OCachePointer pointer=cacheEntry.getCachePointer();
      try {
        OSBTreeBucket<K,V> bucket=new OSBTreeBucket<K,V>(pointer.getDataPointer(),keySerializer,valueSerializer,ODurablePage.TrackMode.NONE);
        if (pageIndex != pageIndexTo)         endIndex=bucket.size() - 1;
 else         endIndex=indexTo;
        for (int i=startIndex; i <= endIndex; i++) {
          if (!listener.addResult(bucket.getEntry(i)))           break resultsLoop;
        }
        if (pageIndex == pageIndexTo)         break;
        if (bucket.getRightSibling() >= 0)         nextPageIndex=bucket.getRightSibling();
 else         break;
      }
  finally {
        diskCache.release(cacheEntry);
      }
      pageIndex=nextPageIndex;
      startIndex=0;
    }
  }
 catch (  IOException ioe) {
    throw new OIndexException("Error during fetch of values between key " + keyFrom + " and key "+ keyTo+ " in sbtree "+ name);
  }
 finally {
    releaseSharedLock();
  }
}
