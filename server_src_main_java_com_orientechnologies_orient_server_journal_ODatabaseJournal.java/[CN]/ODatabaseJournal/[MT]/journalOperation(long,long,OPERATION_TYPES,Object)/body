{
  lock.acquireExclusiveLock();
  try {
    long offset=0;
    int varSize=0;
switch (iOperationType) {
case RECORD_CREATE:
case RECORD_UPDATE:
case RECORD_DELETE:
{
        final OAbstractRecordDistributedTask<?> task=(OAbstractRecordDistributedTask<?>)iVarData;
        varSize=ORecordId.PERSISTENT_SIZE;
        final ORecordId rid=task.getRid();
        if (OLogManager.instance().isDebugEnabled())         OLogManager.instance().info(this,"Journaled operation %s %s as #%d.%d",iOperationType.toString(),rid,iRunId,iOperationId);
        if (needOverWrited(iRunId,iOperationId))         offset=getOverWriteStart(iRunId,iOperationId,iOperationType,varSize);
 else         offset=writeOperationLogHeader(iOperationType,varSize);
        file.writeShort(offset + OFFSET_VARDATA,(short)rid.clusterId);
        file.writeLong(offset + OFFSET_VARDATA + OBinaryProtocol.SIZE_SHORT,rid.clusterPosition.longValue());
        break;
      }
case SQL_COMMAND:
{
      final OCommandSQL cmd=(OCommandSQL)iVarData;
      final String cmdText=cmd.getText();
      final byte[] cmdBinary=cmdText.getBytes();
      varSize=cmdBinary.length;
      if (OLogManager.instance().isDebugEnabled())       OLogManager.instance().info(this,"Journaled operation %s '%s' as #%d.%d",iOperationType.toString(),cmdText,iRunId,iOperationId);
      offset=writeOperationLogHeader(iOperationType,varSize);
      file.write(offset + OFFSET_VARDATA,cmdText.getBytes());
      break;
    }
}
file.writeLong(offset + OFFSET_VARDATA + varSize+ OBinaryProtocol.SIZE_INT,iRunId);
file.writeLong(offset + OFFSET_VARDATA + varSize+ OBinaryProtocol.SIZE_INT+ OBinaryProtocol.SIZE_LONG,iOperationId);
if (synchEnabled) file.synch();
return offset + OFFSET_VARDATA + varSize+ OBinaryProtocol.SIZE_INT+ OBinaryProtocol.SIZE_LONG+ OBinaryProtocol.SIZE_LONG;
}
  finally {
lock.releaseExclusiveLock();
}
}
