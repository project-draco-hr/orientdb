{
  ODeleteEdgeByRidStatement jjtn000=new ODeleteEdgeByRidStatement(JJTDELETEEDGEBYRIDSTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  ORid lastRid;
  try {
    jj_consume_token(DELETE);
    jj_consume_token(EDGE);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INTEGER_LITERAL:
case MINUS:
case 205:
      jjtn000.rid=Rid();
    break;
case LBRACKET:
  jj_consume_token(LBRACKET);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INTEGER_LITERAL:
case MINUS:
case 205:
  lastRid=Rid();
jjtn000.rids=new ArrayList();
jjtn000.rids.add(lastRid);
label_4: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[55]=jj_gen;
break label_4;
}
jj_consume_token(COMMA);
lastRid=Rid();
jjtn000.rids.add(lastRid);
}
break;
default :
jj_la1[56]=jj_gen;
;
}
jj_consume_token(RBRACKET);
break;
default :
jj_la1[57]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case BATCH:
jjtn000.batch=Batch();
break;
default :
jj_la1[58]=jj_gen;
;
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
