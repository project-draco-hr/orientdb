{
  final long timer=Orient.instance().getProfiler().startChrono();
  lock.acquireExclusiveLock();
  try {
    addUser();
    if (status != STATUS.CLOSED)     return;
    if (!exists())     throw new OStorageException("Cannot open the storage '" + name + "' because it does not exist in path: "+ url);
    status=STATUS.OPEN;
    init();
    int pos;
    pos=registerDataSegment(new OStorageDataConfiguration(configuration,OStorage.DATA_DEFAULT_NAME,0,getStoragePath()));
    dataSegments[pos].open();
    addDefaultClusters();
    for (int i=0; i < configuration.dataSegments.size(); ++i) {
      final OStorageDataConfiguration dataConfig=configuration.dataSegments.get(i);
      if (dataConfig == null)       continue;
      pos=registerDataSegment(dataConfig);
      if (pos == -1) {
        dataSegments[i].close();
        dataSegments[i]=new ODataLocal(this,dataConfig,i);
        dataSegments[i].open();
      }
 else       dataSegments[pos].open();
    }
    for (int i=0; i < configuration.clusters.size(); ++i) {
      final OStorageClusterConfiguration clusterConfig=configuration.clusters.get(i);
      if (clusterConfig != null) {
        pos=createClusterFromConfig(clusterConfig);
        try {
          if (pos == -1) {
            if (clusters[i] != null && clusters[i] instanceof OClusterLocal)             clusters[i].close();
            clusters[i]=Orient.instance().getClusterFactory().createCluster(OClusterLocal.TYPE);
            clusters[i].configure(this,clusterConfig);
            clusterMap.put(clusters[i].getName(),clusters[i]);
            clusters[i].open();
          }
 else {
            if (clusterConfig.getName().equals(CLUSTER_DEFAULT_NAME))             defaultClusterId=pos;
            clusters[pos].open();
          }
        }
 catch (        FileNotFoundException e) {
          OLogManager.instance().warn(this,"Error on loading cluster '" + clusters[i].getName() + "' ("+ i+ "): file not found. It will be excluded from current database '"+ getName()+ "'.");
          clusterMap.remove(clusters[i].getName());
          clusters[i]=null;
        }
      }
 else {
        clusters=Arrays.copyOf(clusters,clusters.length + 1);
        clusters[i]=null;
      }
    }
    if (OGlobalConfiguration.USE_WAL.getValueAsBoolean())     writeAheadLog=new OWriteAheadLog(this);
    atomicOperationsManager=new OAtomicOperationsManager(writeAheadLog);
    txManager.open();
  }
 catch (  Exception e) {
    close(true,false);
    throw new OStorageException("Cannot open local storage '" + url + "' with mode="+ mode,e);
  }
 finally {
    lock.releaseExclusiveLock();
    Orient.instance().getProfiler().stopChrono("db." + name + ".open","Open a database",timer,"db.*.open");
  }
}
