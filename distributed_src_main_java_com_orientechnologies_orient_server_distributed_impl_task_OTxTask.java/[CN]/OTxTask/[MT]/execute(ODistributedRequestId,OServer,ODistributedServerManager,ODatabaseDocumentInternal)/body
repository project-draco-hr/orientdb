{
  ODistributedServerLog.debug(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.IN,"Committing transaction against db=%s...",database.getName());
  ODatabaseRecordThreadLocal.INSTANCE.set(database);
  final ODistributedDatabase ddb=iManager.getMessageService().getDatabase(database.getName());
  final ODistributedTxContext reqContext=ddb.registerTxContext(requestId);
  final ODistributedConfiguration dCfg=iManager.getDatabaseConfiguration(database.getName());
  database.begin();
  try {
    final OTransactionOptimistic tx=(OTransactionOptimistic)database.getTransaction();
    result=new OTxTaskResult();
    for (    OAbstractRecordReplicatedTask task : tasks) {
      if (task instanceof OCreateRecordTask) {
        final OCreateRecordTask createRT=(OCreateRecordTask)task;
        final ORecordId rid=createRT.getRid();
        if (rid != null && rid.isPersistent()) {
          if (rid.getRecord() != null)           continue;
        }
        final int clId=createRT.clusterId > -1 ? createRT.clusterId : createRT.getRid().isValid() ? createRT.getRid().getClusterId() : -1;
        final String clusterName=clId > -1 ? database.getClusterNameById(clId) : null;
        if (dCfg.isServerContainingCluster(iManager.getLocalNodeName(),clusterName))         tx.addRecord(createRT.getRecord(),ORecordOperation.CREATED,clusterName);
      }
    }
    for (    OAbstractRecordReplicatedTask task : tasks) {
      final Object taskResult;
      if (!task.checkForClusterAvailability(iManager.getLocalNodeName(),dCfg))       taskResult=NON_LOCAL_CLUSTER;
 else {
        task.setLockRecords(false);
        reqContext.lock(task.getRid());
        task.checkRecordExists();
        taskResult=task.execute(requestId,iServer,iManager,database);
        reqContext.addUndoTask(task.getUndoTask(requestId));
      }
      result.results.add(taskResult);
    }
    database.commit();
    for (int i=0; i < result.results.size(); ++i) {
      final Object currentResult=result.results.get(i);
      if (currentResult == NON_LOCAL_CLUSTER)       continue;
      final OAbstractRecordReplicatedTask task=tasks.get(i);
      if (task instanceof OCreateRecordTask) {
        final OCreateRecordTask t=(OCreateRecordTask)task;
        result.results.set(i,new OPlaceholder(t.getRecord()));
      }
 else       if (task instanceof OUpdateRecordTask) {
        result.results.set(i,task.getRecord().getVersion());
      }
    }
    return result;
  }
 catch (  Throwable e) {
    database.rollback();
    reqContext.unlock();
    if (!(e instanceof ONeedRetryException || e instanceof OTransactionException || e instanceof ORecordDuplicatedException|| e instanceof ORecordNotFoundException))     ODistributedServerLog.info(this,getNodeSource(),null,DIRECTION.NONE,"Error on distributed transaction commit",e);
    return e;
  }
}
