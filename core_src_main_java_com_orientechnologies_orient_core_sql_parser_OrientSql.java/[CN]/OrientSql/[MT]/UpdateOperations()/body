{
  OUpdateOperations jjtn000=new OUpdateOperations(JJTUPDATEOPERATIONS);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  try {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SET:
      jj_consume_token(SET);
    UpdateItem();
  label_4:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
      ;
    break;
default :
  jj_la1[36]=jj_gen;
break label_4;
}
jj_consume_token(COMMA);
UpdateItem();
}
break;
case PUT:
jj_consume_token(PUT);
UpdatePutItem();
label_5: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[37]=jj_gen;
break label_5;
}
jj_consume_token(COMMA);
UpdatePutItem();
}
break;
case MERGE:
case CONTENT:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case MERGE:
jj_consume_token(MERGE);
break;
case CONTENT:
jj_consume_token(CONTENT);
break;
default :
jj_la1[38]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
UpdateMergeItem();
label_6: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[39]=jj_gen;
break label_6;
}
jj_consume_token(COMMA);
UpdateMergeItem();
}
break;
case ADD:
case INCREMENT:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INCREMENT:
jj_consume_token(INCREMENT);
break;
case ADD:
jj_consume_token(ADD);
break;
default :
jj_la1[40]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
UpdateIncrementItem();
label_7: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[41]=jj_gen;
break label_7;
}
jj_consume_token(COMMA);
UpdateIncrementItem();
}
break;
case REMOVE:
jj_consume_token(REMOVE);
UpdateRemoveItem();
label_8: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[42]=jj_gen;
break label_8;
}
jj_consume_token(COMMA);
UpdateRemoveItem();
}
break;
default :
jj_la1[43]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
}
