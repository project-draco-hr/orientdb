{
  checkConnection();
  if (!(iCommand instanceof OSerializableStream))   throw new OCommandExecutionException("Can't serialize the command to being executed to the server side.");
  OSerializableStream command=iCommand;
  Object result=null;
  do {
    OStorageRemoteThreadLocal.INSTANCE.get().commandExecuting=true;
    try {
      final OCommandRequestText aquery=iCommand;
      final boolean asynch=iCommand instanceof OCommandRequestAsynch;
      OChannelBinaryClient network=null;
      try {
        network=beginRequest(OChannelBinaryProtocol.REQUEST_COMMAND);
        network.writeByte((byte)(asynch ? 'a' : 's'));
        network.writeBytes(OStreamSerializerAnyStreamable.INSTANCE.toStream(iCommand.getDatabase(),command));
      }
  finally {
        endRequest(network);
      }
      try {
        beginResponse(network);
        if (asynch) {
          byte status;
          while ((status=network.readByte()) > 0) {
            ORecordSchemaAware<?> record=(ORecordSchemaAware<?>)readIdentifiable(network,iCommand.getDatabase());
            if (record == null)             break;
switch (status) {
case 1:
              try {
                if (!aquery.getResultListener().result(record)) {
                  while (network.in.available() > 0)                   network.in.read();
                  break;
                }
              }
 catch (              Throwable t) {
                t.printStackTrace();
              }
            iCommand.getDatabase().getLevel1Cache().updateRecord(record);
          break;
case 2:
        iCommand.getDatabase().getLevel1Cache().updateRecord(record);
    }
  }
}
 else {
  final byte type=network.readByte();
switch (type) {
case 'n':
    result=null;
  break;
case 'r':
result=readIdentifiable(network,iCommand.getDatabase());
if (result instanceof ORecord<?>) iCommand.getDatabase().getLevel1Cache().updateRecord((ORecordInternal<?>)result);
break;
case 'l':
final int tot=network.readInt();
final Collection<OIdentifiable> list=new ArrayList<OIdentifiable>();
for (int i=0; i < tot; ++i) {
final OIdentifiable resultItem=readIdentifiable(network,iCommand.getDatabase());
if (resultItem instanceof ORecord<?>) iCommand.getDatabase().getLevel1Cache().updateRecord((ORecordInternal<?>)resultItem);
list.add(resultItem);
}
result=list;
break;
case 'a':
final String value=new String(network.readBytes());
result=ORecordSerializerStringAbstract.fieldTypeFromStream(null,ORecordSerializerStringAbstract.getType(value),value);
break;
}
}
break;
}
  finally {
endResponse(network);
}
}
 catch (OException e) {
throw e;
}
catch (Exception e) {
handleException("Error on executing command: " + iCommand,e);
}
 finally {
OStorageRemoteThreadLocal.INSTANCE.get().commandExecuting=false;
}
}
 while (true);
return result;
}
