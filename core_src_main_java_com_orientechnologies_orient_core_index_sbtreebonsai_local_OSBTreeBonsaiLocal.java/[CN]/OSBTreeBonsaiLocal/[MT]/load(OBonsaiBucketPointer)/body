{
  OSessionStoragePerformanceStatistic statistic=performanceStatisticManager.getSessionPerformanceStatistic();
  startOperation();
  if (statistic != null)   statistic.startRidBagEntryLoadTimer();
  try {
    Lock lock=fileLockManager.acquireExclusiveLock(fileId);
    try {
      this.rootBucketPointer=rootBucketPointer;
      final OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
      this.fileId=openFile(atomicOperation,getFullName());
      OCacheEntry rootCacheEntry=loadPage(atomicOperation,this.fileId,this.rootBucketPointer.getPageIndex(),false);
      rootCacheEntry.acquireSharedLock();
      try {
        OSBTreeBonsaiBucket<K,V> rootBucket=new OSBTreeBonsaiBucket<K,V>(rootCacheEntry,this.rootBucketPointer.getPageOffset(),keySerializer,valueSerializer,getChanges(atomicOperation,rootCacheEntry),this);
        keySerializer=(OBinarySerializer<K>)storage.getComponentsFactory().binarySerializerFactory.getObjectSerializer(rootBucket.getKeySerializerId());
        valueSerializer=(OBinarySerializer<V>)storage.getComponentsFactory().binarySerializerFactory.getObjectSerializer(rootBucket.getValueSerializerId());
      }
  finally {
        rootCacheEntry.releaseSharedLock();
        releasePage(atomicOperation,rootCacheEntry);
      }
    }
 catch (    IOException e) {
      throw OException.wrapException(new OSBTreeBonsaiLocalException("Exception during loading of sbtree " + fileId,this),e);
    }
 finally {
      lock.unlock();
    }
  }
  finally {
    if (statistic != null)     statistic.stopRidBagEntryLoadTimer();
    completeOperation();
  }
}
