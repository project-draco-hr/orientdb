{
  final int len=file.readInt(0);
  final OEHFileMetadata[] metadata=new OEHFileMetadata[len];
  final int bufferSize=file.readInt(OIntegerSerializer.INT_SIZE);
  final byte[] buffer=new byte[bufferSize];
  int offset=0;
  for (int i=0; i < len; i++) {
    final String name=OStringSerializer.INSTANCE.deserializeNative(buffer,offset);
    offset+=OStringSerializer.INSTANCE.getObjectSize(name);
    final long bucketsCount=OIntegerSerializer.INSTANCE.deserializeNative(buffer,offset);
    offset+=OIntegerSerializer.INT_SIZE;
    final long tombstone=OLongSerializer.INSTANCE.deserializeNative(buffer,offset);
    final OFileMMap fileMMap;
    if (name.length() > 0) {
      fileMMap=new OFileMMap();
      fileMMap.init(name,"rw");
    }
 else     fileMMap=null;
    final OEHFileMetadata extendibleHashingFile=new OEHFileMetadata();
    extendibleHashingFile.setFile(fileMMap);
    extendibleHashingFile.setBucketsCount(bucketsCount);
    extendibleHashingFile.setTombstonePosition(tombstone);
    metadata[i]=extendibleHashingFile;
  }
  return metadata;
}
