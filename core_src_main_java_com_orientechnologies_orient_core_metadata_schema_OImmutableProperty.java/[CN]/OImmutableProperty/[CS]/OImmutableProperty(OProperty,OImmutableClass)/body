{
  name=property.getName();
  fullName=property.getFullName();
  type=property.getType();
  if (property.getLinkedClass() != null)   linkedClassName=property.getLinkedClass().getName();
 else   linkedClassName=null;
  linkedType=property.getLinkedType();
  notNull=property.isNotNull();
  collate=property.getCollate();
  mandatory=property.isMandatory();
  min=property.getMin();
  max=property.getMax();
  defaultValue=property.getDefaultValue();
  regexp=property.getRegexp();
  customProperties=new HashMap<String,String>();
  for (  String key : property.getCustomKeys())   customProperties.put(key,property.getCustom(key));
  this.owner=owner;
  id=property.getId();
  readOnly=property.isReadonly();
  if (min != null) {
    if (type.equals(OType.STRING))     minComparable=new ValidationStringComparable((Integer)OType.convert(min,Integer.class));
 else     if (type.equals(OType.BINARY))     minComparable=new ValidationBinaryComparable((Integer)OType.convert(min,Integer.class));
 else     if (type.equals(OType.DATE) || type.equals(OType.BYTE) || type.equals(OType.SHORT)|| type.equals(OType.INTEGER)|| type.equals(OType.LONG)|| type.equals(OType.FLOAT)|| type.equals(OType.DOUBLE)|| type.equals(OType.DECIMAL)|| type.equals(OType.DATETIME))     minComparable=(Comparable<Object>)OType.convert(min,type.getDefaultJavaType());
 else     if (type.equals(OType.EMBEDDEDLIST) || type.equals(OType.EMBEDDEDSET) || type.equals(OType.LINKLIST)|| type.equals(OType.LINKSET))     minComparable=new ValidationCollectionComparable((Integer)OType.convert(min,Integer.class));
 else     if (type.equals(OType.EMBEDDEDMAP) || type.equals(OType.LINKMAP))     minComparable=new ValidationMapComparable((Integer)OType.convert(min,Integer.class));
 else     minComparable=null;
  }
 else   minComparable=null;
  if (max != null) {
    if (type.equals(OType.STRING))     maxComparable=new ValidationStringComparable((Integer)OType.convert(max,Integer.class));
 else     if (type.equals(OType.BINARY))     maxComparable=new ValidationBinaryComparable((Integer)OType.convert(max,Integer.class));
 else     if (type.equals(OType.DATE)) {
      Date maxDate=(Date)OType.convert(max,OType.DATE.getDefaultJavaType());
      Calendar cal=Calendar.getInstance();
      cal.setTime(maxDate);
      cal.add(Calendar.DAY_OF_MONTH,1);
      maxDate=new Date(cal.getTime().getTime() - 1);
      maxComparable=(Comparable)maxDate;
    }
 else     if (type.equals(OType.BYTE) || type.equals(OType.SHORT) || type.equals(OType.INTEGER)|| type.equals(OType.LONG)|| type.equals(OType.FLOAT)|| type.equals(OType.DOUBLE)|| type.equals(OType.DECIMAL)|| type.equals(OType.DATETIME))     maxComparable=(Comparable<Object>)OType.convert(max,type.getDefaultJavaType());
 else     if (type.equals(OType.EMBEDDEDLIST) || type.equals(OType.EMBEDDEDSET) || type.equals(OType.LINKLIST)|| type.equals(OType.LINKSET))     maxComparable=new ValidationCollectionComparable((Integer)OType.convert(max,Integer.class));
 else     if (type.equals(OType.EMBEDDEDMAP) || type.equals(OType.LINKMAP))     maxComparable=new ValidationMapComparable((Integer)OType.convert(max,Integer.class));
 else     maxComparable=null;
  }
 else {
    maxComparable=null;
  }
}
