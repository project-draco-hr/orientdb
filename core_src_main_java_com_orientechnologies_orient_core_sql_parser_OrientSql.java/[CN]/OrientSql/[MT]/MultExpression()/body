{
  OMultExpression jjtn000=new OMultExpression(JJTMULTEXPRESSION);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  OMathExpression sub;
  jjtn000.setChildExpressions(new java.util.ArrayList());
  try {
    sub=FirstLevelExpression();
    jjtn000.getChildExpressions().add(sub);
    label_26:     while (true) {
      if (jj_2_58(2)) {
        ;
      }
 else {
        break label_26;
      }
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STAR:
        jj_consume_token(STAR);
      jjtn000.operators.add(OMathExpression.Operator.STAR);
    break;
case SLASH:
  jj_consume_token(SLASH);
jjtn000.operators.add(OMathExpression.Operator.SLASH);
break;
case REM:
jj_consume_token(REM);
jjtn000.operators.add(OMathExpression.Operator.REM);
break;
default :
jj_la1[143]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
sub=FirstLevelExpression();
jjtn000.getChildExpressions().add(sub);
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
if (jjtn000.getChildExpressions().size() != 1) {
{
if (true) return jjtn000;
}
}
 else {
{
if (true) return jjtn000.getChildExpressions().get(0);
}
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
