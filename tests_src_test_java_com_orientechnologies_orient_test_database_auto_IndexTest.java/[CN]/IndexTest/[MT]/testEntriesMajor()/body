{
  database.command(new OCommandSQL("create index equalityIdx unique")).execute();
  database.getMetadata().getIndexManager().reload();
  Assert.assertNotNull(database.getMetadata().getIndexManager().getIndex("equalityIdx"));
  for (int key=0; key <= 5; key++) {
    database.command(new OCommandSQL("insert into index:equalityIdx (key,rid) values (" + key + ",#10:"+ key+ ")")).execute();
  }
  final OIndex<?> index=database.getMetadata().getIndexManager().getIndex("equalityIdx");
  final Collection<Integer> valuesMajorResults=new ArrayList<Integer>(Arrays.asList(4,5));
  Collection<ODocument> indexCollection=index.getEntriesMajor(3,false);
  Assert.assertEquals(indexCollection.size(),2);
  for (  ODocument doc : indexCollection) {
    valuesMajorResults.remove(doc.<Integer>field("key"));
    Assert.assertEquals(doc.<ORecordId>rawField("rid"),new ORecordId(10,doc.<Integer>field("key").longValue()));
  }
  Assert.assertEquals(valuesMajorResults.size(),0);
  final Collection<Integer> valuesMajorInclusiveResults=new ArrayList<Integer>(Arrays.asList(3,4,5));
  indexCollection=index.getEntriesMajor(3,true);
  Assert.assertEquals(indexCollection.size(),3);
  for (  ODocument doc : indexCollection) {
    valuesMajorInclusiveResults.remove(doc.<Integer>field("key"));
    Assert.assertEquals(doc.<ORecordId>rawField("rid"),new ORecordId(10,doc.<Integer>field("key").longValue()));
  }
  Assert.assertEquals(valuesMajorInclusiveResults.size(),0);
  indexCollection=index.getEntriesMajor(5,true);
  Assert.assertEquals(indexCollection.size(),1);
  Assert.assertEquals(indexCollection.iterator().next().<Integer>field("key"),Integer.valueOf(5));
  Assert.assertEquals(indexCollection.iterator().next().<ORecordId>rawField("rid"),new ORecordId(10,5));
  indexCollection=index.getEntriesMajor(5,false);
  Assert.assertEquals(indexCollection.size(),0);
  database.command(new OCommandSQL("drop index equalityIdx")).execute();
}
