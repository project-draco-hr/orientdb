{
  final Object key;
  if (entry.field("k") != null) {
    Object serKey=entry.field("k");
    try {
      ODocument keyContainer=null;
      if (serKey instanceof String) {
        final String serializedKey=OStringSerializerHelper.decode((String)serKey);
        keyContainer=new ODocument();
        keyContainer.setLazyLoad(false);
        keyContainer.setTrackingChanges(false);
        ORecordSerializerSchemaAware2CSV.INSTANCE.fromString(serializedKey,keyContainer,null);
      }
 else       if (serKey instanceof ODocument) {
        keyContainer=(ODocument)serKey;
      }
      if (keyContainer == null)       throw new OTransactionException("Key was not provided during key-value pair insertion");
      final Object storedKey=keyContainer.field("key");
      if (storedKey instanceof List)       key=new OCompositeKey((List<? extends Comparable<?>>)storedKey);
 else       if (Boolean.TRUE.equals(keyContainer.field("binary"))) {
        key=OStreamSerializerAnyStreamable.INSTANCE.fromStream((byte[])storedKey);
      }
 else       key=storedKey;
    }
 catch (    IOException ioe) {
      throw new OTransactionException("Error during index changes deserialization. ",ioe);
    }
  }
 else   key=null;
  final List<ODocument> operations=entry.field("ops");
  if (operations != null) {
    for (    final ODocument op : operations) {
      op.setLazyLoad(false);
      final int operation=(Integer)op.rawField("o");
      final OIdentifiable value=op.field("v");
      if (operation == OPERATION.PUT.ordinal())       putInSnapshot(key,value,snapshot);
 else       if (operation == OPERATION.REMOVE.ordinal()) {
        if (value == null)         removeFromSnapshot(key,snapshot);
 else {
          removeFromSnapshot(key,value,snapshot);
        }
      }
    }
  }
}
