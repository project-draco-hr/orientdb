{
  acquireSharedLock();
  try {
    long clusterPosition=position.clusterPosition;
    OClusterPositionMapBucket.PositionEntry positionEntry=clusterPositionMap.get(clusterPosition);
    if (positionEntry == null)     return null;
    OAtomicOperation atomicOperation=storage.getAtomicOperationsManager().getCurrentOperation();
    long pageIndex=positionEntry.getPageIndex();
    int recordPosition=positionEntry.getRecordPosition();
    long pagesCount=getFilledUpTo(atomicOperation,diskCache,fileId);
    if (pageIndex >= pagesCount)     return null;
    OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,pageIndex,false,diskCache);
    try {
      final OClusterPage localPage=new OClusterPage(cacheEntry,false,getChangesTree(atomicOperation,cacheEntry));
      if (localPage.isDeleted(recordPosition))       return null;
      if (localPage.getRecordByteValue(recordPosition,-OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE) == 0)       return null;
      final OPhysicalPosition physicalPosition=new OPhysicalPosition();
      physicalPosition.recordSize=-1;
      physicalPosition.recordType=localPage.getRecordByteValue(recordPosition,0);
      physicalPosition.recordVersion=localPage.getRecordVersion(recordPosition);
      physicalPosition.clusterPosition=position.clusterPosition;
      return physicalPosition;
    }
  finally {
      releasePage(atomicOperation,cacheEntry,diskCache);
    }
  }
  finally {
    releaseSharedLock();
  }
}
