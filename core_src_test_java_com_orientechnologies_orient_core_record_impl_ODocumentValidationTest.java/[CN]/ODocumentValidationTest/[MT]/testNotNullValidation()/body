{
  ODatabaseDocument db=new ODatabaseDocumentTx("memory:" + ODocumentValidationTest.class.getSimpleName());
  db.create();
  try {
    ODocument doc=new ODocument();
    OIdentifiable id=db.save(doc).getIdentity();
    OClass clazz=db.getMetadata().getSchema().createClass("Validation");
    clazz.createProperty("int",OType.INTEGER).setNotNull(true);
    clazz.createProperty("long",OType.LONG).setNotNull(true);
    clazz.createProperty("float",OType.FLOAT).setNotNull(true);
    clazz.createProperty("boolean",OType.BOOLEAN).setNotNull(true);
    clazz.createProperty("binary",OType.BINARY).setNotNull(true);
    clazz.createProperty("byte",OType.BYTE).setNotNull(true);
    clazz.createProperty("date",OType.DATE).setNotNull(true);
    clazz.createProperty("datetime",OType.DATETIME).setNotNull(true);
    clazz.createProperty("decimal",OType.DECIMAL).setNotNull(true);
    clazz.createProperty("double",OType.DOUBLE).setNotNull(true);
    clazz.createProperty("short",OType.SHORT).setNotNull(true);
    clazz.createProperty("string",OType.STRING).setNotNull(true);
    clazz.createProperty("link",OType.LINK).setNotNull(true);
    clazz.createProperty("embedded",OType.EMBEDDED).setNotNull(true);
    clazz.createProperty("embeddedList",OType.EMBEDDEDLIST).setNotNull(true);
    clazz.createProperty("embeddedSet",OType.EMBEDDEDSET).setNotNull(true);
    clazz.createProperty("embeddedMap",OType.EMBEDDEDMAP).setNotNull(true);
    clazz.createProperty("linkList",OType.LINKLIST).setNotNull(true);
    clazz.createProperty("linkSet",OType.LINKSET).setNotNull(true);
    clazz.createProperty("linkMap",OType.LINKMAP).setNotNull(true);
    ODocument d=new ODocument(clazz);
    d.field("int",12);
    d.field("long",12);
    d.field("float",12);
    d.field("boolean",true);
    d.field("binary",new byte[]{1,2,3,4,5,6,7,8,9,10,11,12});
    d.field("byte",12);
    d.field("date",new Date());
    d.field("datetime",new Date());
    d.field("decimal",12);
    d.field("double",12);
    d.field("short",12);
    d.field("string","yeah");
    d.field("link",id);
    d.field("embedded",new ODocument().field("test","test"));
    d.field("embeddedList",new ArrayList<String>());
    d.field("embeddedSet",new HashSet<String>());
    d.field("embeddedMap",new HashMap<String,String>());
    d.field("linkList",new ArrayList<ORecordId>());
    d.field("linkSet",new HashSet<ORecordId>());
    d.field("linkMap",new HashMap<String,ORecordId>());
    checkField(d,"int",null);
    checkField(d,"long",null);
    checkField(d,"float",null);
    checkField(d,"boolean",null);
    checkField(d,"binary",null);
    checkField(d,"byte",null);
    checkField(d,"date",null);
    checkField(d,"datetime",null);
    checkField(d,"decimal",null);
    checkField(d,"double",null);
    checkField(d,"short",null);
    checkField(d,"string",null);
    checkField(d,"link",null);
    checkField(d,"embedded",null);
    checkField(d,"embeddedList",null);
    checkField(d,"embeddedSet",null);
    checkField(d,"embeddedMap",null);
    checkField(d,"linkList",null);
    checkField(d,"linkSet",null);
    checkField(d,"linkMap",null);
  }
  finally {
    db.drop();
  }
}
