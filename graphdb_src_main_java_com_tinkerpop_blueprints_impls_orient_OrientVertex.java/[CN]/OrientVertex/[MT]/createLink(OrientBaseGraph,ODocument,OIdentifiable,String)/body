{
  final Object out;
  OType outType=iFromVertex.fieldType(iFieldName);
  Object found=iFromVertex.field(iFieldName);
  final OClass linkClass=ODocumentInternal.getImmutableSchemaClass(iFromVertex);
  if (linkClass == null)   throw new IllegalArgumentException("Class not found in source vertex: " + iFromVertex);
  final OProperty prop=linkClass.getProperty(iFieldName);
  final OType propType=prop != null && prop.getType() != OType.ANY ? prop.getType() : null;
  if (found == null) {
    if (iGraph.isAutoScaleEdgeType() && (prop == null || propType == OType.LINK || "true".equalsIgnoreCase(prop.getCustom(OrientVertexType.OrientVertexProperty.ORDERED)))) {
      out=iTo;
      outType=OType.LINK;
    }
 else     if (propType == OType.LINKLIST || (prop != null && "true".equalsIgnoreCase(prop.getCustom(OrientVertexType.OrientVertexProperty.ORDERED)))) {
      final Collection coll=new ORecordLazyList(iFromVertex);
      coll.add(iTo);
      out=coll;
      outType=OType.LINKLIST;
    }
 else     if (propType == null || propType == OType.LINKBAG) {
      final ORidBag bag=new ORidBag();
      bag.add(iTo);
      out=bag;
      outType=OType.LINKBAG;
    }
 else     throw new IllegalStateException("Type of field provided in schema '" + prop.getType() + "' cannot be used for link creation.");
  }
 else   if (found instanceof OIdentifiable) {
    if (prop != null && propType == OType.LINK)     throw new IllegalStateException("Type of field provided in schema '" + prop.getType() + "' cannot be used for creation to hold several links.");
    if (prop != null && "true".equalsIgnoreCase(prop.getCustom(OrientVertexType.OrientVertexProperty.ORDERED))) {
      final Collection coll=new ORecordLazyList(iFromVertex);
      coll.add(found);
      coll.add(iTo);
      out=coll;
      outType=OType.LINKLIST;
    }
 else {
      final ORidBag bag=new ORidBag();
      bag.add((OIdentifiable)found);
      bag.add(iTo);
      out=bag;
      outType=OType.LINKBAG;
    }
  }
 else   if (found instanceof ORidBag) {
    out=null;
    ((ORidBag)found).add(iTo);
  }
 else   if (found instanceof Collection<?>) {
    out=null;
    ((Collection<Object>)found).add(iTo);
  }
 else   throw new IllegalStateException("Relationship content is invalid on field " + iFieldName + ". Found: "+ found);
  if (out != null)   iFromVertex.field(iFieldName,out,outType);
  return out;
}
