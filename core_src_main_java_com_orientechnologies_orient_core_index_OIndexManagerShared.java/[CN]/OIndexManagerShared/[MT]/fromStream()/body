{
  acquireExclusiveLock();
  try {
    final Map<String,OIndex<?>> oldIndexes=new HashMap<String,OIndex<?>>(indexes);
    clearMetadata();
    final Collection<ODocument> idxs=document.field(CONFIG_INDEXES);
    final Locale locale=getServerLocale();
    if (idxs != null) {
      OIndexInternal<?> index;
      boolean configUpdated=false;
      Iterator<ODocument> indexConfigurationIterator=idxs.iterator();
      while (indexConfigurationIterator.hasNext()) {
        final ODocument d=indexConfigurationIterator.next();
        try {
          final int indexVersion=d.field(OIndexInternal.INDEX_VERSION) == null ? 1 : (Integer)d.field(OIndexInternal.INDEX_VERSION);
          final OIndexMetadata newIndexMetadata=OIndexAbstract.loadMetadataInternal(d,(String)d.field(OIndexInternal.CONFIG_TYPE),(String)d.field(OIndexInternal.ALGORITHM),d.<String>field(OIndexInternal.VALUE_CONTAINER_ALGORITHM));
          index=OIndexes.createIndex(getDatabase(),newIndexMetadata.getName(),newIndexMetadata.getType(),newIndexMetadata.getAlgorithm(),newIndexMetadata.getValueContainerAlgorithm(),(ODocument)d.field(OIndexInternal.METADATA),indexVersion);
          final String normalizedName=newIndexMetadata.getName().toLowerCase(locale);
          OIndex<?> oldIndex=oldIndexes.remove(normalizedName);
          if (oldIndex != null) {
            OIndexMetadata oldIndexMetadata=oldIndex.getInternal().loadMetadata(oldIndex.getConfiguration());
            if (!(oldIndexMetadata.equals(newIndexMetadata) || newIndexMetadata.getIndexDefinition() == null)) {
              oldIndex.delete();
            }
            if (index.loadFromConfiguration(d)) {
              addIndexInternal(index);
            }
 else {
              indexConfigurationIterator.remove();
              configUpdated=true;
            }
          }
 else {
            if (index.loadFromConfiguration(d)) {
              addIndexInternal(index);
            }
 else {
              indexConfigurationIterator.remove();
              configUpdated=true;
            }
          }
        }
 catch (        RuntimeException e) {
          indexConfigurationIterator.remove();
          configUpdated=true;
          OLogManager.instance().error(this,"Error on loading index by configuration: %s",e,d);
        }
      }
      for (      OIndex<?> oldIndex : oldIndexes.values())       try {
        OLogManager.instance().warn(this,"Index '%s' was not found after reload and will be removed",oldIndex.getName());
        oldIndex.delete();
      }
 catch (      Exception e) {
        OLogManager.instance().error(this,"Error on deletion of index '%s'",e,oldIndex.getName());
      }
      if (configUpdated) {
        document.field(CONFIG_INDEXES,idxs);
        save();
      }
    }
  }
  finally {
    releaseExclusiveLock();
  }
}
