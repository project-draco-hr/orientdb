{
  ODatabaseDocument db=new ODatabaseDocumentTx("memory:" + HookChangeValidationTest.class.getName());
  db.create();
  try {
    OSchema schema=db.getMetadata().getSchema();
    OClass classA=schema.createClass("TestClass");
    classA.createProperty("property1",OType.STRING).setNotNull(true);
    classA.createProperty("property2",OType.STRING).setReadonly(true);
    classA.createProperty("property3",OType.STRING).setMandatory(true);
    db.registerHook(new ODocumentHookAbstract(){
      @Override public RESULT onRecordBeforeCreate(      ODocument doc){
        doc.removeField("property1");
        doc.removeField("property2");
        doc.removeField("property3");
        return RESULT.RECORD_CHANGED;
      }
      @Override public RESULT onRecordBeforeUpdate(      ODocument doc){
        return RESULT.RECORD_NOT_CHANGED;
      }
      @Override public DISTRIBUTED_EXECUTION_MODE getDistributedExecutionMode(){
        return DISTRIBUTED_EXECUTION_MODE.SOURCE_NODE;
      }
    }
);
    ODocument doc=new ODocument(classA);
    doc.field("property1","value1-create");
    doc.field("property2","value2-create");
    doc.field("property3","value3-create");
    try {
      doc.save();
      Assert.fail("The document save should fail for validation exception");
    }
 catch (    OValidationException ex) {
    }
  }
  finally {
    db.drop();
  }
}
