{
  final ODatabaseRecord database=getDatabase();
  OClass roleClass=database.getMetadata().getSchema().getClass("ORole");
  if (roleClass == null)   roleClass=database.getMetadata().getSchema().createClass("ORole");
  if (!roleClass.existsProperty("name"))   roleClass.createProperty("name",OType.STRING).setMandatory(true).setNotNull(true);
  if (!roleClass.existsProperty("mode"))   roleClass.createProperty("mode",OType.BYTE);
  if (!roleClass.existsProperty("rules"))   roleClass.createProperty("rules",OType.EMBEDDEDMAP,OType.BYTE);
  OClass userClass=database.getMetadata().getSchema().getClass("OUser");
  if (userClass == null)   userClass=database.getMetadata().getSchema().createClass("OUser");
  if (!userClass.existsProperty("name"))   userClass.createProperty("name",OType.STRING).setMandatory(true).setNotNull(true);
  if (!userClass.existsProperty("password"))   userClass.createProperty("password",OType.STRING).setMandatory(true).setNotNull(true);
  if (!userClass.existsProperty("roles"))   userClass.createProperty("roles",OType.LINKSET,roleClass);
  ORole adminRole=getRole(ORole.ADMIN);
  if (adminRole == null)   adminRole=createRole(ORole.ADMIN,ORole.ALLOW_MODES.ALLOW_ALL_BUT);
  OUser adminUser=getUser(OUser.ADMIN);
  if (adminUser == null)   adminUser=createUser(OUser.ADMIN,OUser.ADMIN,new String[]{adminRole.getName()});
  return adminUser;
}
