{
  if (!running)   return false;
  try {
    running=false;
    OLogManager.instance().info(this,"OrientDB Server is shutting down...");
    if (shutdownHook != null)     shutdownHook.cancel();
    Orient.instance().getProfiler().unregisterHookValue("system.databases");
    for (    OServerLifecycleListener l : lifecycleListeners)     l.onBeforeDeactivate();
    lock.lock();
    try {
      if (networkListeners.size() > 0) {
        OLogManager.instance().info(this,"Shutting down listeners:");
        for (        OServerNetworkListener l : networkListeners) {
          OLogManager.instance().info(this,"- %s",l);
          try {
            l.shutdown();
          }
 catch (          Throwable e) {
            OLogManager.instance().error(this,"Error during shutdown of listener %s.",e,l);
          }
        }
      }
      if (networkProtocols.size() > 0) {
        OLogManager.instance().info(this,"Shutting down protocols");
        networkProtocols.clear();
      }
      for (      OServerLifecycleListener l : lifecycleListeners)       try {
        l.onAfterDeactivate();
      }
 catch (      Exception e) {
        OLogManager.instance().error(this,"Error during deactivation of server lifecycle listener %s",e,l);
      }
      clientConnectionManager.shutdown();
      if (pluginManager != null)       pluginManager.shutdown();
    }
  finally {
      lock.unlock();
    }
    if (shutdownEngineOnExit && !Orient.isRegisterDatabaseByPath())     try {
      OLogManager.instance().info(this,"Shutting down databases:");
      Orient.instance().shutdown();
    }
 catch (    Throwable e) {
      OLogManager.instance().error(this,"Error during OrientDB shutdown",e);
    }
  }
  finally {
    OLogManager.instance().info(this,"OrientDB Server shutdown complete\n");
    OLogManager.instance().flush();
  }
  return true;
}
