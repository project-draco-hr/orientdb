{
  if (fieldValue instanceof ORecordId)   throw new OValidationException("The field '" + p.getFullName() + "' has been declared as "+ p.getType()+ " but the value is the RecordID "+ fieldValue);
 else   if (fieldValue instanceof OIdentifiable) {
    if (((OIdentifiable)fieldValue).getIdentity().isValid())     throw new OValidationException("The field '" + p.getFullName() + "' has been declared as "+ p.getType()+ " but the value is a document with the valid RecordID "+ fieldValue);
    final OClass embeddedClass=p.getLinkedClass();
    if (embeddedClass != null) {
      final ORecord<?> rec=((OIdentifiable)fieldValue).getRecord();
      if (!(rec instanceof ODocument))       throw new OValidationException("The field '" + p.getFullName() + "' has been declared as "+ p.getType()+ " with linked class '"+ embeddedClass+ "' but the record was not a document");
      final ODocument doc=(ODocument)rec;
      if (doc.getSchemaClass() == null)       throw new OValidationException("The field '" + p.getFullName() + "' has been declared as "+ p.getType()+ " with linked class '"+ embeddedClass+ "' but the record has no class");
      if (!(doc.getSchemaClass().isSubClassOf(embeddedClass)))       throw new OValidationException("The field '" + p.getFullName() + "' has been declared as "+ p.getType()+ " with linked class '"+ embeddedClass+ "' but the record is of class '"+ doc.getSchemaClass().getName()+ "' that is not a subclass of that");
    }
  }
 else   throw new OValidationException("The field '" + p.getFullName() + "' has been declared as "+ p.getType()+ " but an incompatible type is used. Value: "+ fieldValue);
}
