{
  final long timer=OProfiler.getInstance().startChrono();
  addUser();
  cache.addUser();
  final boolean locked=lock.acquireExclusiveLock();
  SIZE sizeProfile=SIZE.MEDIUM;
  Object value;
  if (iProperties != null) {
    if (iProperties.containsKey("size")) {
      value=iProperties.get("size");
      if (value instanceof SIZE)       sizeProfile=(SIZE)value;
 else       sizeProfile=SIZE.valueOf(value.toString());
    }
  }
  if (sizeProfile == SIZE.HUGE)   infoTableSize=5000000;
 else   if (sizeProfile == SIZE.LARGE)   infoTableSize=1000000;
 else   if (sizeProfile == SIZE.MEDIUM)   infoTableSize=200000;
 else   if (sizeProfile == SIZE.MEDIUM)   infoTableSize=20000;
  try {
    if (open)     throw new OStorageException("Can't create new storage " + name + " because it isn't closed");
    File storageFolder=new File(storagePath);
    if (!storageFolder.exists())     storageFolder.mkdir();
    if (exists())     throw new OStorageException("Can't create new storage " + name + " because it already exists");
    open=true;
    addDataSegment(OStorage.DATA_DEFAULT_NAME);
    addCluster(OStorage.CLUSTER_INTERNAL_NAME,OStorage.CLUSTER_TYPE.PHYSICAL);
    addCluster(OStorage.CLUSTER_INDEX_NAME,OStorage.CLUSTER_TYPE.PHYSICAL);
    defaultClusterId=addCluster(OStorage.CLUSTER_DEFAULT_NAME,OStorage.CLUSTER_TYPE.PHYSICAL);
    configuration.create(infoTableSize);
    txManager.create();
  }
 catch (  OStorageException e) {
    close();
    throw e;
  }
catch (  IOException e) {
    close();
    throw new OStorageException("Error on creation of storage: " + name,e);
  }
 finally {
    lock.releaseExclusiveLock(locked);
    OProfiler.getInstance().stopChrono("OStorageLocal.create",timer);
  }
}
