{
  checkForDatabase();
  if (iPropertyName.indexOf('.') == -1)   throw new OSystemException("Property name is in the format <class>.<property>");
  final String[] parts=iPropertyName.split("\\.");
  final OClass cls=currentDatabase.getMetadata().getImmutableSchemaSnapshot().getClass(parts[0]);
  if (cls == null) {
    message("\n! Class '" + parts[0] + "' does not exist in the database '"+ currentDatabaseName+ "'");
    return;
  }
  final OProperty prop=cls.getProperty(parts[1]);
  if (prop == null) {
    message("\n! Property '" + parts[1] + "' does not exist in class '"+ parts[0]+ "'");
    return;
  }
  message("\nPROPERTY '" + prop.getFullName() + "'\n");
  message("\nType.................: " + prop.getType());
  message("\nMandatory............: " + prop.isMandatory());
  message("\nNot null.............: " + prop.isNotNull());
  message("\nRead only............: " + prop.isReadonly());
  message("\nDefault value........: " + prop.getDefaultValue());
  message("\nMinimum value........: " + prop.getMin());
  message("\nMaximum value........: " + prop.getMax());
  message("\nREGEXP...............: " + prop.getRegexp());
  message("\nCollate..............: " + prop.getCollate());
  message("\nLinked class.........: " + prop.getLinkedClass());
  message("\nLinked type..........: " + prop.getLinkedType());
  if (prop.getCustomKeys().size() > 0) {
    message("\n\nCUSTOM ATTRIBUTES");
    final List<ODocument> resultSet=new ArrayList<ODocument>();
    for (    final String k : prop.getCustomKeys()) {
      try {
        final ODocument row=new ODocument();
        resultSet.add(row);
        row.field("NAME",k);
        row.field("VALUE",prop.getCustom(k));
      }
 catch (      Exception ignored) {
      }
    }
    final OTableFormatter formatter=new OTableFormatter(this);
    formatter.writeRecords(resultSet,-1);
  }
  final Collection<OIndex<?>> indexes=prop.getAllIndexes();
  if (!indexes.isEmpty()) {
    message("\n\nINDEXES (" + indexes.size() + " altogether)");
    final List<ODocument> resultSet=new ArrayList<ODocument>();
    for (    final OIndex<?> index : indexes) {
      final ODocument row=new ODocument();
      resultSet.add(row);
      row.field("NAME",index.getName());
      final OIndexDefinition indexDefinition=index.getDefinition();
      if (indexDefinition != null) {
        final List<String> fields=indexDefinition.getFields();
        row.field("PROPERTIES",fields);
      }
    }
    final OTableFormatter formatter=new OTableFormatter(this);
    formatter.writeRecords(resultSet,-1);
  }
}
