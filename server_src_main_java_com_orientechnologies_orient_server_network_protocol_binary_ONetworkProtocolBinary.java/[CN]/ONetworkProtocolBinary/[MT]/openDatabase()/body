{
  setDataCommandInfo("Open database");
  readConnectionData();
  final String dbURL=channel.readString();
  String dbType=ODatabaseDocument.TYPE;
  if (connection.data.protocolVersion <= OChannelBinaryProtocol.PROTOCOL_VERSION_31)   dbType=channel.readString();
  final String user=channel.readString();
  final String passwd=channel.readString();
  connection.database=(ODatabaseDocumentTx)server.openDatabase(dbURL,user,passwd,connection.data);
  byte[] token=tokenHandler.getSignedBinaryToken(connection.database,connection.database.getUser(),connection.data);
  if (Boolean.TRUE.equals(tokenBased)) {
    try {
      getServer().getClientConnectionManager().connect(this,connection,token,tokenHandler.parseBinaryToken(token));
    }
 catch (    Exception e) {
      throw new OException(e);
    }
  }
  if (connection.database.getStorage() instanceof OStorageProxy && !loadUserFromSchema(user,passwd)) {
    sendErrorOrDropConnection(clientTxId,new OSecurityAccessException(connection.database.getName(),"User or password not valid for database: '" + connection.database.getName() + "'"));
  }
 else {
    beginResponse();
    try {
      sendOk(clientTxId);
      channel.writeInt(connection.id);
      if (connection.data.protocolVersion > OChannelBinaryProtocol.PROTOCOL_VERSION_26) {
        if (Boolean.TRUE.equals(tokenBased)) {
          channel.writeBytes(token);
        }
 else         channel.writeBytes(OCommonConst.EMPTY_BYTE_ARRAY);
      }
      sendDatabaseInformation();
      final OServerPlugin plugin=server.getPlugin("cluster");
      ODocument distributedCfg=null;
      if (plugin != null && plugin instanceof ODistributedServerManager)       distributedCfg=((ODistributedServerManager)plugin).getClusterConfiguration();
      channel.writeBytes(distributedCfg != null ? getRecordBytes(distributedCfg) : null);
      if (connection.data.protocolVersion >= 14)       channel.writeString(OConstants.getVersion());
    }
  finally {
      endResponse();
    }
  }
}
