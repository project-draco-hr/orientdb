{
  if (iToMerge.recordingFrom < recordingFrom)   recordingFrom=iToMerge.recordingFrom;
  if (iToMerge.recordingTo > recordingTo)   recordingTo=iToMerge.recordingTo;
  for (  Entry<String,Long> entry : iToMerge.counters.entrySet()) {
    Long currentValue=counters.get(entry.getKey());
    if (currentValue == null)     currentValue=0l;
    counters.put(entry.getKey(),currentValue + entry.getValue());
  }
  for (  Entry<String,Object> entry : iToMerge.hooks.entrySet()) {
    Object currentValue=hooks.get(entry.getKey());
    if (currentValue == null)     currentValue=entry.getValue();
 else {
      final Object otherValue=entry.getValue();
      if (currentValue instanceof Long)       currentValue=((Long)currentValue).longValue() + ((Long)otherValue).longValue();
 else       if (currentValue instanceof Integer)       currentValue=((Integer)currentValue).intValue() + ((Integer)otherValue).intValue();
 else       if (currentValue instanceof Short)       currentValue=((Short)currentValue).shortValue() + ((Short)otherValue).shortValue();
 else       if (currentValue instanceof Float)       currentValue=((Float)currentValue).floatValue() + ((Float)otherValue).floatValue();
 else       if (currentValue instanceof Double)       currentValue=((Double)currentValue).doubleValue() + ((Double)otherValue).doubleValue();
 else       if (currentValue instanceof Boolean)       currentValue=otherValue;
 else       if (currentValue instanceof String)       currentValue=otherValue;
 else       OLogManager.instance().warn(this,"Type of value '%s' not support on profiler hook '%s' to merge with value: %s",currentValue,entry.getKey(),entry.getValue());
    }
    hooks.put(entry.getKey(),currentValue);
  }
  mergeEntries(chronos,iToMerge.chronos);
  mergeEntries(stats,iToMerge.stats);
}
