{
  OCreateFunctionStatement jjtn000=new OCreateFunctionStatement(JJTCREATEFUNCTIONSTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  Token token;
  OIdentifier lastIdentifier;
  try {
    jj_consume_token(CREATE);
    jj_consume_token(FUNCTION);
    jjtn000.name=Identifier();
    token=jj_consume_token(STRING_LITERAL);
    jjtn000.codeQuoted=token.image;
    jjtn000.code=token.image.substring(1,token.image.length() - 1);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PARAMETERS:
      jj_consume_token(PARAMETERS);
    jj_consume_token(LBRACKET);
  lastIdentifier=Identifier();
jjtn000.parameters=new ArrayList<OIdentifier>();
jjtn000.parameters.add(lastIdentifier);
label_59: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[340]=jj_gen;
break label_59;
}
jj_consume_token(COMMA);
lastIdentifier=Identifier();
jjtn000.parameters.add(lastIdentifier);
}
jj_consume_token(RBRACKET);
break;
default :
jj_la1[341]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IDEMPOTENT:
jj_consume_token(IDEMPOTENT);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TRUE:
jj_consume_token(TRUE);
jjtn000.idempotent=true;
break;
case FALSE:
jj_consume_token(FALSE);
jjtn000.idempotent=false;
break;
default :
jj_la1[342]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[343]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LANGUAGE:
jj_consume_token(LANGUAGE);
jjtn000.language=Identifier();
break;
default :
jj_la1[344]=jj_gen;
;
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
