{
  super.onServerStarted(server);
  if (serverStarted++ == (SERVERS - 1)) {
    new Timer(true).schedule(new TimerTask(){
      @Override public void run(){
        System.out.println("---------------------------------------------------------------------");
        for (int i=0; i < SERVERS; ++i) {
          try {
            final OHazelcastPlugin dInstance=(OHazelcastPlugin)serverInstance.get(i).getServerInstance().getDistributedManager();
            final String queueName=OHazelcastDistributedMessageService.getRequestQueueName(dInstance.getLocalNodeName(),getDatabaseName());
            final IQueue<Object> queue=dInstance.getMessageService().getQueue(queueName);
            System.out.println("Queue " + queueName + " size = "+ queue.size());
          }
 catch (          Exception e) {
          }
        }
        System.out.println("---------------------------------------------------------------------");
      }
    }
,1000,1000);
    timer.schedule(new TimerTask(){
      @Override public void run(){
        Assert.assertTrue("Insert was too fast",inserting);
        banner("STARTING LOCKING SERVER " + (SERVERS - 1));
        OrientGraphFactory factory=new OrientGraphFactory("plocal:target/server" + (SERVERS - 1) + "/databases/"+ getDatabaseName());
        OrientGraphNoTx g=factory.getNoTx();
        nodeStalled=true;
        try {
          final OAbstractPaginatedStorage stg=(OAbstractPaginatedStorage)g.getRawGraph().getStorage().getUnderlying();
          stg.callInLock(new Callable<Object>(){
            @Override public Object call() throws Exception {
              Thread.sleep(3000);
              return null;
            }
          }
,true);
        }
  finally {
          banner("RELEASED STALLED SERVER " + (SERVERS - 1));
          nodeStalled=false;
        }
      }
    }
,5000);
  }
}
