{
  final OLocalPaginatedStorage expectedStorage=mock(OLocalPaginatedStorage.class);
  OStorageConfiguration storageConfiguration=mock(OStorageConfiguration.class);
  storageConfiguration.clusters=new ArrayList<OStorageClusterConfiguration>();
  storageConfiguration.fileTemplate=new OStorageSegmentConfiguration();
  storageConfiguration.binaryFormatVersion=Integer.MAX_VALUE;
  expectedStorageDir=buildDirectory + "/sbtreeWithWALTestExpected";
  when(expectedStorage.getStoragePath()).thenReturn(expectedStorageDir);
  when(expectedStorage.getName()).thenReturn("sbtreeWithWALTesExpected");
  when(expectedStorage.getComponentsFactory()).thenReturn(new OCurrentStorageComponentsFactory(storageConfiguration));
  File buildDir=new File(buildDirectory);
  if (!buildDir.exists())   buildDir.mkdirs();
  File expectedStorageDirFile=new File(expectedStorageDir);
  if (!expectedStorageDirFile.exists())   expectedStorageDirFile.mkdirs();
  expectedWriteCache=new OWOWCache(false,OGlobalConfiguration.DISK_CACHE_PAGE_SIZE.getValueAsInteger() * 1024,1000000,writeAheadLog,100,1648L * 1024 * 1024,1648L * 1024 * 1024 + 400L * 1024 * 1024* 1024,expectedStorage,false,2);
  expectedReadCache=new O2QCache(400L * 1024 * 1024* 1024,OGlobalConfiguration.DISK_CACHE_PAGE_SIZE.getValueAsInteger() * 1024,false);
  OStorageVariableParser variableParser=new OStorageVariableParser(expectedStorageDir);
  OAtomicOperationsManager atomicOperationsManager=new OAtomicOperationsManager(null);
  when(expectedStorage.getStorageTransaction()).thenReturn(null);
  when(expectedStorage.getAtomicOperationsManager()).thenReturn(atomicOperationsManager);
  when(expectedStorage.getReadCache()).thenReturn(expectedReadCache);
  when(expectedStorage.getWALInstance()).thenReturn(null);
  when(expectedStorage.getVariableParser()).thenReturn(variableParser);
  when(expectedStorage.getConfiguration()).thenReturn(storageConfiguration);
  when(expectedStorage.getMode()).thenReturn("rw");
  when(storageConfiguration.getDirectory()).thenReturn(expectedStorageDir);
  expectedSBTree=new OSBTreeBonsaiLocal<Integer,OIdentifiable>("expectedSBTree",".sbt",true,expectedStorage);
  expectedSBTree.create(OIntegerSerializer.INSTANCE,OLinkSerializer.INSTANCE);
}
