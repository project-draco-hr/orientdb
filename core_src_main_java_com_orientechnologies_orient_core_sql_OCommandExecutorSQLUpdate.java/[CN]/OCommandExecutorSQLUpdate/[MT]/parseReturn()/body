{
  parserNextWord(false," ");
  String returning=parserGetLastWord().trim();
  String optionalExp="";
  if (returning.equalsIgnoreCase("COUNT")) {
    returnMode=SQLUpdateReturnModeEnum.COUNT;
    returnExpression=null;
  }
 else   if (returning.equalsIgnoreCase("BEFORE") || returning.equalsIgnoreCase("AFTER")) {
    returnMode=(returning.equalsIgnoreCase("BEFORE")) ? SQLUpdateReturnModeEnum.BEFORE : SQLUpdateReturnModeEnum.AFTER;
    parserNextWord(false," ");
    returning=parserGetLastWord().trim();
    if (returning.equalsIgnoreCase(KEYWORD_WHERE) || returning.equalsIgnoreCase(KEYWORD_TIMEOUT) || returning.equalsIgnoreCase(KEYWORD_LIMIT)|| returning.equalsIgnoreCase(KEYWORD_UPSERT)|| returning.equalsIgnoreCase(KEYWORD_LOCK)|| returning.length() == 0) {
      returnExpression=null;
      parserGoBack();
    }
 else {
      if (returning.startsWith("$") || returning.startsWith("@"))       returnExpression=(returning.length() > 0) ? OSQLHelper.parseValue(this,returning,this.getContext()) : null;
 else       throwSyntaxErrorException("record attribute (@attributes) or functions with $current variable expected");
    }
  }
 else   throwSyntaxErrorException(" COUNT | BEFORE | AFTER keywords expected");
  return returnMode;
}
