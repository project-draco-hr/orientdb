{
  int pos=iName.indexOf(OSQLFieldOperator.CHAIN_SEPARATOR);
  if (pos > -1) {
    name=iName.substring(0,pos);
    String part=iName;
    String partUpperCase=part.toUpperCase();
    while (pos > -1) {
      partUpperCase=partUpperCase.substring(pos + OSQLFieldOperator.CHAIN_SEPARATOR.length());
      for (      OSQLFieldOperator op : OSQLFieldOperator.OPERATORS)       if (partUpperCase.startsWith(op.keyword)) {
        final String arguments[];
        if (op.minArguments > 0) {
          arguments=OQueryHelper.getParameters(part);
          if (arguments.length < op.minArguments || arguments.length > op.maxArguments)           throw new OQueryParsingException(iQueryCompiled.text,"Syntax error: field operator '" + op.keyword + "' needs "+ (op.minArguments == op.maxArguments ? op.minArguments : op.minArguments + "-" + op.maxArguments)+ " argument(s) while has been received "+ arguments.length,iQueryCompiled.currentPos + pos);
        }
 else         arguments=null;
        if (operationsChain == null)         operationsChain=new ArrayList<OPair<Integer,String[]>>();
        operationsChain.add(new OPair<Integer,String[]>(op.id,arguments));
        pos=partUpperCase.indexOf(OQueryHelper.CLOSED_BRACE) + OSQLFieldOperator.CHAIN_SEPARATOR.length();
        break;
      }
      if (operationsChain == null)       throw new OQueryParsingException(iQueryCompiled.text,"Syntax error: field operator not recognized between the supported ones: " + Arrays.toString(OSQLFieldOperator.OPERATORS),iQueryCompiled.currentPos + pos);
      if (pos >= partUpperCase.length())       return;
      pos=partUpperCase.indexOf(OSQLFieldOperator.CHAIN_SEPARATOR,pos);
    }
  }
 else   name=iName;
}
