{
  String value=jsonReader.readString(OJSONReader.END_OBJECT,true);
  while (!value.isEmpty() && value.charAt(0) != '{') {
    value=value.substring(1);
  }
  record=null;
  try {
    try {
      record=ORecordSerializerJSON.INSTANCE.fromString(value,record,null);
    }
 catch (    OSerializationException e) {
      if (e.getCause() instanceof OSchemaException) {
        final int pos=value.indexOf("\"@class\":\"");
        if (pos > -1) {
          final int end=value.indexOf("\"",pos + "\"@class\":\"".length() + 1);
          final String value1=value.substring(0,pos + "\"@class\":\"".length());
          final String clsName=value.substring(pos + "\"@class\":\"".length(),end);
          final String value2=value.substring(end);
          final String newClassName=convertedClassNames.get(clsName);
          value=value1 + newClassName + value2;
          record=ORecordSerializerJSON.INSTANCE.fromString(value,record,null);
        }
      }
 else       throw OException.wrapException(new ODatabaseImportException("Error on importing record"),e);
    }
    if (schemaImported && record.getIdentity().equals(schemaRecordId)) {
      return null;
    }
    if (includeClusters != null) {
      if (!includeClusters.contains(database.getClusterNameById(record.getIdentity().getClusterId()))) {
        jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
        return null;
      }
    }
 else     if (excludeClusters != null) {
      if (excludeClusters.contains(database.getClusterNameById(record.getIdentity().getClusterId())))       return null;
    }
    if (record.getIdentity().getClusterId() == 0 && record.getIdentity().getClusterPosition() == 1)     return null;
    if (exporterVersion >= 3) {
      int oridsId=database.getClusterIdByName(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME);
      int indexId=database.getClusterIdByName(OMetadataDefault.CLUSTER_INDEX_NAME);
      if (record.getIdentity().getClusterId() == indexId || record.getIdentity().getClusterId() == oridsId)       return null;
    }
    final int manualIndexCluster=database.getClusterIdByName(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME);
    final int internalCluster=database.getClusterIdByName(OMetadataDefault.CLUSTER_INTERNAL_NAME);
    final int indexCluster=database.getClusterIdByName(OMetadataDefault.CLUSTER_INDEX_NAME);
    if (exporterVersion >= 4) {
      if (record.getIdentity().getClusterId() == manualIndexCluster)       return null;
    }
    if (record.getIdentity().equals(indexMgrRecordId))     return null;
    final ORID rid=record.getIdentity();
    final int clusterId=rid.getClusterId();
    if ((clusterId != manualIndexCluster && clusterId != internalCluster && clusterId != indexCluster)) {
      ORecordInternal.setVersion(record,0);
      record.setDirty();
      ORecordInternal.setIdentity(record,new ORecordId());
      if (!preserveRids && record instanceof ODocument && ODocumentInternal.getImmutableSchemaClass(((ODocument)record)) != null)       record.save();
 else       record.save(database.getClusterNameById(clusterId));
      if (!rid.equals(record.getIdentity()))       exportImportHashTable.put(rid,record.getIdentity());
    }
  }
 catch (  Exception t) {
    if (record != null)     OLogManager.instance().error(this,"Error importing record " + record.getIdentity() + ". Source line "+ jsonReader.getLineNumber()+ ", column "+ jsonReader.getColumnNumber());
 else     OLogManager.instance().error(this,"Error importing record. Source line " + jsonReader.getLineNumber() + ", column "+ jsonReader.getColumnNumber());
    throw t;
  }
 finally {
    jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
  }
  return record.getIdentity();
}
