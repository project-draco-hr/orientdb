{
  acquireSharedLock();
  try {
    long pagesCount=diskCache.getFilledUpTo(fileId);
    for (long i=pagesCount - 1; i >= 0; i--) {
      long pagePointer=diskCache.load(fileId,i);
      try {
        final OLocalPage localPage=new OLocalPage(pagePointer,false,writeAheadLog,i,name);
        final int recordsCount=localPage.getRecordsCount();
        if (recordsCount > 0) {
          int recordPosition=Integer.MAX_VALUE;
          for (int n=0; n < recordsCount; n++) {
            recordPosition=localPage.findLastRecord(recordPosition);
            long recordPointer=localPage.getRecordPointer(recordPosition);
            int recordSize=localPage.getRecordSize(recordPosition);
            if (directMemory.getByte(recordPointer + recordSize - OByteSerializer.BYTE_SIZE - OLongSerializer.LONG_SIZE) == 1)             return OClusterPositionFactory.INSTANCE.valueOf((i << PAGE_INDEX_OFFSET) | recordPosition);
            recordPosition--;
          }
        }
      }
  finally {
        diskCache.release(fileId,i);
      }
    }
    return OClusterPosition.INVALID_POSITION;
  }
  finally {
    releaseSharedLock();
  }
}
