{
  for (int i=0; i < KEYS_COUNT; i++) {
    sbTree.put(i,new ORecordId(i % 32000,OClusterPositionFactory.INSTANCE.valueOf(i)));
    Assert.assertEquals(sbTree.get(i),new ORecordId(i % 32000,OClusterPositionFactory.INSTANCE.valueOf(i)));
  }
  for (int i=0; i < KEYS_COUNT; i++) {
    if (i % 3 == 0)     Assert.assertEquals(sbTree.remove(i),new ORecordId(i % 32000,OClusterPositionFactory.INSTANCE.valueOf(i)));
    if (i % 2 == 0)     sbTree.put(KEYS_COUNT + i,new ORecordId((KEYS_COUNT + i) % 32000,OClusterPositionFactory.INSTANCE.valueOf(KEYS_COUNT + i)));
  }
  for (int i=0; i < KEYS_COUNT; i++) {
    if (i % 3 == 0)     Assert.assertNull(sbTree.get(i));
 else     Assert.assertEquals(sbTree.get(i),new ORecordId(i % 32000,OClusterPositionFactory.INSTANCE.valueOf(i)));
    if (i % 2 == 0)     Assert.assertEquals(sbTree.get(KEYS_COUNT + i),new ORecordId((KEYS_COUNT + i) % 32000,OClusterPositionFactory.INSTANCE.valueOf(KEYS_COUNT + i)));
  }
}
