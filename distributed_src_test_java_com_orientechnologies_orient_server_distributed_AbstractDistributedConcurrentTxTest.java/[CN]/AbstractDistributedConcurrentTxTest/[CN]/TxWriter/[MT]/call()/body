{
  String name=Integer.toString(serverId);
  for (int i=0; i < count; i+=2) {
    final OrientGraph graph=factory.getTx();
    final OrientVertex localVertex=graph.getVertex(v);
    try {
      if ((i + 1) % 100 == 0)       System.out.println("\nWriter " + databaseUrl + " managed "+ (i + 1)+ "/"+ count+ " vertices so far");
      boolean success=false;
      for (int retry=0; retry < 100; ++retry) {
        try {
          updateVertex(graph,localVertex);
          graph.commit();
          success=true;
          break;
        }
 catch (        OConcurrentModificationException e) {
          graph.rollback();
        }
catch (        ODistributedRecordLockedException e) {
          lockExceptions.incrementAndGet();
          graph.rollback();
        }
catch (        Exception e) {
          graph.rollback();
          throw e;
        }
      }
      Assert.assertTrue(success);
    }
 catch (    InterruptedException e) {
      System.out.println("Writer received interrupt (db=" + databaseUrl);
      Thread.currentThread().interrupt();
      break;
    }
catch (    Exception e) {
      System.out.println("Writer received exception (db=" + databaseUrl);
      e.printStackTrace();
      break;
    }
 finally {
      graph.shutdown();
    }
  }
  System.out.println("\nWriter " + name + " END. count = "+ count+ " lockExceptions: "+ lockExceptions);
  if (expectedConcurrentException)   Assert.assertTrue(lockExceptions.get() > 0);
 else   Assert.assertTrue(lockExceptions.get() == 0);
  return null;
}
