{
  int sepPos=iWord.indexOf('.');
  int parPos=iWord.indexOf(OStringSerializerHelper.PARENTHESIS_BEGIN);
  if (Character.isLetter(iWord.charAt(0)) && parPos > -1 && (sepPos == -1 || sepPos > parPos)) {
    final String funcName=iWord.substring(0,parPos);
    final List<String> funcParamsText=OStringSerializerHelper.getParameters(iWord);
    OSQLFunction function=OSQLEngine.getInstance().getInlineFunction(funcName);
    if (function == null)     function=OSQLEngine.getInstance().getAggregationFunction(funcName);
    if (function == null)     throw new OCommandSQLParsingException("Unknow function " + funcName + "()");
    if (funcParamsText.size() < function.getMinParams() || funcParamsText.size() > function.getMaxParams())     throw new IllegalArgumentException("Syntax error. Expected: " + function.getSyntax());
    final Object[] funcParams=new Object[funcParamsText.size()];
    for (int i=0; i < funcParamsText.size(); ++i) {
      funcParams[i]=OSQLHelper.parseValue(database,iCommand,funcParamsText.get(i));
    }
    return new OSQLFunctionRuntime(function,funcParams);
  }
  return null;
}
