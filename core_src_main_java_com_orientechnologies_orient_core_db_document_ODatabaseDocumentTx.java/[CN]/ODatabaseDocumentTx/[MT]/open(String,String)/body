{
  boolean failure=true;
  setupThreadOwner();
  activateOnCurrentThread();
  try {
    if (status == STATUS.OPEN)     throw new IllegalStateException("Database " + getName() + " is already open");
    if (user != null && !user.getName().equals(iUserName))     initialized=false;
    final String encKey=(String)getProperty(OGlobalConfiguration.STORAGE_ENCRYPTION_KEY.getKey());
    String currKey=null;
    if (storage.getConfiguration() != null && storage.getConfiguration().getContextConfiguration() != null) {
      currKey=(String)storage.getConfiguration().getContextConfiguration().getValue(OGlobalConfiguration.STORAGE_ENCRYPTION_KEY);
      if (encKey != null && currKey != null && !encKey.equals(currKey)) {
        if (!storage.isClosed()) {
          storage.close(true,false);
        }
      }
    }
    if (storage.isClosed()) {
      storage.open(iUserName,iUserPassword,properties);
      initialized=false;
    }
 else     if (storage instanceof OStorageProxy) {
      final String name=((OStorageProxy)storage).getUserName();
      if (name == null || !name.equals(iUserName)) {
        storage.close();
        storage.open(iUserName,iUserPassword,properties);
      }
    }
    status=STATUS.OPEN;
    initAtFirstOpen(iUserName,iUserPassword);
    if (!(getStorage() instanceof OStorageProxy)) {
      final OSecurity security=metadata.getSecurity();
      if (user == null || user.getVersion() != security.getVersion() || !user.getName().equalsIgnoreCase(iUserName)) {
        final OUser usr=metadata.getSecurity().authenticate(iUserName,iUserPassword);
        if (usr != null)         user=new OImmutableUser(security.getVersion(),usr);
 else         user=null;
        checkSecurity(ORule.ResourceGeneric.DATABASE,ORole.PERMISSION_READ);
      }
    }
    callOnOpenListeners();
    failure=false;
  }
 catch (  OException e) {
    close();
    throw e;
  }
catch (  Exception e) {
    close();
    throw OException.wrapException(new ODatabaseException("Cannot open database url=" + getURL()),e);
  }
 finally {
    if (failure)     owner.set(null);
  }
  return (DB)this;
}
