{
  parserPreviousPos=parserCurrentPos;
  parserLastWord.setLength(0);
  parserSkipWhiteSpaces();
  if (parserCurrentPos == -1)   return;
  char stringBeginChar=' ';
  final String text2Use=iForceUpperCase ? parserTextUpperCase : parserText;
  while (parserCurrentPos < text2Use.length()) {
    final char c=text2Use.charAt(parserCurrentPos);
    boolean found=false;
    for (int sepIndex=0; sepIndex < iSeparatorChars.length(); ++sepIndex) {
      if (iSeparatorChars.charAt(sepIndex) == c) {
        found=true;
        break;
      }
    }
    if (!found)     break;
    parserCurrentPos++;
  }
  try {
    int openParenthesis=0;
    int openBracket=0;
    int openGraph=0;
    int escapePos=-1;
    for (; parserCurrentPos < text2Use.length(); parserCurrentPos++) {
      final char c=text2Use.charAt(parserCurrentPos);
      if (c == '\\' && ((parserCurrentPos + 1) < text2Use.length())) {
        if (openGraph == 0) {
          final char nextChar=text2Use.charAt(parserCurrentPos + 1);
          if (nextChar == 'u') {
            parserCurrentPos=OStringParser.readUnicode(text2Use,parserCurrentPos + 2,parserLastWord);
          }
 else {
            if (nextChar == 'n')             parserLastWord.append('\n');
 else             if (nextChar == 'r')             parserLastWord.append('\r');
 else             if (nextChar == 't')             parserLastWord.append('\t');
 else             if (nextChar == 'b')             parserLastWord.append('\b');
 else             if (nextChar == 'f')             parserLastWord.append('\f');
 else             parserLastWord.append(nextChar);
            parserCurrentPos++;
          }
          continue;
        }
 else         escapePos=parserCurrentPos;
      }
      if (escapePos == -1 && (c == '\'' || c == '"')) {
        if (stringBeginChar != ' ') {
          if (stringBeginChar == c) {
            stringBeginChar=' ';
            if (openBracket == 0 && openGraph == 0 && openParenthesis == 0) {
              parserCurrentPos++;
              parserLastWord.append(c);
              break;
            }
          }
        }
 else         stringBeginChar=c;
      }
      if (stringBeginChar == ' ') {
        if (openBracket == 0 && openGraph == 0 && openParenthesis == 0 && parserCheckSeparator(c,iSeparatorChars)) {
          break;
        }
 else         if (c == '(')         openParenthesis++;
 else         if (c == ')' && openParenthesis > 0)         openParenthesis--;
 else         if (c == '[')         openBracket++;
 else         if (c == ']' && openBracket > 0)         openBracket--;
 else         if (c == '{')         openGraph++;
 else         if (c == '}' && openGraph > 0)         openGraph--;
      }
      if (escapePos != parserCurrentPos)       escapePos=-1;
      parserLastWord.append(c);
    }
    if (stringBeginChar != ' ')     throw new IllegalStateException("Missing closed string character: '" + stringBeginChar + "', position: "+ parserCurrentPos);
    if (openBracket > 0)     throw new IllegalStateException("Missing closed braket character: ']', position: " + parserCurrentPos);
    if (openGraph > 0)     throw new IllegalStateException("Missing closed graph character: '}', position: " + parserCurrentPos);
    if (openParenthesis > 0)     throw new IllegalStateException("Missing closed parenthesis character: ')', position: " + parserCurrentPos);
  }
  finally {
    if (parserCurrentPos >= text2Use.length()) {
      parserCurrentPos=-1;
      parserLastSeparator=' ';
    }
  }
}
