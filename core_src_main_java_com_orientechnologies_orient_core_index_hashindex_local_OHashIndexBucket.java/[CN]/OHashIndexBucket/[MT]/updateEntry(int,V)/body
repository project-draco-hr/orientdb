{
  int entryPosition=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(bufferPointer,POSITIONS_ARRAY_OFFSET + index * OIntegerSerializer.INT_SIZE);
  entryPosition+=OLongSerializer.LONG_SIZE;
  entryPosition+=keySerializer.getObjectSizeInDirectMemory(bufferPointer,entryPosition);
  if (valueSerializer.isFixedLength()) {
    byte[] newSerializedValue=new byte[valueSerializer.getFixedLength()];
    valueSerializer.serializeNative(value,newSerializedValue,0);
    byte[] oldSerializedValue=bufferPointer.get(entryPosition,newSerializedValue.length);
    if (ODefaultComparator.INSTANCE.compare(oldSerializedValue,newSerializedValue) == 0)     return 0;
    bufferPointer.set(entryPosition,newSerializedValue,0,newSerializedValue.length);
    return 1;
  }
 else {
    final int newSize=valueSerializer.getObjectSize(value);
    final int oldSize=valueSerializer.getObjectSizeInDirectMemory(bufferPointer,entryPosition);
    byte[] newSerializedValue=new byte[newSize];
    valueSerializer.serializeNative(value,newSerializedValue,0);
    byte[] oldSerializedValue=bufferPointer.get(entryPosition,oldSize);
    if (ODefaultComparator.INSTANCE.compare(oldSerializedValue,newSerializedValue) == 0)     return 0;
    if (oldSize == newSize) {
      bufferPointer.set(entryPosition,newSerializedValue,0,newSerializedValue.length);
      return 1;
    }
  }
  return -1;
}
