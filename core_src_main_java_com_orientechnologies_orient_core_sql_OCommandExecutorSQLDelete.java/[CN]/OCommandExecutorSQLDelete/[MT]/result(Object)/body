{
  final ORecordAbstract record=((OIdentifiable)iRecord).getRecord();
  if (record instanceof ODocument && compiledFilter != null && !Boolean.TRUE.equals(this.compiledFilter.evaluate(record,(ODocument)record,getContext()))) {
    return true;
  }
  try {
    if (record.getIdentity().isValid()) {
      if (returning.equalsIgnoreCase("BEFORE"))       allDeletedRecords.add(record);
      ORecordInternal.setVersion(record,-1);
      if (!unsafe && record instanceof ODocument) {
        final OClass cls=((ODocument)record).getSchemaClass();
        if (cls != null) {
          if (cls.isSubClassOf("V"))           throw new OCommandExecutionException("'DELETE' command cannot delete vertices. Use 'DELETE VERTEX' command instead, or apply the 'UNSAFE' keyword to force it");
 else           if (cls.isSubClassOf("E"))           throw new OCommandExecutionException("'DELETE' command cannot delete edges. Use 'DELETE EDGE' command instead, or apply the 'UNSAFE' keyword to force it");
        }
      }
      record.delete();
      recordCount++;
      return true;
    }
    return false;
  }
  finally {
    if (lockStrategy.equalsIgnoreCase("RECORD"))     ((OAbstractPaginatedStorage)getDatabase().getStorage()).releaseWriteLock(record.getIdentity());
  }
}
