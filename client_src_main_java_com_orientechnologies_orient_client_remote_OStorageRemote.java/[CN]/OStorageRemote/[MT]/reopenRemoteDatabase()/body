{
  String currentURL=getCurrentServerURL();
  do {
    do {
      final OChannelBinaryAsynchClient network=getNetwork(currentURL);
      try {
        OStorageRemoteSession session=getCurrentSession();
        OStorageRemoteNodeSession nodeSession=session.getOrCreateServerSession(network.getServerURL());
        if (nodeSession == null || !nodeSession.isValid()) {
          openRemoteDatabase(network);
          return network.getServerURL();
        }
 else {
          try {
            network.writeByte(OChannelBinaryProtocol.REQUEST_DB_REOPEN);
            network.writeInt(nodeSession.getSessionId());
            network.writeBytes(nodeSession.getToken());
          }
  finally {
            endRequest(network);
          }
          final int sessionId;
          try {
            byte[] newToken=network.beginResponse(nodeSession.getSessionId(),true);
            sessionId=network.readInt();
            if (newToken != null && newToken.length > 0) {
              nodeSession.setSession(sessionId,newToken);
            }
 else {
              nodeSession.setSession(sessionId,nodeSession.getToken());
            }
            OLogManager.instance().debug(this,"Client connected to %s with session id=%d",network.getServerURL(),sessionId);
            return currentURL;
          }
  finally {
            endResponse(network);
            connectionManager.release(network);
          }
        }
      }
 catch (      OIOException e) {
        if (network != null) {
          connectionManager.remove(network);
        }
        OLogManager.instance().error(this,"Cannot open database with url " + currentURL,e);
      }
catch (      OOfflineNodeException e) {
        if (network != null) {
          connectionManager.remove(network);
        }
        OLogManager.instance().debug(this,"Cannot open database with url " + currentURL,e);
      }
catch (      OSecurityException ex) {
        OLogManager.instance().debug(this,"Invalidate token for url=%s",ex,currentURL);
        OStorageRemoteSession session=getCurrentSession();
        session.removeServerSession(currentURL);
        if (network != null) {
          try {
            connectionManager.remove(network);
          }
 catch (          Exception e) {
            OLogManager.instance().debug(this,"Cannot remove connection or database url=" + currentURL,e);
          }
        }
      }
catch (      OException e) {
        connectionManager.release(network);
        throw e;
      }
catch (      Exception e) {
        OLogManager.instance().debug(this,"Cannot open database with url " + currentURL,e);
        if (network != null) {
          try {
            connectionManager.remove(network);
          }
 catch (          Exception ex) {
            OLogManager.instance().debug(this,"Cannot remove connection or database url=" + currentURL,e);
          }
        }
      }
    }
 while (connectionManager.getAvailableConnections(currentURL) > 0);
    currentURL=useNewServerURL(currentURL);
  }
 while (currentURL != null);
  parseServerURLs();
synchronized (serverURLs) {
    throw new OStorageException("Cannot create a connection to remote server address(es): " + serverURLs);
  }
}
