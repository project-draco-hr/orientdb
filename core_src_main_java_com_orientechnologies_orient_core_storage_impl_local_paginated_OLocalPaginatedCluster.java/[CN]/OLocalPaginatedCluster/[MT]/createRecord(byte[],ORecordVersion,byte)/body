{
  externalModificationLock.requestModificationLock();
  try {
    acquireExclusiveLock();
    try {
      content=Snappy.compress(content);
      int grownContentSize=(int)(RECORD_GROW_FACTOR * content.length);
      int entryContentLength=grownContentSize + 2 * OByteSerializer.BYTE_SIZE + OIntegerSerializer.INT_SIZE + OLongSerializer.LONG_SIZE;
      if (entryContentLength < OLocalPage.MAX_RECORD_SIZE) {
        if (writeAheadLog != null) {
          OLogSequenceNumber lsn=writeAheadLog.log(new OAtomicUnitStartRecord(false));
          lastLsn.set(lsn);
        }
        byte[] entryContent=new byte[entryContentLength];
        int entryPosition=0;
        entryContent[entryPosition]=recordType;
        entryPosition++;
        OIntegerSerializer.INSTANCE.serializeNative(content.length,entryContent,entryPosition);
        entryPosition+=OIntegerSerializer.INT_SIZE;
        System.arraycopy(content,0,entryContent,entryPosition,content.length);
        entryPosition+=grownContentSize;
        entryContent[entryPosition]=1;
        entryPosition++;
        OLongSerializer.INSTANCE.serializeNative(-1L,entryContent,entryPosition);
        OLocalPage.TrackMode trackMode=writeAheadLog == null ? OLocalPage.TrackMode.NONE : OLocalPage.TrackMode.FORWARD;
        final AddEntryResult addEntryResult=addEntry(recordVersion,entryContent,trackMode);
        size++;
        recordsSize+=addEntryResult.recordsSizeDiff;
        logClusterState();
        if (writeAheadLog != null) {
          writeAheadLog.log(new OAtomicUnitEndRecord(lastLsn.get()));
          lastLsn.set(null);
        }
        return createPhysicalPosition(recordType,addEntryResult.pagePointer,addEntryResult.recordVersion);
      }
 else {
        if (writeAheadLog != null) {
          OLogSequenceNumber lsn=writeAheadLog.log(new OAtomicUnitStartRecord(true));
          lastLsn.set(lsn);
        }
        OLocalPage.TrackMode trackMode=writeAheadLog == null ? OLocalPage.TrackMode.NONE : OLocalPage.TrackMode.BOTH;
        int entrySize=grownContentSize + OIntegerSerializer.INT_SIZE + OByteSerializer.BYTE_SIZE;
        int fullEntryPosition=0;
        byte[] fullEntry=new byte[entrySize];
        fullEntry[fullEntryPosition]=recordType;
        fullEntryPosition++;
        OIntegerSerializer.INSTANCE.serializeNative(content.length,fullEntry,fullEntryPosition);
        fullEntryPosition+=OIntegerSerializer.INT_SIZE;
        System.arraycopy(content,0,fullEntry,fullEntryPosition,content.length);
        long prevPageRecordPointer=-1;
        long firstPagePointer=-1;
        ORecordVersion version=null;
        int from=0;
        int to=from + (OLocalPage.MAX_RECORD_SIZE - OByteSerializer.BYTE_SIZE - OLongSerializer.LONG_SIZE);
        int recordsSizeDiff=0;
        do {
          byte[] entryContent=new byte[to - from + OByteSerializer.BYTE_SIZE + OLongSerializer.LONG_SIZE];
          System.arraycopy(fullEntry,from,entryContent,0,to - from);
          if (from > 0)           entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE]=0;
 else           entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE]=1;
          OLongSerializer.INSTANCE.serializeNative(-1L,entryContent,entryContent.length - OLongSerializer.LONG_SIZE);
          final AddEntryResult addEntryResult=addEntry(recordVersion,entryContent,trackMode);
          recordsSizeDiff+=addEntryResult.recordsSizeDiff;
          if (firstPagePointer == -1) {
            firstPagePointer=addEntryResult.pagePointer;
            version=addEntryResult.recordVersion;
          }
          long addedPagePointer=addEntryResult.pagePointer;
          if (prevPageRecordPointer >= 0) {
            long prevPageIndex=prevPageRecordPointer >>> PAGE_INDEX_OFFSET;
            int prevPageRecordPosition=(int)(prevPageRecordPointer & RECORD_POSITION_MASK);
            long prevPageMemoryPointer=diskCache.load(fileId,prevPageIndex);
            try {
              final OLocalPage prevPage=new OLocalPage(prevPageMemoryPointer,false,OLocalPage.TrackMode.BOTH);
              long recordPointer=prevPage.getRecordPointer(prevPageRecordPosition);
              int prevPageRecordSize=prevPage.getRecordSize(prevPageRecordPosition);
              OLongSerializer.INSTANCE.serializeInDirectMemory(addedPagePointer,directMemory,recordPointer + prevPageRecordSize - OLongSerializer.LONG_SIZE);
              logPageChanges(prevPage,prevPageIndex);
            }
  finally {
              diskCache.markDirty(fileId,prevPageIndex);
              diskCache.release(fileId,prevPageIndex);
            }
          }
          prevPageRecordPointer=addedPagePointer;
          from=to;
          to=to + (OLocalPage.MAX_RECORD_SIZE - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE);
          if (to > fullEntry.length)           to=fullEntry.length;
        }
 while (from < to);
        size++;
        recordsSize+=recordsSizeDiff;
        logClusterState();
        if (writeAheadLog != null) {
          writeAheadLog.log(new OAtomicUnitEndRecord(lastLsn.get()));
          lastLsn.set(null);
        }
        return createPhysicalPosition(recordType,firstPagePointer,version);
      }
    }
  finally {
      lastLsn.set(null);
      releaseExclusiveLock();
    }
  }
  finally {
    externalModificationLock.releaseModificationLock();
  }
}
