{
  if (indexName == null)   throw new OCommandExecutionException("Cannot execute the command because it has not been parsed yet");
  final ODatabaseDocument database=getDatabase();
  final OIndex<?> idx;
  if (fields == null || fields.length == 0) {
    if (keyTypes != null)     idx=database.getMetadata().getIndexManager().createIndex(indexName,indexType.toString(),new OSimpleKeyIndexDefinition(keyTypes),null,null,metadataDoc,engine);
 else     if (serializerKeyId != 0) {
      idx=database.getMetadata().getIndexManager().createIndex(indexName,indexType.toString(),new ORuntimeKeyIndexDefinition(serializerKeyId),null,null,metadataDoc,engine);
    }
 else     idx=database.getMetadata().getIndexManager().createIndex(indexName,indexType.toString(),null,null,null,metadataDoc,engine);
  }
 else {
    if ((keyTypes == null || keyTypes.length == 0) && collates == null) {
      idx=oClass.createIndex(indexName,indexType.toString(),null,metadataDoc,engine,fields);
    }
 else {
      List<OCollate> collatesList=null;
      if (collates != null) {
        collatesList=new ArrayList<OCollate>();
        for (        String collate : collates) {
          if (collate != null) {
            final OCollate col=OSQLEngine.getCollate(collate);
            collatesList.add(col);
          }
 else           collatesList.add(null);
        }
      }
      final OIndexDefinition idxDef=OIndexDefinitionFactory.createIndexDefinition(oClass,Arrays.asList(fields),Arrays.asList(keyTypes),collatesList);
      idx=database.getMetadata().getIndexManager().createIndex(indexName,indexType.name(),idxDef,oClass.getPolymorphicClusterIds(),null,metadataDoc,engine);
    }
  }
  if (idx != null)   return idx.getSize();
  return null;
}
