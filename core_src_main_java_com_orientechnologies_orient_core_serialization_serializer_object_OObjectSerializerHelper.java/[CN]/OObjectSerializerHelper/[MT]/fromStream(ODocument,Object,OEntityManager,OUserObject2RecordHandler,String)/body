{
  final long timer=OProfiler.getInstance().startChrono();
  final Class<?> c=iPojo.getClass();
  final List<Field> properties=getClassFields(c);
  String fieldName;
  Object fieldValue;
  if (iRecord.getInternalStatus() == STATUS.NOT_LOADED)   iRecord.load();
  invokeCallback(iPojo,iRecord,OBeforeDeserialization.class);
  for (  Field p : properties) {
    fieldName=p.getName();
    if (iRecord.containsField(fieldName)) {
      fieldValue=iRecord.field(fieldName);
      if (fieldValue == null || !(fieldValue instanceof ODocument) || (fieldValue instanceof Collection<?> && (((Collection<?>)fieldValue).size() == 0 || !(((Collection<?>)fieldValue).iterator().next() instanceof ODocument))) || (!(fieldValue instanceof Map<?,?>) || ((Map<?,?>)fieldValue).size() == 0 || !(((Map<?,?>)fieldValue).values().iterator().next() instanceof ODocument))) {
        final Type genericType=p.getGenericType();
        if (genericType != null && genericType instanceof ParameterizedType) {
          final ParameterizedType pt=(ParameterizedType)genericType;
          if (pt.getActualTypeArguments() != null && pt.getActualTypeArguments().length > 0) {
            if (pt.getActualTypeArguments()[0] instanceof Class<?>) {
              Class<?> genericTypeClass=(Class<?>)pt.getActualTypeArguments()[0];
              if (genericTypeClass.isEnum()) {
                if (fieldValue instanceof Collection) {
                  if (fieldValue instanceof List) {
                    final List<Object> list=(List<Object>)fieldValue;
                    Object v;
                    for (int i=0; i < list.size(); ++i) {
                      v=list.get(i);
                      if (v != null) {
                        v=Enum.valueOf((Class<Enum>)genericTypeClass,v.toString());
                        list.set(i,v);
                      }
                    }
                  }
 else                   if (fieldValue instanceof List) {
                    Set<Object> newColl=new HashSet<Object>();
                    final Set<Object> set=(Set<Object>)fieldValue;
                    for (                    Object v : set) {
                      if (v != null) {
                        v=Enum.valueOf((Class<Enum>)genericTypeClass,v.toString());
                        newColl.add(v);
                      }
                    }
                    fieldValue=newColl;
                  }
                }
              }
            }
          }
        }
        setFieldValue(iPojo,fieldName,fieldValue);
      }
    }
  }
  final Map<String,Integer> fetchPlan=OFetchHelper.buildFetchPlan(iFetchPlan);
  OFetchHelper.fetch(iRecord,iPojo,fetchPlan,null,0,-1,new OFetchListener(){
    /** 
 * Doesn't matter size.
 */
    public int size(){
      return 0;
    }
    public Object fetchLinked(    final ODocument iRoot,    final Object iUserObject,    final String iFieldName,    final Object iLinked){
      final Class<?> type;
      if (iLinked != null && iLinked instanceof ODocument) {
        type=getFieldType((ODocument)iLinked,iEntityManager);
      }
 else {
        type=getFieldType(iUserObject,iFieldName);
      }
      if (type == null)       throw new OSerializationException("Linked type of field " + iFieldName + " in class "+ iRoot.getClassName()+ " is null");
      Object fieldValue=null;
      Class<?> fieldClass;
      boolean propagate=false;
      if (type.isAssignableFrom(List.class)) {
        final Collection<ODocument> list=(Collection<ODocument>)iLinked;
        final List<Object> targetList=new OLazyObjectList<Object>((ODatabaseObjectTx)iRecord.getDatabase().getDatabaseOwner()).setFetchPlan(iFetchPlan);
        fieldValue=targetList;
        if (list != null && list.size() > 0) {
          targetList.addAll(list);
        }
      }
 else       if (type.isAssignableFrom(Set.class)) {
        final Collection<Object> set=(Collection<Object>)iLinked;
        final Set<Object> target=new OLazyObjectSet<Object>((ODatabaseObjectTx)iRecord.getDatabase().getDatabaseOwner(),iRoot,set).setFetchPlan(iFetchPlan);
        fieldValue=target;
      }
 else       if (type.isAssignableFrom(Map.class)) {
        final Map<String,Object> map=(Map<String,Object>)iLinked;
        final Map<String,Object> target=new OLazyObjectMap<Object>((ODatabaseObjectTx)iRecord.getDatabase().getDatabaseOwner(),iRoot,map).setFetchPlan(iFetchPlan);
        fieldValue=target;
      }
 else       if (type.isEnum()) {
        String enumName=((ODocument)iLinked).field(iFieldName);
        @SuppressWarnings("rawtypes") Class<Enum> enumClass=(Class<Enum>)type;
        fieldValue=Enum.valueOf(enumClass,enumName);
      }
 else {
        fieldClass=iEntityManager.getEntityClass(type.getSimpleName());
        if (fieldClass != null) {
          propagate=!iObj2RecHandler.existsUserObjectByRecord((ODocument)iLinked);
          fieldValue=iObj2RecHandler.getUserObjectByRecord((ODocument)iLinked,iFetchPlan);
        }
      }
      setFieldValue(iUserObject,iFieldName,fieldValue);
      return propagate ? fieldValue : null;
    }
  }
);
  invokeCallback(iPojo,iRecord,OAfterDeserialization.class);
  OProfiler.getInstance().stopChrono("Object.fromStream",timer);
  return iPojo;
}
