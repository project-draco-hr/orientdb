{
  final String parts[]=getDbBucketKey(iURI,2);
  final String dbName=parts[0];
  final String bucket=parts[1];
  final String key=getKey(iURI);
  try {
    String value;
    final Map<String,String> bucketMap=getBucket(dbName,bucket);
    if (key != null)     value=bucketMap.get(key);
 else {
      final StringBuilder buffer=new StringBuilder();
      for (      String k : bucketMap.keySet()) {
        buffer.append(k + "\n");
      }
      value=buffer.toString();
    }
    final int code=value == null ? 404 : OHttpUtils.STATUS_OK_CODE;
    final String reason=value == null ? "Not Found" : OHttpUtils.STATUS_OK_DESCRIPTION;
    final String content=value == null ? "The key '" + key + "' was not found in database '"+ dbName+ "'" : value.toString();
    sendTextContent(code,reason,"text/plain",content);
  }
 catch (  SocketException e) {
    connectionError();
  }
catch (  SocketTimeoutException e) {
    timeout();
  }
catch (  Exception e) {
    OLogManager.instance().error(this,"Error on retrieving key '" + key + "' from database '"+ dbName+ "'",e,ONetworkProtocolException.class);
  }
}
