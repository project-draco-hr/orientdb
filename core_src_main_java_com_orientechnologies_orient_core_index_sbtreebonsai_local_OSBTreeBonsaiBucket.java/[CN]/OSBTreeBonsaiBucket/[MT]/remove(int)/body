{
  int entryPosition=getIntValue(offset + POSITIONS_ARRAY_OFFSET + entryIndex * OIntegerSerializer.INT_SIZE);
  int entrySize=keySerializer.getObjectSizeInDirectMemory(pagePointer,offset + entryPosition);
  if (isLeaf) {
    if (valueSerializer.isFixedLength())     entrySize+=valueSerializer.getFixedLength();
 else     entrySize+=valueSerializer.getObjectSizeInDirectMemory(pagePointer,offset + entryPosition + entrySize);
  }
 else {
    throw new IllegalStateException("Remove is applies to leaf buckets only");
  }
  int size=size();
  if (entryIndex < size - 1) {
    moveData(offset + POSITIONS_ARRAY_OFFSET + (entryIndex + 1) * OIntegerSerializer.INT_SIZE,offset + POSITIONS_ARRAY_OFFSET + entryIndex * OIntegerSerializer.INT_SIZE,(size - entryIndex - 1) * OIntegerSerializer.INT_SIZE);
  }
  size--;
  setIntValue(offset + SIZE_OFFSET,size);
  int freePointer=getIntValue(offset + FREE_POINTER_OFFSET);
  if (size > 0 && entryPosition > freePointer) {
    moveData(offset + freePointer,offset + freePointer + entrySize,entryPosition - freePointer);
  }
  setIntValue(offset + FREE_POINTER_OFFSET,freePointer + entrySize);
  int currentPositionOffset=offset + POSITIONS_ARRAY_OFFSET;
  for (int i=0; i < size; i++) {
    int currentEntryPosition=getIntValue(currentPositionOffset);
    if (currentEntryPosition < entryPosition)     setIntValue(currentPositionOffset,currentEntryPosition + entrySize);
    currentPositionOffset+=OIntegerSerializer.INT_SIZE;
  }
}
