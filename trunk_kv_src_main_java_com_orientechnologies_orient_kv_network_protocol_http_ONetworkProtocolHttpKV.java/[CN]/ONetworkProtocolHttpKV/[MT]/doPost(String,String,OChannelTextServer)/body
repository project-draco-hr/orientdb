{
  String parts[]=getRequestParameters(iURI);
  String dbName=parts[0];
  String bucket=parts[1];
  String key=parts[2];
  try {
    ODatabaseRecordBinary db=acquireDatabase(dbName);
    int code;
    String reason;
    String content;
    try {
      OTreeMapPersistent<String,String> bucketTree=getBucket(db,bucket);
      if (bucketTree.containsKey(key)) {
        code=503;
        reason="Entry already exists";
        content="The entry with key: " + key + " already exists in the bucket '"+ bucket+ "'";
      }
 else {
        code=200;
        reason="Ok";
        content=null;
        bucketTree.put(key,iContent);
      }
    }
  finally {
      releaseDatabase(dbName,db);
    }
    sendTextContent(code,reason,"text/plain",content);
  }
 catch (  SocketTimeoutException e) {
    timeout();
  }
catch (  SocketException e) {
    connectionError();
  }
catch (  Exception e) {
    OLogManager.instance().error(this,"Error on retrieving key '" + key + "' from database '"+ dbName+ "'",e,ONetworkProtocolException.class);
  }
}
