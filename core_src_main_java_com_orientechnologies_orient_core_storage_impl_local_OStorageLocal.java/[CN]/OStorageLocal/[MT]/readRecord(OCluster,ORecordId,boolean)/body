{
  if (iRid.clusterPosition < 0)   throw new IllegalArgumentException("Cannot read record " + iRid + " since the position is invalid in storage '"+ name+ "'");
  final long timer=OProfiler.getInstance().startChrono();
  if (iAtomicLock)   lock.acquireSharedLock();
  try {
    lockManager.acquireLock(Thread.currentThread(),iRid,LOCK.SHARED);
    try {
      final long lastPos=iClusterSegment.getLastEntryPosition();
      if (lastPos < 0)       throw new ORecordNotFoundException("Record " + iRid + " is outside cluster range. The cluster '"+ iClusterSegment.getName()+ "' is empty in storage '"+ name+ "'");
      if (iRid.clusterPosition > lastPos)       throw new ORecordNotFoundException("Record " + iRid + " is outside cluster range. Valid range for cluster '"+ iClusterSegment.getName()+ "' is 0-"+ lastPos+ " in storage '"+ name+ "'");
      final OPhysicalPosition ppos=iClusterSegment.getPhysicalPosition(iRid.clusterPosition,new OPhysicalPosition());
      if (ppos == null || !checkForRecordValidity(ppos))       return null;
      final ODataLocal data=getDataSegment(ppos.dataSegmentId);
      return new ORawBuffer(data.getRecord(ppos.dataChunkPosition),ppos.version,ppos.type);
    }
  finally {
      lockManager.releaseLock(Thread.currentThread(),iRid,LOCK.SHARED);
    }
  }
 catch (  IOException e) {
    OLogManager.instance().error(this,"Error on reading record " + iRid + " (cluster: "+ iClusterSegment+ ")",e);
    return null;
  }
 finally {
    if (iAtomicLock)     lock.releaseSharedLock();
    OProfiler.getInstance().stopChrono(PROFILER_READ_RECORD,timer);
  }
}
