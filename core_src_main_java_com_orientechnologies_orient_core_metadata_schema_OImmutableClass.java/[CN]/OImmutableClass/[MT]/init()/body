{
  initSuperClass();
  final Collection<OProperty> allProperties=new ArrayList<OProperty>();
  OImmutableClass currentClass=this;
  do {
    allProperties.addAll(currentClass.properties.values());
    currentClass.initSuperClass();
    currentClass=currentClass.superClass;
  }
 while (currentClass != null);
  this.allProperties=Collections.unmodifiableCollection(allProperties);
  final Map<String,OProperty> allPropsMap=new HashMap<String,OProperty>(20);
  OImmutableClass currentMapClass=this;
  do {
    for (    OProperty p : currentMapClass.properties.values()) {
      final String propName=p.getName();
      if (!allPropsMap.containsKey(propName))       allPropsMap.put(propName,p);
    }
    currentMapClass.initSuperClass();
    currentMapClass=currentMapClass.superClass;
  }
 while (currentMapClass != null);
  allPropertiesMap=Collections.unmodifiableMap(allPropsMap);
  this.restricted=isSubClassOf(OSecurityShared.RESTRICTED_CLASSNAME);
}
