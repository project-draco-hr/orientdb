{
  resetLastValidBackup();
  if (OScenarioThreadLocal.INSTANCE.isRunModeDistributed()) {
    return wrapped.deleteRecord(iRecordId,iVersion,iMode,iCallback);
  }
  checkLocalNodeIsAvailable();
  try {
    final String clusterName=getClusterNameByRID(iRecordId);
    final ODistributedConfiguration dbCfg=distributedConfiguration;
    final String localNodeName=dManager.getLocalNodeName();
    checkNodeIsMaster(localNodeName,dbCfg);
    final List<String> nodes=dbCfg.getServers(clusterName,null);
    if (nodes.isEmpty())     return wrapped.deleteRecord(iRecordId,iVersion,iMode,iCallback);
    final Set<String> clusterNames=Collections.singleton(clusterName);
    Boolean executionModeSynch=dbCfg.isExecutionModeSynchronous(clusterName);
    if (executionModeSynch == null)     executionModeSynch=iMode == 0;
    final boolean syncMode=executionModeSynch;
    return (OStorageOperationResult<Boolean>)executeRecordOperationInLock(syncMode,iRecordId,new OCallable<Object,OCallable<Void,ODistributedRequestId>>(){
      @Override public Object call(      OCallable<Void,ODistributedRequestId> unlockCallback){
        final ODeleteRecordTask task=new ODeleteRecordTask(iRecordId,iVersion);
        final OStorageOperationResult<Boolean> localResult;
        final boolean executedLocally=nodes.contains(localNodeName);
        if (executedLocally) {
          try {
            task.checkRecordExists();
            localResult=(OStorageOperationResult<Boolean>)OScenarioThreadLocal.executeAsDistributed(new Callable(){
              @Override public Object call() throws Exception {
                task.setLastLSN(wrapped.getLSN());
                return wrapped.deleteRecord(iRecordId,iVersion,iMode,iCallback);
              }
            }
);
          }
 catch (          RuntimeException e) {
            throw e;
          }
catch (          Exception e) {
            OException.wrapException(new ODistributedException("Cannot delete record " + iRecordId),e);
            return null;
          }
          nodes.remove(localNodeName);
        }
 else         localResult=null;
        final Boolean localResultPayload=localResult != null ? localResult.getResult() : null;
        if (syncMode || localResult == null) {
          try {
            final ODistributedResponse dResponse=dManager.sendRequest(getName(),clusterNames,nodes,task,dManager.getNextMessageIdCounter(),EXECUTION_MODE.RESPONSE,localResultPayload,unlockCallback);
            final Object payload=dResponse.getPayload();
            if (payload instanceof Exception) {
              executeUndoOnLocalServer(dResponse.getRequestId(),task);
              if (payload instanceof ONeedRetryException)               throw (ONeedRetryException)payload;
              throw OException.wrapException(new ODistributedException("Error on execution distributed delete record"),(Exception)payload);
            }
            return new OStorageOperationResult<Boolean>(true);
          }
 catch (          RuntimeException e) {
            executeUndoOnLocalServer(null,task);
            throw e;
          }
catch (          Exception e) {
            executeUndoOnLocalServer(null,task);
            ODatabaseException.wrapException(new ODistributedException("Cannot execute distributed delete record"),e);
          }
        }
        if (!nodes.isEmpty())         asynchronousExecution(new OAsynchDistributedOperation(getName(),Collections.singleton(clusterName),nodes,task,dManager.getNextMessageIdCounter(),localResultPayload,unlockCallback,null));
        return localResult;
      }
    }
);
  }
 catch (  ONeedRetryException e) {
    throw e;
  }
catch (  HazelcastInstanceNotActiveException e) {
    throw new OOfflineNodeException("Hazelcast instance is not available");
  }
catch (  HazelcastException e) {
    throw new OOfflineNodeException("Hazelcast instance is not available");
  }
catch (  Exception e) {
    handleDistributedException("Cannot route DELETE_RECORD operation for %s to the distributed node",e,iRecordId);
    return null;
  }
}
