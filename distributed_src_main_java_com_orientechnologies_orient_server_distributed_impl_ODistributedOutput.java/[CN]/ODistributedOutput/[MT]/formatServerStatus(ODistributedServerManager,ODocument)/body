{
  final List<OIdentifiable> rows=new ArrayList<OIdentifiable>();
  final Collection<ODocument> members=distribCfg.field("members");
  if (members != null)   for (  ODocument m : members) {
    if (m == null)     continue;
    final ODocument serverRow=new ODocument();
    final String serverName=m.field("name");
    serverRow.field("Name",serverName + (manager.getLocalNodeName().equals(serverName) ? "*" : ""));
    serverRow.field("Status",m.field("status"));
    serverRow.field("Databases",(String)null);
    serverRow.field("Conns",m.field("connections"));
    final Date date=m.field("startedOn");
    if (date != null) {
      final SimpleDateFormat sdf=new SimpleDateFormat("yyyy/MM/dd");
      if (sdf.format(date).equals(sdf.format(new Date())))       serverRow.field("StartedOn",new SimpleDateFormat("HH:mm:ss").format(date));
 else       serverRow.field("StartedOn",date);
    }
    final Collection<Map> listeners=m.field("listeners");
    if (listeners != null) {
      for (      Map l : listeners) {
        final String protocol=(String)l.get("protocol");
        if (protocol.equals("ONetworkProtocolBinary")) {
          serverRow.field("Binary",l.get("listen"));
        }
 else         if (protocol.equals("ONetworkProtocolHttpDb")) {
          serverRow.field("HTTP",l.get("listen"));
        }
      }
    }
    final Long usedMem=m.field("usedMemory");
    if (usedMem != null) {
      final long maxMem=m.field("maxMemory");
      serverRow.field("UsedMemory",String.format("%s/%s (%.2f%%)",OFileUtils.getSizeAsString(usedMem),OFileUtils.getSizeAsString(maxMem),((float)usedMem / (float)maxMem) * 100));
    }
    rows.add(serverRow);
    final Collection<String> databases=m.field("databases");
    if (databases != null) {
      int serverNum=0;
      for (      String dbName : databases) {
        final StringBuilder buffer=new StringBuilder();
        final ODistributedConfiguration dbCfg=manager.getDatabaseConfiguration(dbName,false);
        if (dbCfg == null)         continue;
        buffer.append(dbName);
        buffer.append("=");
        buffer.append(manager.getDatabaseStatus(serverName,dbName));
        buffer.append(" (");
        buffer.append(dbCfg.getServerRole(serverName));
        buffer.append(")");
        if (serverNum++ == 0)         serverRow.field("Databases",buffer.toString());
 else         rows.add(new ODocument().field("Databases",buffer.toString()));
      }
    }
  }
  final StringBuilder buffer=new StringBuilder();
  final OTableFormatter table=new OTableFormatter(new OTableFormatter.OTableOutput(){
    @Override public void onMessage(    final String text,    final Object... args){
      buffer.append(String.format(text,args));
    }
  }
);
  table.setColumnHidden("#");
  table.writeRecords(rows,-1);
  buffer.append("\n");
  return buffer.toString();
}
