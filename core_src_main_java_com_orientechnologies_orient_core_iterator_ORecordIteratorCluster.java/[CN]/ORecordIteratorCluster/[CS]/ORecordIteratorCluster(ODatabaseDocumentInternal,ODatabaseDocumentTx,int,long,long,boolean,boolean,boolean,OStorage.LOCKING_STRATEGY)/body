{
  super(iDatabase,iLowLevelDatabase,iUseCache,iterateThroughTombstones,iLockingStrategy);
  updateCache=iUpdateCache;
  if (iClusterId == ORID.CLUSTER_ID_INVALID)   throw new IllegalArgumentException("The clusterId is invalid");
  current.clusterId=iClusterId;
  final long[] range=database.getStorage().getClusterDataRange(current.clusterId);
  if (firstClusterEntry == ORID.CLUSTER_POS_INVALID)   this.firstClusterEntry=range[0];
 else   this.firstClusterEntry=firstClusterEntry > range[0] ? firstClusterEntry : range[0];
  if (lastClusterEntry == ORID.CLUSTER_POS_INVALID)   this.lastClusterEntry=range[1];
 else   this.lastClusterEntry=lastClusterEntry < range[1] ? lastClusterEntry : range[1];
  totalAvailableRecords=database.countClusterElements(current.clusterId,iterateThroughTombstones);
  txEntries=iDatabase.getTransaction().getNewRecordEntriesByClusterIds(new int[]{iClusterId});
  if (txEntries != null)   for (  ORecordOperation entry : txEntries) {
switch (entry.type) {
case ORecordOperation.CREATED:
      totalAvailableRecords++;
    break;
case ORecordOperation.DELETED:
  totalAvailableRecords--;
break;
}
}
begin();
}
