{
  configuration.setValue(OGlobalConfiguration.NETWORK_SOCKET_TIMEOUT,iTimeout);
  network=new OChannelBinaryClient(networkAddress,networkPort,configuration);
  OLogManager.instance().info(this,"Connecting to remote cluster node %s:%d...",networkAddress,networkPort);
  network.out.writeByte(OChannelDistributedProtocol.NODECLUSTER_CONNECT);
  network.out.writeInt(0);
  network.flush();
  readStatus();
  int tot=network.readInt();
  for (int i=0; i < tot; ++i)   storages.put(network.readString(),network.readLong());
  OLogManager.instance().info(this,"+--------------------------------+-----------------+----------------+");
  OLogManager.instance().info(this,"| STORAGE                        | LOCAL VERSION   | REMOTE VERSION |");
  OLogManager.instance().info(this,"+--------------------------------+-----------------+----------------+");
  for (  OStorage s : Orient.instance().getStorages()) {
    if (storages.containsKey(s.getName()))     OLogManager.instance().info(this,"| %-30s | %15d | %15d |",s.getName(),s.getVersion(),storages.get(s.getName()));
 else     OLogManager.instance().info(this,"| %-30s | %15d | unavailable    |",s.getName(),s.getVersion());
  }
  boolean found;
  for (  Entry<String,Long> stg : storages.entrySet()) {
    found=false;
    for (    OStorage s : Orient.instance().getStorages()) {
      if (s.getName().equals(stg.getKey())) {
        found=true;
        break;
      }
    }
    if (!found)     OLogManager.instance().info(this,"| %-30s | unavailable   | %15d |",stg.getKey(),stg.getValue());
  }
  OLogManager.instance().info(this,"+--------------------------------+-----------------+----------------+");
  status=STATUS.UNSYNCHRONIZED;
  OLogManager.instance().info(this,"Connection to remote cluster node %s:%d has been established",networkAddress,networkPort);
}
