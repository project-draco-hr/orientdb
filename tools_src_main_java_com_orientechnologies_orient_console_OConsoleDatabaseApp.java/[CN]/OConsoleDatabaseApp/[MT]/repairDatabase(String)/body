{
  checkForDatabase();
  message("\nRepairing database...");
  boolean verbose=iOptions != null && iOptions.contains("-v");
  boolean fix_ridbags=iOptions != null && iOptions.contains("--fix-ridbags");
  long fixedLinks=0l;
  long modifiedDocuments=0l;
  long errors=0l;
  try {
    if (!fix_ridbags) {
      message("\n- Fixing dirty links...");
      for (      String clusterName : currentDatabase.getClusterNames()) {
        for (        ORecord rec : currentDatabase.browseCluster(clusterName)) {
          try {
            if (rec instanceof ODocument) {
              boolean changed=false;
              final ODocument doc=(ODocument)rec;
              for (              String fieldName : doc.fieldNames()) {
                final Object fieldValue=doc.rawField(fieldName);
                if (fieldValue instanceof OIdentifiable) {
                  if (fixLink(fieldValue)) {
                    doc.field(fieldName,(OIdentifiable)null);
                    fixedLinks++;
                    changed=true;
                    if (verbose)                     message("\n--- reset link " + ((OIdentifiable)fieldValue).getIdentity() + " in field '"+ fieldName+ "' (rid="+ doc.getIdentity()+ ")");
                  }
                }
 else                 if (fieldValue instanceof Iterable<?>) {
                  if (fieldValue instanceof ORecordLazyMultiValue)                   ((ORecordLazyMultiValue)fieldValue).setAutoConvertToRecord(false);
                  final Iterator<Object> it=((Iterable)fieldValue).iterator();
                  for (int i=0; it.hasNext(); ++i) {
                    final Object v=it.next();
                    if (fixLink(v)) {
                      it.remove();
                      fixedLinks++;
                      changed=true;
                      if (verbose)                       message("\n--- reset link " + ((OIdentifiable)v).getIdentity() + " as item "+ i+ " in collection of field '"+ fieldName+ "' (rid="+ doc.getIdentity()+ ")");
                    }
                  }
                }
              }
              if (changed) {
                modifiedDocuments++;
                doc.save();
                if (verbose)                 message("\n-- updated document " + doc.getIdentity());
              }
            }
          }
 catch (          Exception e) {
            errors++;
          }
        }
      }
      if (verbose)       message("\n");
      message("Done! Fixed links: " + fixedLinks + ", modified documents: "+ modifiedDocuments);
      message("\nRepair database complete (" + errors + " errors)");
    }
 else     if (fix_ridbags) {
      if (!currentDatabase.getURL().startsWith("plocal")) {
        message("\n fix-ridbags can be run only on plocal connection \n");
        return;
      }
      boolean lightweight=false;
      final List<OStorageEntryConfiguration> custom=(List<OStorageEntryConfiguration>)currentDatabase.get(ATTRIBUTES.CUSTOM);
      for (      OStorageEntryConfiguration c : custom) {
        if (c.name.equals("useLightweightEdges") && Boolean.TRUE.equals(Boolean.parseBoolean(c.value))) {
          lightweight=true;
        }
      }
      if (!lightweight) {
        message("\n- Fixing ridbags ... \n");
        OBonsaiTreeRepair repairer=new OBonsaiTreeRepair();
        message(repairer.repairDatabaseRidbags(currentDatabase));
      }
 else {
        message("cannot execute fix ridbags on a db with ligthweight edges");
      }
    }
  }
 catch (  Exception e) {
    printError(e);
  }
}
