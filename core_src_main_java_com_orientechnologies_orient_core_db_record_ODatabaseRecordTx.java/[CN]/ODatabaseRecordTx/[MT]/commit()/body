{
  setCurrentDatabaseinThreadLocal();
  for (  ODatabaseListener listener : underlying.browseListeners())   try {
    listener.onBeforeTxCommit(this);
  }
 catch (  Throwable t) {
    try {
      rollback();
    }
 catch (    Exception e) {
    }
    OLogManager.instance().debug(this,"Cannot commit the transaction: caught exception on execution of %s.onBeforeTxCommit()",t,OTransactionBlockedException.class,listener.getClass());
  }
  final Map<ORID,ORID> createdRecords;
  try {
    createdRecords=currentTx.commit();
  }
 catch (  RuntimeException e) {
    for (    ODatabaseListener listener : underlying.browseListeners())     try {
      listener.onBeforeTxRollback(underlying);
    }
 catch (    Throwable t) {
      OLogManager.instance().error(this,"Error before tx rollback",t);
    }
    currentTx.rollback();
    for (    ODatabaseListener listener : underlying.browseListeners())     try {
      listener.onAfterTxRollback(underlying);
    }
 catch (    Throwable t) {
      OLogManager.instance().error(this,"Error after tx rollback",t);
    }
    throw e;
  }
  for (  ODatabaseListener listener : underlying.browseListeners())   try {
    listener.onAfterTxCommit(underlying);
  }
 catch (  Throwable t) {
    OLogManager.instance().debug(this,"Error after the transaction has been committed. The transaction remains valid. The exception caught was on execution of %s.onAfterTxCommit()",t,OTransactionBlockedException.class,listener.getClass());
  }
  return createdRecords;
}
