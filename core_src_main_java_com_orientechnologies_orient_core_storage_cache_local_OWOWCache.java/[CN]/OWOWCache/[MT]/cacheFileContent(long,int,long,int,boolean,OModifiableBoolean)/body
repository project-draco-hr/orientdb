{
  final OFileClassic fileClassic=files.get(intId);
  if (fileClassic == null)   throw new IllegalArgumentException("File with id " + intId + " not found in WOW Cache");
  final OLogSequenceNumber lastLsn;
  if (writeAheadLog != null)   lastLsn=writeAheadLog.getFlushedLsn();
 else   lastLsn=new OLogSequenceNumber(-1,-1);
  final long firstPageStartPosition=startPageIndex * pageSize;
  final long firstPageEndPosition=firstPageStartPosition + pageSize;
  if (fileClassic.getFileSize() >= firstPageEndPosition) {
    final OSessionStoragePerformanceStatistic sessionStoragePerformanceStatistic=OSessionStoragePerformanceStatistic.getStatisticInstance();
    if (sessionStoragePerformanceStatistic != null) {
      sessionStoragePerformanceStatistic.startPageReadFromFileTimer();
    }
    storagePerformanceStatistic.startPageReadFromFileTimer();
    int pagesRead=0;
    try {
      if (pageCount == 1) {
        final ByteBuffer buffer=bufferPool.acquireDirect(false);
        fileClassic.read(firstPageStartPosition,buffer);
        buffer.position(0);
        final OCachePointer dataPointer=new OCachePointer(buffer,bufferPool,lastLsn,fileId,startPageIndex);
        pagesRead=1;
        return new OCachePointer[]{dataPointer};
      }
      final long maxPageCount=(fileClassic.getFileSize() - firstPageStartPosition) / pageSize;
      final int realPageCount=Math.min((int)maxPageCount,pageCount);
      final ByteBuffer[] buffers=new ByteBuffer[realPageCount];
      for (int i=0; i < buffers.length; i++) {
        buffers[i]=bufferPool.acquireDirect(false);
      }
      fileClassic.read(firstPageStartPosition,buffers);
      final OCachePointer[] dataPointers=new OCachePointer[realPageCount];
      for (int n=0; n < dataPointers.length; n++) {
        buffers[n].position(0);
        dataPointers[n]=new OCachePointer(buffers[n],bufferPool,lastLsn,fileId,startPageIndex + n);
      }
      pagesRead=dataPointers.length;
      return dataPointers;
    }
  finally {
      if (sessionStoragePerformanceStatistic != null) {
        sessionStoragePerformanceStatistic.stopPageReadFromFileTimer(pagesRead);
      }
      storagePerformanceStatistic.stopPageReadFromFileTimer(pagesRead);
    }
  }
 else   if (addNewPages) {
    final int space=(int)(firstPageEndPosition - fileClassic.getFileSize());
    if (space > 0)     fileClassic.allocateSpace(space);
    addAllocatedSpace(space);
    final ByteBuffer buffer=bufferPool.acquireDirect(true);
    final OCachePointer dataPointer=new OCachePointer(buffer,bufferPool,lastLsn,fileId,startPageIndex);
    cacheHit.setValue(true);
    return new OCachePointer[]{dataPointer};
  }
 else   return new OCachePointer[0];
}
