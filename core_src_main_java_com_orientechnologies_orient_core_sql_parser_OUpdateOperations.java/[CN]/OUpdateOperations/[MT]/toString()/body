{
  StringBuilder result=new StringBuilder();
  boolean first=true;
switch (type) {
case TYPE_SET:
    result.append("SET ");
  for (  OUpdateItem item : this.updateItems) {
    if (!first) {
      result.append(", ");
    }
    result.append(item);
    first=false;
  }
break;
case TYPE_PUT:
result.append("PUT ");
for (OUpdatePutItem item : this.updatePutItems) {
if (!first) {
result.append(", ");
}
result.append(item);
first=false;
}
break;
case TYPE_MERGE:
result.append("MERGE ");
result.append(json.toString());
break;
case TYPE_CONTENT:
result.append("CONTENT ");
result.append(json.toString());
break;
case TYPE_INCREMENT:
result.append("INCREMENT ");
for (OUpdateIncrementItem item : this.updateIncrementItems) {
if (!first) {
result.append(", ");
}
result.append(item);
first=false;
}
break;
case TYPE_ADD:
result.append("ADD ");
for (OUpdateIncrementItem item : this.updateIncrementItems) {
if (!first) {
result.append(", ");
}
result.append(item);
first=false;
}
break;
case TYPE_REMOVE:
result.append("REMOVE ");
for (OUpdateRemoveItem item : this.updateRemoveItems) {
if (!first) {
result.append(", ");
}
result.append(item);
first=false;
}
break;
}
return result.toString();
}
