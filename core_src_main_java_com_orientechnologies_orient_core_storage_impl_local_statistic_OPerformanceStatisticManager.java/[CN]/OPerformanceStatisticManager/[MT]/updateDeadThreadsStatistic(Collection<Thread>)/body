{
  deadThreadsUpdateLock.lock();
  try {
    final ImmutableStatistic oldDS=deadThreadsStatistic;
    final PerformanceCountersHolder countersHolder=ComponentType.GENERAL.newCountersHolder();
    final Map<String,PerformanceCountersHolder> countersByComponents=new HashMap<String,PerformanceCountersHolder>();
    WritCacheCountersHolder writeCacheCountersHolder=null;
    StorageCountersHolder storageCountersHolder=null;
    WALCountersHolder walCountersHolder=null;
    if (oldDS != null) {
      oldDS.countersHolder.pushData(countersHolder);
      for (      Map.Entry<String,PerformanceCountersHolder> oldEntry : oldDS.countersByComponents.entrySet()) {
        final PerformanceCountersHolder holder=oldEntry.getValue().newInstance();
        oldEntry.getValue().pushData(holder);
        countersByComponents.put(oldEntry.getKey(),holder);
      }
      if (oldDS.writCacheCountersHolder != null) {
        writeCacheCountersHolder=new WritCacheCountersHolder();
        oldDS.writCacheCountersHolder.pushData(writeCacheCountersHolder);
      }
      if (oldDS.storageCountersHolder != null) {
        storageCountersHolder=new StorageCountersHolder();
        oldDS.storageCountersHolder.pushData(storageCountersHolder);
      }
      if (oldDS.walCountersHolder != null) {
        walCountersHolder=new WALCountersHolder();
        oldDS.walCountersHolder.pushData(walCountersHolder);
      }
    }
    for (    Thread deadThread : threadsToRemove) {
      final OSessionStoragePerformanceStatistic sessionStoragePerformanceStatistic=statistics.remove(deadThread);
      if (sessionStoragePerformanceStatistic != null) {
        sessionStoragePerformanceStatistic.pushSystemCounters(countersHolder);
        sessionStoragePerformanceStatistic.pushComponentCounters(countersByComponents);
        writeCacheCountersHolder=sessionStoragePerformanceStatistic.pushWriteCacheCounters(writeCacheCountersHolder);
        storageCountersHolder=sessionStoragePerformanceStatistic.pushStorageCounters(storageCountersHolder);
        walCountersHolder=sessionStoragePerformanceStatistic.pushWALCounters(walCountersHolder);
      }
    }
    deadThreadsStatistic=new ImmutableStatistic(countersHolder,countersByComponents,writeCacheCountersHolder,storageCountersHolder,walCountersHolder);
  }
  finally {
    deadThreadsUpdateLock.unlock();
  }
}
