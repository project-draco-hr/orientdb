{
  if (iObject != null) {
    if (!isMultiValue(iObject)) {
      final List<Object> result=new ArrayList<Object>();
      result.add(iObject);
    }
    if (iObject instanceof Collection<?> || iObject instanceof OCollection<?>) {
      final OCollection<Object> coll;
      if (iObject instanceof Collection<?>) {
        final Collection<Object> collection=(Collection<Object>)iObject;
        coll=new OCollection<Object>(){
          @Override public void add(          Object value){
            collection.add(value);
          }
          @Override public void remove(          Object value){
            collection.remove(value);
          }
          @Override public Iterator<Object> iterator(){
            return collection.iterator();
          }
          @Override public int size(){
            return collection.size();
          }
        }
;
      }
 else       coll=(OCollection<Object>)iObject;
      if (iToAdd instanceof Iterable<?>) {
        for (        Object o : (Iterable<Object>)iToAdd) {
          if (isMultiValue(o))           add(coll,o);
 else           coll.add(o);
        }
      }
 else       if (iToAdd != null && iToAdd.getClass().isArray()) {
        for (int i=0; i < Array.getLength(iToAdd); ++i) {
          Object o=Array.get(iToAdd,i);
          if (isMultiValue(o))           add(coll,o);
 else           coll.add(o);
        }
      }
 else       if (iToAdd instanceof Map<?,?>) {
        for (        Entry<Object,Object> entry : ((Map<Object,Object>)iToAdd).entrySet())         coll.add(entry.getValue());
      }
 else       if (iToAdd instanceof Iterator<?>) {
        for (Iterator<?> it=(Iterator<?>)iToAdd; it.hasNext(); )         coll.add(it.next());
      }
 else       coll.add(iToAdd);
    }
 else     if (iObject.getClass().isArray()) {
      final Object[] copy;
      if (iToAdd instanceof Collection<?>) {
        final int tot=Array.getLength(iObject) + ((Collection<Object>)iToAdd).size();
        copy=Arrays.copyOf((Object[])iObject,tot);
        final Iterator<Object> it=((Collection<Object>)iToAdd).iterator();
        for (int i=Array.getLength(iObject); i < tot; ++i)         copy[i]=it.next();
      }
 else       if (iToAdd != null && iToAdd.getClass().isArray()) {
        final int tot=Array.getLength(iObject) + Array.getLength(iToAdd);
        copy=Arrays.copyOf((Object[])iObject,tot);
        System.arraycopy(iToAdd,0,iObject,Array.getLength(iObject),Array.getLength(iToAdd));
      }
 else {
        copy=Arrays.copyOf((Object[])iObject,Array.getLength(iObject) + 1);
        copy[copy.length - 1]=iToAdd;
      }
      return copy;
    }
  }
  return iObject;
}
