{
  iRequest.getDatabase().checkSecurity(ODatabaseSecurityResources.COMMAND,ORole.PERMISSION_READ);
  init(iRequest.getDatabase(),iRequest.getText());
  if (iRequest instanceof OSQLSynchQuery) {
    request=(OSQLSynchQuery<ORecordSchemaAware<?>>)iRequest;
    rangeFrom=request.getBeginRange().isValid() ? request.getBeginRange() : null;
    rangeTo=request.getEndRange().isValid() ? request.getEndRange() : null;
  }
 else   if (iRequest instanceof OSQLAsynchQuery)   request=(OSQLAsynchQuery<ORecordSchemaAware<?>>)iRequest;
 else {
    request=new OSQLSynchQuery<ORecordSchemaAware<?>>(iRequest.getText());
    request.setDatabase(iRequest.getDatabase());
    if (iRequest.getResultListener() != null)     request.setResultListener(iRequest.getResultListener());
  }
  int pos=extractProjections();
  if (pos == -1)   return this;
  int endPosition=textUpperCase.indexOf(" " + OCommandExecutorSQLSelect.KEYWORD_ORDER_BY,currentPos);
  if (endPosition == -1) {
    endPosition=textUpperCase.indexOf(" " + OCommandExecutorSQLSelect.KEYWORD_RANGE,currentPos);
    if (endPosition == -1) {
      endPosition=textUpperCase.indexOf(" " + OCommandExecutorSQLSelect.KEYWORD_LIMIT,currentPos);
      if (endPosition == -1) {
        endPosition=text.length();
      }
    }
  }
  compiledFilter=new OSQLFilter(iRequest.getDatabase(),text.substring(pos,endPosition));
  currentPos=compiledFilter.currentPos + pos;
  if (currentPos > -1 && currentPos < text.length()) {
    currentPos=OStringParser.jump(text,currentPos," \r\n");
    final StringBuilder word=new StringBuilder();
    String w;
    while (currentPos > -1) {
      currentPos=OSQLHelper.nextWord(text,textUpperCase,currentPos,word,true);
      if (currentPos > -1) {
        w=word.toString();
        if (w.equals(KEYWORD_ORDER))         extractOrderBy(word);
 else         if (w.equals(KEYWORD_RANGE))         extractRange(word);
 else         if (w.equals(KEYWORD_LIMIT))         extractLimit(word);
      }
    }
  }
  return this;
}
