{
  checkForRebuild();
  if (key == null)   return this;
  key=getCollatingValue(key);
  final ODatabase database=getDatabase();
  final boolean txIsActive=database.getTransaction().isActive();
  if (!txIsActive)   keyLockManager.acquireExclusiveLock(key);
  try {
    final Set<String> words=splitIntoWords(key.toString());
    for (    final String word : words) {
      acquireSharedLock();
      try {
        final Set<OIdentifiable> refs=(Set<OIdentifiable>)storage.getIndexValue(indexId,word);
        final boolean durable;
        if (metadata != null && Boolean.TRUE.equals(metadata.field("durableInNonTxMode")))         durable=true;
 else         durable=false;
        storage.updateIndexEntry(indexId,word,new Callable<Object>(){
          @Override public Object call() throws Exception {
            Set<OIdentifiable> result=null;
            if (refs == null) {
              if (ODefaultIndexFactory.SBTREEBONSAI_VALUE_CONTAINER.equals(valueContainerAlgorithm)) {
                result=new OIndexRIDContainer(getName(),durable);
              }
 else {
                throw new IllegalStateException("MBRBTreeContainer is not supported any more");
              }
            }
 else {
              result=refs;
            }
            result.add(singleValue);
            return result;
          }
        }
);
      }
  finally {
        releaseSharedLock();
      }
    }
    return this;
  }
  finally {
    if (!txIsActive)     keyLockManager.releaseExclusiveLock(key);
  }
}
