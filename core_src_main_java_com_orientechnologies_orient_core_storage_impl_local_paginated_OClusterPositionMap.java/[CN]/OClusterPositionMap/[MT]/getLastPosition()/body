{
  acquireSharedLock();
  try {
    final long filledUpTo=diskCache.getFilledUpTo(fileId);
    for (long pageIndex=filledUpTo - 1; pageIndex >= 0; pageIndex--) {
      OCacheEntry cacheEntry=diskCache.load(fileId,pageIndex,false);
      OCachePointer cachePointer=cacheEntry.getCachePointer();
      try {
        OClusterPositionMapBucket bucket=new OClusterPositionMapBucket(cachePointer.getDataPointer(),ODurablePage.TrackMode.NONE);
        final int bucketSize=bucket.getSize();
        for (int index=bucketSize - 1; index >= 0; index--) {
          if (bucket.exists(index))           return OClusterPositionFactory.INSTANCE.valueOf(pageIndex * OClusterPositionMapBucket.MAX_ENTRIES + index);
        }
      }
  finally {
        diskCache.release(cacheEntry);
      }
    }
    return OClusterPosition.INVALID_POSITION;
  }
  finally {
    releaseSharedLock();
  }
}
