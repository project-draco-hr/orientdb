{
  convertRecords2Links();
  int entriesSize;
  if (!deserialized) {
    entriesSize=OIntegerSerializer.INSTANCE.deserialize(serializedContent,0);
    System.arraycopy(serializedContent,0,stream,offset,serializedContent.length);
    if (contentWasChanged) {
      entriesSize+=entries.size();
      OIntegerSerializer.INSTANCE.serialize(entriesSize,stream,offset);
      OIntegerSerializer.INSTANCE.serialize(size,stream,offset + OIntegerSerializer.INT_SIZE);
      offset+=serializedContent.length;
    }
 else {
      offset+=serializedContent.length;
      return offset;
    }
  }
 else {
    OIntegerSerializer.INSTANCE.serialize(entries.size(),stream,offset);
    offset+=OIntegerSerializer.INT_SIZE;
    OIntegerSerializer.INSTANCE.serialize(size,stream,offset);
    offset+=OIntegerSerializer.INT_SIZE;
  }
  for (  Map.Entry<ORID,IdentifiableContainer> entry : entries.entrySet()) {
    OLinkSerializer.INSTANCE.serialize(entry.getKey(),stream,offset);
    offset+=OLinkSerializer.RID_SIZE;
    OIntegerSerializer.INSTANCE.serialize(entry.getValue().getCounter().intValue(),stream,offset);
    offset+=OIntegerSerializer.INT_SIZE;
  }
  return offset;
}
