{
  final OIndexManager indexManager=database.getMetadata().getIndexManager();
  final Set<OIndex<?>> indexes=indexManager.getClassIndexes(CLASS_NAME);
  final Set<OIndexDefinition> expectedIndexDefinitions=new HashSet<OIndexDefinition>();
  final OCompositeIndexDefinition compositeIndexOne=new OCompositeIndexDefinition(CLASS_NAME,-1);
  compositeIndexOne.addIndex(new OPropertyIndexDefinition(CLASS_NAME,"fOne",OType.INTEGER));
  compositeIndexOne.addIndex(new OPropertyIndexDefinition(CLASS_NAME,"fTwo",OType.STRING));
  expectedIndexDefinitions.add(compositeIndexOne);
  final OCompositeIndexDefinition compositeIndexTwo=new OCompositeIndexDefinition(CLASS_NAME,-1);
  compositeIndexTwo.addIndex(new OPropertyIndexDefinition(CLASS_NAME,"fOne",OType.INTEGER));
  compositeIndexTwo.addIndex(new OPropertyIndexDefinition(CLASS_NAME,"fTwo",OType.STRING));
  compositeIndexTwo.addIndex(new OPropertyIndexDefinition(CLASS_NAME,"fThree",OType.BOOLEAN));
  expectedIndexDefinitions.add(compositeIndexTwo);
  final OPropertyIndexDefinition propertyIndex=new OPropertyIndexDefinition(CLASS_NAME,"fOne",OType.INTEGER);
  expectedIndexDefinitions.add(propertyIndex);
  assertEquals(indexes.size(),3);
  for (  final OIndex index : indexes) {
    assertTrue(expectedIndexDefinitions.contains(index.getDefinition()));
  }
}
