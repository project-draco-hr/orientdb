{
  OIdentifier jjtn000=new OIdentifier(JJTIDENTIFIER);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  Token token=null;
  try {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IDENTIFIER:
      token=jj_consume_token(IDENTIFIER);
    break;
case IN:
  token=jj_consume_token(IN);
break;
case SET:
token=jj_consume_token(SET);
break;
case PUT:
token=jj_consume_token(PUT);
break;
case ADD:
token=jj_consume_token(ADD);
break;
case REMOVE:
token=jj_consume_token(REMOVE);
break;
case MERGE:
token=jj_consume_token(MERGE);
break;
case CONTENT:
token=jj_consume_token(CONTENT);
break;
case ORDER:
token=jj_consume_token(ORDER);
break;
case KEY:
token=jj_consume_token(KEY);
break;
case OFFSET:
token=jj_consume_token(OFFSET);
break;
case GROUP:
token=jj_consume_token(GROUP);
break;
case VALUES:
token=jj_consume_token(VALUES);
break;
case RECORD:
token=jj_consume_token(RECORD);
break;
case TO:
token=jj_consume_token(TO);
break;
case LUCENE:
token=jj_consume_token(LUCENE);
break;
case BACKTICK:
jj_consume_token(BACKTICK);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IDENTIFIER:
token=jj_consume_token(IDENTIFIER);
break;
case IN:
token=jj_consume_token(IN);
break;
case SET:
token=jj_consume_token(SET);
break;
case PUT:
token=jj_consume_token(PUT);
break;
case ADD:
token=jj_consume_token(ADD);
break;
case REMOVE:
token=jj_consume_token(REMOVE);
break;
case MERGE:
token=jj_consume_token(MERGE);
break;
case CONTENT:
token=jj_consume_token(CONTENT);
break;
case ORDER:
token=jj_consume_token(ORDER);
break;
case KEY:
token=jj_consume_token(KEY);
break;
case OFFSET:
token=jj_consume_token(OFFSET);
break;
case GROUP:
token=jj_consume_token(GROUP);
break;
case VALUES:
token=jj_consume_token(VALUES);
break;
case RECORD:
token=jj_consume_token(RECORD);
break;
case TO:
token=jj_consume_token(TO);
break;
case LUCENE:
token=jj_consume_token(LUCENE);
break;
case FROM:
token=jj_consume_token(FROM);
break;
case SELECT:
token=jj_consume_token(SELECT);
break;
case UPDATE:
token=jj_consume_token(UPDATE);
break;
case DELETE:
token=jj_consume_token(DELETE);
break;
case TRAVERSE:
token=jj_consume_token(TRAVERSE);
break;
case WHERE:
token=jj_consume_token(WHERE);
break;
case INSERT:
token=jj_consume_token(INSERT);
break;
default :
jj_la1[0]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jj_consume_token(BACKTICK);
break;
default :
jj_la1[1]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
jjtn000.value=token.image;
{
if (true) return jjtn000;
}
}
  finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
