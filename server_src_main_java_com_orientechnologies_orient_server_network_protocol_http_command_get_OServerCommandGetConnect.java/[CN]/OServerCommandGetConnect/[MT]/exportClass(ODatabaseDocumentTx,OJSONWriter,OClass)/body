{
  json.beginObject(2,true,null);
  json.writeAttribute(3,true,"name",cls.getName());
  json.writeAttribute(3,true,"superClass",cls.getSuperClass() != null ? cls.getSuperClass().getName() : "");
  json.writeAttribute(3,true,"alias",cls.getShortName());
  json.writeAttribute(3,true,"abstract",cls.isAbstract());
  json.writeAttribute(3,true,"clusters",cls.getClusterIds());
  json.writeAttribute(3,true,"defaultCluster",cls.getDefaultClusterId());
  if (cls instanceof OClassImpl) {
    final Map<String,String> custom=((OClassImpl)cls).getCustomInternal();
    if (custom != null && !custom.isEmpty()) {
      json.writeAttribute(4,true,"custom",custom);
    }
  }
  try {
    json.writeAttribute(3,false,"records",db.countClass(cls.getName()));
  }
 catch (  OSecurityAccessException e) {
    json.writeAttribute(3,false,"records","? (Unauthorized)");
  }
  if (cls.properties() != null && cls.properties().size() > 0) {
    json.beginCollection(3,true,"properties");
    for (    final OProperty prop : cls.properties()) {
      json.beginObject(4,true,null);
      json.writeAttribute(4,true,"name",prop.getName());
      if (prop.getLinkedClass() != null)       json.writeAttribute(4,true,"linkedClass",prop.getLinkedClass().getName());
      if (prop.getLinkedType() != null)       json.writeAttribute(4,true,"linkedType",prop.getLinkedType().toString());
      json.writeAttribute(4,true,"type",prop.getType().toString());
      json.writeAttribute(4,true,"mandatory",prop.isMandatory());
      json.writeAttribute(4,true,"readonly",prop.isReadonly());
      json.writeAttribute(4,true,"notNull",prop.isNotNull());
      json.writeAttribute(4,true,"min",prop.getMin());
      json.writeAttribute(4,true,"max",prop.getMax());
      if (prop instanceof OPropertyImpl) {
        final Map<String,String> custom=((OPropertyImpl)prop).getCustomInternal();
        if (custom != null && !custom.isEmpty()) {
          json.writeAttribute(5,true,"custom",custom);
        }
      }
      json.endObject(3,true);
    }
    json.endCollection(1,true);
  }
  final Set<OIndex<?>> indexes=cls.getIndexes();
  if (!indexes.isEmpty()) {
    json.beginCollection(3,true,"indexes");
    for (    final OIndex<?> index : indexes) {
      json.beginObject(4,true,null);
      json.writeAttribute(4,true,"name",index.getName());
      json.writeAttribute(4,true,"type",index.getType());
      final OIndexDefinition indexDefinition=index.getDefinition();
      if (indexDefinition != null && !indexDefinition.getFields().isEmpty())       json.writeAttribute(4,true,"fields",indexDefinition.getFields());
      json.endObject(3,true);
    }
    json.endCollection(1,true);
  }
  json.endObject(1,false);
}
