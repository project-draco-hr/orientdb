{
  final Collection<?> keys=new ArrayList<Object>(iKeys);
  final Set<ODocument> result=new ODocumentFieldsHashSet();
  final OTransactionIndexChanges indexChanges=database.getTransaction().getIndexChanges(delegate.getName());
  if (indexChanges == null) {
    result.addAll(super.getEntries(keys));
    return result;
  }
  final Set<Object> keysToRemove=new HashSet<Object>();
  for (  final Object key : keys) {
    if (indexChanges.cleared)     keysToRemove.add(key);
    OIdentifiable keyResult=null;
    if (indexChanges.containsChangesPerKey(key)) {
      final OTransactionIndexChangesPerKey value=indexChanges.getChangesPerKey(key);
      if (value != null) {
        for (        final OTransactionIndexEntry entry : value.entries) {
          if (entry.operation == OPERATION.REMOVE) {
            if (entry.value == null) {
              keysToRemove.add(key);
              keyResult=null;
            }
          }
 else           if (entry.operation == OPERATION.PUT) {
            keyResult=entry.value;
            keysToRemove.add(key);
          }
        }
      }
    }
    if (keyResult != null) {
      final ODocument document=new ODocument();
      document.field("key",key);
      document.field("rid",keyResult.getIdentity());
      document.unsetDirty();
      result.add(document);
    }
  }
  keys.removeAll(keysToRemove);
  if (!keys.isEmpty())   result.addAll(super.getEntries(keys));
  return result;
}
