{
  database.begin();
  final OIndex<?> index=database.getMetadata().getIndexManager().getIndex("idxTxAwareMultiValueGetEntriesTest");
  Assert.assertTrue(index instanceof OIndexTxAwareMultiValue);
  final int clusterId=database.getDefaultClusterId();
  final List<Long> positions=getValidPositions(clusterId);
  final ORecordId firstRecordId=new ORecordId(clusterId,positions.get(0));
  index.put(1,firstRecordId);
  index.put(1,new ORecordId(clusterId,positions.get(1)));
  index.put(2,new ORecordId(clusterId,positions.get(2)));
  database.commit();
  Assert.assertNull(database.getTransaction().getIndexChanges("idxTxAwareMultiValueGetEntriesTest"));
  Set<OIdentifiable> resultOne=new HashSet<OIdentifiable>();
  OIndexCursor cursor=index.iterateEntries(Arrays.asList(1,2),true);
  cursorToSet(cursor,resultOne);
  Assert.assertEquals(resultOne.size(),3);
  database.begin();
  index.remove(1,firstRecordId);
  Assert.assertNotNull(database.getTransaction().getIndexChanges("idxTxAwareMultiValueGetEntriesTest"));
  Set<OIdentifiable> resultTwo=new HashSet<OIdentifiable>();
  cursor=index.iterateEntries(Arrays.asList(1,2),true);
  cursorToSet(cursor,resultTwo);
  Assert.assertEquals(resultTwo.size(),2);
  database.rollback();
  Assert.assertNull(database.getTransaction().getIndexChanges("idxTxAwareMultiValueGetEntriesTest"));
  Set<OIdentifiable> resultThree=new HashSet<OIdentifiable>();
  cursor=index.iterateEntries(Arrays.asList(1,2),true);
  cursorToSet(cursor,resultThree);
  Assert.assertEquals(resultThree.size(),3);
}
