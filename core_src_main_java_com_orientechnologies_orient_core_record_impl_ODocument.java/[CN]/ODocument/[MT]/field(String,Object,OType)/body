{
  if (iFieldName == null)   throw new IllegalArgumentException("Field is null");
  if (iFieldName.isEmpty())   throw new IllegalArgumentException("Field name is empty");
  if (ODocumentHelper.ATTRIBUTE_CLASS.equals(iFieldName)) {
    setClassName(iPropertyValue.toString());
    return this;
  }
 else   if (ODocumentHelper.ATTRIBUTE_RID.equals(iFieldName)) {
    _recordId.fromString(iPropertyValue.toString());
    return this;
  }
 else   if (ODocumentHelper.ATTRIBUTE_VERSION.equals(iFieldName)) {
    if (iPropertyValue != null) {
      int v=_recordVersion;
      if (iPropertyValue instanceof Number)       v=((Number)iPropertyValue).intValue();
 else       v=Integer.parseInt(iPropertyValue.toString());
      _recordVersion=v;
    }
    return this;
  }
  final int lastDotSep=_allowChainedAccess ? iFieldName.lastIndexOf('.') : -1;
  final int lastArraySep=_allowChainedAccess ? iFieldName.lastIndexOf('[') : -1;
  final int lastSep=Math.max(lastArraySep,lastDotSep);
  final boolean lastIsArray=lastArraySep > lastDotSep;
  if (lastSep > -1) {
    final Object subObject=field(iFieldName.substring(0,lastSep));
    if (subObject != null) {
      final String subFieldName=lastIsArray ? iFieldName.substring(lastSep) : iFieldName.substring(lastSep + 1);
      if (subObject instanceof ODocument) {
        ((ODocument)subObject).field(subFieldName,iPropertyValue);
        return (ODocument)(((ODocument)subObject).isEmbedded() ? this : subObject);
      }
 else       if (subObject instanceof Map<?,?>) {
        ((Map<String,Object>)subObject).put(subFieldName,iPropertyValue);
      }
 else       if (OMultiValue.isMultiValue(subObject)) {
        if ((subObject instanceof List<?> || subObject.getClass().isArray()) && lastIsArray) {
          final int subFieldNameLen=subFieldName.length();
          if (subFieldName.charAt(subFieldNameLen - 1) != ']') {
            throw new IllegalArgumentException("Missed closing ']'");
          }
          final String indexPart=subFieldName.substring(1,subFieldNameLen - 1);
          final Object indexPartObject=ODocumentHelper.getIndexPart(null,indexPart);
          final String indexAsString=indexPartObject == null ? null : indexPartObject.toString();
          try {
            final int index=Integer.parseInt(indexAsString);
            OMultiValue.setValue(subObject,iPropertyValue,index);
          }
 catch (          NumberFormatException e) {
            throw new IllegalArgumentException("List / array subscripts must resolve to integer values.");
          }
        }
 else {
          for (          Object subObjectItem : OMultiValue.getMultiValueIterable(subObject)) {
            if (subObjectItem instanceof ODocument) {
              if (!((ODocument)subObjectItem).isEmbedded())               throw new IllegalArgumentException("Property '" + iFieldName + "' points to linked collection of items. You can only change embedded documents in this way");
              ((ODocument)subObjectItem).field(subFieldName,iPropertyValue);
            }
 else             if (subObjectItem instanceof Map<?,?>) {
              ((Map<String,Object>)subObjectItem).put(subFieldName,iPropertyValue);
            }
          }
        }
        return this;
      }
    }
 else     throw new IllegalArgumentException("Property '" + iFieldName.substring(0,lastSep) + "' is null, is possible to set a value with dotted notation only on not null property");
    return null;
  }
  iFieldName=checkFieldName(iFieldName);
  checkForLoading();
  checkForFields();
  ODocumentEntry entry=_fields.get(iFieldName);
  final boolean knownProperty;
  final Object oldValue;
  final OType oldType;
  if (entry == null) {
    entry=new ODocumentEntry();
    _fieldSize++;
    _fields.put(iFieldName,entry);
    entry.setCreated(true);
    knownProperty=false;
    oldValue=null;
    oldType=null;
  }
 else {
    knownProperty=entry.exist();
    oldValue=entry.value;
    oldType=entry.type;
  }
  OType fieldType=deriveFieldType(iFieldName,entry,iFieldType);
  if (iPropertyValue != null && fieldType != null) {
    iPropertyValue=ODocumentHelper.convertField(this,iFieldName,fieldType,null,iPropertyValue);
  }
 else   if (iPropertyValue instanceof Enum)   iPropertyValue=iPropertyValue.toString();
  if (knownProperty)   if (iPropertyValue == null) {
    if (oldValue == null)     return this;
  }
 else {
    try {
      if (iPropertyValue.equals(oldValue)) {
        if (fieldType == oldType) {
          if (!(iPropertyValue instanceof ORecordElement))           setDirty();
          return this;
        }
      }
    }
 catch (    Exception e) {
      OLogManager.instance().warn(this,"Error on checking the value of property %s against the record %s",e,iFieldName,getIdentity());
    }
  }
  if (oldValue instanceof ORidBag) {
    final ORidBag ridBag=(ORidBag)oldValue;
    ridBag.setOwner(null);
  }
 else   if (oldValue instanceof ODocument) {
    ((ODocument)oldValue).removeOwner(this);
  }
  if (oldValue instanceof OIdentifiable) {
    unTrack((OIdentifiable)oldValue);
  }
  if (iPropertyValue != null) {
    if (iPropertyValue instanceof ODocument) {
      if (OType.EMBEDDED.equals(fieldType)) {
        final ODocument embeddedDocument=(ODocument)iPropertyValue;
        ODocumentInternal.addOwner(embeddedDocument,this);
      }
    }
    if (iPropertyValue instanceof OIdentifiable) {
      track((OIdentifiable)iPropertyValue);
    }
    if (iPropertyValue instanceof ORidBag) {
      final ORidBag ridBag=(ORidBag)iPropertyValue;
      ridBag.setOwner(null);
      ridBag.setOwner(this);
    }
  }
  if (oldType != fieldType && oldType != null) {
    if (iPropertyValue == null || fieldType != null || oldType != OType.getTypeByValue(iPropertyValue))     entry.type=fieldType;
  }
  removeCollectionChangeListener(entry,oldValue);
  entry.value=iPropertyValue;
  if (!entry.exist()) {
    entry.setExist(true);
    _fieldSize++;
  }
  addCollectionChangeListener(entry);
  if (_status != STATUS.UNMARSHALLING) {
    setDirty();
    if (!entry.isChanged()) {
      entry.original=oldValue;
      entry.setChanged(true);
    }
  }
  return this;
}
