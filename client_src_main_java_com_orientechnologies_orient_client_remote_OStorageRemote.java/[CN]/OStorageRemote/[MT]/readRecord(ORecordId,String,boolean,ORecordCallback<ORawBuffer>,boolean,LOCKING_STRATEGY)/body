{
  if (OStorageRemoteThreadLocal.INSTANCE.get().commandExecuting)   return new OStorageOperationResult<ORawBuffer>(null);
  OChannelBinaryAsynchClient network=null;
  do {
    try {
      try {
        network=beginRequest(OChannelBinaryProtocol.REQUEST_RECORD_LOAD);
        network.writeRID(iRid);
        network.writeString(iFetchPlan != null ? iFetchPlan : "");
        if (network.getSrvProtocolVersion() >= 9)         network.writeByte((byte)(iIgnoreCache ? 1 : 0));
        if (network.getSrvProtocolVersion() >= 13)         network.writeByte(loadTombstones ? (byte)1 : (byte)0);
      }
  finally {
        endRequest(network);
      }
      try {
        beginResponse(network);
        if (network.readByte() == 0)         return new OStorageOperationResult<ORawBuffer>(null);
        final ORawBuffer buffer;
        if (network.getSrvProtocolVersion() <= 27)         buffer=new ORawBuffer(network.readBytes(),network.readVersion(),network.readByte());
 else {
          byte type=network.readByte();
          ORecordVersion recVersion=network.readVersion();
          byte[] bytes=network.readBytes();
          buffer=new ORawBuffer(bytes,recVersion,type);
        }
        final ODatabaseDocument database=ODatabaseRecordThreadLocal.INSTANCE.getIfDefined();
        ORecord record;
        while (network.readByte() == 2) {
          record=(ORecord)OChannelBinaryProtocol.readIdentifiable(network);
          if (database != null)           database.getLocalCache().updateRecord(record);
        }
        return new OStorageOperationResult<ORawBuffer>(buffer);
      }
  finally {
        endResponse(network);
      }
    }
 catch (    Exception e) {
      handleException(network,"Error on read record " + iRid,e);
    }
  }
 while (true);
}
