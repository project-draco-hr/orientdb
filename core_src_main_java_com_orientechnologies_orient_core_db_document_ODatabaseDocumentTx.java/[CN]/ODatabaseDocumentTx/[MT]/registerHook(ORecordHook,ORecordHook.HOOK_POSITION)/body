{
  final Map<ORecordHook,ORecordHook.HOOK_POSITION> tmp=new LinkedHashMap<ORecordHook,ORecordHook.HOOK_POSITION>(hooks);
  tmp.put(iHookImpl,iPosition);
  hooks.clear();
  for (  ORecordHook.HOOK_POSITION p : ORecordHook.HOOK_POSITION.values()) {
    for (    Map.Entry<ORecordHook,ORecordHook.HOOK_POSITION> e : tmp.entrySet()) {
      if (e.getValue() == p)       hooks.put(e.getKey(),e.getValue());
    }
  }
  List<ORecordHook> defaults=new ArrayList<ORecordHook>();
  List<ORecordHook> distributed=new ArrayList<ORecordHook>();
  for (  Map.Entry<ORecordHook,ORecordHook.HOOK_POSITION> oRecordHook : hooks.entrySet()) {
    if (!getStorage().isDistributed() || oRecordHook.getKey().getDistributedExecutionMode() != ORecordHook.DISTRIBUTED_EXECUTION_MODE.TARGET_NODE)     defaults.add(oRecordHook.getKey());
    if (oRecordHook.getKey().getDistributedExecutionMode() != ORecordHook.DISTRIBUTED_EXECUTION_MODE.SOURCE_NODE)     distributed.add(oRecordHook.getKey());
  }
  this.defaultHooks=defaults.toArray(new ORecordHook[defaults.size()]);
  this.distributedHooks=distributed.toArray(new ORecordHook[distributed.size()]);
  return (DB)this;
}
