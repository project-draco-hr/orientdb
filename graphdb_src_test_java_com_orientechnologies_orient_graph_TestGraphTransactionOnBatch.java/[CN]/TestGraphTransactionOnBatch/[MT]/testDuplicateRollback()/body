{
  OClass clazz=db.getMetadata().getSchema().createClass("Test");
  clazz.setSuperClass(V);
  clazz.createProperty("id",OType.STRING).createIndex(INDEX_TYPE.UNIQUE);
  try {
    db.command(new OCommandScript("sql","BEGIN \n LET a = create vertex Test SET id = \"12345678\" \n LET b = create vertex Test SET id = \"4kkrPhGe\" \n LET c =create vertex Test SET id = \"4kkrPhGe\" \n COMMIT \n RETURN $b ")).execute();
    Assert.fail("expected record duplicate exception");
  }
 catch (  ORecordDuplicatedException ex) {
  }
  try {
    db.command(new OCommandScript("sql","BEGIN \n LET a = create vertex Test content {\"id\": \"12345678\"} \n LET b = create vertex Test content {\"id\": \"4kkrPhGe\"} \n LET c =create vertex Test content { \"id\": \"4kkrPhGe\"} \n COMMIT \n RETURN $b ")).execute();
    Assert.fail("expected record duplicate exception");
  }
 catch (  ORecordDuplicatedException ex) {
  }
  List<ODocument> res=db.query(new OSQLSynchQuery("select from Test"));
  Assert.assertEquals(0,res.size());
}
