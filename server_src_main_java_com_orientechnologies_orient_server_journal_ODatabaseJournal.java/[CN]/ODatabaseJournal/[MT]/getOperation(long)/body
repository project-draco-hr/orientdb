{
  OAbstractReplicatedTask<?> task=null;
  lock.lock();
  try {
    final long runId=file.readLong(iOffsetEndOperation - OFFSET_BACK_RUNID);
    final long operationId=file.readLong(iOffsetEndOperation - OFFSET_BACK_OPERATID);
    final int varSize=file.readInt(iOffsetEndOperation - OFFSET_BACK_SIZE);
    final long offset=iOffsetEndOperation - OFFSET_BACK_SIZE - varSize- OFFSET_VARDATA;
    final OPERATION_TYPES operationType=OPERATION_TYPES.values()[file.readByte(offset + OFFSET_OPERATION_TYPE)];
switch (operationType) {
case RECORD_CREATE:
{
        final ORecordId rid=new ORecordId(file.readShort(offset + OFFSET_VARDATA),OClusterPositionFactory.INSTANCE.valueOf(file.readLong(offset + OFFSET_VARDATA + OBinaryProtocol.SIZE_SHORT)));
        if (rid.isNew())         rid.clusterPosition=storage.getClusterDataRange(rid.clusterId)[1];
        final ORawBuffer record=storage.readRecord(rid,null,false,null,false).getResult();
        if (record != null)         task=new OCreateRecordTask(runId,operationId,rid,record.buffer,record.version,record.recordType);
        break;
      }
case RECORD_UPDATE:
{
      final ORecordId rid=new ORecordId(file.readShort(offset + OFFSET_VARDATA),OClusterPositionFactory.INSTANCE.valueOf(file.readLong(offset + OFFSET_VARDATA + OBinaryProtocol.SIZE_SHORT)));
      final ORawBuffer record=storage.readRecord(rid,null,false,null,false).getResult();
      if (record != null) {
        final ORecordVersion version=record.version.copy();
        version.setRollbackMode();
        task=new OUpdateRecordTask(runId,operationId,rid,record.buffer,version,record.recordType);
      }
      break;
    }
case RECORD_DELETE:
{
    final ORecordId rid=new ORecordId(file.readShort(offset + OFFSET_VARDATA),OClusterPositionFactory.INSTANCE.valueOf(file.readLong(offset + OFFSET_VARDATA + OBinaryProtocol.SIZE_SHORT)));
    final ORawBuffer record=storage.readRecord(rid,null,false,null,false).getResult();
    task=new ODeleteRecordTask(runId,operationId,rid,record != null ? record.version : OVersionFactory.instance().createUntrackedVersion());
    break;
  }
case SQL_COMMAND:
{
  final byte[] buffer=new byte[varSize];
  file.read(offset + OFFSET_VARDATA,buffer,buffer.length);
  task=new OSQLCommandTask(runId,operationId,new String(buffer));
  break;
}
default :
return null;
}
if (task != null) task.setServerInstance(server);
}
  finally {
lock.unlock();
}
return task;
}
