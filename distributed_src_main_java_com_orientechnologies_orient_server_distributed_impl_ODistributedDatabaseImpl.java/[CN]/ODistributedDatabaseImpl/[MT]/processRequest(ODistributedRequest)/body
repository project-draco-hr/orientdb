{
  final ORemoteTask task=request.getTask();
  totalReceivedRequests.incrementAndGet();
  final int[] partitionKeys=task.getPartitionKey();
  ODistributedServerLog.debug(this,localNodeName,null,DIRECTION.NONE,"Request %s on database '%s' partitionKeys=%s",request,databaseName,Arrays.toString(partitionKeys));
  if (partitionKeys.length > 1 || partitionKeys[0] == -1) {
    final Set<Integer> involvedWorkerQueues;
    if (partitionKeys.length > 1)     involvedWorkerQueues=getInvolvedQueuesByPartitionKeys(partitionKeys);
 else     involvedWorkerQueues=ALL_QUEUES;
    ODistributedServerLog.debug(this,localNodeName,null,DIRECTION.NONE,"Request %s on database '%s' involvedQueues=%s",request,databaseName,involvedWorkerQueues);
    if (involvedWorkerQueues.size() == 1)     processRequest(involvedWorkerQueues.iterator().next(),request);
 else {
      ODistributedServerLog.debug(this,localNodeName,null,DIRECTION.NONE,"Request %s on database '%s' waiting for all the previous requests to be completed",request,databaseName);
      final CountDownLatch syncLatch=new CountDownLatch(involvedWorkerQueues.size());
      final ODistributedRequest syncRequest=new ODistributedRequest(manager.getTaskFactory(),request.getId().getNodeId(),-1,databaseName,new OSynchronizedTaskWrapper(syncLatch));
      for (      int queue : involvedWorkerQueues)       workerThreads.get(queue).processRequest(syncRequest);
      long taskTimeout=request.getTask().getDistributedTimeout();
      try {
        if (taskTimeout <= 0)         syncLatch.await();
 else {
          final long start=System.currentTimeMillis();
          final long cycleTimeout=Math.min(taskTimeout,2000);
          boolean locked=false;
          do {
            if (syncLatch.await(cycleTimeout,TimeUnit.MILLISECONDS)) {
              locked=true;
              break;
            }
            if (this.workerThreads.size() == 0)             break;
          }
 while (System.currentTimeMillis() - start < taskTimeout);
          if (!locked) {
            final String msg=String.format("Cannot execute distributed request (%s) because all worker threads (%d) are busy",request,workerThreads.size());
            ODistributedWorker.sendResponseBack(this,manager,request,new ODistributedOperationException(msg));
            return;
          }
        }
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        final String msg=String.format("Cannot execute distributed request (%s) because all worker threads (%d) are busy",request,workerThreads.size());
        ODistributedWorker.sendResponseBack(this,manager,request,new ODistributedOperationException(msg));
        return;
      }
      final CountDownLatch queueLatch=new CountDownLatch(1);
      int i=0;
      for (      int queue : involvedWorkerQueues) {
        final ODistributedRequest req;
        if (i++ == 0) {
          final String senderNodeName=manager.getNodeNameById(request.getId().getNodeId());
          request.setTask(new OSynchronizedTaskWrapper(queueLatch,senderNodeName,task));
          req=request;
        }
 else         req=new ODistributedRequest(manager.getTaskFactory(),request.getId().getNodeId(),-1,databaseName,new OWaitForTask(queueLatch));
        workerThreads.get(queue).processRequest(req);
      }
    }
  }
 else   if (partitionKeys.length > 1 || partitionKeys[0] == -2) {
    boolean found=false;
    for (    ODistributedWorker q : workerThreads) {
      if (q.localQueue.isEmpty()) {
        q.processRequest(request);
        found=true;
        break;
      }
    }
    if (!found)     workerThreads.get(0).processRequest(request);
  }
 else {
    processRequest(partitionKeys[0],request);
  }
}
