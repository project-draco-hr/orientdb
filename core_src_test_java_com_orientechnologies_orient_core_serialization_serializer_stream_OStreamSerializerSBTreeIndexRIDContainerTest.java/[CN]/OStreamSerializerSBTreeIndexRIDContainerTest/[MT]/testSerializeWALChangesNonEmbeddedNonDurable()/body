{
  final OIndexRIDContainer indexRIDContainer=new OIndexRIDContainer("test",false);
  indexRIDContainer.setTopThreshold(1);
  for (int i=0; i < 5; i++) {
    indexRIDContainer.add(new ORecordId(1,i * 3));
  }
  Assert.assertFalse(indexRIDContainer.isEmbedded());
  final int len=streamSerializerSBTreeIndexRIDContainer.getObjectSize(indexRIDContainer);
  final int serializationOffset=5;
  final ByteBuffer buffer=ByteBuffer.allocateDirect(len + serializationOffset).order(ByteOrder.nativeOrder());
  final byte[] data=new byte[len];
  streamSerializerSBTreeIndexRIDContainer.serializeNativeObject(indexRIDContainer,data,0);
  final OWALChanges walChanges=new OWALChangesTree();
  walChanges.setBinaryValue(buffer,data,serializationOffset);
  Assert.assertEquals(streamSerializerSBTreeIndexRIDContainer.getObjectSizeInByteBuffer(buffer,walChanges,serializationOffset),len);
  OIndexRIDContainer newRidContainer=streamSerializerSBTreeIndexRIDContainer.deserializeFromByteBufferObject(buffer,walChanges,serializationOffset);
  Assert.assertNotSame(newRidContainer,indexRIDContainer);
  Assert.assertFalse(newRidContainer.isEmbedded());
  Assert.assertFalse(newRidContainer.isDurableNonTxMode());
  final Set<OIdentifiable> storedRids=new HashSet<OIdentifiable>(newRidContainer);
  final Set<OIdentifiable> newRids=new HashSet<OIdentifiable>(indexRIDContainer);
  Assert.assertEquals(newRids,storedRids);
}
