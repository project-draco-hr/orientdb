{
  if (iException instanceof OException)   throw (OException)iException;
  if (!(iException instanceof IOException))   throw new OStorageException(iMessage,iException);
  if (status != STATUS.OPEN)   return;
  final long lostConnectionTime=System.currentTimeMillis();
  final int currentMaxRetry;
  final int currentRetryDelay;
  if (clusterConfiguration != null && !clusterConfiguration.isEmpty()) {
    currentMaxRetry=1;
    currentRetryDelay=0;
  }
 else {
    currentMaxRetry=connectionRetry;
    currentRetryDelay=connectionRetryDelay;
  }
  for (int retry=0; retry < currentMaxRetry; ++retry) {
    if (currentRetryDelay > 0)     try {
      Thread.sleep(currentRetryDelay);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      break;
    }
    try {
      if (OLogManager.instance().isDebugEnabled())       OLogManager.instance().debug(this,"Retrying to connect to remote server #" + retry + "/"+ currentMaxRetry+ "...");
      openRemoteDatabase();
      OLogManager.instance().info(this,"Connection re-acquired transparently after %dms and %d retries: no errors will be thrown at application level",System.currentTimeMillis() - lostConnectionTime,retry + 1);
      return;
    }
 catch (    Throwable t) {
    }
    if (clusterConfiguration != null) {
    }
  }
  throw new OStorageException(iMessage,iException);
}
