{
  database.command(new OCommandSQL("create index equalityIdx unique")).execute();
  database.getMetadata().getIndexManager().reload();
  Assert.assertNotNull(database.getMetadata().getIndexManager().getIndex("equalityIdx"));
  for (int key=0; key <= 5; key++) {
    database.command(new OCommandSQL("insert into index:equalityIdx (key,rid) values (" + key + ",#10:"+ key+ ")")).execute();
  }
  final OIndex<?> index=database.getMetadata().getIndexManager().getIndex("equalityIdx");
  final Collection<Long> valuesMajorResults=new ArrayList<Long>(Arrays.asList(4L,5L));
  Collection<OIdentifiable> indexCollection=index.getValuesMajor(3,false,true);
  Assert.assertEquals(indexCollection.size(),2);
  for (  OIdentifiable identifiable : indexCollection) {
    valuesMajorResults.remove(identifiable.getIdentity().getClusterPosition().longValue());
  }
  Assert.assertEquals(valuesMajorResults.size(),0);
  final Collection<Long> valuesMajorInclusiveResults=new ArrayList<Long>(Arrays.asList(3L,4L,5L));
  indexCollection=index.getValuesMajor(3,true,true);
  Assert.assertEquals(indexCollection.size(),3);
  for (  OIdentifiable identifiable : indexCollection) {
    valuesMajorInclusiveResults.remove(identifiable.getIdentity().getClusterPosition().longValue());
  }
  Assert.assertEquals(valuesMajorInclusiveResults.size(),0);
  indexCollection=index.getValuesMajor(5,true,true);
  Assert.assertEquals(indexCollection.size(),1);
  Assert.assertEquals(indexCollection.iterator().next().getIdentity().getClusterPosition(),OClusterPositionFactory.INSTANCE.valueOf(5));
  indexCollection=index.getValuesMajor(5,false,true);
  Assert.assertEquals(indexCollection.size(),0);
  database.command(new OCommandSQL("drop index equalityIdx")).execute();
}
