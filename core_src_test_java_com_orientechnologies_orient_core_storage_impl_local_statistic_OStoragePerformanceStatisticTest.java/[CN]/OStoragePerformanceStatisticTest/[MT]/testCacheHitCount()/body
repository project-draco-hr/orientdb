{
  final AssertDataFunction assertDataFunction=new AssertDataFunction(){
    @Override public void assertData(    long[] data) throws AssertionError {
      Assert.assertTrue(data[0] < 60 && data[0] > 40);
    }
  }
;
  final GetDataFunction getDataFunction=new GetDataFunction(){
    @Override public long[] getData(    OStoragePerformanceStatisticMXBean storagePerformanceStatistic){
      final long[] result=new long[1];
      result[0]=storagePerformanceStatistic.getCacheHits();
      return result;
    }
  }
;
  final LoadLoop loadLoop=new LoadLoop(){
    long counter;
    @Override public void execute(    OStoragePerformanceStatistic storagePerformanceStatistic,    boolean measurementStopped){
      if (!measurementStopped)       storagePerformanceStatistic.incrementPageAccessOnCacheLevel(counter % 2 == 0);
 else       storagePerformanceStatistic.incrementPageAccessOnCacheLevel(true);
      counter++;
    }
  }
;
  testNoMBeanCase("testCacheHitCount",loadLoop,getDataFunction,assertDataFunction);
  testMBeanCase("testCacheHitCount",loadLoop,getDataFunction,assertDataFunction);
}
