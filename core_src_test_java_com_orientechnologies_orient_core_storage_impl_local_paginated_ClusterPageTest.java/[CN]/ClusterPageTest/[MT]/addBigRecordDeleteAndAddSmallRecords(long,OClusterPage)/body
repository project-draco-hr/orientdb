{
  final MersenneTwisterFast mersenneTwisterFast=new MersenneTwisterFast(seed);
  ORecordVersion recordVersion=OVersionFactory.instance().createVersion();
  recordVersion.increment();
  recordVersion.increment();
  final byte[] bigChunk=new byte[OClusterPage.MAX_ENTRY_SIZE / 2];
  mersenneTwisterFast.nextBytes(bigChunk);
  int position=localPage.appendRecord(recordVersion,bigChunk);
  Assert.assertEquals(position,0);
  Assert.assertEquals(localPage.getRecordVersion(0),recordVersion);
  Assert.assertTrue(localPage.deleteRecord(0));
  recordVersion.increment();
  int freeSpace=localPage.getFreeSpace();
  Map<Integer,Byte> positionCounter=new HashMap<Integer,Byte>();
  int lastPosition;
  byte counter=0;
  do {
    lastPosition=localPage.appendRecord(recordVersion,new byte[]{counter,counter,counter});
    if (lastPosition >= 0) {
      Assert.assertEquals(lastPosition,positionCounter.size());
      positionCounter.put(lastPosition,counter);
      counter++;
      if (lastPosition == 0)       Assert.assertEquals(localPage.getFreeSpace(),freeSpace - 15);
 else       Assert.assertEquals(localPage.getFreeSpace(),freeSpace - (19 + OVersionFactory.instance().getVersionSize()));
      freeSpace=localPage.getFreeSpace();
    }
  }
 while (lastPosition >= 0);
  Assert.assertEquals(localPage.getRecordsCount(),positionCounter.size());
  for (  Map.Entry<Integer,Byte> entry : positionCounter.entrySet()) {
    Assert.assertEquals(localPage.getRecordBinaryValue(entry.getKey(),0,3),new byte[]{entry.getValue(),entry.getValue(),entry.getValue()});
    Assert.assertEquals(localPage.getRecordSize(entry.getKey()),3);
    Assert.assertEquals(localPage.getRecordVersion(entry.getKey()),recordVersion);
  }
}
