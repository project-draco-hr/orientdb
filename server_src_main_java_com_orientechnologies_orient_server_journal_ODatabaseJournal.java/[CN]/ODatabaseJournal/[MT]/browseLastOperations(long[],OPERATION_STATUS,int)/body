{
  final LinkedList<Long> result=new LinkedList<Long>();
  final HashSet<Long> rids=new HashSet<Long>();
  lock.acquireExclusiveLock();
  try {
    long fileOffset=file.getFilledUpTo();
    long[] localOperationId=getOperationId(fileOffset);
    while ((localOperationId[0] > iRemoteLastOperationId[0]) || (localOperationId[0] == iRemoteLastOperationId[0] && localOperationId[1] > iRemoteLastOperationId[1])) {
      if ((iStatus == null || iStatus == getOperationStatus(fileOffset)) && !rids.contains(fileOffset)) {
        result.add(fileOffset);
        rids.add(fileOffset);
        if (iMax > -1 && rids.size() >= iMax)         break;
      }
      final long prevOffset=getPreviousOperation(fileOffset);
      localOperationId=getOperationId(prevOffset);
      fileOffset=prevOffset;
    }
    return result.descendingIterator();
  }
  finally {
    lock.releaseExclusiveLock();
  }
}
