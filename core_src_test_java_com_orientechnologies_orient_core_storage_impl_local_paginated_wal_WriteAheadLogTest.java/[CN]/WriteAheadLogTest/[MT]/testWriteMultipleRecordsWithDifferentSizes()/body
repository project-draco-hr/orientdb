{
  List<OWALRecord> writtenRecords=new ArrayList<OWALRecord>();
  Assert.assertEquals(writeAheadLog.size(),0);
  long logSize=0;
  int contentSize;
  contentSize=ONE_KB;
  OWALRecord walRecord=new TestRecord(contentSize,false);
  writeAheadLog.log(walRecord);
  writtenRecords.add(walRecord);
  logSize+=OWALPage.RECORDS_OFFSET + contentSize;
  Assert.assertEquals(writeAheadLog.size(),logSize);
  contentSize=ONE_KB;
  walRecord=new TestRecord(contentSize,false);
  writeAheadLog.log(walRecord);
  logSize+=contentSize;
  Assert.assertEquals(writeAheadLog.size(),logSize);
  writtenRecords.add(walRecord);
  contentSize=OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET - 2048- OWALPage.MIN_RECORD_SIZE + 1;
  walRecord=new TestRecord(contentSize,false);
  writeAheadLog.log(walRecord);
  logSize+=contentSize;
  Assert.assertEquals(writeAheadLog.size(),logSize);
  writtenRecords.add(walRecord);
  contentSize=ONE_KB;
  walRecord=new TestRecord(contentSize,false);
  writeAheadLog.log(walRecord);
  logSize+=OWALPage.MIN_RECORD_SIZE - 1 + OWALPage.RECORDS_OFFSET + contentSize;
  Assert.assertEquals(writeAheadLog.size(),logSize);
  writtenRecords.add(walRecord);
  contentSize=ONE_KB;
  walRecord=new TestRecord(contentSize,false);
  writeAheadLog.log(walRecord);
  logSize+=contentSize;
  Assert.assertEquals(writeAheadLog.size(),logSize);
  writtenRecords.add(walRecord);
  contentSize=OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET - 2048- OWALPage.MIN_RECORD_SIZE;
  walRecord=new TestRecord(contentSize,false);
  writeAheadLog.log(walRecord);
  logSize+=contentSize;
  Assert.assertEquals(writeAheadLog.size(),logSize);
  writtenRecords.add(walRecord);
  contentSize=ONE_KB;
  walRecord=new TestRecord(contentSize,false);
  writeAheadLog.log(walRecord);
  logSize+=contentSize - 1 + OWALPage.MIN_RECORD_SIZE + OWALPage.RECORDS_OFFSET;
  Assert.assertEquals(writeAheadLog.size(),logSize);
  writtenRecords.add(walRecord);
  contentSize=ONE_KB;
  walRecord=new TestRecord(contentSize,false);
  writeAheadLog.log(walRecord);
  logSize+=contentSize;
  Assert.assertEquals(writeAheadLog.size(),logSize);
  writtenRecords.add(walRecord);
  contentSize=OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET - 2047- OWALPage.MIN_RECORD_SIZE;
  walRecord=new TestRecord(contentSize,false);
  writeAheadLog.log(walRecord);
  logSize+=contentSize;
  writtenRecords.add(walRecord);
  contentSize=ONE_KB;
  walRecord=new TestRecord(contentSize,false);
  writeAheadLog.log(walRecord);
  logSize+=contentSize - 1 + OWALPage.MIN_RECORD_SIZE + OWALPage.RECORDS_OFFSET;
  Assert.assertEquals(writeAheadLog.size(),logSize);
  writtenRecords.add(walRecord);
  contentSize=ONE_KB;
  walRecord=new TestRecord(contentSize,false);
  writeAheadLog.log(walRecord);
  logSize+=contentSize;
  Assert.assertEquals(writeAheadLog.size(),logSize);
  writtenRecords.add(walRecord);
  contentSize=OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET - 2047;
  walRecord=new TestRecord(contentSize,false);
  writeAheadLog.log(walRecord);
  logSize+=contentSize;
  Assert.assertEquals(writeAheadLog.size(),logSize);
  writtenRecords.add(walRecord);
  contentSize=ONE_KB;
  walRecord=new TestRecord(contentSize,false);
  OLogSequenceNumber end=writeAheadLog.log(walRecord);
  logSize+=contentSize + OWALPage.RECORDS_OFFSET;
  Assert.assertEquals(writeAheadLog.size(),logSize);
  writtenRecords.add(walRecord);
  assertLogContent(writeAheadLog,writtenRecords);
  Assert.assertEquals(writeAheadLog.end(),end);
  writeAheadLog.close();
  writeAheadLog=createWAL();
  Assert.assertEquals(writeAheadLog.size(),logSize);
  Assert.assertEquals(writeAheadLog.end(),end);
  assertLogContent(writeAheadLog,writtenRecords);
}
