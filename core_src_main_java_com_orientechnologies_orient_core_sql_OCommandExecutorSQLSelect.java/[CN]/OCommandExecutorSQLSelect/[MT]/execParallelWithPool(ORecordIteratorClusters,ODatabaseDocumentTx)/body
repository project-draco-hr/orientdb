{
  final int[] clusterIds=iTarget.getClusterIds();
  final List<String> clusterList=new ArrayList<String>();
  for (int i=0; i < clusterIds.length; ++i) {
    final OCluster cluster=db.getStorage().getClusterById(clusterIds[i]);
    if (cluster.getEntries() > 0)     clusterList.add(cluster.getName());
  }
  final int jobNumbers=clusterList.size();
  final List<Future<?>> jobs=new ArrayList<Future<?>>();
  OLogManager.instance().debug(this,"Executing parallel query with strategy executors. clusterIds=%d, jobs=%d",clusterIds.length,jobNumbers);
  final boolean[] results=new boolean[jobNumbers];
  final OCommandContext[] contexts=new OCommandContext[jobNumbers];
  final RuntimeException[] exceptions=new RuntimeException[jobNumbers];
  parallelRunning=true;
  final AtomicInteger runningJobs=new AtomicInteger(jobNumbers);
  for (int i=0; i < jobNumbers; ++i) {
    final int current=i;
    final Runnable job=new Runnable(){
      @Override public void run(){
        try {
          ODatabaseDocumentTx localDatabase=null;
          try {
            exceptions[current]=null;
            results[current]=true;
            final OCommandContext threadContext=context.copy();
            contexts[current]=threadContext;
            localDatabase=db.copy();
            localDatabase.activateOnCurrentThread();
            db.getMetadata().getSchema().makeSnapshot();
            storageScan(localDatabase,threadContext,clusterList.get(current),current,results);
          }
 catch (          RuntimeException t) {
            exceptions[current]=t;
          }
 finally {
            runningJobs.decrementAndGet();
            resultQueue.offer(PARALLEL_END_EXECUTION_THREAD);
            if (localDatabase != null)             localDatabase.close();
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
;
    jobs.add(Orient.instance().submit(job));
  }
  boolean tipProvided=false;
  while (runningJobs.get() > 0 || !resultQueue.isEmpty()) {
    try {
      final AsyncResult result=resultQueue.take();
      final int qSize=resultQueue.size();
      if (!tipProvided && qSize >= OGlobalConfiguration.QUERY_PARALLEL_RESULT_QUEUE_SIZE.getValueAsInteger() - 1) {
        OLogManager.instance().debug(this,"Parallel query '%s' has result queue full (size=%d), this could reduce concurrency level. Consider increasing queue size with setting: %s=<size>",parserText,OGlobalConfiguration.QUERY_PARALLEL_RESULT_QUEUE_SIZE.getValueAsInteger(),OGlobalConfiguration.QUERY_PARALLEL_RESULT_QUEUE_SIZE.getKey());
        tipProvided=true;
      }
      if (OExecutionThreadLocal.isInterruptCurrentOperation())       throw new InterruptedException("Operation has been interrupted");
      if (result != PARALLEL_END_EXECUTION_THREAD) {
        if (!handleResult(result.record,result.context)) {
          parallelRunning=false;
          break;
        }
      }
    }
 catch (    InterruptedException e) {
      Thread.interrupted();
      break;
    }
  }
  parallelRunning=false;
  for (int i=0; i < jobs.size(); ++i) {
    try {
      jobs.get(i).get();
      context.merge(contexts[i]);
    }
 catch (    InterruptedException e) {
      break;
    }
catch (    ExecutionException e) {
      e.printStackTrace();
    }
  }
  for (int i=0; i < jobNumbers; ++i)   if (exceptions[i] != null)   throw exceptions[i];
  for (int i=0; i < jobNumbers; ++i) {
    if (!results[i])     return false;
  }
  return true;
}
