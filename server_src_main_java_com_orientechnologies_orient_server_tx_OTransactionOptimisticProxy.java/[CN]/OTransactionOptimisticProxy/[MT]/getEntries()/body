{
  return new Iterable<OTransactionEntry>(){
    @Override public Iterator<OTransactionEntry> iterator(){
      return new Iterator<OTransactionEntry>(){
        private int current=1;
        @Override public boolean hasNext(){
          if (exhausted)           return false;
          exhausted=current > size;
          return !exhausted;
        }
        @Override public OTransactionEntryProxy next(){
          try {
            OTransactionEntryProxy entry=new OTransactionEntryProxy();
            if (entries.size() < size) {
              final ORecordId rid=(ORecordId)entry.getRecord().getIdentity();
              entry.status=channel.readByte();
              rid.clusterId=channel.readShort();
              ((OTransactionRecordProxy)entry.getRecord()).setRecordType(channel.readByte());
switch (entry.status) {
case OTransactionEntry.CREATED:
                rid.clusterPosition=-1;
              entry.clusterName=channel.readString();
            entry.getRecord().fromStream(channel.readBytes());
          break;
case OTransactionEntry.UPDATED:
        rid.clusterPosition=channel.readLong();
      entry.getRecord().setVersion(channel.readInt());
    entry.getRecord().fromStream(channel.readBytes());
  updatedRecords.put(rid,entry.getRecord());
break;
case OTransactionEntry.DELETED:
rid.clusterPosition=channel.readLong();
entry.getRecord().setVersion(channel.readInt());
break;
default :
throw new OTransactionException("Unrecognized tx command: " + entry.status);
}
entries.add(entry);
}
 else entry=entries.get(current - 1);
current++;
return entry;
}
 catch (IOException e) {
throw new OSerializationException("Can't read transaction record from the network",e);
}
}
@Override public void remove(){
throw new UnsupportedOperationException("remove");
}
}
;
}
}
;
}
