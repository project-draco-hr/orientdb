{
  if (_fields == null)   return;
  for (  Map.Entry<String,ODocumentEntry> fieldEntry : _fields.entrySet()) {
    final Object fieldValue=fieldEntry.getValue().value;
    if (!(fieldValue instanceof Collection<?>) && !(fieldValue instanceof Map<?,?>))     continue;
    if (addCollectionChangeListener(fieldEntry.getValue())) {
      continue;
    }
    OType fieldType=fieldEntry.getValue().type;
    if (fieldType == null) {
      OClass _clazz=getImmutableSchemaClass();
      if (_clazz != null) {
        final OProperty prop=_clazz.getProperty(fieldEntry.getKey());
        fieldType=prop != null ? prop.getType() : null;
      }
    }
    if (fieldType == null)     fieldType=OType.getTypeByValue(fieldValue);
    Object newValue=null;
switch (fieldType) {
case EMBEDDEDLIST:
      if (fieldValue instanceof List<?>)       newValue=new OTrackedList<Object>(this,(List<?>)fieldValue,null);
    break;
case EMBEDDEDSET:
  if (fieldValue instanceof Set<?>)   newValue=new OTrackedSet<Object>(this,(Set<OIdentifiable>)fieldValue,null);
break;
case EMBEDDEDMAP:
if (fieldValue instanceof Map<?,?>) newValue=new OTrackedMap<OIdentifiable>(this,(Map<Object,OIdentifiable>)fieldValue,null);
break;
case LINKLIST:
if (fieldValue instanceof List<?>) newValue=new ORecordLazyList(this,(List<OIdentifiable>)fieldValue);
break;
case LINKSET:
if (fieldValue instanceof Set<?>) newValue=new ORecordLazySet(this,(Collection<OIdentifiable>)fieldValue);
break;
case LINKMAP:
if (fieldValue instanceof Map<?,?>) newValue=new ORecordLazyMap(this,(Map<Object,OIdentifiable>)fieldValue);
break;
default :
break;
}
if (newValue != null) {
addCollectionChangeListener(fieldEntry.getValue());
fieldEntry.getValue().value=newValue;
}
}
}
