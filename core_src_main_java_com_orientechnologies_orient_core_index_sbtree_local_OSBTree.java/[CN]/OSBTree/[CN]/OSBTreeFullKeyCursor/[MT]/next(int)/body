{
  if (keysIterator == null)   return null;
  if (keysIterator.hasNext())   return keysIterator.next();
  keysCache.clear();
  if (prefetchSize < 0 || prefetchSize > OGlobalConfiguration.INDEX_CURSOR_PREFETCH_SIZE.getValueAsInteger())   prefetchSize=OGlobalConfiguration.INDEX_CURSOR_PREFETCH_SIZE.getValueAsInteger();
  if (prefetchSize == 0)   prefetchSize=1;
  acquireSharedLock();
  try {
    while (keysCache.size() < prefetchSize) {
      if (pageIndex == -1)       break;
      if (pageIndex >= diskCache.getFilledUpTo(fileId)) {
        pageIndex=-1;
        break;
      }
      final OCacheEntry cacheEntry=diskCache.load(fileId,pageIndex,false);
      final OCachePointer pointer=cacheEntry.getCachePointer();
      try {
        final OSBTreeBucket<K,V> bucket=new OSBTreeBucket<K,V>(pointer.getDataPointer(),keySerializer,keyTypes,valueSerializer,ODurablePage.TrackMode.NONE);
        if (itemIndex >= bucket.size()) {
          pageIndex=bucket.getRightSibling();
          itemIndex=0;
          continue;
        }
        final Map.Entry<K,V> entry=convertToMapEntry(bucket.getEntry(itemIndex));
        itemIndex++;
        keysCache.add(entry.getKey());
      }
  finally {
        diskCache.release(cacheEntry);
      }
    }
  }
 catch (  IOException e) {
    throw new OSBTreeException("Error during element iteration",e);
  }
 finally {
    releaseSharedLock();
  }
  if (keysCache.isEmpty()) {
    keysCache=null;
    return null;
  }
  keysIterator=keysCache.iterator();
  return keysIterator.next();
}
