{
  try {
    if (requestType != OChannelBinaryProtocol.REQUEST_DB_REOPEN) {
      if (clientTxId >= 0 && connection == null && (requestType == OChannelBinaryProtocol.REQUEST_DB_OPEN || requestType == OChannelBinaryProtocol.REQUEST_DB_OPEN)) {
        shutdown();
        throw new OIOException("Found unknown session " + clientTxId);
      }
      connection=server.getClientConnectionManager().connect(this);
      connection.getData().sessionId=clientTxId;
      connection.setTokenBytes(null);
      connection.acquire();
    }
 else {
      byte[] bytes=channel.readBytes();
      connection.validateSession(bytes,server.getTokenHandler(),this);
      server.getClientConnectionManager().disconnect(clientTxId);
      connection=server.getClientConnectionManager().reConnect(this,connection.getTokenBytes(),connection.getToken());
      connection.acquire();
      waitDistribuedIsOnline(connection);
      connection.init(server);
      if (connection.getData().serverUser) {
        connection.setServerUser(server.getUser(connection.getData().serverUsername));
      }
    }
  }
 catch (  RuntimeException e) {
    if (connection != null)     server.getClientConnectionManager().disconnect(connection);
    ODatabaseRecordThreadLocal.INSTANCE.remove();
    throw e;
  }
catch (  IOException e) {
    if (connection != null)     server.getClientConnectionManager().disconnect(connection);
    ODatabaseRecordThreadLocal.INSTANCE.remove();
    throw e;
  }
  connection.statsUpdate();
  OServerPluginHelper.invokeHandlerCallbackOnBeforeClientRequest(server,connection,(byte)requestType);
  return connection;
}
