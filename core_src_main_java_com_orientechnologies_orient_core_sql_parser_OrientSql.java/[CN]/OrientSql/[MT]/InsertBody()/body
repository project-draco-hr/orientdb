{
  OInsertBody jjtn000=new OInsertBody(JJTINSERTBODY);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  OIdentifier lastIdentifier;
  OExpression lastExpression;
  List<OExpression> lastExpressionList;
  try {
    if (jj_2_28(3)) {
      jj_consume_token(LPAREN);
      lastIdentifier=Identifier();
      jjtn000.identifierList=new ArrayList<OIdentifier>();
      jjtn000.identifierList.add(lastIdentifier);
      label_12:       while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
          ;
        break;
default :
      jj_la1[91]=jj_gen;
    break label_12;
}
jj_consume_token(COMMA);
lastIdentifier=Identifier();
jjtn000.identifierList.add(lastIdentifier);
}
jj_consume_token(RPAREN);
jj_consume_token(VALUES);
jj_consume_token(LPAREN);
jjtn000.valueExpressions=new ArrayList<List<OExpression>>();
lastExpressionList=new ArrayList<OExpression>();
jjtn000.valueExpressions.add(lastExpressionList);
lastExpression=Expression();
lastExpressionList.add(lastExpression);
label_13: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
  ;
break;
default :
jj_la1[92]=jj_gen;
break label_13;
}
jj_consume_token(COMMA);
lastExpression=Expression();
lastExpressionList.add(lastExpression);
}
jj_consume_token(RPAREN);
label_14: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[93]=jj_gen;
break label_14;
}
jj_consume_token(COMMA);
jj_consume_token(LPAREN);
lastExpressionList=new ArrayList<OExpression>();
jjtn000.valueExpressions.add(lastExpressionList);
lastExpression=Expression();
lastExpressionList.add(lastExpression);
label_15: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[94]=jj_gen;
break label_15;
}
jj_consume_token(COMMA);
lastExpression=Expression();
lastExpressionList.add(lastExpression);
}
jj_consume_token(RPAREN);
}
}
 else if (jj_2_29(3)) {
jj_consume_token(SET);
jjtn000.setExpressions=new ArrayList<OInsertSetExpression>();
OInsertSetExpression lastSetExpr=new OInsertSetExpression();
jjtn000.setExpressions.add(lastSetExpr);
lastSetExpr.left=Identifier();
jj_consume_token(EQ);
lastSetExpr.right=Expression();
label_16: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[95]=jj_gen;
break label_16;
}
jj_consume_token(COMMA);
lastSetExpr=new OInsertSetExpression();
jjtn000.setExpressions.add(lastSetExpr);
lastSetExpr.left=Identifier();
jj_consume_token(EQ);
lastSetExpr.right=Expression();
}
}
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SELECT:
case FROM:
case LPAREN:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case FROM:
jj_consume_token(FROM);
break;
default :
jj_la1[96]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SELECT:
jjtn000.selectStatement=SelectStatement();
break;
default :
jj_la1[97]=jj_gen;
if (jj_2_27(2)) {
jj_consume_token(LPAREN);
jjtn000.selectStatement=SelectStatement();
jjtn000.selectInParentheses=true;
jj_consume_token(RPAREN);
}
 else {
jj_consume_token(-1);
throw new ParseException();
}
}
break;
case CONTENT:
jj_consume_token(CONTENT);
jjtn000.content=Json();
break;
default :
jj_la1[98]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case RETURN:
jj_consume_token(RETURN);
jjtn000.returnProjection=Projection();
break;
default :
jj_la1[99]=jj_gen;
;
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
