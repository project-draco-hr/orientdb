{
  if (beginIndex < 0)   return beginIndex;
  char stringBeginChar=' ';
  boolean encodeMode=false;
  int insideParenthesis=0;
  int insideList=0;
  int insideSet=0;
  int insideMap=0;
  int insideLinkPart=0;
  int insideBag=0;
  final int max=endIndex > -1 ? endIndex + 1 : iSource.length;
  iBuffer.ensureCapacity(max);
  int i=beginIndex;
  for (; i < max; ++i) {
    final char c=iSource[i];
    if (!isCharPresent(c,iJumpChars))     break;
  }
  for (; i < max; ++i) {
    final char c=iSource[i];
    if (stringBeginChar == ' ') {
      if (iConsiderBraces) {
        if (c == LIST_BEGIN) {
          if (i < iMinPosSeparatorAreValid || insideParenthesis > 0 || insideList > 0 || !isCharPresent(c,iSeparator))           insideList++;
        }
 else         if (c == LIST_END) {
          if (i < iMinPosSeparatorAreValid || insideParenthesis > 0 || insideList > 0 || !isCharPresent(c,iSeparator)) {
            if (insideList == 0)             throw new OSerializationException("Found invalid " + LIST_END + " character at position "+ i+ " of text "+ new String(iSource)+ ". Ensure it is opened and closed correctly.");
            insideList--;
          }
        }
 else         if (c == EMBEDDED_BEGIN) {
          insideParenthesis++;
        }
 else         if (c == EMBEDDED_END) {
          if (insideParenthesis == 0)           throw new OSerializationException("Found invalid " + EMBEDDED_END + " character at position "+ i+ " of text "+ new String(iSource)+ ". Ensure it is opened and closed correctly.");
          insideParenthesis--;
        }
 else         if (c == MAP_BEGIN) {
          insideMap++;
        }
 else         if (c == MAP_END) {
          if (i < iMinPosSeparatorAreValid || !isCharPresent(c,iSeparator)) {
            if (insideMap == 0)             throw new OSerializationException("Found invalid " + MAP_END + " character at position "+ i+ " of text "+ new String(iSource)+ ". Ensure it is opened and closed correctly.");
            insideMap--;
          }
        }
 else         if (c == LINK)         insideLinkPart=1;
 else         if (insideLinkPart == 1 && c == ORID.SEPARATOR)         insideLinkPart=2;
 else {
          if (iConsiderSets)           if (c == SET_BEGIN)           insideSet++;
 else           if (c == SET_END) {
            if (i < iMinPosSeparatorAreValid || !isCharPresent(c,iSeparator)) {
              if (insideSet == 0)               throw new OSerializationException("Found invalid " + SET_END + " character at position "+ i+ " of text "+ new String(iSource)+ ". Ensure it is opened and closed correctly.");
              insideSet--;
            }
          }
          if (considerBags) {
            if (c == BAG_BEGIN)             insideBag++;
 else             if (c == BAG_END)             if (!isCharPresent(c,iSeparator)) {
              if (insideBag == 0)               throw new OSerializationException("Found invalid " + BAG_BEGIN + " character. Ensure it is opened and closed correctly.");
              insideBag--;
            }
          }
        }
      }
      if (insideLinkPart > 0 && c != '-' && !Character.isDigit(c) && c != ORID.SEPARATOR && c != LINK)       insideLinkPart=0;
      if ((c == '"' || iStringSeparatorExtended && c == '\'') && !encodeMode) {
        stringBeginChar=c;
      }
      if (insideParenthesis == 0 && insideList == 0 && insideSet == 0 && insideMap == 0 && insideLinkPart == 0 && insideBag == 0) {
        if (i >= iMinPosSeparatorAreValid && isCharPresent(c,iSeparator)) {
          return i + 1;
        }
      }
      if (iJumpChars.length > 0)       if (i >= iMinPosSeparatorAreValid && isCharPresent(c,iJumpChars))       continue;
    }
 else {
      if ((c == '"' || iStringSeparatorExtended && c == '\'') && !encodeMode) {
        if (stringBeginChar == c) {
          stringBeginChar=' ';
        }
      }
    }
    if (c == '\\' && !encodeMode) {
      final char nextChar=iSource[i + 1];
      if (nextChar == 'u' && iUnicode) {
        i=OStringParser.readUnicode(iSource,i + 2,iBuffer);
        continue;
      }
 else       if (nextChar == 'n') {
        iBuffer.append("\n");
        i++;
        continue;
      }
 else       if (nextChar == 'r') {
        iBuffer.append("\r");
        i++;
        continue;
      }
 else       if (nextChar == 't') {
        iBuffer.append("\t");
        i++;
        continue;
      }
 else       if (nextChar == 'f') {
        iBuffer.append("\f");
        i++;
        continue;
      }
 else       encodeMode=true;
    }
 else     encodeMode=false;
    if (c != '\\' && encodeMode) {
      encodeMode=false;
    }
    iBuffer.append(c);
  }
  return -1;
}
