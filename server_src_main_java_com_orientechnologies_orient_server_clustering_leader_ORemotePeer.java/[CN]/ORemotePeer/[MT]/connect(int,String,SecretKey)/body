{
  configuration.setValue(OGlobalConfiguration.NETWORK_SOCKET_TIMEOUT,iTimeout);
  channel=new OChannelBinaryClient(networkAddress,networkPort,configuration,OClusterProtocol.CURRENT_PROTOCOL_VERSION);
  OLogManager.instance().warn(this,"Cluster <%s>: received joining request from peer node %s:%d. Checking authorizations...",iClusterName,networkAddress,networkPort);
  channel.writeByte(OClusterProtocol.REQUEST_LEADER2PEER_CONNECT);
  channel.writeInt(sessionId);
  final ODocument doc=new ODocument();
  doc.field("clusterName",iClusterName);
  doc.field("clusterKey",iSecurityKey.getEncoded());
  doc.field("leaderNodeAddress",leader.getManager().getId());
  doc.field("leaderNodeRunningSince",leader.getManager().getRunningSince());
  channel.writeBytes(doc.toStream());
  channel.flush();
  final ODocument cfg;
  beginResponse();
  try {
    final byte connectedAsPeer=channel.readByte();
    if (connectedAsPeer == 0) {
      OLogManager.instance().warn(this,"Cluster <%s>: remote server node %s:%d has refused the connection because it's the new Leader. Switching to be a Peer Node...",leader.getManager().getConfig().name,networkAddress,networkPort);
      leader.getManager().becomePeer(null);
      disconnect();
      return false;
    }
    OLogManager.instance().info(this,"Cluster <%s>: joined peer node %s:%d",iClusterName,networkAddress,networkPort);
    cfg=new ODocument().fromStream(channel.readBytes());
  }
  finally {
    endResponse();
  }
  final ODocument answer=leader.updatePeerDatabases(id,cfg);
  channel.writeBytes(answer.toStream());
  channel.flush();
  setStatus(STATUS.CONNECTED);
  serviceThread=new OAsynchChannelServiceThread(new ODistributedRemoteAsynchEventListener(leader.getManager(),null,id),channel,"OrientDB <- Asynch Node/" + id);
  return true;
}
