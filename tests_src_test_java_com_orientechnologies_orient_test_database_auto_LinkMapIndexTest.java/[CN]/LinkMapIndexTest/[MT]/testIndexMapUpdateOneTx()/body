{
  if (database.getURL().startsWith("plocal:"))   return;
  final ODocument docOne=new ODocument();
  docOne.save();
  final ODocument docTwo=new ODocument();
  docTwo.save();
  database.begin();
  try {
    final Map<String,ORID> mapTwo=new HashMap<String,ORID>();
    mapTwo.put("key3",docOne.getIdentity());
    mapTwo.put("key2",docTwo.getIdentity());
    final ODocument document=new ODocument("LinkMapIndexTestClass");
    document.field("linkMap",mapTwo);
    document.save();
    database.commit();
  }
 catch (  Exception e) {
    database.rollback();
    throw e;
  }
  final List<ODocument> resultByKey=database.command(new OCommandSQL("select key, rid from index:mapIndexTestKey")).execute();
  Assert.assertNotNull(resultByKey);
  Assert.assertEquals(resultByKey.size(),2);
  for (  ODocument d : resultByKey) {
    Assert.assertTrue(d.containsField("key"));
    Assert.assertTrue(d.containsField("rid"));
    if (!d.field("key").equals("key2") && !d.field("key").equals("key3")) {
      Assert.fail("Unknown key found: " + d.field("key"));
    }
  }
  final List<ODocument> resultByValue=database.command(new OCommandSQL("select key, rid from index:mapIndexTestValue")).execute();
  Assert.assertNotNull(resultByValue);
  Assert.assertEquals(resultByValue.size(),2);
  for (  ODocument d : resultByValue) {
    Assert.assertTrue(d.containsField("key"));
    Assert.assertTrue(d.containsField("rid"));
    if (!d.field("key").equals(docOne.getIdentity()) && !d.field("key").equals(docTwo.getIdentity())) {
      Assert.fail("Unknown key found: " + d.field("key"));
    }
  }
}
