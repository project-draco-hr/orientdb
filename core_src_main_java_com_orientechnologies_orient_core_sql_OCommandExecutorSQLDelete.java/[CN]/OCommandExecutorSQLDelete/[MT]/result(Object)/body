{
  final ORecordAbstract record=(ORecordAbstract)iRecord;
  try {
    if (record.getIdentity().isValid()) {
      if (returning.equalsIgnoreCase("BEFORE"))       allDeletedRecords.add(record);
      record.getRecordVersion().disable();
      if (!unsafe && record instanceof ODocument) {
        final OClass cls=((ODocument)record).getSchemaClass();
        if (cls != null) {
          if (cls.isSubClassOf("V"))           throw new OCommandExecutionException("'DELETE' command cannot delete Vertices. Use 'DELETE VERTEX' command instead, or apply the 'UNSAFE' keyword to force it");
 else           if (cls.isSubClassOf("E"))           throw new OCommandExecutionException("'DELETE' command cannot delete Edges. Use 'DELETE EDGE' command instead, or apply the 'UNSAFE' keyword to force it");
 else           record.delete();
        }
 else         record.delete();
      }
 else       record.delete();
      recordCount++;
      return true;
    }
    return false;
  }
  finally {
    if (lockStrategy.equalsIgnoreCase("RECORD"))     ((OAbstractPaginatedStorage)getDatabase().getStorage()).releaseWriteLock(record.getIdentity());
  }
}
