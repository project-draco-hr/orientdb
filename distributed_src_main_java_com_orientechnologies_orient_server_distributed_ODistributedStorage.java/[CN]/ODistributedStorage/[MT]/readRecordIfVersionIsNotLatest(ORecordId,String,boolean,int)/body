{
  try {
    final String clusterName=getClusterNameByRID(rid);
    final ODistributedConfiguration dbCfg=distributedConfiguration;
    final List<String> nodes=dbCfg.getServers(clusterName,null);
    final int availableNodes=nodes.size();
    if (nodes.isEmpty() || nodes.contains(dManager.getLocalNodeName()) && dbCfg.getReadQuorum(clusterName,availableNodes) <= 1) {
      return (OStorageOperationResult<ORawBuffer>)OScenarioThreadLocal.executeAsDistributed(new Callable(){
        @Override public Object call() throws Exception {
          return wrapped.readRecordIfVersionIsNotLatest(rid,fetchPlan,ignoreCache,recordVersion);
        }
      }
);
    }
    final Object result=dManager.sendRequest(getName(),Collections.singleton(clusterName),nodes,new OReadRecordIfNotLatestTask(rid,recordVersion),dManager.getNextMessageIdCounter(),EXECUTION_MODE.RESPONSE,null,null).getPayload();
    if (result instanceof ONeedRetryException)     throw (ONeedRetryException)result;
 else     if (result instanceof Exception)     throw OException.wrapException(new ODistributedException("Error on execution distributed READ_RECORD"),(Exception)result);
    return new OStorageOperationResult<ORawBuffer>((ORawBuffer)result);
  }
 catch (  ONeedRetryException e) {
    throw e;
  }
catch (  HazelcastInstanceNotActiveException e) {
    throw new OOfflineNodeException("Hazelcast instance is not available");
  }
catch (  HazelcastException e) {
    throw new OOfflineNodeException("Hazelcast instance is not available");
  }
catch (  Exception e) {
    handleDistributedException("Cannot route READ_RECORD operation for %s to the distributed node",e,rid);
    return null;
  }
}
