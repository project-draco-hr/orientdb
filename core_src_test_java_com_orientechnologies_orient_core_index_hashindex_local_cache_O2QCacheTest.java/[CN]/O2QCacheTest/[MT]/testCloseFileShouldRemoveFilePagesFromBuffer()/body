{
  long fileId=buffer.openFile(fileConfiguration,".tst");
  long[] pointers;
  pointers=new long[4];
  for (int i=0; i < 4; i++) {
    pointers[i]=buffer.load(fileId,i);
    buffer.markDirty(fileId,i);
    directMemory.set(pointers[i] + systemOffset,new byte[]{(byte)i,1,2,seed,4,5,6,(byte)i},0,8);
    buffer.release(fileId,i);
  }
  LRUList am=buffer.getAm();
  LRUList a1in=buffer.getA1in();
  LRUList a1out=buffer.getA1out();
  Assert.assertEquals(am.size(),0);
  Assert.assertEquals(a1out.size(),0);
  for (int i=0; i < 4; i++) {
    LRUEntry entry=generateDirtyEntry(fileId,i,pointers[i],new OLogSequenceNumber(0,0));
    Assert.assertEquals(a1in.get(entry.fileId,entry.pageIndex),entry);
  }
  Assert.assertEquals(buffer.getFilledUpTo(fileId),4);
  buffer.closeFile(fileId);
  Assert.assertEquals(buffer.getA1out().size(),0);
  Assert.assertEquals(buffer.getA1in().size(),0);
  Assert.assertEquals(buffer.getAm().size(),0);
}
