{
  if (availableNodes.isEmpty())   return false;
  if (!(iClass.getClusterSelection() instanceof OLocalClusterStrategy))   ((OClassImpl)iClass).setClusterSelectionInternal(new OLocalClusterStrategy(manager,iDatabase.getName(),iClass));
  if (iClass.isAbstract())   return false;
  final Set<String> clustersOfClassToReassign=new HashSet<String>();
  final int[] clusterIds=iClass.getClusterIds();
  final Set<String> clusterNames=new HashSet<String>(clusterIds.length);
  for (  int clusterId : clusterIds) {
    final String clusterName=iDatabase.getClusterNameById(clusterId);
    clusterNames.add(clusterName);
    if (clustersToReassign.remove(clusterName))     clustersOfClassToReassign.add(clusterName);
  }
  if (!rebalance && clustersOfClassToReassign.isEmpty())   return false;
  final Map<String,String> clusterToAssignOwnership=reassignClusters(cfg,availableNodes,clustersOfClassToReassign,clusterNames,rebalance);
  boolean cfgChanged=!clusterToAssignOwnership.isEmpty();
  for (  Map.Entry<String,String> entry : clusterToAssignOwnership.entrySet()) {
    final String cluster=entry.getKey();
    final String node=entry.getValue();
    assignClusterOwnership(iDatabase,cfg,iClass,cluster,node);
  }
  clustersToReassign.addAll(clustersOfClassToReassign);
  final Collection<String> allClusterNames=iDatabase.getClusterNames();
  for (  String server : availableNodes) {
    final List<String> ownedClusters=cfg.getOwnedClustersByServer(clusterNames,server);
    if (ownedClusters.isEmpty()) {
      String newClusterName;
      for (int i=0; ; ++i) {
        newClusterName=iClass.getName().toLowerCase() + "_" + i;
        if (!allClusterNames.contains(newClusterName))         break;
      }
      ODistributedServerLog.info(this,manager.getLocalNodeName(),null,ODistributedServerLog.DIRECTION.NONE,"Class '%s', creation of new local cluster '%s' (id=%d)",iClass,newClusterName,iDatabase.getClusterIdByName(newClusterName));
      final OScenarioThreadLocal.RUN_MODE currentDistributedMode=OScenarioThreadLocal.INSTANCE.get();
      if (currentDistributedMode != OScenarioThreadLocal.RUN_MODE.DEFAULT)       OScenarioThreadLocal.INSTANCE.set(OScenarioThreadLocal.RUN_MODE.DEFAULT);
      try {
        iClass.addCluster(newClusterName);
      }
 catch (      OCommandSQLParsingException e) {
        if (!e.getMessage().endsWith("already exists"))         throw e;
      }
catch (      Exception e) {
        ODistributedServerLog.error(this,manager.getLocalNodeName(),null,ODistributedServerLog.DIRECTION.NONE,"Error on creating cluster '%s' in class '%s': ",newClusterName,iClass,e);
        throw OException.wrapException(new ODistributedException("Error on creating cluster '" + newClusterName + "' in class '"+ iClass+ "'"),e);
      }
 finally {
        if (currentDistributedMode != OScenarioThreadLocal.RUN_MODE.DEFAULT)         OScenarioThreadLocal.INSTANCE.set(OScenarioThreadLocal.RUN_MODE.RUNNING_DISTRIBUTED);
      }
      assignClusterOwnership(iDatabase,cfg,iClass,newClusterName,server);
      cfgChanged=true;
    }
  }
  return cfgChanged;
}
