{
  final OClass cls=parsedTarget.getTargetClasses().keySet().iterator().next();
  final ODatabaseRecordInternal database=getDatabase();
  database.checkSecurity(ODatabaseSecurityResources.CLASS,ORole.PERMISSION_READ,cls.getName().toLowerCase());
  OStorage.LOCKING_STRATEGY locking=context != null && context.getVariable("$locking") != null ? (OStorage.LOCKING_STRATEGY)context.getVariable("$locking") : OStorage.LOCKING_STRATEGY.DEFAULT;
  final ORID[] range=getRange();
  if (iAscendentOrder)   target=new ORecordIteratorClass<ORecord>(database,database,cls.getName(),true,request.isUseCache(),false,locking).setRange(range[0],range[1]);
 else   target=new ORecordIteratorClassDescendentOrder<ORecord>(database,database,cls.getName(),true,request.isUseCache(),false,locking).setRange(range[0],range[1]);
}
