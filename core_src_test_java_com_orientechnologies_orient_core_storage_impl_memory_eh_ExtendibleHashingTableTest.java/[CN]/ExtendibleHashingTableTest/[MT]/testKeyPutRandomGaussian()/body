{
  OExtendibleHashingTable extendibleHashingTable;
  MersenneTwisterFast random;
  List<Long> keys=new ArrayList<Long>();
  long i=0;
  while (i < MAX_SEED) {
    extendibleHashingTable=new OExtendibleHashingTable(3,4);
    random=new MersenneTwisterFast(i);
    keys.clear();
    while (keys.size() < KEYS_COUNT) {
      long key=(long)(random.nextGaussian() * Long.MAX_VALUE / 2 + Long.MAX_VALUE);
      if (key < 0)       continue;
      final OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionLong(key));
      if (extendibleHashingTable.put(position)) {
        keys.add(key);
        Assert.assertTrue(extendibleHashingTable.contains(position.clusterPosition),"key " + key);
      }
    }
    for (    long key : keys) {
      final OClusterPosition position=new OClusterPositionLong(key);
      Assert.assertTrue(extendibleHashingTable.contains(position),"" + key);
    }
    i++;
  }
}
