{
  OOrderBy jjtn000=new OOrderBy(JJTORDERBY);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  jjtn000.items=new java.util.ArrayList();
  OOrderByItem lastItem;
  OIdentifier lastIdentifier;
  ORid lastRid;
  Token lastToken;
  try {
    jj_consume_token(ORDER);
    jj_consume_token(BY);
    lastItem=new OOrderByItem();
    jjtn000.items.add(lastItem);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case IN:
case KEY:
case IDENTIFIER:
      lastIdentifier=Identifier();
    lastItem.alias=lastIdentifier.toString();
  break;
case INTEGER_LITERAL:
case MINUS:
case 149:
lastItem.rid=Rid();
break;
case RECORD_ATTRIBUTE:
lastToken=jj_consume_token(RECORD_ATTRIBUTE);
lastItem.recordAttr=lastToken.image;
break;
default :
jj_la1[135]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ASC:
case DESC:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DESC:
jj_consume_token(DESC);
lastItem.type=OOrderByItem.DESC;
break;
case ASC:
jj_consume_token(ASC);
lastItem.type=OOrderByItem.ASC;
break;
default :
jj_la1[136]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[137]=jj_gen;
;
}
label_30: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[138]=jj_gen;
break label_30;
}
jj_consume_token(COMMA);
lastItem=new OOrderByItem();
jjtn000.items.add(lastItem);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case IN:
case KEY:
case IDENTIFIER:
lastIdentifier=Identifier();
lastItem.alias=lastIdentifier.toString();
break;
case INTEGER_LITERAL:
case MINUS:
case 149:
lastItem.rid=Rid();
break;
case RECORD_ATTRIBUTE:
lastToken=jj_consume_token(RECORD_ATTRIBUTE);
lastItem.recordAttr=lastToken.image;
break;
default :
jj_la1[139]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ASC:
case DESC:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DESC:
jj_consume_token(DESC);
lastItem.type=OOrderByItem.DESC;
break;
case ASC:
jj_consume_token(ASC);
lastItem.type=OOrderByItem.ASC;
break;
default :
jj_la1[140]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[141]=jj_gen;
;
}
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
