{
  long fileId=readBuffer.addFile(fileName,writeBuffer);
  OCacheEntry[] entries=new OCacheEntry[4];
  for (int i=0; i < 4; i++) {
    entries[i]=readBuffer.load(fileId,i,false,writeBuffer,1,storagePerformanceStatistic);
    if (entries[i] == null) {
      entries[i]=readBuffer.allocateNewPage(fileId,writeBuffer,storagePerformanceStatistic);
      Assert.assertEquals(entries[i].getPageIndex(),i);
    }
    entries[i].getCachePointer().acquireExclusiveLock();
    entries[i].markDirty();
    entries[i].getCachePointer().getDataPointer().set(systemOffset + OWOWCache.PAGE_PADDING,new byte[]{(byte)i,1,2,seed,4,5,6,(byte)i},0,8);
    entries[i].getCachePointer().releaseExclusiveLock();
    readBuffer.release(entries[i],writeBuffer,storagePerformanceStatistic);
  }
  LRUList am=readBuffer.getAm();
  LRUList a1in=readBuffer.getA1in();
  LRUList a1out=readBuffer.getA1out();
  Assert.assertEquals(am.size(),0);
  Assert.assertEquals(a1out.size(),0);
  for (int i=0; i < 4; i++) {
    OCacheEntry entry=generateEntry(fileId,i,entries[i].getCachePointer().getDataPointer(),false,new OLogSequenceNumber(0,0));
    Assert.assertEquals(a1in.get(entry.getFileId(),entry.getPageIndex()),entry);
  }
  Assert.assertEquals(writeBuffer.getFilledUpTo(fileId),4);
  readBuffer.closeFile(fileId,true,writeBuffer);
  for (int i=0; i < 4; i++) {
    assertFile(i,new byte[]{(byte)i,1,2,seed,4,5,6,(byte)i},new OLogSequenceNumber(0,0));
  }
}
