{
  final Set<Integer> keys=new HashSet<Integer>();
  final MersenneTwisterFast random=new MersenneTwisterFast();
  while (keys.size() < KEYS_COUNT) {
    int key=random.nextInt(Integer.MAX_VALUE);
    sbTree.put(key,new ORecordId(key % 32000,OClusterPositionFactory.INSTANCE.valueOf(key)));
    keys.add(key);
    Assert.assertEquals(sbTree.get(key),new ORecordId(key % 32000,OClusterPositionFactory.INSTANCE.valueOf(key)));
  }
  for (  int key : keys)   Assert.assertEquals(sbTree.get(key),new ORecordId(key % 32000,OClusterPositionFactory.INSTANCE.valueOf(key)));
}
