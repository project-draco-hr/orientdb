{
  listener.onMessage("\n\nImporting indexes ...");
  OIndexManagerProxy indexManager=database.getMetadata().getIndexManager();
  indexManager.reload();
  jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);
  int n=0;
  while (jsonReader.lastChar() != ']') {
    jsonReader.readNext(OJSONReader.NEXT_OBJ_IN_ARRAY);
    if (jsonReader.lastChar() == ']') {
      break;
    }
    String blueprintsIndexClass=null;
    String indexName=null;
    String indexType=null;
    String indexAlgorithm=null;
    Set<String> clustersToIndex=new HashSet<String>();
    OIndexDefinition indexDefinition=null;
    ODocument metadata=null;
    Map<String,String> engineProperties=null;
    while (jsonReader.lastChar() != '}') {
      final String fieldName=jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);
      if (fieldName.equals("name"))       indexName=jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);
 else       if (fieldName.equals("type"))       indexType=jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);
 else       if (fieldName.equals("algorithm"))       indexAlgorithm=jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);
 else       if (fieldName.equals("clustersToIndex"))       clustersToIndex=importClustersToIndex();
 else       if (fieldName.equals("definition")) {
        indexDefinition=importIndexDefinition();
        jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);
      }
 else       if (fieldName.equals("metadata")) {
        final String jsonMetadata=jsonReader.readString(OJSONReader.END_OBJECT,true);
        metadata=new ODocument().fromJSON(jsonMetadata);
        jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);
      }
 else       if (fieldName.equals("engineProperties")) {
        final String jsonEngineProperties=jsonReader.readString(OJSONReader.END_OBJECT,true);
        Map<String,Object> map=new ODocument().fromJSON(jsonEngineProperties).toMap();
        if (map != null) {
          engineProperties=new HashMap<String,String>(map.size());
          for (          Entry<String,Object> entry : map.entrySet()) {
            map.put(entry.getKey(),entry.getValue());
          }
        }
        jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);
      }
 else       if (fieldName.equals("blueprintsIndexClass"))       blueprintsIndexClass=jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);
    }
    if (indexName == null)     throw new IllegalArgumentException("Index name is missing");
    jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
    if (!indexName.equalsIgnoreCase(EXPORT_IMPORT_MAP_NAME)) {
      listener.onMessage("\n- Index '" + indexName + "'...");
      indexManager.dropIndex(indexName);
      indexesToRebuild.remove(indexName.toLowerCase());
      List<Integer> clusterIds=new ArrayList<Integer>();
      for (      final String clusterName : clustersToIndex) {
        int id=database.getClusterIdByName(clusterName);
        if (id != -1)         clusterIds.add(id);
 else         listener.onMessage(String.format("found not existent cluster '%s' in index '%s' configuration, skipping",clusterName,indexName));
      }
      int[] clusterIdsToIndex=new int[clusterIds.size()];
      int i=0;
      for (      Integer clusterId : clusterIds) {
        clusterIdsToIndex[i]=clusterId;
        i++;
      }
      final OIndex index=indexManager.createIndex(indexName,indexType,indexDefinition,clusterIdsToIndex,null,metadata,indexAlgorithm);
      if (blueprintsIndexClass != null) {
        ODocument configuration=index.getConfiguration();
        configuration.field("blueprintsIndexClass",blueprintsIndexClass);
        indexManager.save();
      }
      n++;
      listener.onMessage("OK");
    }
  }
  listener.onMessage("\nDone. Created " + n + " indexes.");
  jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);
}
