{
  System.out.println("Starting test against " + serverInstance.size() + " server nodes...");
  try {
    if (startupNodesInSequence) {
      for (      final ServerRun server : serverInstance) {
        banner("STARTING SERVER -> " + server.getServerId() + "...");
        server.startServer(getDistributedServerConfiguration(server));
        if (delayServerStartup > 0)         try {
          Thread.sleep(delayServerStartup * serverInstance.size());
        }
 catch (        InterruptedException e) {
        }
        onServerStarted(server);
      }
    }
 else {
      for (      final ServerRun server : serverInstance) {
        final Thread thread=new Thread(new Runnable(){
          @Override public void run(){
            banner("STARTING SERVER -> " + server.getServerId() + "...");
            try {
              onServerStarting(server);
              server.startServer(getDistributedServerConfiguration(server));
              onServerStarted(server);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
);
        thread.start();
      }
    }
    if (delayServerAlign > 0)     try {
      System.out.println("Server started, waiting for synchronization (" + (delayServerAlign * serverInstance.size() / 1000) + "secs)...");
      Thread.sleep(delayServerAlign * serverInstance.size());
    }
 catch (    InterruptedException e) {
    }
    for (    ServerRun server : serverInstance) {
      final ODistributedServerManager mgr=server.getServerInstance().getDistributedManager();
      Assert.assertNotNull(mgr);
      final ODocument cfg=mgr.getClusterConfiguration();
      Assert.assertNotNull(cfg);
    }
    banner("Executing test...");
    try {
      executeTest();
    }
  finally {
      onAfterExecution();
    }
  }
 catch (  Exception e) {
    System.out.println("ERROR: ");
    e.printStackTrace();
    OLogManager.instance().flush();
    throw e;
  }
 finally {
    banner("Test finished");
    OLogManager.instance().flush();
    banner("Shutting down nodes...");
    for (    ServerRun server : serverInstance) {
      log("Shutting down node " + server.getServerId() + "...");
      if (terminateAtShutdown)       server.terminateServer();
 else       server.shutdownServer();
    }
    onTestEnded();
    banner("Terminate HZ...");
    for (    HazelcastInstance in : Hazelcast.getAllHazelcastInstances()) {
      if (terminateAtShutdown)       in.getLifecycleService().terminate();
 else       in.shutdown();
    }
    banner("Clean server directories...");
    deleteServers();
  }
}
