{
  resetLastValidBackup();
  if (OScenarioThreadLocal.INSTANCE.get() == RUN_MODE.RUNNING_DISTRIBUTED) {
    return wrapped.createRecord(iRecordId,iContent,iRecordVersion,iRecordType,iMode,iCallback);
  }
  try {
    String clusterName=getClusterNameByRID(iRecordId);
    int clusterId=iRecordId.getClusterId();
    if (clusterId == ORID.CLUSTER_ID_INVALID)     throw new IllegalArgumentException("Cluster not valid");
    final String localNodeName=dManager.getLocalNodeName();
    final ODistributedConfiguration dbCfg=dManager.getDatabaseConfiguration(getName());
    checkNodeIsMaster(localNodeName,dbCfg);
    List<String> nodes=dbCfg.getServers(clusterName,null);
    if (nodes.isEmpty()) {
      return (OStorageOperationResult<OPhysicalPosition>)ODistributedAbstractPlugin.runInDistributedMode(new Callable(){
        @Override public Object call() throws Exception {
          return wrapped.createRecord(iRecordId,iContent,iRecordVersion,iRecordType,iMode,iCallback);
        }
      }
);
    }
    String masterNode=nodes.get(0);
    if (!masterNode.equals(localNodeName)) {
      final OCluster cl=getClusterByName(clusterName);
      final ODatabaseDocumentInternal db=ODatabaseRecordThreadLocal.INSTANCE.get();
      final OClass cls=db.getMetadata().getSchema().getClassByClusterId(cl.getId());
      String newClusterName=null;
      if (cls != null) {
        OClusterSelectionStrategy clSel=cls.getClusterSelection();
        if (!(clSel instanceof OLocalClusterStrategy)) {
          dManager.propagateSchemaChanges(db);
          clSel=cls.getClusterSelection();
        }
        OLogManager.instance().warn(this,"Local node '" + localNodeName + "' is not the master for cluster '"+ clusterName+ "' (it is '"+ masterNode+ "'). Reloading distributed configuration for database '"+ getName()+ "'");
        ((OLocalClusterStrategy)clSel).readConfiguration();
        newClusterName=getPhysicalClusterNameById(clSel.getCluster(cls,null));
        nodes=dbCfg.getServers(newClusterName,null);
        masterNode=nodes.get(0);
      }
      if (!masterNode.equals(localNodeName))       throw new ODistributedException("Error on inserting into cluster '" + clusterName + "' where local node '"+ localNodeName+ "' is not the master of it, but it is '"+ masterNode+ "'");
      OLogManager.instance().warn(this,"Local node '" + localNodeName + "' is not the master for cluster '"+ clusterName+ "' (it is '"+ masterNode+ "'). Switching to a valid cluster of the same class: '"+ newClusterName+ "'");
      clusterName=newClusterName;
      iRecordId.clusterId=db.getClusterIdByName(newClusterName);
    }
    nodes.remove(localNodeName);
    dManager.getAvailableNodes(nodes,getName());
    final OStorageOperationResult<OPhysicalPosition> localResult;
    sequentialRIDLock.writeLock().lock();
    try {
      clusterLocks[clusterId % clusterLocks.length].lock();
      try {
        localResult=(OStorageOperationResult<OPhysicalPosition>)ODistributedAbstractPlugin.runInDistributedMode(new Callable(){
          @Override public Object call() throws Exception {
            final ODatabaseDocumentInternal db=ODatabaseRecordThreadLocal.INSTANCE.get();
            final ORecord record=Orient.instance().getRecordFactoryManager().newInstance(iRecordType);
            ORecordInternal.fill(record,iRecordId,iRecordVersion,iContent,true);
            db.save(record);
            final OPhysicalPosition ppos=new OPhysicalPosition(iRecordType);
            ppos.clusterPosition=record.getIdentity().getClusterPosition();
            ppos.recordVersion=record.getVersion();
            return new OStorageOperationResult<OPhysicalPosition>(ppos);
          }
        }
);
        iRecordId.clusterPosition=localResult.getResult().clusterPosition;
        final OPlaceholder localPlaceholder=new OPlaceholder(iRecordId,localResult.getResult().recordVersion);
        if (!nodes.isEmpty()) {
          Boolean executionModeSynch=dbCfg.isExecutionModeSynchronous(clusterName);
          if (executionModeSynch == null)           executionModeSynch=iMode == 0;
          if (executionModeSynch) {
            final Object masterResult=dManager.sendRequest(getName(),Collections.singleton(clusterName),nodes,new OCreateRecordTask(iRecordId,iContent,iRecordVersion,iRecordType),EXECUTION_MODE.RESPONSE,localPlaceholder);
            if (masterResult != null) {
              if (masterResult instanceof ONeedRetryException)               throw (ONeedRetryException)masterResult;
 else               if (masterResult instanceof Exception)               throw OException.wrapException(new ODistributedException("Error on execution distributed CREATE_RECORD"),(Exception)masterResult);
              final OPlaceholder masterPlaceholder=(OPlaceholder)masterResult;
              iRecordId.copyFrom(masterPlaceholder.getIdentity());
              return new OStorageOperationResult<OPhysicalPosition>(new OPhysicalPosition(masterPlaceholder.getIdentity().getClusterPosition(),masterPlaceholder.getVersion()));
            }
          }
 else {
            asynchronousExecution(new OAsynchDistributedOperation(getName(),Collections.singleton(clusterName),nodes,new OCreateRecordTask(iRecordId,iContent,iRecordVersion,iRecordType),null,localPlaceholder));
          }
        }
      }
  finally {
        clusterLocks[clusterId % clusterLocks.length].unlock();
      }
    }
  finally {
      sequentialRIDLock.writeLock().unlock();
    }
    return localResult;
  }
 catch (  ONeedRetryException e) {
    throw e;
  }
catch (  Exception e) {
    handleDistributedException("Cannot route CREATE_RECORD operation for %s to the distributed node",e,iRecordId);
    return null;
  }
}
