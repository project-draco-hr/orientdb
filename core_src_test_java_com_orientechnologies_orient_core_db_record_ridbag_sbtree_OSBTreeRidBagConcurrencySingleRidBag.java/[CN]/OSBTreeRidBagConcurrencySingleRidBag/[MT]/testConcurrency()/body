{
  ODatabaseDocumentTx db=new ODatabaseDocumentTx(URL);
  if (db.exists()) {
    db.open("admin","admin");
    db.drop();
  }
  db.create();
  db.declareIntent(new OIntentMassiveInsert());
  ODocument document=new ODocument();
  ORidBag ridBag=new ORidBag();
  ridBag.setAutoConvertToRecord(false);
  document.field("ridBag",ridBag);
  for (int i=0; i < 100; i++) {
    final ORID ridToAdd=new ORecordId(0,OClusterPositionFactory.INSTANCE.valueOf(positionCounter.incrementAndGet()));
    ridBag.add(ridToAdd);
    ridTree.add(ridToAdd);
  }
  document.save();
  docContainerRid=document.getIdentity();
  List<Future<Void>> futures=new ArrayList<Future<Void>>();
  for (int i=0; i < 5; i++)   futures.add(threadExecutor.submit(new RidAdder(i)));
  for (int i=0; i < 5; i++)   futures.add(threadExecutor.submit(new RidDeleter(i)));
  latch.countDown();
  Thread.sleep(30 * 60000);
  cont=false;
  for (  Future<Void> future : futures)   future.get();
  document=db.load(document.getIdentity());
  document.setLazyLoad(false);
  ridBag=document.field("ridBag");
  for (  OIdentifiable identifiable : ridBag)   Assert.assertTrue(ridTree.remove(identifiable.getIdentity()));
  Assert.assertTrue(ridTree.isEmpty());
  System.out.println("Result size is " + ridBag.size());
  db.close();
}
