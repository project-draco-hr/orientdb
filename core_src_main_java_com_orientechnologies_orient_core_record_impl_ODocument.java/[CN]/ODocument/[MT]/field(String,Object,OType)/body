{
  checkForFields();
  if (clazz != null) {
    OProperty prop=clazz.getProperty(iPropertyName);
    if (prop != null) {
      if (!(iPropertyValue instanceof String) && !prop.getType().isAssignableFrom(iPropertyValue))       throw new IllegalArgumentException("Property '" + iPropertyName + "' can't accept value of "+ iPropertyValue.getClass());
    }
  }
  setDirty();
  final Object oldValue=fieldValues.get(iPropertyName);
  if (fieldOriginalValues == null)   fieldOriginalValues=new HashMap<String,Object>();
  fieldOriginalValues.put(iPropertyName,oldValue);
  if (oldValue != null) {
    if (oldValue instanceof ORecord<?> && iPropertyValue instanceof String)     iPropertyValue=new ORecordId((String)iPropertyValue);
 else     if (oldValue instanceof Collection<?> && iPropertyValue instanceof String) {
      final List<ODocument> newValue=new ArrayList<ODocument>();
      iPropertyValue=newValue;
      final String stringValue=(String)iPropertyValue;
      if (stringValue != null && stringValue.length() > 0) {
        final String[] items=stringValue.split(",");
        for (        String s : items) {
          newValue.add(new ODocument(database,new ORecordId(s)));
        }
      }
    }
  }
  fieldValues.put(iPropertyName,iPropertyValue);
  if (iType != null) {
    if (fieldTypes == null)     fieldTypes=new HashMap<String,OType>();
    fieldTypes.put(iPropertyName,iType);
  }
  return this;
}
