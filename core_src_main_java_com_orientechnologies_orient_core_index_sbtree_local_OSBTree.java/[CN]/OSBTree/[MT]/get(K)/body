{
  final OSessionStoragePerformanceStatistic statistic=performanceStatisticManager.getSessionPerformanceStatistic();
  startOperation();
  if (statistic != null)   statistic.startIndexEntryReadTimer();
  try {
    atomicOperationsManager.acquireReadLock(this);
    try {
      acquireSharedLock();
      try {
        checkNullSupport(key);
        OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
        if (key != null) {
          key=keySerializer.preprocess(key,(Object[])keyTypes);
          BucketSearchResult bucketSearchResult=findBucket(key,atomicOperation);
          if (bucketSearchResult.itemIndex < 0)           return null;
          long pageIndex=bucketSearchResult.getLastPathItem();
          OCacheEntry keyBucketCacheEntry=loadPage(atomicOperation,fileId,pageIndex,false);
          keyBucketCacheEntry.acquireSharedLock();
          try {
            OSBTreeBucket<K,V> keyBucket=new OSBTreeBucket<K,V>(keyBucketCacheEntry,keySerializer,keyTypes,valueSerializer,getChanges(atomicOperation,keyBucketCacheEntry));
            OSBTreeBucket.SBTreeEntry<K,V> treeEntry=keyBucket.getEntry(bucketSearchResult.itemIndex);
            return readValue(treeEntry.value,atomicOperation);
          }
  finally {
            keyBucketCacheEntry.releaseSharedLock();
            releasePage(atomicOperation,keyBucketCacheEntry);
          }
        }
 else {
          if (getFilledUpTo(atomicOperation,nullBucketFileId) == 0)           return null;
          final OCacheEntry nullBucketCacheEntry=loadPage(atomicOperation,nullBucketFileId,0,false);
          nullBucketCacheEntry.acquireSharedLock();
          try {
            final ONullBucket<V> nullBucket=new ONullBucket<V>(nullBucketCacheEntry,getChanges(atomicOperation,nullBucketCacheEntry),valueSerializer,false);
            final OSBTreeValue<V> treeValue=nullBucket.getValue();
            if (treeValue == null)             return null;
            return readValue(treeValue,atomicOperation);
          }
  finally {
            nullBucketCacheEntry.releaseSharedLock();
            releasePage(atomicOperation,nullBucketCacheEntry);
          }
        }
      }
  finally {
        releaseSharedLock();
      }
    }
 catch (    IOException e) {
      throw OException.wrapException(new OSBTreeException("Error during retrieving  of sbtree with name " + getName(),this),e);
    }
 finally {
      atomicOperationsManager.releaseReadLock(this);
    }
  }
  finally {
    if (statistic != null)     statistic.startIndexEntryReadTimer();
    completeOperation();
  }
}
