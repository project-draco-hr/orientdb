{
  checkOpeness();
  stateLock.acquireReadLock();
  try {
    checkOpeness();
    final long freezeId;
    if (throwException)     freezeId=atomicOperationsManager.freezeAtomicOperations(OModificationOperationProhibitedException.class,"Modification requests are prohibited");
 else     freezeId=atomicOperationsManager.freezeAtomicOperations(null,null);
    final List<OFreezableStorage> frozenIndexes=new ArrayList<OFreezableStorage>(indexEngines.size());
    try {
      for (      OIndexEngine indexEngine : indexEngines)       if (indexEngine != null && indexEngine instanceof OFreezableStorage) {
        ((OFreezableStorage)indexEngine).freeze(false);
        frozenIndexes.add((OFreezableStorage)indexEngine);
      }
    }
 catch (    Exception e) {
      for (      OFreezableStorage indexEngine : frozenIndexes)       indexEngine.release();
      throw OException.wrapException(new OStorageException("Error on freeze of storage '" + name + "'"),e);
    }
    synch();
    try {
      unlock();
      if (configuration != null)       configuration.setSoftlyClosed(true);
    }
 catch (    IOException e) {
      atomicOperationsManager.releaseAtomicOperations(freezeId);
      try {
        lock();
      }
 catch (      IOException ignored) {
      }
      throw OException.wrapException(new OStorageException("Error on freeze of storage '" + name + "'"),e);
    }
  }
  finally {
    stateLock.releaseReadLock();
  }
}
