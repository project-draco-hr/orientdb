{
  ODeleteVertexStatement jjtn000=new ODeleteVertexStatement(JJTDELETEVERTEXSTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  try {
    jj_consume_token(DELETE);
    jj_consume_token(VERTEX);
    jjtn000.fromClause=FromClause();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case WHERE:
      jj_consume_token(WHERE);
    jjtn000.whereClause=WhereClause();
  break;
default :
jj_la1[37]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case RETURN:
jj_consume_token(RETURN);
jj_consume_token(BEFORE);
jjtn000.returnBefore=true;
break;
default :
jj_la1[38]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIMIT:
jj_consume_token(LIMIT);
jjtn000.limit=Integer();
break;
default :
jj_la1[39]=jj_gen;
;
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
