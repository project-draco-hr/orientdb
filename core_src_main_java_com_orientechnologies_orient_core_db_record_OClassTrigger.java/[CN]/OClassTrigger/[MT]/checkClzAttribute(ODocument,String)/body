{
  final OImmutableClass clz=ODocumentInternal.getImmutableSchemaClass(iDocument);
  if (clz != null && clz.isTriggered()) {
    OFunction func=null;
    String fieldName=clz.getCustom(attr);
    OClass superClz=clz.getSuperClass();
    while (fieldName == null || fieldName.length() == 0) {
      if (superClz == null || superClz.getName().equals(CLASSNAME))       break;
      fieldName=superClz.getCustom(attr);
      superClz=superClz.getSuperClass();
    }
    if (fieldName != null && fieldName.length() > 0) {
      final Object[] clzMethod=this.checkMethod(fieldName);
      if (clzMethod != null)       return clzMethod;
      func=database.getMetadata().getFunctionLibrary().getFunction(fieldName);
      if (func == null) {
        if (OStringSerializerHelper.contains(fieldName,ORID.SEPARATOR)) {
          try {
            ODocument funcDoc=database.load(new ORecordId(fieldName));
            if (funcDoc != null) {
              func=database.getMetadata().getFunctionLibrary().getFunction((String)funcDoc.field("name"));
            }
          }
 catch (          Exception ex) {
            OLogManager.instance().error(this,"illegal record id : ",ex.getMessage());
          }
        }
      }
    }
 else {
      final Object funcProp=iDocument.field(attr);
      if (funcProp != null) {
        final String funcName=funcProp instanceof ODocument ? (String)((ODocument)funcProp).field("name") : funcProp.toString();
        func=database.getMetadata().getFunctionLibrary().getFunction(funcName);
      }
    }
    return func;
  }
  return null;
}
