{
  checkLowDiskSpace();
  final ODatabaseRecordInternal databaseRecord=ODatabaseRecordThreadLocal.INSTANCE.get();
  OImmutableSchema immutableSchema=null;
  if (databaseRecord != null) {
    immutableSchema=databaseRecord.getMetadata().getImmutableSchemaSnapshot();
  }
  modificationLock.requestModificationLock();
  List<Lock> locks=new ArrayList<Lock>();
  try {
    Set<ORecord> allToLock=new TreeSet<ORecord>();
    for (    ORecordOperation txEntry : clientTx.getCurrentRecordEntries()) {
      allToLock.add(txEntry.getRecord());
    }
    for (    ORecord oRecord : allToLock) {
      locks.add(lockManager.acquireExclusiveLock(oRecord.getIdentity()));
    }
    try {
      lock.acquireExclusiveLock();
      try {
        if (writeAheadLog == null)         throw new OStorageException("WAL mode is not active. Transactions are not supported in given mode");
        makeStorageDirty();
        startStorageTx(clientTx);
        final List<ORecordOperation> tmpEntries=new ArrayList<ORecordOperation>();
        while (clientTx.getCurrentRecordEntries().iterator().hasNext()) {
          for (          ORecordOperation txEntry : clientTx.getCurrentRecordEntries())           tmpEntries.add(txEntry);
          clientTx.clearRecordEntries();
          for (          ORecordOperation txEntry : tmpEntries)           commitEntry(clientTx,txEntry,immutableSchema);
        }
        if (callback != null)         callback.run();
        endStorageTx();
        OTransactionAbstract.updateCacheFromEntries(clientTx,clientTx.getAllRecordEntries(),true);
      }
 catch (      Exception e) {
        OLogManager.instance().debug(this,"Error during transaction commit, transaction will be rolled back (tx-id=%d)",e,clientTx.getId());
        rollback(clientTx);
        if (e instanceof OException)         throw ((OException)e);
 else         throw new OStorageException("Error during transaction commit.",e);
      }
 finally {
        transaction.set(null);
        lock.releaseExclusiveLock();
      }
    }
  finally {
      modificationLock.releaseModificationLock();
    }
  }
  finally {
    for (    Lock lock : locks) {
      try {
        lock.unlock();
      }
 catch (      Exception e) {
        OLogManager.instance().debug(this,"Error on record unlock",e);
      }
    }
  }
}
