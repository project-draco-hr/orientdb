{
  StringBuilder buffer=new StringBuilder();
switch (iType) {
case EMBEDDED:
    buffer.append(toString((ODocument)iValue,iObjHandler,iMarshalledRecords));
  break;
case LINK:
{
  linkToStream(buffer,(ORecordSchemaAware<?>)iValue);
  break;
}
case EMBEDDEDLIST:
case EMBEDDEDSET:
{
buffer.append(OStringSerializerHelper.COLLECTION_BEGIN);
int items=0;
if (iLinkedClass != null) {
  ODocument record;
  for (  Object o : (Collection<?>)iValue) {
    if (items > 0)     buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);
    if (o != null) {
      if (o instanceof ODocument)       record=(ODocument)o;
 else       record=OObjectSerializerHelper.toStream(o,new ODocument(o.getClass().getSimpleName()),iDatabase instanceof ODatabaseObjectTx ? ((ODatabaseObjectTx)iDatabase).getEntityManager() : OEntityManagerInternal.INSTANCE,iLinkedClass,iObjHandler != null ? iObjHandler : new OUserObject2RecordHandler(){
        public Object getUserObjectByRecord(        ORecord<?> iRecord){
          return iRecord;
        }
        public ORecord<?> getRecordByUserObject(        Object iPojo,        boolean iIsMandatory){
          return new ODocument(iLinkedClass);
        }
      }
);
      buffer.append(toString(record,iObjHandler,iMarshalledRecords));
    }
    items++;
  }
}
 else for (Object o : (Collection<?>)iValue) {
  if (items > 0)   buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);
  buffer.append(OStringSerializerHelper.fieldTypeToString(iLinkedType,o));
  items++;
}
buffer.append(OStringSerializerHelper.COLLECTION_END);
break;
}
case LINKLIST:
case LINKSET:
{
buffer.append(OStringSerializerHelper.COLLECTION_BEGIN);
int items=0;
if (iLinkedClass != null) {
for (ORecordSchemaAware<?> record : (Collection<ORecordSchemaAware<?>>)iValue) {
  if (items++ > 0)   buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);
  if (record.getDatabase() == null)   record.setDatabase(iDatabase);
  linkToStream(buffer,record);
}
}
buffer.append(OStringSerializerHelper.COLLECTION_END);
break;
}
default :
return OStringSerializerHelper.fieldTypeToString(iType,iValue);
}
return buffer.toString();
}
