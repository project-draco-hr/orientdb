{
  final List<OAbstractRemoteTask> undoTasks=new ArrayList<OAbstractRemoteTask>();
  for (  ORecordOperation op : iTx.getAllRecordEntries()) {
    OAbstractRemoteTask undoTask=null;
    final ORecord record=op.getRecord();
switch (op.type) {
case ORecordOperation.CREATED:
      break;
case ORecordOperation.UPDATED:
case ORecordOperation.DELETED:
    final ORecordId rid=(ORecordId)record.getIdentity();
  final AtomicReference<ORecord> previousRecord=new AtomicReference<ORecord>();
OScenarioThreadLocal.executeAsDefault(new Callable<Object>(){
  @Override public Object call() throws Exception {
    final ODatabaseDocumentInternal db=ODatabaseRecordThreadLocal.INSTANCE.get();
    final ORecordOperation txEntry=db.getTransaction().getRecordEntry(rid);
    if (txEntry != null && txEntry.type == ORecordOperation.DELETED)     previousRecord.set(txEntry.getRecord());
 else {
      final OStorageOperationResult<ORawBuffer> loadedBuffer=ODatabaseRecordThreadLocal.INSTANCE.get().getStorage().getUnderlying().readRecord(rid,null,true,null);
      if (loadedBuffer != null) {
        final ORecord loaded=Orient.instance().getRecordFactoryManager().newInstance(loadedBuffer.getResult().recordType);
        ORecordInternal.fill(loaded,rid,loadedBuffer.getResult().version,loadedBuffer.getResult().getBuffer(),false);
        previousRecord.set(loaded);
      }
 else       previousRecord.set(db.load(rid));
    }
    return null;
  }
}
);
if (previousRecord.get() == null) throw new ORecordNotFoundException(rid);
if (op.type == ORecordOperation.UPDATED) undoTask=new OUpdateRecordTask(previousRecord.get(),ORecordVersionHelper.clearRollbackMode(previousRecord.get().getVersion()));
 else undoTask=new OResurrectRecordTask(previousRecord.get());
break;
default :
continue;
}
if (undoTask != null) undoTasks.add(undoTask);
}
return undoTasks;
}
