{
  if (iValue == null)   return null;
switch (iType) {
case EMBEDDEDLIST:
case EMBEDDEDSET:
{
      if (iValue.length() == 0)       return null;
      String value=iValue.substring(1,iValue.length() - 1);
      Collection<Object> coll=iType == OType.EMBEDDEDLIST ? new ArrayList<Object>() : new HashSet<Object>();
      if (value.length() == 0)       return coll;
      String[] items=OStringSerializerHelper.split(value,OStringSerializerHelper.RECORD_SEPARATOR_AS_CHAR);
      for (      String item : items) {
        if (iLinkedClass != null) {
          coll.add(fromString(iDatabase,item,new ODocument(iDatabase,iLinkedClass.getName())));
        }
 else         if (item.length() > 0 && item.charAt(0) == OStringSerializerHelper.EMBEDDED) {
          coll.add(OStringSerializerHelper.fieldTypeFromStream(iLinkedType,item.substring(1,item.length() - 1)));
        }
 else {
          if (iLinkedType == null)           throw new IllegalArgumentException("Linked type can't be null. Probably the serialized type has not stored the type along with data");
          coll.add(OStringSerializerHelper.fieldTypeFromStream(iLinkedType,item));
        }
      }
      return coll;
    }
case LINKLIST:
case LINKSET:
{
    if (iValue.length() == 0)     return null;
    String value=iValue.substring(1,iValue.length() - 1);
    Collection<Object> coll=iType == OType.LINKLIST ? new ArrayList<Object>() : new HashSet<Object>();
    if (value.length() == 0)     return coll;
    String[] items=OStringSerializerHelper.split(value,OStringSerializerHelper.RECORD_SEPARATOR_AS_CHAR);
    for (    String item : items) {
      int classSeparatorPos=value.indexOf(OStringSerializerHelper.CLASS_SEPARATOR);
      if (classSeparatorPos > -1) {
        String className=value.substring(1,classSeparatorPos);
        if (className != null) {
          iLinkedClass=iDatabase.getMetadata().getSchema().getClass(className);
          item=item.substring(classSeparatorPos + 1);
        }
      }
 else       item=item.substring(1);
      coll.add(new ODocument(iDatabase,iLinkedClass != null ? iLinkedClass.getName() : null,new ORecordId(item)));
    }
    return coll;
  }
case EMBEDDEDMAP:
{
  if (iValue.length() == 0)   return null;
  String value=iValue.substring(1,iValue.length() - 1);
  Map<String,Object> map=new HashMap<String,Object>();
  if (value.length() == 0)   return map;
  String[] items=OStringSerializerHelper.split(value,OStringSerializerHelper.RECORD_SEPARATOR_AS_CHAR);
  String[] entry;
  String mapValue;
  for (  String item : items) {
    if (item != null && item.length() > 0) {
      entry=item.split(OStringSerializerHelper.ENTRY_SEPARATOR);
      if (entry.length > 0) {
        mapValue=entry[1];
        if (iLinkedType == null) {
          if (mapValue.length() > 0) {
            if (mapValue.startsWith(OStringSerializerHelper.LINK)) {
              iLinkedType=OType.LINK;
              int classSeparatorPos=value.indexOf(OStringSerializerHelper.CLASS_SEPARATOR);
              if (classSeparatorPos > -1) {
                String className=value.substring(1,classSeparatorPos);
                if (className != null)                 iLinkedClass=iDatabase.getMetadata().getSchema().getClass(className);
              }
            }
 else             if (mapValue.charAt(0) == OStringSerializerHelper.EMBEDDED) {
              iLinkedType=OType.EMBEDDED;
            }
 else             if (Character.isDigit(mapValue.charAt(0)) || mapValue.charAt(0) == '+' || mapValue.charAt(0) == '-') {
              iLinkedType=getNumber(iUnusualSymbols,mapValue);
            }
 else             if (mapValue.charAt(0) == '\'' || mapValue.charAt(0) == '"')             iLinkedType=OType.STRING;
          }
 else           iLinkedType=OType.EMBEDDED;
        }
        map.put((String)OStringSerializerHelper.fieldTypeFromStream(OType.STRING,entry[0]),OStringSerializerHelper.fieldTypeFromStream(iLinkedType,mapValue));
      }
    }
  }
  return map;
}
case LINK:
int pos=iValue.indexOf(OStringSerializerHelper.CLASS_SEPARATOR);
if (pos > -1) iLinkedClass=iDatabase.getMetadata().getSchema().getClass(iValue.substring(OStringSerializerHelper.LINK.length(),pos));
 else pos=0;
if (iLinkedClass == null) throw new IllegalArgumentException("Linked class not specified in ORID field: " + iValue);
ORecordId recId=new ORecordId(iValue.substring(pos + 1));
return new ODocument(iDatabase,iLinkedClass.getName(),recId);
default :
return OStringSerializerHelper.fieldTypeFromStream(iType,iValue);
}
}
