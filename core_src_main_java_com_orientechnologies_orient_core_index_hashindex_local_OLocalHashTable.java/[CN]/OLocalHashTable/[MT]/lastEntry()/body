{
  acquireSharedLock();
  try {
    OAtomicOperationsManager operationsManager=storage.getAtomicOperationsManager();
    operationsManager.acquireReadLock(this);
    try {
      OAtomicOperation atomicOperation=operationsManager.getCurrentOperation();
      BucketPath bucketPath=getBucket(HASH_CODE_MAX_VALUE);
      long bucketPointer=directory.getNodePointer(bucketPath.nodeIndex,bucketPath.itemIndex + bucketPath.hashMapOffset);
      int fileLevel=getFileLevel(bucketPointer);
      long pageIndex=getPageIndex(bucketPointer);
      OCacheEntry cacheEntry=loadPageEntry(pageIndex,fileLevel,atomicOperation);
      try {
        OHashIndexBucket<K,V> bucket=new OHashIndexBucket<K,V>(cacheEntry,keySerializer,valueSerializer,keyTypes,getChangesTree(atomicOperation,cacheEntry));
        while (bucket.size() == 0) {
          final BucketPath prevBucketPath=prevBucketToFind(bucketPath,bucket.getDepth());
          if (prevBucketPath == null)           return null;
          releasePage(atomicOperation,cacheEntry,diskCache);
          final long prevPointer=directory.getNodePointer(prevBucketPath.nodeIndex,prevBucketPath.itemIndex + prevBucketPath.hashMapOffset);
          fileLevel=getFileLevel(prevPointer);
          pageIndex=getPageIndex(prevPointer);
          cacheEntry=loadPageEntry(pageIndex,fileLevel,atomicOperation);
          bucket=new OHashIndexBucket<K,V>(cacheEntry,keySerializer,valueSerializer,keyTypes,getChangesTree(atomicOperation,cacheEntry));
          bucketPath=prevBucketPath;
        }
        return bucket.getEntry(bucket.size() - 1);
      }
  finally {
        releasePage(atomicOperation,cacheEntry,diskCache);
      }
    }
  finally {
      operationsManager.releaseReadLock(this);
    }
  }
 catch (  IOException ioe) {
    throw new OIndexException("Exception during data read",ioe);
  }
 finally {
    releaseSharedLock();
  }
}
