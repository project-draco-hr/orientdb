{
  manageConflicts();
  if (receivedResponses == 0)   throw new ODistributedException("No response received from any of nodes " + getExpectedNodes() + " for request "+ request);
switch (request.getTask().getResultStrategy()) {
case ANY:
    break;
case MERGE:
{
    Object result=null;
    for (    Object response : responses.values()) {
      final Object responsePayload=response instanceof ODistributedResponse ? ((ODistributedResponse)response).getPayload() : response;
      if (result == null)       result=responsePayload;
 else       result=OMultiValue.add(result,responsePayload);
    }
    final ODistributedResponse response=(ODistributedResponse)responses.values().iterator().next();
    response.setExecutorNodeName(responses.keySet().toString());
    response.setPayload(result);
    return response;
  }
case UNION:
{
  final Map<String,Object> payloads=new HashMap<String,Object>();
  for (  Map.Entry<String,Object> entry : responses.entrySet())   if (entry.getValue() != NO_RESPONSE)   payloads.put(entry.getKey(),((ODistributedResponse)entry.getValue()).getPayload());
  final ODistributedResponse response=(ODistributedResponse)responses.values().iterator().next();
  response.setExecutorNodeName(responses.keySet().toString());
  response.setPayload(payloads);
  return response;
}
}
final int bestResponsesGroupIndex=getBestResponsesGroup();
final List<ODistributedResponse> bestResponsesGroup=responseGroups.get(bestResponsesGroupIndex);
return bestResponsesGroup.get(0);
}
