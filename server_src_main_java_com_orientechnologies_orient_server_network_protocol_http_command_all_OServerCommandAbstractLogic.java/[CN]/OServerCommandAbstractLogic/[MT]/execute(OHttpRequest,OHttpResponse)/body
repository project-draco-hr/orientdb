{
  final String[] parts=init(iRequest,iResponse);
  ODatabaseDocumentTx db=null;
  try {
    db=getProfiledDatabaseInstance(iRequest);
    final OFunction f=db.getMetadata().getFunctionLibrary().getFunction(parts[2]);
    if (f == null)     throw new IllegalArgumentException("Function '" + parts[2] + "' is not configured");
    if (iRequest.httpMethod.equalsIgnoreCase("GET") && !f.isIdempotent()) {
      iResponse.send(OHttpUtils.STATUS_BADREQ_CODE,OHttpUtils.STATUS_BADREQ_DESCRIPTION,OHttpUtils.CONTENT_TEXT_PLAIN,"GET method is not allowed to execute function '" + parts[2] + "' because has been declared as non idempotent. Use POST instead.",null);
      return false;
    }
    Object[] args=new String[parts.length - 3];
    for (int i=3; i < parts.length; ++i)     args[i - 3]=parts[i];
    final OBasicCommandContext context=new OBasicCommandContext();
    context.setVariable("session",OHttpSessionManager.getInstance().getSession(iRequest.sessionId));
    context.setVariable("request",new OHttpRequestWrapper(iRequest,(String[])args));
    context.setVariable("response",new OHttpResponseWrapper(iResponse));
    final Object functionResult;
    if (args.length == 0 && iRequest.content != null && !iRequest.content.isEmpty()) {
      try {
        final ODocument params=new ODocument().fromJSON(iRequest.content);
        functionResult=f.executeInContext(context,params.toMap());
      }
 catch (      Exception e) {
        throw new OCommandScriptException("Error on parsing parameters from request body");
      }
    }
 else     functionResult=f.executeInContext(context,args);
    handleResult(iRequest,iResponse,functionResult);
  }
 catch (  OCommandScriptException e) {
    final StringBuilder msg=new StringBuilder(256);
    for (Exception currentException=e; currentException != null; currentException=(Exception)currentException.getCause()) {
      if (msg.length() > 0)       msg.append("\n");
      msg.append(currentException.getMessage());
    }
    if (isJsonResponse(iResponse)) {
      sendJsonError(iResponse,OHttpUtils.STATUS_BADREQ_CODE,OHttpUtils.STATUS_BADREQ_DESCRIPTION,OHttpUtils.CONTENT_TEXT_PLAIN,msg.toString(),null);
    }
 else {
      iResponse.send(OHttpUtils.STATUS_BADREQ_CODE,OHttpUtils.STATUS_BADREQ_DESCRIPTION,OHttpUtils.CONTENT_TEXT_PLAIN,msg.toString(),null);
    }
  }
 finally {
    if (db != null)     db.close();
  }
  return false;
}
