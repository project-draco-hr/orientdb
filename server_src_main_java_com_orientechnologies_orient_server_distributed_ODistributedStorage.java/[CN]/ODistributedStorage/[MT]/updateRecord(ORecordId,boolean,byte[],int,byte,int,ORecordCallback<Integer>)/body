{
  resetLastValidBackup();
  if (deletedRecords.get(iRecordId) != null)   throw new ORecordNotFoundException("Record " + iRecordId + " was not found");
  if (OScenarioThreadLocal.INSTANCE.get() == RUN_MODE.RUNNING_DISTRIBUTED) {
    return wrapped.updateRecord(iRecordId,updateContent,iContent,iVersion,iRecordType,iMode,iCallback);
  }
  try {
    final String clusterName=getClusterNameByRID(iRecordId);
    final ODistributedConfiguration dbCfg=dManager.getDatabaseConfiguration(getName());
    final String localNodeName=dManager.getLocalNodeName();
    checkNodeIsMaster(localNodeName,dbCfg);
    final List<String> nodes=dbCfg.getServers(clusterName,null);
    if (nodes.isEmpty()) {
      return (OStorageOperationResult<Integer>)ODistributedAbstractPlugin.runInDistributedMode(new Callable(){
        @Override public Object call() throws Exception {
          return wrapped.updateRecord(iRecordId,updateContent,iContent,iVersion,iRecordType,iMode,iCallback);
        }
      }
);
    }
    Boolean executionModeSynch=dbCfg.isExecutionModeSynchronous(clusterName);
    if (executionModeSynch == null)     executionModeSynch=iMode == 0;
    if (executionModeSynch) {
      final OStorageOperationResult<ORawBuffer> previousContent=readRecord(iRecordId,null,false,null);
      if (previousContent == null)       throw new ORecordNotFoundException("Record with rid " + iRecordId + " was not found in database");
      final Object result=dManager.sendRequest(getName(),Collections.singleton(clusterName),nodes,new OUpdateRecordTask(iRecordId,previousContent.getResult().getBuffer(),previousContent.getResult().version,iContent,iVersion,iRecordType),EXECUTION_MODE.RESPONSE,0);
      if (result instanceof ONeedRetryException)       throw (ONeedRetryException)result;
 else       if (result instanceof Exception)       throw OException.wrapException(new ODistributedException("Error on execution distributed UPDATE_RECORD"),(Exception)result);
      return new OStorageOperationResult<Integer>((Integer)result);
    }
    final OStorageOperationResult<Integer> localResult;
    localResult=(OStorageOperationResult<Integer>)ODistributedAbstractPlugin.runInDistributedMode(new Callable(){
      @Override public Object call() throws Exception {
        final ODatabaseDocumentInternal db=ODatabaseRecordThreadLocal.INSTANCE.get();
        final ORecord record=Orient.instance().getRecordFactoryManager().newInstance(iRecordType);
        ORecordInternal.fill(record,iRecordId,iVersion,iContent,true);
        db.save(record);
        return new OStorageOperationResult<Integer>(record.getVersion());
      }
    }
);
    nodes.remove(localNodeName);
    if (!nodes.isEmpty()) {
      final OStorageOperationResult<ORawBuffer> previousContent=readRecord(iRecordId,null,false,null);
      asynchronousExecution(new OAsynchDistributedOperation(getName(),Collections.singleton(clusterName),nodes,new OUpdateRecordTask(iRecordId,previousContent.getResult().getBuffer(),previousContent.getResult().version,iContent,iVersion,iRecordType),0));
    }
    return localResult;
  }
 catch (  ONeedRetryException e) {
    throw e;
  }
catch (  Exception e) {
    handleDistributedException("Cannot route UPDATE_RECORD operation for %s to the distributed node",e,iRecordId);
    return null;
  }
}
