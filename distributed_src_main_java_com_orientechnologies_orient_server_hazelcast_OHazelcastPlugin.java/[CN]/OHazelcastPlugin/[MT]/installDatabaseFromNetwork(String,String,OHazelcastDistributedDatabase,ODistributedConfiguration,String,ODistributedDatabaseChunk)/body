{
  ODistributedDatabaseChunk chunk=value;
  distrDatabase.setWaitForMessage(chunk.getLastOperationId());
  final String fileName=Orient.getTempPath() + "install_" + databaseName+ ".zip";
  final String localNodeName=getLocalNodeName();
  ODistributedServerLog.info(this,localNodeName,iNode,DIRECTION.IN,"copying remote database '%s' to: %s",databaseName,fileName);
  final File file=new File(fileName);
  if (file.exists())   file.delete();
  try {
    file.getParentFile().mkdirs();
    file.createNewFile();
  }
 catch (  IOException e) {
    throw new ODistributedException("Error on creating temp database file to install locally",e);
  }
  FileOutputStream out=null;
  try {
    out=new FileOutputStream(fileName,false);
    long fileSize=writeDatabaseChunk(1,chunk,out);
    for (int chunkNum=2; !chunk.last; chunkNum++) {
      final Object result=sendRequest(databaseName,null,Collections.singleton(iNode),new OCopyDatabaseChunkTask(chunk.filePath,chunkNum,chunk.offset + chunk.buffer.length),EXECUTION_MODE.RESPONSE);
      if (result instanceof Boolean)       continue;
 else       if (result instanceof Exception) {
        ODistributedServerLog.error(this,localNodeName,iNode,DIRECTION.IN,"error on installing database %s in %s (chunk #%d)",(Exception)result,databaseName,dbPath,chunkNum);
      }
 else       if (result instanceof ODistributedDatabaseChunk) {
        chunk=(ODistributedDatabaseChunk)result;
        fileSize+=writeDatabaseChunk(chunkNum,chunk,out);
      }
    }
    ODistributedServerLog.info(this,localNodeName,null,DIRECTION.NONE,"database copied correctly, size=%s",OFileUtils.getSizeAsString(fileSize));
  }
 catch (  Exception e) {
    ODistributedServerLog.error(this,localNodeName,null,DIRECTION.NONE,"error on transferring database '%s' to '%s'",e,databaseName,fileName);
    throw new ODistributedException("Error on transferring database",e);
  }
 finally {
    try {
      if (out != null) {
        out.flush();
        out.close();
      }
    }
 catch (    IOException e) {
    }
  }
  final ODatabaseDocumentTx db=installDatabaseOnLocalNode(distrDatabase,databaseName,dbPath,iNode,fileName);
  if (db != null) {
    db.close();
    final OStorage stg=Orient.instance().getStorage(databaseName);
    if (stg != null)     stg.close();
    final Lock lock=getLock("orientdb." + databaseName + ".install");
    lock.lock();
    try {
      distrDatabase.configureDatabase(false,true,new Callable<Void>(){
        @Override public Void call() throws Exception {
          final boolean distribCfgDirty=installDbClustersForLocalNode(db,cfg);
          if (distribCfgDirty) {
            OLogManager.instance().warn(this,"Distributed configuration modified");
            updateCachedDatabaseConfiguration(db.getName(),cfg.serialize(),true,true);
          }
          return null;
        }
      }
);
    }
  finally {
      lock.unlock();
    }
    db.close();
  }
  final Set<String> localManagedClusters=cfg.getClustersOnServer(localNodeName);
  final Set<String> sourceNodeClusters=cfg.getClustersOnServer(iNode);
  localManagedClusters.removeAll(sourceNodeClusters);
  final HashSet<String> toSynchClusters=new HashSet<String>();
  for (  String cl : localManagedClusters) {
    if (!cfg.getServers(cl,localNodeName).isEmpty())     toSynchClusters.add(cl);
  }
  return toSynchClusters;
}
