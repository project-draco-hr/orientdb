{
  int entryPosition=getIntValue(POSITIONS_ARRAY_OFFSET + entryIndex * OIntegerSerializer.INT_SIZE);
  int keySize=keySerializer.getObjectSizeInDirectMemory(pagePointer,entryPosition);
  int entrySize;
  long linkValue=-1;
  if (isLeaf) {
    if (valueSerializer.isFixedLength()) {
      entrySize=keySize + valueSerializer.getFixedLength() + OByteSerializer.BYTE_SIZE;
    }
 else {
      final boolean isLink=pagePointer.getByte(entryPosition + keySize) > 0;
      if (!isLink)       entrySize=keySize + valueSerializer.getObjectSizeInDirectMemory(pagePointer,entryPosition + keySize + OByteSerializer.BYTE_SIZE) + OByteSerializer.BYTE_SIZE;
 else {
        entrySize=keySize + OByteSerializer.BYTE_SIZE + OLongSerializer.LONG_SIZE;
        linkValue=OLongSerializer.INSTANCE.deserializeFromDirectMemory(pagePointer,entryPosition + keySize + OByteSerializer.BYTE_SIZE);
      }
    }
  }
 else {
    throw new IllegalStateException("Remove is applies to leaf buckets only");
  }
  int size=size();
  if (entryIndex < size - 1) {
    moveData(POSITIONS_ARRAY_OFFSET + (entryIndex + 1) * OIntegerSerializer.INT_SIZE,POSITIONS_ARRAY_OFFSET + entryIndex * OIntegerSerializer.INT_SIZE,(size - entryIndex - 1) * OIntegerSerializer.INT_SIZE);
  }
  size--;
  setIntValue(SIZE_OFFSET,size);
  int freePointer=getIntValue(FREE_POINTER_OFFSET);
  if (size > 0 && entryPosition > freePointer) {
    moveData(freePointer,freePointer + entrySize,entryPosition - freePointer);
  }
  setIntValue(FREE_POINTER_OFFSET,freePointer + entrySize);
  int currentPositionOffset=POSITIONS_ARRAY_OFFSET;
  for (int i=0; i < size; i++) {
    int currentEntryPosition=getIntValue(currentPositionOffset);
    if (currentEntryPosition < entryPosition)     setIntValue(currentPositionOffset,currentEntryPosition + entrySize);
    currentPositionOffset+=OIntegerSerializer.INT_SIZE;
  }
  return linkValue;
}
