{
  if (!(iCommand instanceof OSerializableStream))   throw new OCommandExecutionException("Cannot serialize the command to be executed to the server side.");
  final boolean live=iCommand instanceof OLiveQuery;
  final ODatabaseDocument database=ODatabaseRecordThreadLocal.INSTANCE.get();
  return networkOperation(new OStorageRemoteOperation<Object>(){
    @Override public Object execute(    final OChannelBinaryAsynchClient network,    OStorageRemoteSession session) throws IOException {
      Object result=null;
      getCurrentSession().commandExecuting=true;
      try {
        final boolean asynch=iCommand instanceof OCommandRequestAsynch && ((OCommandRequestAsynch)iCommand).isAsynchronous();
        try {
          beginRequest(network,OChannelBinaryProtocol.REQUEST_COMMAND,session);
          if (live) {
            network.writeByte((byte)'l');
          }
 else {
            network.writeByte((byte)(asynch ? 'a' : 's'));
          }
          network.writeBytes(OStreamSerializerAnyStreamable.INSTANCE.toStream(iCommand));
        }
  finally {
          endRequest(network);
        }
        try {
          beginResponse(network,session);
          boolean addNextRecord=true;
          if (asynch) {
            byte status;
            while ((status=network.readByte()) > 0) {
              final ORecord record=(ORecord)OChannelBinaryProtocol.readIdentifiable(network);
              if (record == null)               continue;
switch (status) {
case 1:
                if (addNextRecord) {
                  addNextRecord=iCommand.getResultListener().result(record);
                  database.getLocalCache().updateRecord(record);
                }
              break;
case 2:
            database.getLocalCache().updateRecord(record);
        }
      }
    }
 else {
      result=readSynchResult(network,database);
      if (live) {
        final ODocument doc=((List<ODocument>)result).get(0);
        final Integer token=doc.field("token");
        final Boolean unsubscribe=doc.field("unsubscribe");
        if (token != null) {
          if (Boolean.TRUE.equals(unsubscribe)) {
            if (OStorageRemote.this.asynchEventListener != null)             OStorageRemote.this.asynchEventListener.unregisterLiveListener(token);
          }
 else {
            OLiveResultListener listener=(OLiveResultListener)iCommand.getResultListener();
            ORemoteConnectionPool pool=OStorageRemote.this.connectionManager.getPool(network.getServerURL());
            OStorageRemote.this.asynchEventListener.registerLiveListener(pool,token,listener);
          }
        }
 else {
          throw new OStorageException("Cannot execute live query, returned null token");
        }
      }
    }
    return result;
  }
  finally {
    endResponse(network);
  }
}
  finally {
  getCurrentSession().commandExecuting=false;
  if (iCommand.getResultListener() != null && !live)   iCommand.getResultListener().end();
}
}
}
,"Error on executing command: " + iCommand);
}
