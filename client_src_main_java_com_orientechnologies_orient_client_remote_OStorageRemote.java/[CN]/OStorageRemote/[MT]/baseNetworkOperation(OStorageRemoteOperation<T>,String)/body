{
  int retry=connectionRetry;
  OStorageRemoteSession session=getCurrentSession();
  do {
    OChannelBinaryAsynchClient network=null;
    String serverUrl=getNextAvailableServerURL(false,session);
    do {
      try {
        network=getNetwork(serverUrl);
      }
 catch (      OException e) {
        serverUrl=useNewServerURL(serverUrl);
        if (serverUrl == null)         throw e;
      }
    }
 while (network == null);
    try {
      OStorageRemoteNodeSession nodeSession=session.get(network.getServerURL());
      if (nodeSession == null || !nodeSession.isValid()) {
        openRemoteDatabase(network);
        if (!network.tryLock())         continue;
      }
      return operation.execute(network,session);
    }
 catch (    OModificationOperationProhibitedException mope) {
      connectionManager.release(network);
      handleDBFreeze();
    }
catch (    OTokenException e) {
      connectionManager.release(network);
      session.remove(network.getServerURL());
      if (--retry <= 0)       throw OException.wrapException(new OStorageException(errorMessage),e);
    }
catch (    OTokenSecurityException e) {
      connectionManager.release(network);
      session.remove(network.getServerURL());
      if (--retry <= 0)       throw OException.wrapException(new OStorageException(errorMessage),e);
    }
catch (    OOfflineNodeException e) {
      connectionManager.release(network);
synchronized (serverURLs) {
        serverURLs.remove(serverUrl);
      }
      for (      OStorageRemoteSession activeSession : sessions) {
        activeSession.remove(serverUrl);
      }
    }
catch (    IOException e) {
      retry=handleIOException(retry,network,e);
    }
catch (    OIOException e) {
      retry=handleIOException(retry,network,e);
    }
catch (    OException e) {
      connectionManager.release(network);
      throw e;
    }
catch (    Exception e) {
      connectionManager.release(network);
      throw OException.wrapException(new OStorageException(errorMessage),e);
    }
  }
 while (true);
}
