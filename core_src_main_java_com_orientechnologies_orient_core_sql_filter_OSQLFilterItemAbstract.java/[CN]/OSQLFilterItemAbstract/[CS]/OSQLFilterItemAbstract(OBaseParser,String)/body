{
  final List<String> parts=OStringSerializerHelper.smartSplit(iText,'.');
  setRoot(iQueryToParse,parts.get(0));
  if (parts.size() > 1) {
    operationsChain=new ArrayList<OPair<OSQLMethod,Object[]>>();
    for (int i=1; i < parts.size(); ++i) {
      final String part=parts.get(i);
      final int pindex=part.indexOf('(');
      if (pindex > -1) {
        final String methodName=part.substring(0,pindex).trim().toLowerCase(Locale.ENGLISH);
        final OSQLMethod method=getMethod(methodName);
        if (method != null) {
          final Object[] arguments;
          if (method.getMaxParams() > 0) {
            arguments=OStringSerializerHelper.getParameters(part).toArray();
            if (arguments.length < method.getMinParams() || arguments.length > method.getMaxParams())             throw new OQueryParsingException(iQueryToParse.parserText,"Syntax error: field operator '" + method.getName() + "' needs "+ (method.getMinParams() == method.getMaxParams() ? method.getMinParams() : method.getMinParams() + "-" + method.getMaxParams())+ " argument(s) while has been received "+ arguments.length,0);
          }
 else {
            arguments=null;
          }
          operationsChain.add(new OPair<OSQLMethod,Object[]>(method,arguments));
        }
 else {
          throw new OQueryParsingException(iQueryToParse.parserText,"Syntax error: field operator not recognized between the supported ones: " + Arrays.toString(getAllMethodNames()),0);
        }
      }
 else {
        operationsChain.add(new OPair<OSQLMethod,Object[]>(getMethod(OSQLMethodField.NAME),new Object[]{part}));
      }
    }
  }
}
