{
  long seed=System.currentTimeMillis();
  System.out.println("testRemove seed : " + seed);
  TreeSet<Long> keys=new TreeSet<Long>();
  Random random=new Random(seed);
  while (keys.size() < 2 * OSBTreeBonsaiBucket.MAX_BUCKET_SIZE_BYTES / OLongSerializer.LONG_SIZE) {
    keys.add(random.nextLong());
  }
  ODirectMemoryPointer pointer=ODirectMemoryPointerFactory.instance().createPointer(ODurablePage.MAX_PAGE_SIZE_BYTES);
  OCachePointer cachePointer=new OCachePointer(pointer,new OLogSequenceNumber(0,0),0,0);
  cachePointer.incrementReferrer();
  OCacheEntry cacheEntry=new OCacheEntry(0,0,cachePointer,false);
  OSBTreeBonsaiBucket<Long,OIdentifiable> treeBucket=new OSBTreeBonsaiBucket<Long,OIdentifiable>(cacheEntry,0,true,OLongSerializer.INSTANCE,OLinkSerializer.INSTANCE,null);
  int index=0;
  for (  Long key : keys) {
    if (!treeBucket.addEntry(index,new OSBTreeBonsaiBucket.SBTreeEntry<Long,OIdentifiable>(OBonsaiBucketPointer.NULL,OBonsaiBucketPointer.NULL,key,new ORecordId(index,index)),true))     break;
    index++;
  }
  int originalSize=treeBucket.size();
  int itemsToDelete=originalSize / 2;
  for (int i=0; i < itemsToDelete; i++) {
    treeBucket.remove(treeBucket.size() - 1);
  }
  Assert.assertEquals(treeBucket.size(),originalSize - itemsToDelete);
  final Map<Long,Integer> keyIndexMap=new HashMap<Long,Integer>();
  Iterator<Long> keysIterator=keys.iterator();
  index=0;
  while (keysIterator.hasNext() && index < treeBucket.size()) {
    Long key=keysIterator.next();
    keyIndexMap.put(key,index);
    index++;
  }
  for (  Map.Entry<Long,Integer> keyIndexEntry : keyIndexMap.entrySet()) {
    int bucketIndex=treeBucket.find(keyIndexEntry.getKey());
    Assert.assertEquals(bucketIndex,(int)keyIndexEntry.getValue());
  }
  int keysToAdd=originalSize - treeBucket.size();
  int addedKeys=0;
  while (keysIterator.hasNext() && index < originalSize) {
    Long key=keysIterator.next();
    if (!treeBucket.addEntry(index,new OSBTreeBonsaiBucket.SBTreeEntry<Long,OIdentifiable>(OBonsaiBucketPointer.NULL,OBonsaiBucketPointer.NULL,key,new ORecordId(index,index)),true))     break;
    keyIndexMap.put(key,index);
    index++;
    addedKeys++;
  }
  for (  Map.Entry<Long,Integer> keyIndexEntry : keyIndexMap.entrySet()) {
    OSBTreeBonsaiBucket.SBTreeEntry<Long,OIdentifiable> entry=treeBucket.getEntry(keyIndexEntry.getValue());
    Assert.assertEquals(entry,new OSBTreeBonsaiBucket.SBTreeEntry<Long,OIdentifiable>(OBonsaiBucketPointer.NULL,OBonsaiBucketPointer.NULL,keyIndexEntry.getKey(),new ORecordId(keyIndexEntry.getValue(),keyIndexEntry.getValue())));
  }
  Assert.assertEquals(treeBucket.size(),originalSize);
  Assert.assertEquals(addedKeys,keysToAdd);
  cachePointer.decrementReferrer();
}
