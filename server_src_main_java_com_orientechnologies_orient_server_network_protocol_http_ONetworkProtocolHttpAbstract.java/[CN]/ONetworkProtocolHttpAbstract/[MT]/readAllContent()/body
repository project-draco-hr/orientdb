{
  StringBuilder request=new StringBuilder();
  char currChar;
  char prevChar=0;
  int contentLength=-1;
  boolean endOfHeaders=false;
  while (!channel.socket.isInputShutdown()) {
    currChar=(char)channel.inStream.read();
    if (currChar == '\r') {
      if (contentLength == -1) {
        String line=request.toString();
        if (line.startsWith(CONTENT_LENGTH)) {
          contentLength=Integer.parseInt(line.substring(CONTENT_LENGTH.length()));
          if (contentLength > MAX_CONTENT_LENGTH)           OLogManager.instance().warn(this,"->" + channel.socket.getInetAddress().getHostAddress() + ": Error on content size "+ contentLength+ ": the maximum allowed is "+ MAX_CONTENT_LENGTH);
        }
      }
      if (!endOfHeaders && request.length() == 0) {
        if (contentLength <= 0)         return null;
        endOfHeaders=true;
      }
      channel.inStream.read();
      request.setLength(0);
    }
 else     if (endOfHeaders && request.length() == 0 && currChar != '\r' && currChar != '\n') {
      byte[] buffer=new byte[contentLength];
      buffer[0]=(byte)currChar;
      channel.inStream.read(buffer,1,contentLength - 1);
      return new String(buffer);
    }
 else     request.append(currChar);
    prevChar=currChar;
  }
  if (OLogManager.instance().isDebugEnabled())   OLogManager.instance().debug(this,"Error on parsing HTTP content from client " + channel.socket.getInetAddress().getHostAddress() + ":\n"+ request);
  return null;
}
