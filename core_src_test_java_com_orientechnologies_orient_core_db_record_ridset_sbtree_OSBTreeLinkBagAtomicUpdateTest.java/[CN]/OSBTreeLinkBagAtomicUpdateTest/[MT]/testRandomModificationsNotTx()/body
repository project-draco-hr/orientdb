{
  final Random rnd=new Random();
  final int iterations=20;
  for (int n=0; n < iterations; n++) {
    final int amountOfAddedDocs=rnd.nextInt(10) + 10;
    final int amountOfAddedDocsAfterSave=rnd.nextInt(5) + 5;
    final int amountOfDeletedDocs=rnd.nextInt(5) + 5;
    List<OIdentifiable> addedDocuments=new ArrayList<OIdentifiable>();
    ODocument document=new ODocument();
    OSBTreeRidBag ridBag=new OSBTreeRidBag();
    document.field("ridBag",ridBag);
    for (int i=0; i < amountOfAddedDocs; i++) {
      final ODocument docToAdd=new ODocument();
      docToAdd.save();
      addedDocuments.add(docToAdd.getIdentity());
      ridBag.add(docToAdd);
    }
    document.save();
    ODocument staleDocument=db.load(document.getIdentity());
    OSBTreeRidBag staleRidBag=staleDocument.field("ridBag");
    Assert.assertNotSame(document,staleDocument);
    Assert.assertNotSame(ridBag,staleRidBag);
    int k=0;
    Iterator<OIdentifiable> iterator=staleRidBag.iterator();
    while (k < amountOfDeletedDocs) {
      iterator.next();
      if (rnd.nextBoolean()) {
        iterator.remove();
        k++;
      }
      if (!iterator.hasNext())       iterator=staleRidBag.iterator();
    }
    for (k=0; k < amountOfAddedDocsAfterSave; k++) {
      ODocument docToAdd=new ODocument();
      docToAdd.save();
      staleRidBag.add(docToAdd);
    }
    Assert.assertEquals(addedDocuments.size() - amountOfDeletedDocs + amountOfAddedDocsAfterSave,staleRidBag.size());
    document.setDirty();
    document.save();
    try {
      staleDocument.save();
      Assert.fail();
    }
 catch (    OConcurrentModificationException e) {
    }
    document=db.load(document.getIdentity());
    ridBag=document.field("ridBag");
    Assert.assertEquals(ridBag.size(),addedDocuments.size());
    iterator=ridBag.iterator();
    while (iterator.hasNext())     Assert.assertTrue(addedDocuments.remove(iterator.next()));
    Assert.assertEquals(addedDocuments.size(),0);
  }
}
