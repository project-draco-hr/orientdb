{
  if (database.getStatus() != STATUS.OPEN)   return RESULT.RECORD_NOT_CHANGED;
  if (!(iRecord instanceof ODocument))   return RESULT.RECORD_NOT_CHANGED;
  final ODocument document=(ODocument)iRecord;
  if (!filterBySchemaClass(document))   return RESULT.RECORD_NOT_CHANGED;
switch (iType) {
case BEFORE_CREATE:
    return onRecordBeforeCreate(document);
case AFTER_CREATE:
  onRecordAfterCreate(document);
break;
case CREATE_FAILED:
onRecordCreateFailed(document);
break;
case CREATE_REPLICATED:
onRecordCreateReplicated(document);
break;
case BEFORE_READ:
return onRecordBeforeRead(document);
case AFTER_READ:
onRecordAfterRead(document);
break;
case READ_FAILED:
onRecordReadFailed(document);
break;
case READ_REPLICATED:
onRecordReadReplicated(document);
break;
case BEFORE_UPDATE:
return onRecordBeforeUpdate(document);
case AFTER_UPDATE:
onRecordAfterUpdate(document);
break;
case UPDATE_FAILED:
onRecordUpdateFailed(document);
break;
case UPDATE_REPLICATED:
onRecordUpdateReplicated(document);
break;
case BEFORE_DELETE:
return onRecordBeforeDelete(document);
case AFTER_DELETE:
onRecordAfterDelete(document);
break;
case DELETE_FAILED:
onRecordDeleteFailed(document);
break;
case DELETE_REPLICATED:
onRecordDeleteReplicated(document);
break;
case FINALIZE_CREATION:
onRecordFinalizeCreation(document);
break;
case FINALIZE_UPDATE:
onRecordFinalizeUpdate(document);
break;
case FINALIZE_DELETION:
onRecordFinalizeDeletion(document);
break;
default :
throw new IllegalStateException("Hook method " + iType + " is not managed");
}
return RESULT.RECORD_NOT_CHANGED;
}
