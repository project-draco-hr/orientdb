{
  paginatedCluster.set(OCluster.ATTRIBUTES.COMPRESSION,ONothingCompression.NAME);
  paginatedCluster.set(OCluster.ATTRIBUTES.RECORD_GROW_FACTOR,1.5);
  paginatedCluster.set(OCluster.ATTRIBUTES.RECORD_OVERFLOW_GROW_FACTOR,2.5);
  byte[] record=new byte[100];
  Random random=new Random();
  random.nextBytes(record);
  ORecordVersion version=OVersionFactory.instance().createVersion();
  OPhysicalPosition physicalPosition=paginatedCluster.createRecord(record,version,(byte)1);
  record=new byte[150];
  random.nextBytes(record);
  paginatedCluster.updateRecord(physicalPosition.clusterPosition,record,version,(byte)1);
  OCacheEntry cacheEntry=diskCache.load(1,1,false);
  int recordIndex=(int)(physicalPosition.clusterPosition & 0xFFFF);
  OClusterPage page=new OClusterPage(cacheEntry,false,null);
  Assert.assertEquals(page.getRecordSize(recordIndex),record.length + RECORD_SYSTEM_INFORMATION);
  diskCache.release(cacheEntry);
  record=new byte[200];
  random.nextBytes(record);
  paginatedCluster.updateRecord(physicalPosition.clusterPosition,record,version,(byte)1);
  cacheEntry=diskCache.load(1,1,false);
  page=new OClusterPage(cacheEntry,false,null);
  int fullContentSize=500 + OIntegerSerializer.INT_SIZE + OByteSerializer.BYTE_SIZE;
  Assert.assertEquals(page.getRecordSize(recordIndex),150 + RECORD_SYSTEM_INFORMATION);
  fullContentSize-=150 + RECORD_SYSTEM_INFORMATION - OByteSerializer.BYTE_SIZE - OLongSerializer.LONG_SIZE;
  Assert.assertEquals(page.getRecordSize(recordIndex + 1),fullContentSize + (OByteSerializer.BYTE_SIZE + OLongSerializer.LONG_SIZE));
  diskCache.release(cacheEntry);
}
