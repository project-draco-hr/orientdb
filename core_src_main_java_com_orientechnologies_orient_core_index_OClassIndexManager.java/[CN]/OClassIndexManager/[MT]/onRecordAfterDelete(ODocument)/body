{
  final OClass cls=iRecord.getSchemaClass();
  if (cls == null)   return;
  final Collection<OIndex<?>> indexes=new ArrayList<OIndex<?>>(cls.getIndexes());
  if (!indexes.isEmpty()) {
    final Set<String> dirtyFields=new HashSet<String>(Arrays.asList(iRecord.getDirtyFields()));
    if (!dirtyFields.isEmpty()) {
      final Iterator<OIndex<?>> indexIterator=indexes.iterator();
      while (indexIterator.hasNext()) {
        final OIndex<?> index=indexIterator.next();
        final boolean result;
        if (index.getDefinition() instanceof OCompositeIndexDefinition)         result=processCompositeIndexDelete(index,dirtyFields,iRecord);
 else         result=processSingleIndexDelete(index,dirtyFields,iRecord);
        if (result)         indexIterator.remove();
      }
    }
    for (    final OIndex<?> index : indexes) {
      final Object key=index.getDefinition().getDocumentValueToIndex(iRecord);
      if (key instanceof Collection) {
        for (        final Object keyItem : (Collection<?>)key)         if (keyItem != null)         index.remove(keyItem,iRecord);
      }
 else       if (key != null)       index.remove(key,iRecord);
    }
  }
  if (iRecord.isTrackingChanges()) {
    iRecord.setTrackingChanges(false);
    iRecord.setTrackingChanges(true);
  }
}
