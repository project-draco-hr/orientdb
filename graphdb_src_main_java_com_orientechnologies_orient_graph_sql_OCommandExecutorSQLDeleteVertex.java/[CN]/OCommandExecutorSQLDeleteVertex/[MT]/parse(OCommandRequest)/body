{
  final OCommandRequestText textRequest=(OCommandRequestText)iRequest;
  String queryText=textRequest.getText();
  String originalQuery=queryText;
  try {
    queryText=preParse(queryText,iRequest);
    textRequest.setText(queryText);
    database=getDatabase();
    init((OCommandRequestText)iRequest);
    parserRequiredKeyword("DELETE");
    parserRequiredKeyword("VERTEX");
    OClass clazz=null;
    String where=null;
    String word=parseOptionalWord(true);
    while (word != null) {
      if (word.startsWith("#")) {
        rid=new ORecordId(word);
      }
 else       if (word.equalsIgnoreCase("from")) {
        final StringBuilder q=new StringBuilder();
        final int newPos=OStringSerializerHelper.getEmbedded(parserText,parserGetCurrentPosition(),-1,q);
        query=database.command(new OSQLAsynchQuery<ODocument>(q.toString(),this));
        parserSetCurrentPosition(newPos);
      }
 else       if (word.equals(KEYWORD_WHERE)) {
        if (clazz == null)         clazz=((OMetadataInternal)database.getMetadata()).getImmutableSchemaSnapshot().getClass(OrientVertexType.CLASS_NAME);
        where=parserGetCurrentPosition() > -1 ? " " + parserText.substring(parserGetPreviousPosition()) : "";
        query=database.command(new OSQLAsynchQuery<ODocument>("select from " + clazz.getName() + where,this));
        break;
      }
 else       if (word.equals(KEYWORD_LIMIT)) {
        word=parseOptionalWord(true);
        try {
          limit=Integer.parseInt(word);
        }
 catch (        Exception e) {
          throw new OCommandSQLParsingException("Invalid LIMIT: " + word);
        }
      }
 else       if (word.equals(KEYWORD_RETURN)) {
        returning=parseReturn();
      }
 else       if (word.length() > 0) {
        clazz=((OMetadataInternal)database.getMetadata()).getImmutableSchemaSnapshot().getClass(word);
        if (clazz == null)         throw new OCommandSQLParsingException("Class '" + word + "' was not found");
      }
      word=parseOptionalWord(true);
      if (parserIsEnded())       break;
    }
    if (where == null)     where="";
 else     where=" WHERE " + where;
    if (query == null && rid == null) {
      StringBuilder queryString=new StringBuilder();
      queryString.append("select from ");
      if (clazz == null) {
        queryString.append("V");
      }
 else {
        queryString.append(clazz.getName());
      }
      queryString.append(where);
      if (limit > -1) {
        queryString.append(" LIMIT " + limit);
      }
      query=database.command(new OSQLAsynchQuery<ODocument>(queryString.toString(),this));
    }
  }
  finally {
    textRequest.setText(originalQuery);
  }
  return this;
}
