{
  int offset=nodePath.nodeGlobalDepth - (bucketDepth - 1);
  NodePath currentNode=nodePath;
  int nodeLocalDepth=nodePath.nodeLocalDepth;
  while (offset > 0) {
    offset-=nodeLocalDepth;
    if (offset > 0) {
      currentNode=nodePath.parent;
      nodeLocalDepth=currentNode.nodeLocalDepth;
    }
  }
  final int diff=bucketDepth - 1 - (currentNode.nodeGlobalDepth - nodeLocalDepth);
  final int interval=(1 << (nodeLocalDepth - diff));
  final int firstStartIndex=currentNode.itemIndex & ((levelMask << (nodeLocalDepth - diff)) & levelMask);
  final int firstEndIndex=firstStartIndex + (1 << (nodeLocalDepth - diff));
  final int secondStartIndex=firstStartIndex + (interval >>> 1);
  final int secondEndIndex=firstEndIndex;
  for (int i=secondStartIndex; i < secondEndIndex; i++)   updateBucket(currentNode.nodeIndex,i,currentNode.hashMapOffset,newFilePosition);
}
