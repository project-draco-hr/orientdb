{
  if (database.getURL().startsWith("remote:"))   return;
  if (database.exists())   ODatabaseHelper.deleteDatabase(database,getStorageType());
  ODatabaseHelper.createDatabase(database,url,getStorageType());
  database.close();
  database.registerListener(new ODatabaseListener(){
    @Override public void onCreate(    ODatabase iDatabase){
    }
    @Override public void onDelete(    ODatabase iDatabase){
    }
    @Override public void onOpen(    ODatabase iDatabase){
    }
    @Override public void onBeforeTxBegin(    ODatabase iDatabase){
    }
    @Override public void onBeforeTxRollback(    ODatabase iDatabase){
    }
    @Override public void onAfterTxRollback(    ODatabase iDatabase){
    }
    @Override public void onBeforeTxCommit(    ODatabase iDatabase){
      OTransaction tx=((ODatabaseRecordTx)iDatabase).getTransaction();
      Iterable<? extends ORecordOperation> recs=tx.getCurrentRecordEntries();
      for (      ORecordOperation op : recs) {
        ODocument doc=(ODocument)op.getRecord();
        for (        String f : doc.getDirtyFields()) {
          final Object oldValue=doc.getOriginalValue(f);
          final Object newValue=doc.field(f);
          System.out.println("Old: " + oldValue + " -> "+ newValue);
        }
      }
    }
    @Override public void onAfterTxCommit(    ODatabase iDatabase){
    }
    @Override public void onClose(    ODatabase iDatabase){
    }
    @Override public boolean onCorruptionRepairDatabase(    ODatabase iDatabase,    String iReason,    String iWhatWillbeFixed){
      return false;
    }
  }
);
  database.open("admin","admin");
  database.begin(TXTYPE.OPTIMISTIC);
  ODocument rec=database.newInstance().field("name","Jay").save();
  database.commit();
  database.begin(TXTYPE.OPTIMISTIC);
  rec.field("surname","Miner").save();
  database.commit();
  ODatabaseHelper.deleteDatabase(database,getStorageType());
  ODatabaseHelper.createDatabase(database,url,getStorageType());
}
