{
  if (channel.socket.isInputShutdown() || channel.socket.isClosed()) {
    connectionClosed();
    return;
  }
  connection.getData().commandInfo="Listening";
  connection.getData().commandDetail=null;
  try {
    channel.socket.setSoTimeout(socketTimeout);
    connection.getStats().lastCommandReceived=-1;
    char c=(char)channel.read();
    if (channel.inStream.available() == 0) {
      connectionClosed();
      return;
    }
    channel.socket.setSoTimeout(socketTimeout);
    connection.getStats().lastCommandReceived=System.currentTimeMillis();
    request=new OHttpRequest(this,channel.inStream,connection.getData(),configuration);
    requestContent.setLength(0);
    request.isMultipart=false;
    if (c != '\n')     requestContent.append(c);
    while (!channel.socket.isInputShutdown()) {
      c=(char)channel.read();
      if (c == '\r') {
        final String[] words=requestContent.toString().split(" ");
        if (words.length < 3) {
          OLogManager.instance().warn(this,"->" + channel.socket.getInetAddress().getHostAddress() + ": Error on invalid content:\n"+ requestContent);
          while (channel.inStream.available() > 0) {
            channel.read();
          }
          break;
        }
        channel.read();
        request.httpMethod=words[0].toUpperCase();
        request.url=words[1].trim();
        final int parametersPos=request.url.indexOf('?');
        if (parametersPos > -1) {
          request.parameters=OHttpUtils.getParameters(request.url.substring(parametersPos));
          request.url=request.url.substring(0,parametersPos);
        }
        request.httpVersion=words[2];
        readAllContent(request);
        if (request.content != null && request.contentType != null && request.contentType.equals(OHttpUtils.CONTENT_TYPE_URLENCODED))         request.content=URLDecoder.decode(request.content,"UTF-8").trim();
        if (OLogManager.instance().isDebugEnabled())         OLogManager.instance().debug(this,"[ONetworkProtocolHttpAbstract.execute] Requested: %s %s",request.httpMethod,request.url);
        service();
        return;
      }
      requestContent.append(c);
    }
    if (OLogManager.instance().isDebugEnabled())     OLogManager.instance().debug(this,"Parsing request from client " + channel.socket.getInetAddress().getHostAddress() + ":\n"+ requestContent);
  }
 catch (  SocketException e) {
    connectionError();
  }
catch (  SocketTimeoutException e) {
    timeout();
  }
catch (  Throwable t) {
    if (request.httpMethod != null && request.url != null) {
      try {
        sendError(505,"Error on executing of " + request.httpMethod + " for the resource: "+ request.url,null,"text/plain",t.toString(),request.keepAlive);
      }
 catch (      IOException e) {
      }
    }
 else     sendError(505,"Error on executing request",null,"text/plain",t.toString(),request.keepAlive);
    readAllContent(request);
  }
 finally {
    if (connection.getStats().lastCommandReceived > -1)     Orient.instance().getProfiler().stopChrono("server.network.requests","Total received requests",connection.getStats().lastCommandReceived,"server.network.requests");
    request=null;
    response=null;
  }
}
