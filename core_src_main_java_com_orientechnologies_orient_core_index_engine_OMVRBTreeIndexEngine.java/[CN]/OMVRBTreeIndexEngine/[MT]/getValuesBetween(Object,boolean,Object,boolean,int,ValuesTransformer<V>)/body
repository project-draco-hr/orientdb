{
  acquireExclusiveLock();
  try {
    final OMVRBTreeEntry<Object,V> firstEntry;
    if (fromInclusive)     firstEntry=map.getCeilingEntry(rangeFrom,OMVRBTree.PartialSearchMode.LOWEST_BOUNDARY);
 else     firstEntry=map.getHigherEntry(rangeFrom);
    if (firstEntry == null)     return Collections.emptySet();
    final int firstEntryIndex=map.getPageIndex();
    final OMVRBTreeEntry<Object,V> lastEntry;
    if (toInclusive)     lastEntry=map.getHigherEntry(rangeTo);
 else     lastEntry=map.getCeilingEntry(rangeTo,OMVRBTree.PartialSearchMode.LOWEST_BOUNDARY);
    final int lastEntryIndex;
    if (lastEntry != null)     lastEntryIndex=map.getPageIndex();
 else     lastEntryIndex=-1;
    OMVRBTreeEntry<Object,V> entry=firstEntry;
    map.setPageIndex(firstEntryIndex);
    final Set<OIdentifiable> result=new HashSet<OIdentifiable>();
    while (entry != null && !(entry == lastEntry && map.getPageIndex() == lastEntryIndex)) {
      final V value=entry.getValue();
      addToResult(transformer,result,value,maxValuesToFetch);
      if (maxValuesToFetch > -1 && result.size() == maxValuesToFetch)       return result;
      entry=OMVRBTree.next(entry);
    }
    return result;
  }
  finally {
    releaseExclusiveLock();
  }
}
