{
  fetchPlan.put(ANY_WILDCARD,new OFetchPlanLevel(0,0,0));
  if (iFetchPlan != null && !iFetchPlan.isEmpty()) {
    final List<String> planParts=OStringSerializerHelper.split(iFetchPlan,' ');
    if (!planParts.isEmpty()) {
      for (      String planPart : planParts) {
        final List<String> parts=OStringSerializerHelper.split(planPart,':');
        if (parts.size() != 2) {
          throw new IllegalArgumentException("Wrong fetch plan: " + planPart);
        }
        String key=parts.get(0);
        final int level=Integer.parseInt(parts.get(1));
        final OFetchPlanLevel fp;
        if (key.startsWith("[")) {
          final int endLevel=key.indexOf(']');
          if (endLevel == -1)           throw new IllegalArgumentException("Missing closing square bracket on depth level in fetch plan: " + key);
          final String range=key.substring(1,endLevel);
          key=key.substring(endLevel + 1);
          if (key.contains("."))           throw new IllegalArgumentException("Nested levels (fields separated by dot) are not allowed on fetch plan when dynamic depth level is specified (square brackets): " + key);
          final List<String> indexRanges=OStringSerializerHelper.smartSplit(range,'-',' ');
          if (indexRanges.size() > 1) {
            String from=indexRanges.get(0);
            String to=indexRanges.get(1);
            final int rangeFrom=from != null && !from.isEmpty() ? Integer.parseInt(from) : 0;
            final int rangeTo=to != null && !to.isEmpty() ? Integer.parseInt(to) : -1;
            fp=new OFetchPlanLevel(rangeFrom,rangeTo,level);
          }
 else           if (range.equals("*"))           fp=new OFetchPlanLevel(0,-1,level);
 else {
            final int v=Integer.parseInt(range);
            fp=new OFetchPlanLevel(v,v,level);
          }
        }
 else         fp=new OFetchPlanLevel(0,0,level);
        if (key.length() > 1 && key.endsWith(ANY_WILDCARD)) {
          fetchPlanStartsWith.put(key.substring(0,key.length() - 1),fp);
        }
 else {
          fetchPlan.put(key,fp);
        }
      }
    }
  }
}
