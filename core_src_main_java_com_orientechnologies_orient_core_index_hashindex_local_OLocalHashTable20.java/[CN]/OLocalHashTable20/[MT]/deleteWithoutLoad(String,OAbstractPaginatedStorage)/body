{
  final OAtomicOperation atomicOperation;
  try {
    atomicOperation=startAtomicOperation();
  }
 catch (  IOException e) {
    throw new OIndexException("Error during hash table deletion.",e);
  }
  acquireExclusiveLock();
  try {
    if (isFileExists(atomicOperation,name + metadataConfigurationFileExtension)) {
      fileStateId=openFile(atomicOperation,name + metadataConfigurationFileExtension);
      OCacheEntry hashStateEntry=loadPage(atomicOperation,fileStateId,0,true);
      try {
        OHashIndexFileLevelMetadataPage metadataPage=new OHashIndexFileLevelMetadataPage(hashStateEntry,getChangesTree(atomicOperation,hashStateEntry),false);
        for (int i=0; i < HASH_CODE_SIZE; i++) {
          if (!metadataPage.isRemoved(i)) {
            final long fileId=metadataPage.getFileId(i);
            openFile(atomicOperation,fileId);
            deleteFile(atomicOperation,fileId);
          }
        }
      }
  finally {
        releasePage(atomicOperation,hashStateEntry);
      }
      if (isFileExists(atomicOperation,fileStateId))       deleteFile(atomicOperation,fileStateId);
      directory=new OHashTableDirectory(treeStateFileExtension,name,durableInNonTxMode,storage);
      directory.deleteWithoutOpen();
      if (isFileExists(atomicOperation,name + nullBucketFileExtension)) {
        final long nullBucketId=openFile(atomicOperation,name + nullBucketFileExtension);
        deleteFile(atomicOperation,nullBucketId);
      }
    }
    endAtomicOperation(false,null);
  }
 catch (  IOException ioe) {
    rollback();
    throw new OIndexException("Cannot delete hash table with name " + name,ioe);
  }
catch (  Exception e) {
    rollback();
    throw new OIndexException("Cannot delete hash table with name " + name,e);
  }
 finally {
    releaseExclusiveLock();
  }
}
