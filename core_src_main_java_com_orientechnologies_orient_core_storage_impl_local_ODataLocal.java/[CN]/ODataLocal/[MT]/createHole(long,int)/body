{
  long holePositionOffset=iRecordOffset;
  int holeSize=iRecordSize + RECORD_FIX_SIZE;
  final long timer=OProfiler.getInstance().startChrono();
  try {
    long[] pos=getRelativePosition(iRecordOffset);
    final OFile file=files[(int)pos[0]];
    final ODataHoleInfo closestHole=getCloserHole(iRecordOffset,iRecordSize,file,pos);
    OProfiler.getInstance().stopChrono(PROFILER_HOLE_FIND_CLOSER,timer);
    if (closestHole == null)     holeSegment.createHole(iRecordOffset,holeSize);
 else     if (closestHole.dataOffset + closestHole.size == iRecordOffset) {
      holeSize+=closestHole.size;
      holeSegment.updateHole(closestHole,closestHole.dataOffset,holeSize);
      holePositionOffset=closestHole.dataOffset;
    }
 else     if (holePositionOffset + holeSize == closestHole.dataOffset) {
      holeSize+=closestHole.size;
      holeSegment.updateHole(closestHole,holePositionOffset,holeSize);
    }
 else {
      if (defragStrategy == 1)       holeSegment.createHole(iRecordOffset,holeSize);
 else {
        defrag(file,iRecordOffset,iRecordSize,closestHole);
        return;
      }
    }
    pos=getRelativePosition(holePositionOffset);
    files[(int)pos[0]].writeInt(pos[1],holeSize * -1);
  }
  finally {
    OProfiler.getInstance().stopChrono(PROFILER_HOLE_CREATE,timer);
  }
}
