{
  result.clear();
  final Matcher matcher=OUTPUT_GRAMMAR.matcher(text);
  OutputCollection lastCollection=null;
  while (matcher.find()) {
    final String match=matcher.group(1);
    if (match.charAt(0) == '{') {
      if (Character.isDigit(match.charAt(1))) {
        final int spaceIndex=match.indexOf(' ');
        final int requiredMatches=Integer.parseInt(match.substring(1,spaceIndex));
        lastCollection=new OutputSet(requiredMatches);
        result.add(lastCollection);
        parseOutputItems(match.substring(spaceIndex + 1,match.length() - 1),lastCollection);
        lastCollection=null;
      }
 else {
        lastCollection=new OutputSet();
        result.add(lastCollection);
        parseOutputItems(match.substring(1,match.length() - 1),lastCollection);
        lastCollection=null;
      }
    }
 else {
      if (lastCollection == null) {
        lastCollection=new OutputList();
        result.add(lastCollection);
      }
      lastCollection.add(parseChange(match));
    }
  }
}
