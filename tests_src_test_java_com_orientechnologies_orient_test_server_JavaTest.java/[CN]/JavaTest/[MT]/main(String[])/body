{
  int NUM_INSERTLOOPS=256;
  NumberFormat formatter=new DecimalFormat("#0.00000");
  final long totalstart=System.currentTimeMillis();
  OGlobalConfiguration.INDEX_AUTO_LAZY_UPDATES.setValue(0);
  OGlobalConfiguration.INDEX_MANUAL_LAZY_UPDATES.setValue(0);
  OGlobalConfiguration.USE_WAL.setValue(false);
  OGlobalConfiguration.WAL_SYNC_ON_PAGE_FLUSH.setValue(false);
  final OrientGraphFactory factory=new OrientGraphFactory("plocal:/temp/databases/VLR","admin","admin");
  Orient.instance().scheduleTask(new TimerTask(){
    @Override public void run(){
      System.out.printf("Total Vertex imported: [%d], Vertex per second: [%d] \n",totalInserted.get(),countPerSeconds.get());
      countPerSeconds.set(0);
    }
  }
,1000,1000);
  try {
    OrientGraphNoTx graph=factory.getNoTx();
    graph.getRawGraph().set(ODatabase.ATTRIBUTES.MINIMUMCLUSTERS,Runtime.getRuntime().availableProcessors());
    OrientVertexType ipv4=graph.getVertexType("ipv4");
    if (ipv4 == null) {
      ipv4=graph.createVertexType("ipv4");
      OrientVertexType.OrientVertexProperty decimal=ipv4.createProperty("Decimal",OType.LONG);
      decimal.createIndex(OClass.INDEX_TYPE.UNIQUE_HASH_INDEX);
    }
    Thread[] threads=new Thread[threadsNumber];
    for (int i=0; i < threadsNumber; i++) {
      threads[i]=new Thread(new IPAugmentRunnable(i,factory));
    }
    for (    Thread thread : threads) {
      thread.start();
    }
    for (    Thread thread : threads) {
      try {
        thread.join();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
  finally {
    factory.close();
  }
  long totalend=System.currentTimeMillis();
  System.out.println("** END ** Finished in " + formatter.format((totalend - totalstart) / 1000d) + " seconds");
}
