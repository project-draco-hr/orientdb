{
  final OSQLFunctionDifference merger=new OSQLFunctionDifference();
  final List<OSQLFunctionDifference> differences=new ArrayList<OSQLFunctionDifference>(3);
  for (int i=0; i < 3; i++) {
    differences.add(new OSQLFunctionDifference(){
      @Override protected boolean returnDistributedResult(){
        return true;
      }
    }
);
  }
  final List<List<Object>> incomes=Arrays.asList(Arrays.<Object>asList(1,2,3,4,5,1),Arrays.<Object>asList(3,5,6,7,0,1,3,3,6),Arrays.<Object>asList(2,2,8,9));
  final Set<Object> expectedResult=new HashSet<Object>(Arrays.<Object>asList(4,7,8,9,0));
  for (int j=0; j < 3; j++) {
    for (    Object i : incomes.get(j)) {
      differences.get(j).execute(null,new Object[]{i},null);
    }
  }
  final Set<Object> actualResult=(Set<Object>)merger.mergeDistributedResult(Arrays.asList((Object)differences.get(0).getResult(),differences.get(1).getResult(),differences.get(2).getResult()));
  assertSetEquals(actualResult,expectedResult);
}
