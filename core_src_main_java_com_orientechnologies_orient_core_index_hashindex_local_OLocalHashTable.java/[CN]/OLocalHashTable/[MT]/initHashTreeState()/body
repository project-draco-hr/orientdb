{
  for (long pageIndex=0; pageIndex < MAX_LEVEL_SIZE; pageIndex++) {
    final OCacheEntry cacheEntry=loadPageEntry(pageIndex,0);
    final OCachePointer pagePointer=cacheEntry.getCachePointer();
    pagePointer.acquireExclusiveLock();
    try {
      final OHashIndexBucket<K,V> emptyBucket=new OHashIndexBucket<K,V>(MAX_LEVEL_DEPTH,pagePointer.getDataPointer(),keySerializer,valueSerializer,keyTypes);
    }
  finally {
      pagePointer.releaseExclusiveLock();
      cacheEntry.markDirty();
      diskCache.release(cacheEntry);
    }
  }
  final long[] rootTree=new long[MAX_LEVEL_SIZE];
  for (int i=0; i < MAX_LEVEL_SIZE; i++)   rootTree[i]=createBucketPointer(i,0);
  hashTree=new long[1][];
  hashTree[0]=rootTree;
  nodesMetadata=new OHashTreeNodeMetadata[1];
  nodesMetadata[0]=new OHashTreeNodeMetadata((byte)0,(byte)0,(byte)MAX_LEVEL_DEPTH);
  diskCache.loadPinnedPage(hashStateEntry);
  OCachePointer hashStatePointer=hashStateEntry.getCachePointer();
  hashStatePointer.acquireExclusiveLock();
  try {
    OHashIndexFileLevelMetadataPage metadataPage=new OHashIndexFileLevelMetadataPage(hashStatePointer.getDataPointer(),ODurablePage.TrackMode.NONE,false);
    metadataPage.setBucketsCount(0,MAX_LEVEL_SIZE);
    metadataPage.setRecordsCount(0);
    metadataPage.setHashTreeSize(1);
    hashStateEntry.markDirty();
  }
  finally {
    hashStatePointer.releaseExclusiveLock();
    diskCache.release(hashStateEntry);
  }
}
