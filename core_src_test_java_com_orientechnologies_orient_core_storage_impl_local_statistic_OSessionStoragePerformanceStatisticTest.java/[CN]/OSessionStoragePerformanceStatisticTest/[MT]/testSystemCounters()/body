{
  final OModifiableInteger counterOne=new OModifiableInteger();
  OSessionStoragePerformanceStatistic sessionStoragePerformanceStatisticOne=new OSessionStoragePerformanceStatistic(100,new OSessionStoragePerformanceStatistic.NanoTimer(){
    @Override public long getNano(){
      counterOne.increment(100);
      return counterOne.getValue();
    }
  }
,false);
  final OSessionStoragePerformanceStatistic.PerformanceCountersHolder counters=new OSessionStoragePerformanceStatistic.PerformanceCountersHolder();
  sessionStoragePerformanceStatisticOne.pushSystemCounters(counters);
  sessionStoragePerformanceStatisticOne.incrementPageAccessOnCacheLevel(false);
  sessionStoragePerformanceStatisticOne.incrementPageAccessOnCacheLevel(false);
  sessionStoragePerformanceStatisticOne.incrementPageAccessOnCacheLevel(false);
  sessionStoragePerformanceStatisticOne.incrementPageAccessOnCacheLevel(true);
  sessionStoragePerformanceStatisticOne.startPageReadFromCacheTimer();
  counterOne.increment(50);
  sessionStoragePerformanceStatisticOne.stopPageReadFromCacheTimer();
  sessionStoragePerformanceStatisticOne.startPageReadFromCacheTimer();
  counterOne.increment(50);
  sessionStoragePerformanceStatisticOne.stopPageReadFromCacheTimer();
  sessionStoragePerformanceStatisticOne.startPageReadFromCacheTimer();
  sessionStoragePerformanceStatisticOne.stopPageReadFromCacheTimer();
  sessionStoragePerformanceStatisticOne.startPageReadFromFileTimer();
  sessionStoragePerformanceStatisticOne.stopPageReadFromFileTimer(2);
  sessionStoragePerformanceStatisticOne.startPageWriteInCacheTimer();
  counterOne.increment(200);
  sessionStoragePerformanceStatisticOne.stopPageWriteInCacheTimer();
  sessionStoragePerformanceStatisticOne.startCommitTimer();
  counterOne.increment(100);
  sessionStoragePerformanceStatisticOne.stopCommitTimer();
  OSessionStoragePerformanceStatistic sessionStoragePerformanceStatisticTwo=new OSessionStoragePerformanceStatistic(100,new OSessionStoragePerformanceStatistic.NanoTimer(){
    private long counter=0;
    @Override public long getNano(){
      return counter+=100;
    }
  }
,false);
  sessionStoragePerformanceStatisticTwo.incrementPageAccessOnCacheLevel(true);
  sessionStoragePerformanceStatisticTwo.startPageReadFromCacheTimer();
  sessionStoragePerformanceStatisticTwo.stopPageReadFromCacheTimer();
  sessionStoragePerformanceStatisticTwo.startPageReadFromFileTimer();
  sessionStoragePerformanceStatisticTwo.stopPageReadFromFileTimer(1);
  sessionStoragePerformanceStatisticTwo.startPageWriteInCacheTimer();
  sessionStoragePerformanceStatisticTwo.stopPageWriteInCacheTimer();
  sessionStoragePerformanceStatisticTwo.startCommitTimer();
  sessionStoragePerformanceStatisticTwo.stopCommitTimer();
  sessionStoragePerformanceStatisticTwo.completeComponentOperation();
  sessionStoragePerformanceStatisticOne.pushSystemCounters(counters);
  sessionStoragePerformanceStatisticTwo.pushSystemCounters(counters);
  Assert.assertEquals(counters.getCacheHits(),40);
  Assert.assertEquals(counters.getAmountOfPagesReadFromCache(),4);
  Assert.assertEquals(counters.getAmountOfPagesReadFromFile(),3);
  Assert.assertEquals(counters.getAmountOfPagesWrittenInCache(),2);
  Assert.assertEquals(counters.getReadSpeedFromCacheInPages(),8000000);
  Assert.assertEquals(counters.getReadSpeedFromFileInPages(),15000000);
  Assert.assertEquals(counters.getWriteSpeedInCacheInPages(),5000000);
  Assert.assertEquals(counters.getCommitTimeAvg(),150);
}
