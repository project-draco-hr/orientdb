{
  banner("Test with readQuorum = 2");
  ODatabaseDocumentTx dbServer1=poolFactory.get(getDatabaseURL(serverInstance.get(0)),"admin","admin").acquire();
  System.out.print("\nChanging configuration (readQuorum=2, autoDeploy=false)...");
  ODocument cfg=null;
  ServerRun server=serverInstance.get(2);
  OHazelcastPlugin manager=(OHazelcastPlugin)server.getServerInstance().getDistributedManager();
  ODistributedConfiguration databaseConfiguration=manager.getDatabaseConfiguration(getDatabaseName());
  cfg=databaseConfiguration.serialize();
  cfg.field("readQuorum",2);
  cfg.field("autoDeploy",false);
  cfg.field("version",(Integer)cfg.field("version") + 1);
  manager.updateCachedDatabaseConfiguration(getDatabaseName(),cfg,true,true);
  System.out.println("\nConfiguration updated.");
  System.out.print("Inserting record r1 and checking consistency...");
  ODatabaseRecordThreadLocal.INSTANCE.set(dbServer1);
  new ODocument("Person").fields("id","R001","firstName","Luke","lastName","Skywalker").save();
  Thread.sleep(200);
  ODocument r1onServer1=retrieveRecord(getDatabaseURL(serverInstance.get(0)),"R001");
  ODocument r1onServer2=retrieveRecord(getDatabaseURL(serverInstance.get(1)),"R001");
  ODocument r1onServer3=retrieveRecord(getDatabaseURL(serverInstance.get(2)),"R001");
  assertEquals(r1onServer1.field("@version"),r1onServer2.field("@version"));
  assertEquals(r1onServer1.field("id"),r1onServer2.field("id"));
  assertEquals(r1onServer1.field("firstName"),r1onServer2.field("firstName"));
  assertEquals(r1onServer1.field("lastName"),r1onServer2.field("lastName"));
  assertEquals(r1onServer2.field("@version"),r1onServer3.field("@version"));
  assertEquals(r1onServer2.field("id"),r1onServer3.field("id"));
  assertEquals(r1onServer2.field("firstName"),r1onServer3.field("firstName"));
  assertEquals(r1onServer2.field("lastName"),r1onServer3.field("lastName"));
  System.out.println("\tDone.");
  int initialVersion=r1onServer1.field("@version");
  System.out.println("Network fault on server3.\n");
  simulateServerFault(serverInstance.get(2),"net-fault");
  assertFalse(serverInstance.get(2).isActive());
  banner("Updaing r1 in r1* on server3 (isolated from the the cluster)");
  ODatabaseDocumentTx dbServer3=null;
  ODocument retrievedRecord=null;
  try {
    dbServer3=new ODatabaseDocumentTx(getPlocalDatabaseURL(serverInstance.get(2))).open("admin","admin");
    retrievedRecord=retrieveRecord(getPlocalDatabaseURL(serverInstance.get(2)),"R001");
    retrievedRecord.field("firstName","Darth");
    retrievedRecord.field("lastName","Vader");
    retrievedRecord.save();
    System.out.println(retrievedRecord.getRecord().toString());
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue(false);
  }
  serverInstance.get(2).startServer(getDistributedServerConfiguration(serverInstance.get(SERVERS - 1)));
  System.out.println("Server 3 restarted.");
  assertTrue(serverInstance.get(2).isActive());
  dbServer3=poolFactory.get(getDatabaseURL(serverInstance.get(2)),"admin","admin").acquire();
  try {
    retrievedRecord=retrieveRecord(getPlocalDatabaseURL(serverInstance.get(2)),"R001");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  assertEquals("R001",retrievedRecord.field("id"));
  assertEquals("Luke",retrievedRecord.field("firstName"));
  assertEquals("Skywalker",retrievedRecord.field("lastName"));
}
