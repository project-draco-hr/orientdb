{
  long oldIndexUsage=profiler.getCounter("db.demo.query.indexUsed");
  long oldcompositeIndexUsed=profiler.getCounter("db.demo.query.compositeIndexUsed");
  OClass klazz=database.getMetadata().getSchema().getOrCreateClass("CountFunctionWithNotUniqueIndexTest");
  if (!klazz.existsProperty("a")) {
    klazz.createProperty("a",OType.STRING);
    klazz.createIndex("a","NOTUNIQUE","a");
  }
  database.newInstance("CountFunctionWithNotUniqueIndexTest").field("a","a").field("b","b").save();
  database.newInstance("CountFunctionWithNotUniqueIndexTest").field("a","a").field("b","b").save();
  database.newInstance("CountFunctionWithNotUniqueIndexTest").field("a","a").field("b","e").save();
  database.newInstance("CountFunctionWithNotUniqueIndexTest").field("a","c").field("b","c").save();
  ODocument result=(ODocument)database.query(new OSQLSynchQuery<ODocument>("select count(*) from CountFunctionWithNotUniqueIndexTest where a = 'a' and b = 'c'")).get(0);
  Assert.assertEquals(result.field("count",Long.class),0l);
  Assert.assertEquals(profiler.getCounter("db.demo.query.indexUsed"),oldIndexUsage + 1);
  Assert.assertEquals(profiler.getCounter("db.demo.query.compositeIndexUsed"),oldcompositeIndexUsed);
}
