{
  if (maxHoleSize > -1 && iRecordSize > maxHoleSize)   return -1;
  int jumpedHoles=0;
  int tempMaxHoleSize=0;
  for (int pos=getHoles() - 1; pos >= 0; --pos) {
    final long recycledPosition=file.readLong(pos * RECORD_SIZE);
    if (recycledPosition > -1) {
      final int recordSize=file.readInt(pos * RECORD_SIZE + OConstants.SIZE_LONG);
      if (recordSize > tempMaxHoleSize)       tempMaxHoleSize=recordSize;
      if (recordSize >= iRecordSize) {
        if (OLogManager.instance().isDebugEnabled())         OLogManager.instance().debug(this,"Recycling hole data #%d",pos);
        if (recordSize == iRecordSize)         if (jumpedHoles == 0)         file.removeTail((getHoles() - pos) * RECORD_SIZE);
 else         deleteHole(pos);
 else         updateHole(pos,recycledPosition + iRecordSize,recordSize - iRecordSize);
        return recycledPosition;
      }
 else       jumpedHoles++;
    }
  }
  maxHoleSize=tempMaxHoleSize;
  return -1;
}
