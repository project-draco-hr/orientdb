{
  Object result=null;
  String[] words=nextValue(true);
  if (words == null)   return null;
  if (words[0].length() > 0 && words[0].charAt(0) == OStringSerializerHelper.PARENTHESIS_BEGIN) {
    braces++;
    currentPos=currentPos - words[0].length() + 1;
    OSQLFilterCondition subCondition=extractConditions(null);
    if (!jumpWhiteSpaces() || text.charAt(currentPos) == ')')     braces--;
    currentPos++;
    return subCondition;
  }
 else   if (words[0].charAt(0) == OStringSerializerHelper.COLLECTION_BEGIN) {
    currentPos=currentPos - words[0].length() + 1;
    final List<Object> coll=new ArrayList<Object>();
    String[] item;
    Object v;
    do {
      item=nextValue(true);
      v=OSQLHelper.parseValue(database,this,item[1]);
      coll.add(v);
      currentPos=OStringParser.jump(text,currentPos," ,\t\r\n");
      item=nextValue(true);
    }
 while (item != null && item[0].equals(OStringSerializerHelper.COLLECTION_SEPARATOR));
    currentPos++;
    return coll;
  }
 else   if (words[0].startsWith(OCommandExecutorSQLAbstract.KEYWORD_COLUMN)) {
    final List<String> parameters=OStringSerializerHelper.getParameters(words[0]);
    if (parameters.size() != 1)     throw new OQueryParsingException("Missed column number",text,currentPos);
    result=new OSQLFilterItemColumn(this,parameters.get(0));
  }
 else   if (words[0].startsWith("@")) {
    result=new OSQLFilterItemRecordAttrib(this,words[0]);
  }
 else   if (words[0].startsWith(OSQLFilterItemFieldAll.NAME + OStringSerializerHelper.PARENTHESIS_BEGIN)) {
    result=new OSQLFilterItemFieldAll(this,words[1]);
  }
 else   if (words[0].startsWith(OSQLFilterItemFieldAny.NAME + OStringSerializerHelper.PARENTHESIS_BEGIN)) {
    result=new OSQLFilterItemFieldAny(this,words[1]);
  }
 else {
    int sepPos=words[0].indexOf('.');
    int parPos=words[0].indexOf(OStringSerializerHelper.PARENTHESIS_BEGIN);
    if (Character.isLetter(words[0].charAt(0)) && parPos > -1 && (sepPos == -1 || sepPos > parPos)) {
      int pos=words[0].indexOf(OStringSerializerHelper.PARENTHESIS_BEGIN);
      String funcName=words[0].substring(0,pos);
      Class<? extends OSQLFunction> functionClass=OSQLParser.getInstance().getFunction(funcName);
      if (functionClass == null)       throw new OCommandSQLParsingException("Unknow function " + funcName + "()");
      final OSQLFunction function;
      try {
        function=functionClass.newInstance();
      }
 catch (      Exception e) {
        throw new OConfigurationException("Function " + funcName + "() can be created. Something went wrong in construction. Has it the default constructor?");
      }
      final List<String> funcParams=OStringSerializerHelper.getParameters(words[1]);
      if (funcParams.size() < function.getMinParams() || funcParams.size() > function.getMaxParams())       throw new IllegalArgumentException("Syntax error. Expected: " + function.getSyntax());
      function.configure(database,funcParams);
      return function;
    }
 else {
      if (words[0].equals("NOT")) {
        String[] nextWord=nextValue(true);
        if (nextWord != null && nextWord.length == 2)         words[1]=words[1] + " " + nextWord[1];
      }
      result=OSQLHelper.parseValue(database,this,words[1]);
    }
  }
  return result;
}
