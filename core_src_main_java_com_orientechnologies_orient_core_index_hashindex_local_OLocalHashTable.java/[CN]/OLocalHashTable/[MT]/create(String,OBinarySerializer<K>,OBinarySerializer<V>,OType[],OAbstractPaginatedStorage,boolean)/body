{
  acquireExclusiveLock();
  try {
    this.storage=storageLocal;
    this.keyTypes=keyTypes;
    this.nullKeyIsSupported=nullKeyIsSupported;
    this.diskCache=storage.getDiskCache();
    if (this.diskCache == null)     throw new IllegalStateException("Disk cache was not initialized on storage level");
    this.name=name;
    init(storage);
    this.directory=new OHashTableDirectory(treeStateFileExtension,name,durableInNonTxMode,storage);
    OAtomicOperation atomicOperation=startAtomicOperation();
    try {
      fileStateId=diskCache.addFile(name + metadataConfigurationFileExtension);
      logFileCreation(name + metadataConfigurationFileExtension,fileStateId);
      directory.create();
      hashStateEntry=addPage(atomicOperation,fileStateId,diskCache);
      pinPage(atomicOperation,hashStateEntry,diskCache);
      hashStateEntry.acquireExclusiveLock();
      try {
        OHashIndexFileLevelMetadataPage page=new OHashIndexFileLevelMetadataPage(hashStateEntry,getChangesTree(atomicOperation,hashStateEntry),true);
        createFileMetadata(0,page);
      }
  finally {
        hashStateEntry.releaseExclusiveLock();
        releasePage(atomicOperation,hashStateEntry,diskCache);
      }
      setKeySerializer(keySerializer);
      setValueSerializer(valueSerializer);
      initHashTreeState();
      if (nullKeyIsSupported) {
        nullBucketFileId=diskCache.addFile(name + nullBucketFileExtension);
        logFileCreation(name + nullBucketFileExtension,nullBucketFileId);
      }
      endAtomicOperation(false);
    }
 catch (    IOException e) {
      endAtomicOperation(true);
      throw e;
    }
catch (    Throwable e) {
      endAtomicOperation(true);
      throw new OStorageException(null,e);
    }
  }
 catch (  IOException e) {
    throw new OIndexException("Error during local hash table creation.",e);
  }
 finally {
    releaseExclusiveLock();
  }
}
