{
  final OIndex<Object> index=(OIndex<Object>)getDatabase().getMetadata().getIndexManager().getIndex(parsedTarget.getTargetIndex());
  if (index == null)   throw new OCommandExecutionException("Target index '" + parsedTarget.getTargetIndex() + "' not found");
  if (index.getDefinition() == null)   return;
  if (compiledFilter != null && compiledFilter.getRootCondition() != null) {
    if (!"KEY".equalsIgnoreCase(compiledFilter.getRootCondition().getLeft().toString()))     throw new OCommandExecutionException("'Key' field is required for queries against indexes");
    final OQueryOperator indexOperator=compiledFilter.getRootCondition().getOperator();
    if (indexOperator instanceof OQueryOperatorBetween) {
      final Object[] values=(Object[])compiledFilter.getRootCondition().getRight();
      final Collection<ODocument> entries=index.getEntriesBetween(getIndexKey(index.getDefinition(),values[0]),getIndexKey(index.getDefinition(),values[2]));
      for (      final OIdentifiable r : entries) {
        final boolean continueResultParsing=handleResult(r,false);
        if (!continueResultParsing)         break;
      }
    }
 else     if (indexOperator instanceof OQueryOperatorMajor) {
      final Object value=compiledFilter.getRootCondition().getRight();
      final Collection<ODocument> entries=index.getEntriesMajor(getIndexKey(index.getDefinition(),value),false);
      parseIndexSearchResult(entries);
    }
 else     if (indexOperator instanceof OQueryOperatorMajorEquals) {
      final Object value=compiledFilter.getRootCondition().getRight();
      final Collection<ODocument> entries=index.getEntriesMajor(getIndexKey(index.getDefinition(),value),true);
      parseIndexSearchResult(entries);
    }
 else     if (indexOperator instanceof OQueryOperatorMinor) {
      final Object value=compiledFilter.getRootCondition().getRight();
      final Collection<ODocument> entries=index.getEntriesMinor(getIndexKey(index.getDefinition(),value),false);
      parseIndexSearchResult(entries);
    }
 else     if (indexOperator instanceof OQueryOperatorMinorEquals) {
      final Object value=compiledFilter.getRootCondition().getRight();
      final Collection<ODocument> entries=index.getEntriesMinor(getIndexKey(index.getDefinition(),value),true);
      parseIndexSearchResult(entries);
    }
 else     if (indexOperator instanceof OQueryOperatorIn) {
      final List<Object> origValues=(List<Object>)compiledFilter.getRootCondition().getRight();
      final List<Object> values=new ArrayList<Object>(origValues.size());
      for (      Object val : origValues) {
        if (index.getDefinition() instanceof OCompositeIndexDefinition) {
          throw new OCommandExecutionException("Operator IN not supported yet.");
        }
        val=getIndexKey(index.getDefinition(),val);
        values.add(val);
      }
      final Collection<ODocument> entries=index.getEntries(values);
      parseIndexSearchResult(entries);
    }
 else {
      final Object right=compiledFilter.getRootCondition().getRight();
      final Object keyValue=getIndexKey(index.getDefinition(),right);
      final Object res;
      if (index.getDefinition().getParamCount() == 1) {
        res=index.get(keyValue);
      }
 else {
        final Object secondKey=getIndexKey(index.getDefinition(),right);
        res=index.getValuesBetween(keyValue,secondKey);
      }
      if (res != null)       if (res instanceof Collection<?>)       for (      final OIdentifiable r : (Collection<OIdentifiable>)res)       handleResult(createIndexEntryAsDocument(keyValue,r.getIdentity()),true);
 else       handleResult(createIndexEntryAsDocument(keyValue,((OIdentifiable)res).getIdentity()),true);
    }
  }
 else {
    if (isIndexSizeQuery()) {
      getProjectionGroup(null).applyValue(projections.keySet().iterator().next(),index.getSize());
      return;
    }
    if (isIndexKeySizeQuery()) {
      getProjectionGroup(null).applyValue(projections.keySet().iterator().next(),index.getKeySize());
      return;
    }
    final OIndexInternal<?> indexInternal=index.getInternal();
    if (indexInternal instanceof OSharedResource)     ((OSharedResource)indexInternal).acquireExclusiveLock();
    try {
      for (Iterator<Entry<Object,Object>> it=index.iterator(); it.hasNext(); ) {
        final Entry<Object,Object> current=it.next();
        if (current.getValue() instanceof Collection<?>) {
          for (          OIdentifiable identifiable : ((Set<OIdentifiable>)current.getValue()))           if (!handleResult(createIndexEntryAsDocument(current.getKey(),identifiable.getIdentity()),true))           break;
        }
 else         if (!handleResult(createIndexEntryAsDocument(current.getKey(),(OIdentifiable)current.getValue()),true))         break;
      }
    }
  finally {
      if (indexInternal instanceof OSharedResource)       ((OSharedResource)indexInternal).releaseExclusiveLock();
    }
  }
}
