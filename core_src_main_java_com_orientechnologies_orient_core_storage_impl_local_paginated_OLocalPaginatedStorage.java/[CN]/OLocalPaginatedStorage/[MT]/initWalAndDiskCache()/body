{
  if (OGlobalConfiguration.USE_WAL.getValueAsBoolean()) {
    fuzzyCheckpointExecutor=Executors.newSingleThreadScheduledExecutor(new ThreadFactory(){
      @Override public Thread newThread(      Runnable r){
        Thread thread=new Thread(r);
        thread.setDaemon(true);
        return thread;
      }
    }
);
    checkpointExecutor=Executors.newSingleThreadExecutor(new ThreadFactory(){
      @Override public Thread newThread(      Runnable r){
        Thread thread=new Thread(r);
        thread.setDaemon(true);
        return thread;
      }
    }
);
    writeAheadLog=new ODiskWriteAheadLog(this);
    final int fuzzyCheckpointDelay=OGlobalConfiguration.WAL_FUZZY_CHECKPOINT_INTERVAL.getValueAsInteger();
    fuzzyCheckpointExecutor.scheduleWithFixedDelay(new Runnable(){
      @Override public void run(){
        try {
          makeFuzzyCheckPoint();
        }
 catch (        Throwable e) {
          OLogManager.instance().error(this,"Error during background FUZZY checkpoint creation for storage " + name,e);
        }
      }
    }
,fuzzyCheckpointDelay,fuzzyCheckpointDelay,TimeUnit.SECONDS);
  }
 else   writeAheadLog=null;
  long diskCacheSize=OGlobalConfiguration.DISK_CACHE_SIZE.getValueAsLong() * 1024 * 1024;
  long writeCacheSize=(long)Math.floor((((double)OGlobalConfiguration.DISK_WRITE_CACHE_PART.getValueAsInteger()) / 100.0) * diskCacheSize);
  long readCacheSize=diskCacheSize - writeCacheSize;
  diskCache=new OReadWriteDiskCache(name,readCacheSize,writeCacheSize,OGlobalConfiguration.DISK_CACHE_PAGE_SIZE.getValueAsInteger() * ONE_KB,OGlobalConfiguration.DISK_WRITE_CACHE_PAGE_TTL.getValueAsLong() * 1000,OGlobalConfiguration.DISK_WRITE_CACHE_PAGE_FLUSH_INTERVAL.getValueAsInteger(),this,writeAheadLog,false,true);
}
