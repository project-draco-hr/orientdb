{
  return new Iterator<OClosableEntry<K,V>>(){
    private OClosableEntry<K,V> next=head;
    private OClosableEntry<K,V> current=null;
    @Override public boolean hasNext(){
      return next != null;
    }
    @Override public OClosableEntry<K,V> next(){
      if (next == null) {
        throw new NoSuchElementException();
      }
      current=next;
      next=next.getNext();
      return current;
    }
    @Override public void remove(){
      if (current == null) {
        throw new IllegalStateException("Method next was not called");
      }
      OClosableLRUList.this.remove(current);
      current=null;
    }
  }
;
}
