{
  for (int i=0; i < KEYS_COUNT; i++) {
    sbTree.put(i,createValue(i,OSBTreeValuePage.MAX_BINARY_VALUE_SIZE + 4));
    doReset();
  }
  for (int i=0; i < KEYS_COUNT; i++) {
    if (i % 3 == 0)     Assert.assertEquals(sbTree.remove(i),createValue(i,OSBTreeValuePage.MAX_BINARY_VALUE_SIZE + 4));
    doReset();
  }
  Assert.assertEquals((int)sbTree.firstKey(),1);
  doReset();
  Assert.assertEquals((int)sbTree.lastKey(),(KEYS_COUNT - 1) % 3 == 0 ? KEYS_COUNT - 2 : KEYS_COUNT - 1);
  doReset();
  for (int i=0; i < KEYS_COUNT; i++) {
    if (i % 3 == 0)     Assert.assertNull(sbTree.get(i));
 else     Assert.assertEquals(sbTree.get(i),createValue(i,OSBTreeValuePage.MAX_BINARY_VALUE_SIZE + 4));
    doReset();
  }
}
