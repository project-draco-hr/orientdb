{
  acquireSharedLock();
  try {
    if (transformer == null)     return sbTree.size();
 else {
      final Object firstKey=sbTree.firstKey();
      final Object lastKey=sbTree.lastKey();
      if (firstKey != null && lastKey != null) {
        int counter=0;
        final OSBTree.OSBTreeCursor<Object,Object> cursor=sbTree.iterateEntriesBetween(firstKey,true,lastKey,true,true);
        Map.Entry<Object,Object> entry=cursor.next(-1);
        while (entry != null) {
          counter+=transformer.transformFromValue(entry.getValue()).size();
          entry=cursor.next(-1);
        }
        return counter;
      }
      return 0;
    }
  }
  finally {
    releaseSharedLock();
  }
}
