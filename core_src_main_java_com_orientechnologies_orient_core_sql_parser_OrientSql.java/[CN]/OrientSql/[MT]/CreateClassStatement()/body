{
  OCreateClassStatement jjtn000=new OCreateClassStatement(JJTCREATECLASSSTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  OIdentifier lastIdentifier;
  OInteger lastInteger;
  try {
    jj_consume_token(CREATE);
    jj_consume_token(CLASS);
    jjtn000.name=Identifier();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case EXTENDS:
      jj_consume_token(EXTENDS);
    lastIdentifier=Identifier();
  jjtn000.superclasses=new ArrayList<OIdentifier>();
jjtn000.superclasses.add(lastIdentifier);
label_50: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
  ;
break;
default :
jj_la1[282]=jj_gen;
break label_50;
}
jj_consume_token(COMMA);
lastIdentifier=Identifier();
jjtn000.superclasses.add(lastIdentifier);
}
break;
default :
jj_la1[283]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case CLUSTER:
jj_consume_token(CLUSTER);
lastInteger=Integer();
jjtn000.clusters=new ArrayList<OInteger>();
jjtn000.clusters.add(lastInteger);
label_51: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[284]=jj_gen;
break label_51;
}
jj_consume_token(COMMA);
lastInteger=Integer();
jjtn000.clusters.add(lastInteger);
}
break;
default :
jj_la1[285]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case CLUSTERS:
jj_consume_token(CLUSTERS);
jjtn000.totalClusterNo=Integer();
break;
default :
jj_la1[286]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ABSTRACT:
jj_consume_token(ABSTRACT);
jjtn000.abstractClass=true;
break;
default :
jj_la1[287]=jj_gen;
;
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
