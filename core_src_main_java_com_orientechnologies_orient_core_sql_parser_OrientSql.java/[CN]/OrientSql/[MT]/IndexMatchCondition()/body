{
  OIndexMatchCondition jjtn000=new OIndexMatchCondition(JJTINDEXMATCHCONDITION);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  try {
    jj_consume_token(KEY);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case EQ:
case LT:
case GT:
case LE:
case GE:
case NE:
case NEQ:
case LIKE:
case CONTAINSKEY:
      CompareOperator();
    jj_consume_token(LBRACKET);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case VALUES:
case SET:
case NULL:
case ORDER:
case GROUP:
case OFFSET:
case THIS:
case RECORD_ATTRIBUTE:
case INTEGER_LITERAL:
case FLOATING_POINT_LITERAL:
case CHARACTER_LITERAL:
case STRING_LITERAL:
case LPAREN:
case LBRACKET:
case HOOK:
case COLON:
case MINUS:
case IN:
case KEY:
case IDENTIFIER:
case 121:
    FilterItem();
  label_16:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
      ;
    break;
default :
  jj_la1[66]=jj_gen;
break label_16;
}
jj_consume_token(COMMA);
FilterItem();
}
break;
default :
jj_la1[67]=jj_gen;
;
}
jj_consume_token(RBRACKET);
break;
case BETWEEN:
jj_consume_token(BETWEEN);
jj_consume_token(LBRACKET);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case VALUES:
case SET:
case NULL:
case ORDER:
case GROUP:
case OFFSET:
case THIS:
case RECORD_ATTRIBUTE:
case INTEGER_LITERAL:
case FLOATING_POINT_LITERAL:
case CHARACTER_LITERAL:
case STRING_LITERAL:
case LPAREN:
case LBRACKET:
case HOOK:
case COLON:
case MINUS:
case IN:
case KEY:
case IDENTIFIER:
case 121:
FilterItem();
label_17: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[68]=jj_gen;
break label_17;
}
jj_consume_token(COMMA);
FilterItem();
}
break;
default :
jj_la1[69]=jj_gen;
;
}
jj_consume_token(RBRACKET);
jj_consume_token(AND);
jj_consume_token(LBRACKET);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case VALUES:
case SET:
case NULL:
case ORDER:
case GROUP:
case OFFSET:
case THIS:
case RECORD_ATTRIBUTE:
case INTEGER_LITERAL:
case FLOATING_POINT_LITERAL:
case CHARACTER_LITERAL:
case STRING_LITERAL:
case LPAREN:
case LBRACKET:
case HOOK:
case COLON:
case MINUS:
case IN:
case KEY:
case IDENTIFIER:
case 121:
FilterItem();
label_18: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[70]=jj_gen;
break label_18;
}
jj_consume_token(COMMA);
FilterItem();
}
break;
default :
jj_la1[71]=jj_gen;
;
}
jj_consume_token(RBRACKET);
break;
default :
jj_la1[72]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
}
