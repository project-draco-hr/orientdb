{
  setCurrentDatabaseinThreadLocal();
  try {
    if (status == STATUS.OPEN)     throw new IllegalStateException("Database " + getName() + " is already open");
    if (storage.isClosed()) {
      storage.open(iUserName,iUserPassword,properties);
    }
 else     if (storage instanceof OStorageProxy) {
      final String name=((OStorageProxy)storage).getUserName();
      if (!name.equals(iUserName)) {
        storage.close();
        storage.open(iUserName,iUserPassword,properties);
      }
    }
    status=STATUS.OPEN;
    initAtFirstOpen(iUserName,iUserPassword);
    if (!(getStorage() instanceof OStorageProxy)) {
      final OSchemaProxy schema=getMetadata().getSchema();
      if (user == null || user.getVersion() != schema.getVersion() || !user.getName().equalsIgnoreCase(iUserName)) {
        final OUser usr=metadata.getSecurity().authenticate(iUserName,iUserPassword);
        if (usr != null)         user=new OImmutableUser(schema.getVersion(),usr);
 else         user=null;
        checkSecurity(ODatabaseSecurityResources.DATABASE,ORole.PERMISSION_READ);
      }
    }
    callOnOpenListeners();
  }
 catch (  OException e) {
    close();
    throw e;
  }
catch (  Exception e) {
    close();
    throw new ODatabaseException("Cannot open database",e);
  }
  return (DB)this;
}
