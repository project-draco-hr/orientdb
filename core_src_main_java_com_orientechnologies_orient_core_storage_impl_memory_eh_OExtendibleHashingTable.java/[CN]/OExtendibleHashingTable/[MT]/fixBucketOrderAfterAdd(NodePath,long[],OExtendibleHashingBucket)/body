{
  long newFilePosition;
  final long nextBucketPos=nextBucket(new NodePath(nodePath.parent,nodePath.hashMapOffset,nodePath.itemIndex + 1,nodePath.nodeIndex,nodePath.nodeGlobalDepth,nodePath.nodeLocalDepth));
  bucket.setNextBucket(nextBucketPos);
  final long prevBucketPos=prevBucket(new NodePath(nodePath.parent,nodePath.hashMapOffset,nodePath.itemIndex - 1,nodePath.nodeIndex,nodePath.nodeGlobalDepth,nodePath.nodeLocalDepth));
  bucket.setPrevBucket(prevBucketPos);
  newFilePosition=file.size();
  node[nodePath.itemIndex + nodePath.hashMapOffset]=newFilePosition;
  if (nextBucketPos > 0) {
    final OExtendibleHashingBucket nextBucket=file.get((int)nextBucketPos - 1);
    nextBucket.setPrevBucket(newFilePosition);
  }
  if (prevBucketPos > 0) {
    final OExtendibleHashingBucket prevBucket=file.get((int)prevBucketPos - 1);
    prevBucket.setNextBucket(newFilePosition);
  }
}
