{
  writeAheadLog.close();
  writeAheadLog=createWAL(3,6 * OWALPage.PAGE_SIZE);
  List<OWALRecord> writtenRecords=new ArrayList<OWALRecord>();
  OWALRecord walRecord=new TestRecord(OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET,false);
  writeAheadLog.log(walRecord);
  writtenRecords.add(walRecord);
  walRecord=new TestRecord(OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET + 100,false);
  OLogSequenceNumber end=writeAheadLog.log(walRecord);
  writtenRecords.add(walRecord);
  writeAheadLog.flush();
  RandomAccessFile rndFile=new RandomAccessFile(new File(testDir,"WriteAheadLogTest.0.wal"),"r");
  byte[] content=new byte[OWALPage.PAGE_SIZE];
  rndFile.seek(2 * OWALPage.PAGE_SIZE);
  rndFile.readFully(content);
  rndFile.close();
  walRecord=new TestRecord(OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET - 100,false);
  writeAheadLog.log(walRecord);
  writtenRecords.add(walRecord);
  walRecord=new TestRecord(OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET,false);
  writeAheadLog.log(walRecord);
  writtenRecords.add(walRecord);
  walRecord=new TestRecord(OWALPage.PAGE_SIZE - OWALPage.RECORDS_OFFSET,false);
  writeAheadLog.log(walRecord);
  writtenRecords.add(walRecord);
  writeAheadLog.close();
  rndFile=new RandomAccessFile(new File(testDir,"WriteAheadLogTest.0.wal"),"rw");
  rndFile.seek(2 * OWALPage.PAGE_SIZE);
  rndFile.write(content);
  rndFile.close();
  writeAheadLog=createWAL(3,6 * OWALPage.PAGE_SIZE);
  Assert.assertEquals(writeAheadLog.end(),end);
  assertLogContent(writeAheadLog,writtenRecords.subList(0,2));
  Assert.assertNull(writeAheadLog.read(writtenRecords.get(2).getLsn()));
}
