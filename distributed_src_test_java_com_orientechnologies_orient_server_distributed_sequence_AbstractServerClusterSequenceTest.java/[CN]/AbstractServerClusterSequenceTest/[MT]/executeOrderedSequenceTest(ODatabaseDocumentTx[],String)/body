{
  OSequenceLibrary seq1=dbs[0].getMetadata().getSequenceLibrary();
  OSequenceLibrary seq2=dbs[1].getMetadata().getSequenceLibrary();
  seq1.createSequence(sequenceName,SEQUENCE_TYPE.ORDERED,null);
  Assert.assertEquals(SEQUENCE_TYPE.ORDERED,seq1.getSequence(sequenceName).getSequenceType());
  ODatabaseRecordThreadLocal.INSTANCE.set(dbs[0]);
  Assert.assertEquals(0L,seq1.getSequence(sequenceName).current());
  ODatabaseRecordThreadLocal.INSTANCE.set(dbs[1]);
  Assert.assertEquals(0L,seq2.getSequence(sequenceName).current());
  Assert.assertEquals(1L,seq2.getSequence(sequenceName).next());
  ODatabaseRecordThreadLocal.INSTANCE.set(dbs[0]);
  Assert.assertEquals(2L,seq1.getSequence(sequenceName).next());
  Assert.assertEquals(3L,seq1.getSequence(sequenceName).next());
  ODatabaseRecordThreadLocal.INSTANCE.set(dbs[1]);
  Assert.assertEquals(0L,seq2.getSequence(sequenceName).reset());
  ODatabaseRecordThreadLocal.INSTANCE.set(dbs[0]);
  Assert.assertEquals(0L,seq1.getSequence(sequenceName).current());
  if (RUN_PARALLEL_SYNC_TEST) {
    executeParallelSyncTest(dbs,sequenceName,SEQUENCE_TYPE.ORDERED);
  }
}
