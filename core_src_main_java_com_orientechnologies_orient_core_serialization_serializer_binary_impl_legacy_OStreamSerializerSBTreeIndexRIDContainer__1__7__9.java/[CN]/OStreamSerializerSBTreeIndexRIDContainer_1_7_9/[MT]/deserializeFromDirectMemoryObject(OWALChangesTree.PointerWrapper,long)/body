{
  final long fileId=LONG_SERIALIZER.deserializeFromDirectMemory(wrapper,offset + FILE_ID_OFFSET);
  if (BOOLEAN_SERIALIZER.deserializeFromDirectMemory(wrapper,offset + EMBEDDED_OFFSET)) {
    final int size=INT_SERIALIZER.deserializeFromDirectMemory(wrapper,offset + EMBEDDED_SIZE_OFFSET);
    final Set<OIdentifiable> underlying=new HashSet<OIdentifiable>(Math.max((int)(size / .75f) + 1,16));
    long p=offset + EMBEDDED_VALUES_OFFSET;
    for (int i=0; i < size; i++) {
      underlying.add(LINK_SERIALIZER.deserializeFromDirectMemoryObject(wrapper,p));
      p+=RID_SIZE;
    }
    return new OIndexRIDContainer(fileId,underlying,false);
  }
 else {
    final long pageIndex=LONG_SERIALIZER.deserializeFromDirectMemory(wrapper,offset + SBTREE_ROOTINDEX_OFFSET);
    final int pageOffset=INT_SERIALIZER.deserializeFromDirectMemory(wrapper,offset + SBTREE_ROOTOFFSET_OFFSET);
    final OBonsaiBucketPointer rootPointer=new OBonsaiBucketPointer(pageIndex,pageOffset);
    final ODatabaseDocumentInternal db=ODatabaseRecordThreadLocal.INSTANCE.get();
    final OIndexRIDContainerSBTree underlying=new OIndexRIDContainerSBTree(fileId,rootPointer,false,(OAbstractPaginatedStorage)db.getStorage());
    return new OIndexRIDContainer(fileId,underlying,false);
  }
}
