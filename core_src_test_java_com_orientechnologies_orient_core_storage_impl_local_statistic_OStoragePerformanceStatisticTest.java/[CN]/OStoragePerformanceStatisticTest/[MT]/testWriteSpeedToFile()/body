{
  final OStoragePerformanceStatistic storagePerformanceStatistic=new OStoragePerformanceStatistic(1024,"test",1,new OStoragePerformanceStatistic.NanoTimer(){
    private long counter=0;
    @Override public long getNano(){
      return counter+=100;
    }
  }
);
  Assert.assertFalse(storagePerformanceStatistic.isMeasurementEnabled());
  Assert.assertEquals(storagePerformanceStatistic.getWriteSpeedInFileInPages(),-1);
  Assert.assertEquals(storagePerformanceStatistic.getWriteSpeedInFileInMB(),-1);
  Assert.assertEquals(storagePerformanceStatistic.getAmountOfPagesWrittenToFile(),0);
  storagePerformanceStatistic.startMeasurement();
  for (int i=0; i < 100; i++) {
    storagePerformanceStatistic.startPageWriteToFileTimer();
    ;
    storagePerformanceStatistic.stopPageWriteToFileTimer();
  }
  Thread.sleep(2000);
  Assert.assertEquals(storagePerformanceStatistic.getWriteSpeedInFileInPages(),10000000);
  Assert.assertEquals(storagePerformanceStatistic.getWriteSpeedInFileInMB(),10000000 / 1024);
  Assert.assertEquals(storagePerformanceStatistic.getAmountOfPagesWrittenToFile(),100);
  storagePerformanceStatistic.stopMeasurement();
  for (int i=0; i < 100; i++) {
    storagePerformanceStatistic.startPageWriteToFileTimer();
    ;
    storagePerformanceStatistic.stopPageWriteToFileTimer();
  }
  Thread.sleep(2000);
  Assert.assertEquals(storagePerformanceStatistic.getWriteSpeedInFileInPages(),10000000);
  Assert.assertEquals(storagePerformanceStatistic.getWriteSpeedInFileInMB(),10000000 / 1024);
  Assert.assertEquals(storagePerformanceStatistic.getAmountOfPagesWrittenToFile(),100);
  Assert.assertFalse(storagePerformanceStatistic.isMeasurementEnabled());
}
