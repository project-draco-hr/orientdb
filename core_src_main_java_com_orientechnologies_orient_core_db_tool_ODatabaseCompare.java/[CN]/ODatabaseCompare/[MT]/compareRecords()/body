{
  listener.onMessage("\nStarting deep comparison record by record. This may take a few minutes. Wait please...");
  int clusterId;
  for (  String clusterName : storage1.getClusterNames()) {
    if (includeClusters != null) {
      if (!includeClusters.contains(clusterName))       continue;
    }
 else     if (excludeClusters != null) {
      if (excludeClusters.contains(clusterName))       continue;
    }
    clusterId=storage1.getClusterIdByName(clusterName);
    OClusterPosition[] db1Range=storage1.getClusterDataRange(clusterId);
    OClusterPosition[] db2Range=storage2.getClusterDataRange(clusterId);
    final OClusterPosition db1Min=db1Range[0];
    final OClusterPosition db2Min=db2Range[0];
    final OClusterPosition db1Max=db1Range[1];
    final OClusterPosition db2Max=db2Range[1];
    final ODocument doc1=new ODocument();
    final ODocument doc2=new ODocument();
    final ORecordId rid=new ORecordId(clusterId);
    final OClusterPosition clusterMax=db1Max.compareTo(db2Max) > 0 ? db1Max : db2Max;
    final OStorage storage;
    if (clusterMax.equals(db1Max))     storage=storage1;
 else     storage=storage2;
    OPhysicalPosition[] physicalPositions=storage.ceilingPhysicalPositions(clusterId,new OPhysicalPosition(OClusterPositionFactory.INSTANCE.valueOf(0)));
    long recordsCounter=0;
    while (physicalPositions.length > 0) {
      for (      OPhysicalPosition physicalPosition : physicalPositions) {
        recordsCounter++;
        final OClusterPosition position=physicalPosition.clusterPosition;
        rid.clusterPosition=position;
        if (isDocumentDatabases() && rid.equals(new ORecordId(storage1.getConfiguration().indexMgrRecordId)) && rid.equals(new ORecordId(storage2.getConfiguration().indexMgrRecordId)))         continue;
        final ORawBuffer buffer1=storage1.readRecord(rid,null,true,null,false).getResult();
        final ORawBuffer buffer2=storage2.readRecord(rid,null,true,null,false).getResult();
        if (buffer1 == null && buffer2 == null)         continue;
 else         if (buffer1 == null && buffer2 != null) {
          listener.onMessage("\n- ERR: RID=" + clusterId + ":"+ position+ " is null in DB1");
          ++differences;
        }
 else         if (buffer1 != null && buffer2 == null) {
          listener.onMessage("\n- ERR: RID=" + clusterId + ":"+ position+ " is null in DB2");
          ++differences;
        }
 else {
          if (buffer1.recordType != buffer2.recordType) {
            listener.onMessage("\n- ERR: RID=" + clusterId + ":"+ position+ " recordType is different: "+ (char)buffer1.recordType+ " <-> "+ (char)buffer2.recordType);
            ++differences;
          }
          if (buffer1.buffer == null && buffer2.buffer == null) {
          }
 else           if (buffer1.buffer == null && buffer2.buffer != null) {
            listener.onMessage("\n- ERR: RID=" + clusterId + ":"+ position+ " content is different: null <-> "+ buffer2.buffer.length);
            ++differences;
          }
 else           if (buffer1.buffer != null && buffer2.buffer == null) {
            listener.onMessage("\n- ERR: RID=" + clusterId + ":"+ position+ " content is different: "+ buffer1.buffer.length+ " <-> null");
            ++differences;
          }
 else {
            if (buffer1.recordType == ODocument.RECORD_TYPE) {
              makeDbCall(databaseDocumentTxOne,new ODocumentHelper.ODbRelatedCall<Object>(){
                public Object call(){
                  doc1.reset();
                  doc1.fromStream(buffer1.buffer);
                  return null;
                }
              }
);
              makeDbCall(databaseDocumentTxTwo,new ODocumentHelper.ODbRelatedCall<Object>(){
                public Object call(){
                  doc2.reset();
                  doc2.fromStream(buffer2.buffer);
                  return null;
                }
              }
);
              if (rid.toString().equals(storage1.getConfiguration().schemaRecordId) && rid.toString().equals(storage2.getConfiguration().schemaRecordId)) {
                makeDbCall(databaseDocumentTxOne,new ODocumentHelper.ODbRelatedCall<java.lang.Object>(){
                  public Object call(){
                    convertSchemaDoc(doc1);
                    return null;
                  }
                }
);
                makeDbCall(databaseDocumentTxTwo,new ODocumentHelper.ODbRelatedCall<java.lang.Object>(){
                  public Object call(){
                    convertSchemaDoc(doc2);
                    return null;
                  }
                }
);
              }
              if (!ODocumentHelper.hasSameContentOf(doc1,databaseDocumentTxOne,doc2,databaseDocumentTxTwo)) {
                listener.onMessage("\n- ERR: RID=" + clusterId + ":"+ position+ " document content is different");
                listener.onMessage("\n--- REC1: " + new String(buffer1.buffer));
                listener.onMessage("\n--- REC2: " + new String(buffer2.buffer));
                listener.onMessage("\n");
                ++differences;
              }
            }
 else {
              if (buffer1.buffer.length != buffer2.buffer.length) {
                final String rec1=new String(buffer1.buffer).trim();
                final String rec2=new String(buffer2.buffer).trim();
                if (rec1.length() != rec2.length()) {
                  listener.onMessage("\n- ERR: RID=" + clusterId + ":"+ position+ " content length is different: "+ buffer1.buffer.length+ " <-> "+ buffer2.buffer.length);
                  if (buffer1.recordType == ODocument.RECORD_TYPE || buffer1.recordType == ORecordFlat.RECORD_TYPE)                   listener.onMessage("\n--- REC1: " + rec1);
                  if (buffer2.recordType == ODocument.RECORD_TYPE || buffer2.recordType == ORecordFlat.RECORD_TYPE)                   listener.onMessage("\n--- REC2: " + rec2);
                  listener.onMessage("\n");
                  ++differences;
                }
              }
 else {
                for (int b=0; b < buffer1.buffer.length; ++b) {
                  if (buffer1.buffer[b] != buffer2.buffer[b]) {
                    listener.onMessage("\n- ERR: RID=" + clusterId + ":"+ position+ " content is different at byte #"+ b+ ": "+ buffer1.buffer[b]+ " <-> "+ buffer2.buffer[b]);
                    listener.onMessage("\n--- REC1: " + new String(buffer1.buffer));
                    listener.onMessage("\n--- REC2: " + new String(buffer2.buffer));
                    listener.onMessage("\n");
                    ++differences;
                    break;
                  }
                }
              }
            }
          }
        }
      }
      physicalPositions=storage.higherPhysicalPositions(clusterId,physicalPositions[physicalPositions.length - 1]);
      if (recordsCounter % 10000 == 0)       listener.onMessage("\n" + recordsCounter + " records were processed for cluster "+ clusterName+ " ...");
    }
    listener.onMessage("\nCluster comparison was finished, " + recordsCounter + " records were processed for cluster "+ clusterName+ " ...");
  }
  return true;
}
