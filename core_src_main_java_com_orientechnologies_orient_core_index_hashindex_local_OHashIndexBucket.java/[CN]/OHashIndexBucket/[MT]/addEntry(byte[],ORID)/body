{
  int entreeSize=keySerializer.getObjectSize(key) + ridSerializer.getObjectSize(rid);
  int freePointer=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,bufferPointer + FREE_POINTER_OFFSET);
  int size=size();
  if (freePointer - entreeSize < POSITIONS_ARRAY_OFFSET + (size + 1) * OIntegerSerializer.INT_SIZE)   return false;
  final int index=binarySearch(key);
  if (index >= 0)   throw new IllegalArgumentException("Given value is present in bucket.");
  final int insertionPoint=-index - 1;
  final int positionsOffset=insertionPoint * OIntegerSerializer.INT_SIZE + POSITIONS_ARRAY_OFFSET;
  directMemory.copyData(bufferPointer + positionsOffset,bufferPointer + positionsOffset + OIntegerSerializer.INT_SIZE,size() * OIntegerSerializer.INT_SIZE - insertionPoint * OIntegerSerializer.INT_SIZE);
  final int entreePosition=freePointer - entreeSize;
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(entreePosition,directMemory,bufferPointer + positionsOffset);
  serializeEntry(key,rid,entreePosition);
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(entreePosition,directMemory,bufferPointer + FREE_POINTER_OFFSET);
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(size + 1,directMemory,bufferPointer + SIZE_OFFSET);
  return true;
}
