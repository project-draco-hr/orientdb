{
  final int classNameLen=OVarIntSerializer.readAsInteger(bytes);
  bytes.skip(classNameLen);
  final byte[] field=iFieldName.getBytes();
  final OMetadataInternal metadata=(OMetadataInternal)ODatabaseRecordThreadLocal.INSTANCE.get().getMetadata();
  final OImmutableSchema _schema=metadata.getImmutableSchemaSnapshot();
  while (true) {
    final int len=OVarIntSerializer.readAsInteger(bytes);
    if (len == 0) {
      return null;
    }
 else     if (len > 0) {
      if (iFieldName.length() == len) {
        for (int j=0; j < len; ++j)         if (bytes.bytes[bytes.offset + j] != field[j])         break;
        bytes.skip(len);
        final int valuePos=readInteger(bytes);
        final OType type=readOType(bytes);
        bytes.offset=valuePos;
        return new OBinaryField(iFieldName,type,bytes);
      }
      bytes.skip(len + OIntegerSerializer.INT_SIZE + 1);
      continue;
    }
 else {
      final int id=(len * -1) - 1;
      final OGlobalProperty prop=_schema.getGlobalPropertyById(id);
      if (iFieldName.equals(prop.getName())) {
        final int valuePos=readInteger(bytes);
        final OType type;
        if (prop.getType() != OType.ANY)         type=prop.getType();
 else         type=readOType(bytes);
        bytes.offset=valuePos;
        return new OBinaryField(iFieldName,type,bytes);
      }
      bytes.skip(OIntegerSerializer.INT_SIZE + (prop.getType() != OType.ANY ? 0 : 1));
    }
  }
}
