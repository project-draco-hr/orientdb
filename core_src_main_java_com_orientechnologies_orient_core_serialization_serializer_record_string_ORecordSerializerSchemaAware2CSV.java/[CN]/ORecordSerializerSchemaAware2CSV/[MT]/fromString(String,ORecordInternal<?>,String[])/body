{
  iContent=iContent.trim();
  if (iContent.length() == 0)   return iRecord;
  final ODocument record=(ODocument)iRecord;
  final int posFirstValue=iContent.indexOf(OStringSerializerHelper.ENTRY_SEPARATOR);
  int pos=iContent.indexOf(OStringSerializerHelper.CLASS_SEPARATOR);
  if (pos > -1 && (pos < posFirstValue || posFirstValue == -1)) {
    record.setClassNameIfExists(iContent.substring(0,pos));
    iContent=iContent.substring(pos + 1);
  }
 else   record.setClassNameIfExists(null);
  if (iFields != null && iFields.length == 1 && iFields[0].equals("@class"))   return iRecord;
  final List<String> fields=OStringSerializerHelper.smartSplit(iContent,OStringSerializerHelper.RECORD_SEPARATOR,true,true);
  String fieldName=null;
  String fieldValue;
  OType type;
  OClass linkedClass;
  OType linkedType;
  OProperty prop;
  final List<String> fieldList=(iFields != null && iFields.length > 0) ? Arrays.asList(iFields) : null;
  for (  String field : fields) {
    field=field.trim();
    boolean uncertainType=false;
    try {
      pos=field.indexOf(FIELD_VALUE_SEPARATOR);
      if (pos > -1) {
        fieldName=field.substring(0,pos);
        if (record.containsField(fieldName))         continue;
        if (fieldList != null && !fieldList.contains(fieldName))         continue;
        fieldValue=field.length() > pos + 1 ? field.substring(pos + 1) : null;
        boolean setFieldType=false;
        prop=record.getSchemaClass() != null ? record.getSchemaClass().getProperty(fieldName) : null;
        if (prop != null) {
          type=prop.getType();
          linkedClass=prop.getLinkedClass();
          linkedType=prop.getLinkedType();
        }
 else {
          type=record.fieldType(fieldName);
          if (type != null)           setFieldType=true;
          linkedClass=null;
          linkedType=null;
          if (fieldValue != null && type == null) {
            if (fieldValue.length() > 1 && fieldValue.charAt(0) == '"' && fieldValue.charAt(fieldValue.length() - 1) == '"') {
              type=OType.STRING;
            }
 else             if (fieldValue.startsWith(OStringSerializerHelper.LINKSET_PREFIX)) {
              type=OType.LINKSET;
            }
 else             if (fieldValue.charAt(0) == OStringSerializerHelper.LIST_BEGIN && fieldValue.charAt(fieldValue.length() - 1) == OStringSerializerHelper.LIST_END || fieldValue.charAt(0) == OStringSerializerHelper.SET_BEGIN && fieldValue.charAt(fieldValue.length() - 1) == OStringSerializerHelper.SET_END) {
              type=fieldValue.charAt(0) == OStringSerializerHelper.LIST_BEGIN ? OType.EMBEDDEDLIST : OType.EMBEDDEDSET;
              final String value=fieldValue.substring(1,fieldValue.length() - 1);
              if (!value.isEmpty()) {
                if (value.charAt(0) == OStringSerializerHelper.LINK) {
                  int max=value.length();
                  boolean allLinks=true;
                  boolean checkRid=true;
                  for (int i=0; i < max; ++i) {
                    char c=value.charAt(i);
                    if (checkRid) {
                      if (c != '#') {
                        allLinks=false;
                        break;
                      }
                      checkRid=false;
                    }
 else                     if (c == ',')                     checkRid=true;
                  }
                  if (allLinks) {
                    type=fieldValue.charAt(0) == OStringSerializerHelper.LIST_BEGIN ? OType.LINKLIST : OType.LINKSET;
                    linkedType=OType.LINK;
                  }
                }
 else                 if (value.charAt(0) == OStringSerializerHelper.EMBEDDED_BEGIN) {
                  linkedType=OType.EMBEDDED;
                }
 else                 if (value.charAt(0) == OStringSerializerHelper.CUSTOM_TYPE) {
                  linkedType=OType.CUSTOM;
                }
 else                 if (Character.isDigit(value.charAt(0)) || value.charAt(0) == '+' || value.charAt(0) == '-') {
                  String[] items=value.split(",");
                  linkedType=getType(items[0]);
                }
 else                 if (value.charAt(0) == '\'' || value.charAt(0) == '"')                 linkedType=OType.STRING;
              }
 else               uncertainType=true;
            }
 else             if (fieldValue.charAt(0) == OStringSerializerHelper.MAP_BEGIN && fieldValue.charAt(fieldValue.length() - 1) == OStringSerializerHelper.MAP_END) {
              type=OType.EMBEDDEDMAP;
            }
 else             if (fieldValue.charAt(0) == OStringSerializerHelper.LINK)             type=OType.LINK;
 else             if (fieldValue.charAt(0) == OStringSerializerHelper.EMBEDDED_BEGIN) {
              if (fieldValue.startsWith("(ORIDs"))               type=OType.LINKSET;
 else               type=OType.EMBEDDED;
            }
 else             if (fieldValue.charAt(0) == OStringSerializerHelper.BAG_BEGIN) {
              type=OType.LINKBAG;
            }
 else             if (fieldValue.equals("true") || fieldValue.equals("false"))             type=OType.BOOLEAN;
 else             type=getType(fieldValue);
          }
        }
        if (setFieldType || type == OType.EMBEDDEDLIST || type == OType.EMBEDDEDSET || type == OType.EMBEDDEDMAP || type == OType.EMBEDDED)         record.field(fieldName,fieldFromStream(iRecord,type,linkedClass,linkedType,fieldName,fieldValue),type);
 else         record.field(fieldName,fieldFromStream(iRecord,type,linkedClass,linkedType,fieldName,fieldValue));
        if (uncertainType)         record.setFieldType(fieldName,null);
      }
    }
 catch (    Exception e) {
      OLogManager.instance().exception("Error on unmarshalling field '%s' in record %s with value: ",e,OSerializationException.class,fieldName,iRecord.getIdentity(),field);
    }
  }
  return iRecord;
}
