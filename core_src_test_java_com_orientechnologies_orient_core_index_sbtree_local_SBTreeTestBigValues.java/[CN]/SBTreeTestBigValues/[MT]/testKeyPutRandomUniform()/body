{
  final NavigableSet<Integer> keys=new TreeSet<Integer>();
  long seed=System.currentTimeMillis();
  System.out.println("testKeyPutRandomUniform seed : " + seed);
  final MersenneTwisterFast random=new MersenneTwisterFast(seed);
  while (keys.size() < KEYS_COUNT) {
    int key=random.nextInt(Integer.MAX_VALUE);
    sbTree.put(key,createValue(key,OSBTreeValuePage.MAX_BINARY_VALUE_SIZE + 4));
    keys.add(key);
  }
  Assert.assertEquals(sbTree.firstKey(),keys.first());
  Assert.assertEquals(sbTree.lastKey(),keys.last());
  for (  int key : keys)   Assert.assertEquals(sbTree.get(key),createValue(key,OSBTreeValuePage.MAX_BINARY_VALUE_SIZE + 4));
}
