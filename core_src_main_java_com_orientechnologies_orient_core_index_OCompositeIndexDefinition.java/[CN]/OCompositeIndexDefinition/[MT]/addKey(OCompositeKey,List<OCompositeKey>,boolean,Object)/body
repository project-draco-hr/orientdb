{
  if (keyValue instanceof Collection) {
    final Collection<?> collectionKey=(Collection<?>)keyValue;
    final int collectionSize;
    if (collectionKey.isEmpty())     collectionSize=1;
 else     collectionSize=collectionKey.size();
    if (!containsCollection)     for (int i=1; i < collectionSize; i++) {
      final OCompositeKey compositeKey=new OCompositeKey(firstKey.getKeys());
      compositeKeys.add(compositeKey);
    }
 else     throw new OIndexException("Composite key cannot contain more than one collection item");
    int compositeIndex=0;
    if (!collectionKey.isEmpty()) {
      for (      final Object keyItem : collectionKey) {
        final OCompositeKey compositeKey=compositeKeys.get(compositeIndex);
        compositeKey.addKey(keyItem);
        compositeIndex++;
      }
    }
 else {
      firstKey.addKey(null);
    }
    containsCollection=true;
  }
 else   if (containsCollection)   for (  final OCompositeKey compositeKey : compositeKeys)   compositeKey.addKey(keyValue);
 else   firstKey.addKey(keyValue);
  return containsCollection;
}
