{
  if (iRecords == null)   return;
  final int size=OMultiValue.getSize(iRecords);
  final Iterator<Object> it=OMultiValue.getMultiValueIterator(iRecords);
  if (accept != null && accept.contains("text/csv")) {
    sendStream(OHttpUtils.STATUS_OK_CODE,"OK",OHttpUtils.CONTENT_JSON,"data.csv",new OCallable<Void,OChunkedResponse>(){
      @Override public Void call(      final OChunkedResponse iArgument){
        final LinkedHashSet<String> colNames=new LinkedHashSet<String>();
        final List<ODocument> records=new ArrayList<ODocument>();
        while (it.hasNext()) {
          final Object r=it.next();
          if (r != null && r instanceof OIdentifiable) {
            final ORecord rec=((OIdentifiable)r).getRecord();
            if (rec != null) {
              if (rec instanceof ODocument) {
                final ODocument doc=(ODocument)rec;
                records.add(doc);
                for (                String fieldName : doc.fieldNames()) {
                  colNames.add(fieldName);
                }
              }
            }
          }
        }
        final List<String> orderedColumns=new ArrayList<String>(colNames);
        try {
          for (int col=0; col < orderedColumns.size(); ++col) {
            if (col > 0)             iArgument.write(',');
            iArgument.write(orderedColumns.get(col).getBytes());
          }
          iArgument.write(OHttpUtils.EOL);
          for (          ODocument doc : records) {
            for (int col=0; col < orderedColumns.size(); ++col) {
              if (col > 0) {
                iArgument.write(',');
              }
              Object value=doc.field(orderedColumns.get(col));
              if (value != null) {
                if (!(value instanceof Number))                 value="\"" + value + "\"";
                iArgument.write(value.toString().getBytes());
              }
            }
            iArgument.write(OHttpUtils.EOL);
          }
          iArgument.flush();
        }
 catch (        IOException e) {
          OLogManager.instance().error(this,"HTTP response: error on writing records",e);
        }
        return null;
      }
    }
);
  }
 else {
    if (iFormat == null)     iFormat=JSON_FORMAT;
 else     iFormat=JSON_FORMAT + "," + iFormat;
    if (size <= streamingThreshold) {
      final StringWriter buffer=new StringWriter();
      writeRecordsOnStream(iFetchPlan,iFormat,iAdditionalProperties,it,buffer);
      send(OHttpUtils.STATUS_OK_CODE,"OK",OHttpUtils.CONTENT_JSON,buffer.toString(),null);
    }
 else {
      final String sendFormat=iFormat;
      sendStreamed(OHttpUtils.STATUS_OK_CODE,"OK",OHttpUtils.CONTENT_JSON,new OCallable<Void,OutputStream>(){
        @Override public Void call(        OutputStream iArgument){
          try {
            OutputStreamWriter writer=new OutputStreamWriter(iArgument);
            writeRecordsOnStream(iFetchPlan,sendFormat,iAdditionalProperties,it,writer);
            writer.flush();
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
          return null;
        }
      }
,null);
    }
  }
}
