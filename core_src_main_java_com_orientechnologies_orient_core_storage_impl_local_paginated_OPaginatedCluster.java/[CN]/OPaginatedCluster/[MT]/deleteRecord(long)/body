{
  externalModificationLock.requestModificationLock();
  try {
    acquireExclusiveLock();
    try {
      OAtomicOperation atomicOperation=startAtomicOperation();
      OClusterPositionMapBucket.PositionEntry positionEntry=clusterPositionMap.get(clusterPosition);
      if (positionEntry == null) {
        endAtomicOperation(false);
        return false;
      }
      long pageIndex=positionEntry.getPageIndex();
      int recordPosition=positionEntry.getRecordPosition();
      if (getFilledUpTo(atomicOperation,diskCache,fileId) <= pageIndex) {
        endAtomicOperation(false);
        return false;
      }
      long nextPagePointer=-1;
      int removedContentSize=0;
      do {
        OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,pageIndex,false,diskCache);
        cacheEntry.acquireExclusiveLock();
        int initialFreePageIndex;
        try {
          OClusterPage localPage=new OClusterPage(cacheEntry,false,getChangesTree(atomicOperation,cacheEntry));
          initialFreePageIndex=calculateFreePageIndex(localPage);
          if (localPage.isDeleted(recordPosition)) {
            if (removedContentSize == 0)             return false;
 else             throw new OStorageException("Content of record " + new ORecordId(id,clusterPosition) + " was broken.");
          }
 else           if (removedContentSize == 0) {
            cacheEntry.releaseExclusiveLock();
            releasePage(atomicOperation,cacheEntry,diskCache);
            cacheEntry=loadPage(atomicOperation,fileId,pageIndex,false,diskCache);
            cacheEntry.acquireExclusiveLock();
            localPage=new OClusterPage(cacheEntry,false,getChangesTree(atomicOperation,cacheEntry));
          }
          byte[] content=localPage.getRecordBinaryValue(recordPosition,0,localPage.getRecordSize(recordPosition));
          int initialFreeSpace=localPage.getFreeSpace();
          localPage.deleteRecord(recordPosition);
          removedContentSize+=localPage.getFreeSpace() - initialFreeSpace;
          nextPagePointer=OLongSerializer.INSTANCE.deserializeNative(content,content.length - OLongSerializer.LONG_SIZE);
        }
  finally {
          cacheEntry.releaseExclusiveLock();
          releasePage(atomicOperation,cacheEntry,diskCache);
        }
        updateFreePagesIndex(initialFreePageIndex,pageIndex,atomicOperation);
        pageIndex=nextPagePointer >>> PAGE_INDEX_OFFSET;
        recordPosition=(int)(nextPagePointer & RECORD_POSITION_MASK);
      }
 while (nextPagePointer >= 0);
      updateClusterState(-1,-removedContentSize,atomicOperation);
      clusterPositionMap.remove(clusterPosition);
      endAtomicOperation(false);
      return true;
    }
 catch (    Throwable e) {
      endAtomicOperation(true);
      throw new OStorageException(null,e);
    }
 finally {
      releaseExclusiveLock();
    }
  }
  finally {
    externalModificationLock.releaseModificationLock();
  }
}
