{
  cluster=iCluster;
  final OStorage storage=openStorage(storageName);
  try {
    resolver=iCluster.getConfictResolverClass().newInstance();
    resolver.startup(iCluster,storageName);
  }
 catch (  Exception e) {
    OLogManager.instance().error(this,"Cannot create the conflict resolver instance of class '%s'",iCluster.getConfictResolverClass(),e);
  }
  final String logDirectory=OSystemVariableResolver.resolveSystemVariables(OServerMain.server().getDatabaseDirectory() + "/" + storageName);
  log=new ODatabaseJournal(storage,logDirectory);
  for (  ORecordId rid : log.getUncommittedOperations()) {
    try {
      if (getConflictResolver().existConflictsForRecord(rid))       continue;
      final ORawBuffer record=(ORawBuffer)iCluster.routeOperation2Node(getClusterNameByRID(storage,rid),rid,new OReadRecordDistributedTask(iCluster.getLocalNodeId(),storageName,rid));
      if (record == null)       storage.deleteRecord(rid,-1,0,null);
 else       storage.updateRecord(rid,record.buffer,record.version,record.recordType,0,null);
    }
 catch (    ExecutionException e) {
      OLogManager.instance().warn(this,"DISTRIBUTED Error on acquiring uncommitted record %s from other servers. The database could be unaligned with others!",e,rid);
    }
  }
}
