{
  if (!enabled)   return;
  Orient.instance().setRunningDistributed(true);
  OGlobalConfiguration.RID_BAG_EMBEDDED_TO_SBTREEBONSAI_THRESHOLD.setValue(Integer.MAX_VALUE);
  OGlobalConfiguration.RID_BAG_SBTREEBONSAI_TO_EMBEDDED_THRESHOLD.setValue(-1);
  OGlobalConfiguration.STORAGE_TRACK_CHANGED_RECORDS_IN_WAL.setValue(true);
  serverInstance.addTemporaryUser(REPLICATOR_USER,"" + new SecureRandom().nextLong(),"*");
  super.startup();
  status=NODE_STATUS.STARTING;
  final String localNodeName=nodeName;
  activeNodes.clear();
  activeNodesNamesByMemberId.clear();
  for (  ORemoteServerController server : remoteServers.values())   server.close();
  remoteServers.clear();
  registeredNodeById=null;
  registeredNodeByName=null;
  try {
    hazelcastInstance=configureHazelcast();
    nodeUuid=hazelcastInstance.getCluster().getLocalMember().getUuid();
    OLogManager.instance().info(this,"Starting distributed server '%s' (hzID=%s)...",localNodeName,nodeUuid);
    activeNodes.put(localNodeName,hazelcastInstance.getCluster().getLocalMember());
    activeNodesNamesByMemberId.put(nodeUuid,localNodeName);
    configurationMap=new OHazelcastDistributedMap(hazelcastInstance);
    OServer.registerServerInstance(localNodeName,serverInstance);
    for (    Member m : hazelcastInstance.getCluster().getMembers()) {
      if (!m.getUuid().equals(nodeUuid)) {
        final String memberName=getNodeName(m);
        if (memberName != null && !memberName.startsWith("ext:")) {
          activeNodes.put(memberName,m);
          activeNodesNamesByMemberId.put(m.getUuid(),memberName);
        }
 else         if (!m.equals(hazelcastInstance.getCluster().getLocalMember()))         ODistributedServerLog.warn(this,localNodeName,null,DIRECTION.NONE,"Cannot find configuration for member: %s",m);
      }
    }
    initRegisteredNodeIds();
    messageService=new ODistributedMessageServiceImpl(this);
    publishLocalNodeConfiguration();
    if (!configurationMap.containsKey(CONFIG_NODE_PREFIX + nodeUuid)) {
      ODistributedServerLog.error(this,localNodeName,null,DIRECTION.NONE,"Error on registering local node on cluster");
      throw new ODistributedStartupException("Error on registering local node on cluster");
    }
    for (    String m : activeNodes.keySet())     if (!m.equals(nodeName))     getRemoteServer(m);
    repair=new ODistributedDatabaseRepair(this);
    repair.start();
    installNewDatabasesFromCluster(true);
    loadLocalDatabases();
    membershipListenerMapRegistration=configurationMap.getHazelcastMap().addEntryListener(this,true);
    membershipListenerRegistration=hazelcastInstance.getCluster().addMembershipListener(this);
    setNodeStatus(NODE_STATUS.ONLINE);
    publishLocalNodeConfiguration();
    final long delay=OGlobalConfiguration.DISTRIBUTED_PUBLISH_NODE_STATUS_EVERY.getValueAsLong();
    if (delay > 0) {
      publishLocalNodeConfigurationTask=new TimerTask(){
        @Override public void run(){
          try {
            publishLocalNodeConfiguration();
          }
 catch (          Throwable e) {
            OLogManager.instance().debug(this,"Error on distributed configuration node updater",e);
          }
        }
      }
;
      Orient.instance().scheduleTask(publishLocalNodeConfigurationTask,delay,delay);
    }
    final long healthChecker=OGlobalConfiguration.DISTRIBUTED_CHECK_HEALTH_EVERY.getValueAsLong();
    if (healthChecker > 0) {
      healthCheckerTask=new OClusterHealthChecker(this);
      Orient.instance().scheduleTask(healthCheckerTask,healthChecker,healthChecker);
    }
    waitStartupIsCompleted();
  }
 catch (  Exception e) {
    ODistributedServerLog.error(this,localNodeName,null,DIRECTION.NONE,"Error on starting distributed plugin",e);
    throw OException.wrapException(new ODistributedStartupException("Error on starting distributed plugin"),e);
  }
  dumpServersStatus();
}
