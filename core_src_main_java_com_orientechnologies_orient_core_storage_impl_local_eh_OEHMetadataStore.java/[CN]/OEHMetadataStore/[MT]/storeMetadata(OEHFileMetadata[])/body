{
  int size=0;
  for (  OEHFileMetadata bucketFile : filesMetadata) {
    final OStorageFileConfiguration fileConfiguration=bucketFile.getFile().getConfig();
    size+=OStringSerializer.INSTANCE.getObjectSize(fileConfiguration.incrementSize);
    size+=OStringSerializer.INSTANCE.getObjectSize(fileConfiguration.path);
    size+=OStringSerializer.INSTANCE.getObjectSize(fileConfiguration.type);
    size+=2 * OLongSerializer.LONG_SIZE;
  }
  if (file.getFilledUpTo() < size + 2 * OIntegerSerializer.INT_SIZE)   file.allocateSpace(size - file.getFilledUpTo());
  byte[] buffer=new byte[size];
  int offset=0;
  for (  OEHFileMetadata bucketFile : filesMetadata) {
    final OStorageFileConfiguration fileConfiguration=bucketFile.getFile().getConfig();
    OStringSerializer.INSTANCE.serializeNative(fileConfiguration.incrementSize,buffer,offset);
    offset+=OStringSerializer.INSTANCE.getObjectSizeNative(buffer,offset);
    OStringSerializer.INSTANCE.serializeNative(fileConfiguration.path,buffer,offset);
    offset+=OStringSerializer.INSTANCE.getObjectSizeNative(buffer,offset);
    OStringSerializer.INSTANCE.serializeNative(fileConfiguration.type,buffer,offset);
    offset+=OStringSerializer.INSTANCE.getObjectSizeNative(buffer,offset);
    OLongSerializer.INSTANCE.serializeNative(bucketFile.geBucketsCount(),buffer,offset);
    offset+=OLongSerializer.LONG_SIZE;
    OLongSerializer.INSTANCE.serializeNative(bucketFile.getTombstonePosition(),buffer,offset);
    offset+=OLongSerializer.LONG_SIZE;
  }
  file.writeInt(0,filesMetadata.length);
  file.writeInt(OIntegerSerializer.INT_SIZE,buffer.length);
  file.write(2 * OIntegerSerializer.INT_SIZE,buffer);
}
