{
  final List<String> fieldNames=new ArrayList<String>();
  for (  OPair<String,String> pair : orderedFields)   fieldNames.add(pair.getKey());
  final Set<OIndex<?>> indexes=iSchemaClass.getInvolvedIndexes(fieldNames);
  for (  OIndex<?> index : indexes) {
    if (orderByOptimizer.canBeUsedByOrderBy(index,orderedFields)) {
      final boolean ascSortOrder=orderedFields.get(0).getValue().equals(KEYWORD_ASC);
      final Object key;
      if (ascSortOrder) {
        key=index.getFirstKey();
      }
 else {
        key=index.getLastKey();
      }
      if (key == null)       return false;
      fullySortedByIndex=true;
      if (context.isRecordingMetrics()) {
        context.setVariable("indexIsUsedInOrderBy",true);
        context.setVariable("fullySortedByIndex",fullySortedByIndex);
        Set<String> idxNames=(Set<String>)context.getVariable("involvedIndexes");
        if (idxNames == null) {
          idxNames=new HashSet<String>();
          context.setVariable("involvedIndexes",idxNames);
        }
        idxNames.add(index.getName());
      }
      final OIndexCursor cursor;
      if (ascSortOrder) {
        cursor=index.iterateEntriesMajor(key,true,true);
      }
 else {
        cursor=index.iterateEntriesMinor(key,true,false);
      }
      fetchValuesFromIndexCursor(cursor);
      return true;
    }
  }
  metricRecorder.recordOrderByOptimizationMetric(false,this.fullySortedByIndex);
  return false;
}
