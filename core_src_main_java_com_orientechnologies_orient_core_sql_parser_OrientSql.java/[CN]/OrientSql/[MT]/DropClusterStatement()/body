{
  ODropClusterStatement jjtn000=new ODropClusterStatement(JJTDROPCLUSTERSTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  try {
    jj_consume_token(DROP);
    jj_consume_token(CLUSTER);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case EXECUTE:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case BEGIN:
case COMMIT:
case IF:
case ISOLATION:
case SLEEP:
case CONSOLE:
case BLOB:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
      jjtn000.name=Identifier();
    break;
case INTEGER_LITERAL:
case MINUS:
  jjtn000.id=Integer();
break;
default :
jj_la1[321]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
