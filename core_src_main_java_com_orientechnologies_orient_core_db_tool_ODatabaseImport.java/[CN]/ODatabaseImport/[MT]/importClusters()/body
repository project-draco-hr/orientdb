{
  listener.onMessage("\nImporting clusters...");
  long total=0;
  jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);
  boolean recreateManualIndex=false;
  if (exporterVersion <= 4) {
    recreateManualIndex=true;
    listener.onMessage("\nWARN: Exported database does not support manual index separation." + " Manual index cluster will be dropped.");
    database.dropCluster(OMetadata.CLUSTER_MANUAL_INDEX_NAME);
    final OSchema schema=database.getMetadata().getSchema();
    schema.dropClass(OUser.CLASS_NAME);
    schema.dropClass(ORole.CLASS_NAME);
    schema.dropClass(OSecurityShared.RESTRICTED_CLASSNAME);
    schema.dropClass(OFunction.CLASS_NAME);
    schema.dropClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME);
    schema.save();
    database.dropCluster(OStorage.CLUSTER_DEFAULT_NAME);
    database.getStorage().setDefaultClusterId(database.addCluster(OStorage.CLUSTER_TYPE.PHYSICAL.toString(),OStorage.CLUSTER_DEFAULT_NAME,null,null));
    new ODocument().save(OStorage.CLUSTER_DEFAULT_NAME);
    database.getMetadata().getSecurity().create();
  }
  @SuppressWarnings("unused") ORecordId rid=null;
  while (jsonReader.lastChar() != ']') {
    jsonReader.readNext(OJSONReader.BEGIN_OBJECT);
    String name=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"name\"").readString(OJSONReader.COMMA_SEPARATOR);
    if (name.length() == 0)     name=null;
    if (name != null)     if (includeClusters != null) {
      if (!includeClusters.contains(name)) {
        jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
        continue;
      }
    }
 else     if (excludeClusters != null) {
      if (excludeClusters.contains(name)) {
        jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
        continue;
      }
    }
    int id=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"id\"").readInteger(OJSONReader.COMMA_SEPARATOR);
    String type=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"type\"").readString(OJSONReader.NEXT_IN_OBJECT);
    if (jsonReader.lastChar() == ',') {
      rid=new ORecordId(jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"rid\"").readString(OJSONReader.NEXT_IN_OBJECT));
    }
 else     rid=null;
    listener.onMessage("\n- Creating cluster " + (name != null ? "'" + name + "'" : "NULL") + "...");
    int clusterId=name != null ? database.getClusterIdByName(name) : -1;
    if (clusterId == -1) {
      clusterId=database.addCluster(type,name,null,null);
    }
    if (clusterId != id)     throw new OConfigurationException("Imported cluster '" + name + "' has id="+ clusterId+ " different from the original: "+ id+ ". To continue the import drop the cluster '"+ database.getClusterNameById(clusterId - 1)+ "' that has "+ database.countClusterElements(clusterId - 1)+ " records");
    listener.onMessage("OK, assigned id=" + clusterId);
    total++;
    jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
  }
  jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);
  if (recreateManualIndex) {
    database.addCluster(OStorage.CLUSTER_TYPE.PHYSICAL.toString(),OMetadata.CLUSTER_MANUAL_INDEX_NAME,null,null);
    database.getMetadata().getIndexManager().create();
    listener.onMessage("\nManual index cluster was recreated.");
  }
  listener.onMessage("\nDone. Imported " + total + " clusters");
  return total;
}
