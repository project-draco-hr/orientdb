{
  List<Child> cresult=database.query(new OSQLSynchQuery<Child>("select * from Child"));
  int childSize=cresult.size();
  JavaComplexTestClass p=database.newInstance(JavaComplexTestClass.class);
  p.setName("Silvester");
  Child c=database.newInstance(Child.class);
  c.setName("John");
  Child c1=database.newInstance(Child.class);
  c1.setName("Jack");
  Child c2=database.newInstance(Child.class);
  c2.setName("Bob");
  Child c3=database.newInstance(Child.class);
  c3.setName("Sam");
  Child c4=database.newInstance(Child.class);
  c4.setName("Dean");
  p.getEmbeddedSet().add(c);
  p.getEmbeddedSet().add(c1);
  p.getEmbeddedSet().add(c2);
  p.getEmbeddedSet().add(c3);
  p.getEmbeddedSet().add(c4);
  database.save(p);
  cresult=database.query(new OSQLSynchQuery<Child>("select * from Child"));
  Assert.assertTrue(cresult.size() == childSize);
  ORID rid=new ORecordId(p.getId());
  database.close();
  database=OObjectDatabasePool.global().acquire(url,"admin","admin");
  JavaComplexTestClass loaded=database.load(rid);
  Assert.assertEquals(loaded.getEmbeddedSet().size(),5);
  Iterator<Child> it=loaded.getEmbeddedSet().iterator();
  while (it.hasNext()) {
    Child loadedC=it.next();
    Assert.assertTrue(database.getRecordByUserObject(loadedC,false).isEmbedded());
    Assert.assertTrue(loadedC instanceof Child);
    Assert.assertTrue(loadedC.getName().equals("John") || loadedC.getName().equals("Jack") || loadedC.getName().equals("Bob")|| loadedC.getName().equals("Sam")|| loadedC.getName().equals("Dean"));
  }
}
