{
  OFieldOperator jjtn000=new OFieldOperator(JJTFIELDOPERATOR);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  try {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DOT:
      jj_consume_token(DOT);
    jj_consume_token(IDENTIFIER);
  jj_consume_token(LPAREN);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case NULL:
case THIS:
case RECORD_ATTRIBUTE:
case INTEGER_LITERAL:
case FLOATING_POINT_LITERAL:
case CHARACTER_LITERAL:
case STRING_LITERAL:
case HOOK:
case IDENTIFIER:
case 107:
case 108:
  FilterItem();
label_9: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
    ;
  break;
default :
jj_la1[34]=jj_gen;
break label_9;
}
jj_consume_token(COMMA);
FilterItem();
}
break;
default :
jj_la1[35]=jj_gen;
;
}
jj_consume_token(RPAREN);
break;
case LBRACKET:
jj_consume_token(LBRACKET);
jj_consume_token(STRING_LITERAL);
jj_consume_token(RBRACKET);
break;
default :
jj_la1[36]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
}
