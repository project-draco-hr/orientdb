{
  atomicOperationsManager.acquireReadLock(this);
  try {
    acquireSharedLock();
    try {
      if (clusterPosition < 0)       clusterPosition=0;
      long pageIndex=clusterPosition / OClusterPositionMapBucket.MAX_ENTRIES;
      int index=(int)(clusterPosition % OClusterPositionMapBucket.MAX_ENTRIES);
      OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
      final long filledUpTo=getFilledUpTo(atomicOperation,fileId);
      if (pageIndex >= filledUpTo)       return OCommonConst.EMPTY_LONG_ARRAY;
      long[] result=null;
      do {
        OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,pageIndex,false);
        OClusterPositionMapBucket bucket=new OClusterPositionMapBucket(cacheEntry,getChangesTree(atomicOperation,cacheEntry));
        int resultSize=bucket.getSize() - index;
        if (resultSize <= 0) {
          releasePage(atomicOperation,cacheEntry);
          pageIndex++;
          index=0;
        }
 else {
          int entriesCount=0;
          long startIndex=cacheEntry.getPageIndex() * OClusterPositionMapBucket.MAX_ENTRIES + index;
          result=new long[resultSize];
          for (int i=0; i < resultSize; i++) {
            if (bucket.exists(i + index)) {
              result[entriesCount]=startIndex + i;
              entriesCount++;
            }
          }
          if (entriesCount == 0) {
            result=null;
            pageIndex++;
            index=0;
          }
 else           result=Arrays.copyOf(result,entriesCount);
          releasePage(atomicOperation,cacheEntry);
        }
      }
 while (result == null && pageIndex < filledUpTo);
      if (result == null)       result=OCommonConst.EMPTY_LONG_ARRAY;
      return result;
    }
  finally {
      releaseSharedLock();
    }
  }
  finally {
    atomicOperationsManager.releaseReadLock(this);
  }
}
