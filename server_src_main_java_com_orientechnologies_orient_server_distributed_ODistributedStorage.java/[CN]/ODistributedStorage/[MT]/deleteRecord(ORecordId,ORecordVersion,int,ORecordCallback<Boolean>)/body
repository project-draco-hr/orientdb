{
  if (OScenarioThreadLocal.INSTANCE.get() == RUN_MODE.RUNNING_DISTRIBUTED)   return wrapped.deleteRecord(iRecordId,iVersion,iMode,iCallback);
  try {
    final String clusterName=getClusterNameByRID(iRecordId);
    final ODistributedConfiguration dbCfg=dManager.getDatabaseConfiguration(getName());
    if (!dbCfg.isReplicationActive(clusterName) && dbCfg.getServers(clusterName) == null)     return wrapped.deleteRecord(iRecordId,iVersion,iMode,iCallback);
    final OStorageOperationResult<ORawBuffer> previousContent=readRecord(iRecordId,null,false,null,false,LOCKING_STRATEGY.DEFAULT);
    final Collection<String> nodes=dbCfg.getServers(clusterName);
    final Object result=dManager.sendRequest(getName(),Collections.singleton(clusterName),nodes,new ODeleteRecordTask(iRecordId,iVersion),EXECUTION_MODE.RESPONSE);
    if (result instanceof ONeedRetryException)     throw (ONeedRetryException)result;
 else     if (result instanceof Throwable)     throw new ODistributedException("Error on execution distributed DELETE_RECORD",(Throwable)result);
    return new OStorageOperationResult<Boolean>(true);
  }
 catch (  ONeedRetryException e) {
    throw e;
  }
catch (  Exception e) {
    handleDistributedException("Cannot route DELETE_RECORD operation against %s to the distributed node",e,iRecordId);
    return null;
  }
}
