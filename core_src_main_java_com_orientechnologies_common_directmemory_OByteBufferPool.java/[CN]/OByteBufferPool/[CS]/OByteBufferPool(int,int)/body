{
  this.pageSize=pageSize;
  this.zeroPage=ByteBuffer.allocateDirect(pageSize).order(ByteOrder.nativeOrder());
  int pagesPerArea=(maxChunkSize / pageSize);
  if (pagesPerArea > 1) {
    pagesPerArea=closestPowerOfTwo(pagesPerArea);
    while ((long)pagesPerArea * pageSize > maxChunkSize) {
      pagesPerArea=pagesPerArea >>> 1;
    }
    maxPagesPerSingleArea=pagesPerArea;
    lastPreallocatedArea=new AtomicReference<BufferHolder>();
  }
 else {
    maxPagesPerSingleArea=1;
    lastPreallocatedArea=null;
  }
  if (TRACK) {
    trackedBuffersQueue=new ReferenceQueue<ByteBuffer>();
    trackedReferences=new HashSet<TrackedBufferReference>();
    trackedBuffers=new HashMap<TrackedBuffer,TrackedBufferReference>();
    trackedReleases=new HashMap<TrackedBuffer,Exception>();
  }
 else {
    trackedBuffersQueue=null;
    trackedReferences=null;
    trackedBuffers=null;
    trackedReleases=null;
  }
}
