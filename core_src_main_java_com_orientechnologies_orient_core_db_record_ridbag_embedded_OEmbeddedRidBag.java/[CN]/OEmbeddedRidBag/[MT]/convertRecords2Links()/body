{
  final Map<ORID,IdentifiableContainer> convertedEntries=new HashMap<ORID,IdentifiableContainer>();
  boolean identitytWasChanged=false;
  for (  Map.Entry<ORID,IdentifiableContainer> entry : entries.entrySet()) {
    final IdentifiableContainer container=entry.getValue();
    if (container.getIdentifiable() instanceof ORecord) {
      final ORecord record=(ORecord)container.getIdentifiable();
      if (record.isDirty() || entry.getKey().getIdentity().isNew()) {
        record.removeIdentityChangeListener(this);
        record.save();
        record.addIdentityChangeListener(this);
        if (!record.getIdentity().equals(entry.getKey()))         identitytWasChanged=true;
        convertedEntries.put(record.getIdentity(),new IdentifiableContainer(record.getIdentity(),container.getCounter()));
      }
    }
 else     convertedEntries.put(entry.getKey(),entry.getValue());
  }
  for (  Map.Entry<OIdentifiable,OModifiableInteger> entry : newEntries.entrySet()) {
    if (entry.getKey() instanceof ORecord) {
      identitytWasChanged=true;
      final ORecord record=(ORecord)entry.getKey();
      record.removeIdentityChangeListener(this);
      record.save();
      record.addIdentityChangeListener(this);
      convertedEntries.put(record.getIdentity(),new IdentifiableContainer(record.getIdentity(),entry.getValue()));
    }
 else     convertedEntries.put(entry.getKey().getIdentity(),new IdentifiableContainer(entry.getKey(),entry.getValue()));
  }
  if (identitytWasChanged) {
    newEntries.clear();
    entries.clear();
    entries.putAll(convertedEntries);
  }
  return true;
}
