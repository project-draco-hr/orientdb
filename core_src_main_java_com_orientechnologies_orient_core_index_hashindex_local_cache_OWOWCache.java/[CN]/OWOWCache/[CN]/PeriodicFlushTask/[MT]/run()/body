{
  try {
    if (writeGroups.isEmpty()) {
      if (lastTimeWhenCacheIsEmpty < 0)       lastTimeWhenCacheIsEmpty=System.currentTimeMillis();
 else {
        if (System.currentTimeMillis() - lastTimeWhenCacheIsEmpty >= OGlobalConfiguration.DISK_WRITE_CACHE_FLUSH_WRITE_INACTIVITY_INTERVAL.getValueAsLong()) {
          for (          OFileClassic fileClassic : files.values()) {
            String fileName=null;
            try {
              fileName=fileClassic.getName();
              if (!fileClassic.isSoftlyClosedCache()) {
                fileClassic.synch();
                fileClassic.setSoftlyClosed(true);
                OLogManager.instance().info(this,"Write inactivity interval was reached, file '" + fileName + "' was flushed.");
              }
            }
 catch (            Exception e) {
              if (fileName != null)               OLogManager.instance().error(this,"Error on synchronization of file " + fileName,e);
            }
          }
        }
      }
      return;
    }
    lastTimeWhenCacheIsEmpty=-1;
    int writeGroupsToFlush;
    boolean useForceSync=false;
    double threshold=((double)cacheSize.get()) / cacheMaxSize;
    if (threshold > 0.8) {
      writeGroupsToFlush=(int)(0.2 * writeGroups.size());
      useForceSync=true;
    }
 else     if (threshold > 0.9) {
      writeGroupsToFlush=(int)(0.4 * writeGroups.size());
      useForceSync=true;
    }
 else     writeGroupsToFlush=1;
    if (writeGroupsToFlush < 1)     writeGroupsToFlush=1;
    int flushedGroups=0;
    flushedGroups=flushRing(writeGroupsToFlush,flushedGroups,false);
    if (flushedGroups < writeGroupsToFlush && useForceSync)     flushedGroups=flushRing(writeGroupsToFlush,flushedGroups,true);
    if (flushedGroups < writeGroupsToFlush && cacheSize.get() > cacheMaxSize) {
      if (OGlobalConfiguration.SERVER_CACHE_INCREASE_ON_DEMAND.getValueAsBoolean()) {
        final long oldCacheMaxSize=cacheMaxSize;
        cacheMaxSize=(int)Math.ceil(cacheMaxSize * (1 + OGlobalConfiguration.SERVER_CACHE_INCREASE_STEP.getValueAsFloat()));
        OLogManager.instance().warn(this,"Write cache size is increased from %d to %d",oldCacheMaxSize,cacheMaxSize);
      }
 else {
        throw new OAllCacheEntriesAreUsedException("All records in write cache are used!");
      }
    }
  }
 catch (  Exception e) {
    OLogManager.instance().error(this,"Exception during data flush.",e);
  }
}
