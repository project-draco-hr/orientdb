{
  ODatabaseDocumentTx db=new ODatabaseDocumentTx("memory:" + ORecordSerializerBinaryDebugTest.class.getSimpleName());
  db.create();
  try {
    ODocument doc=new ODocument();
    doc.field("test","test");
    doc.field("anInt",2);
    doc.field("anDouble",2D);
    byte[] bytes=doc.toStream();
    byte[] brokenBytes=new byte[bytes.length - 10];
    System.arraycopy(bytes,0,brokenBytes,0,bytes.length - 10);
    ORecordSerializerBinaryDebug debugger=new ORecordSerializerBinaryDebug();
    ORecordSerializationDebug debug=debugger.deserializeDebug(brokenBytes,db);
    assertEquals(debug.properties.size(),3);
    assertEquals(debug.properties.get(0).name,"test");
    assertEquals(debug.properties.get(0).type,OType.STRING);
    assertEquals(debug.properties.get(0).faildToRead,true);
    assertNotNull(debug.properties.get(0).readingException);
    assertEquals(debug.properties.get(1).name,"anInt");
    assertEquals(debug.properties.get(1).type,OType.INTEGER);
    assertEquals(debug.properties.get(1).faildToRead,true);
    assertNotNull(debug.properties.get(1).readingException);
    assertEquals(debug.properties.get(2).name,"anDouble");
    assertEquals(debug.properties.get(2).type,OType.DOUBLE);
    assertEquals(debug.properties.get(2).faildToRead,true);
    assertNotNull(debug.properties.get(2).readingException);
  }
  finally {
    db.drop();
  }
}
