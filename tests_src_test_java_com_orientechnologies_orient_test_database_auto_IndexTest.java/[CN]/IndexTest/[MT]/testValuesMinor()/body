{
  database.open("admin","admin");
  database.command(new OCommandSQL("create index equalityIdx unique")).execute();
  database.getMetadata().getIndexManager().reload();
  Assert.assertNotNull(database.getMetadata().getIndexManager().getIndex("equalityIdx"));
  for (int key=0; key <= 5; key++) {
    database.command(new OCommandSQL("insert into index:equalityIdx (key,rid) values (" + key + ",#10:"+ key+ ")")).execute();
  }
  final OIndex index=database.getMetadata().getIndexManager().getIndex("equalityIdx");
  final Collection<Long> valuesMinorResults=new ArrayList<Long>(Arrays.asList(0L,1L,2L));
  Collection<OIdentifiable> indexCollection=index.getValuesMinor(3,false);
  Assert.assertEquals(indexCollection.size(),3);
  for (  OIdentifiable identifiable : indexCollection) {
    valuesMinorResults.remove(identifiable.getIdentity().getClusterPosition());
  }
  Assert.assertEquals(valuesMinorResults.size(),0);
  final Collection<Long> valuesMinorInclusiveResults=new ArrayList<Long>(Arrays.asList(0L,1L,2L,3L));
  indexCollection=index.getValuesMinor(3,true);
  Assert.assertEquals(indexCollection.size(),4);
  for (  OIdentifiable identifiable : indexCollection) {
    valuesMinorInclusiveResults.remove(identifiable.getIdentity().getClusterPosition());
  }
  Assert.assertEquals(valuesMinorInclusiveResults.size(),0);
  indexCollection=index.getValuesMinor(0,true);
  Assert.assertEquals(indexCollection.size(),1);
  Assert.assertEquals(indexCollection.iterator().next().getIdentity().getClusterPosition(),0L);
  indexCollection=index.getValuesMinor(0,false);
  Assert.assertEquals(indexCollection.size(),0);
  database.command(new OCommandSQL("drop index equalityIdx")).execute();
  database.close();
}
