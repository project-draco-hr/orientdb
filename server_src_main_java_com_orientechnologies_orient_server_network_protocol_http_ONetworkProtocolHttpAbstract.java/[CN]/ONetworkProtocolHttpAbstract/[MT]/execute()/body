{
  if (channel.socket.isInputShutdown()) {
    connectionClosed();
    return;
  }
  data.commandInfo="Listening";
  data.commandDetail=null;
  try {
    char c=(char)channel.inStream.read();
    if (channel.inStream.available() == 0) {
      connectionClosed();
      return;
    }
    data.lastCommandReceived=OProfiler.getInstance().startChrono();
    requestContent.setLength(0);
    if (c != '\n')     requestContent.append(c);
    while (!channel.socket.isInputShutdown()) {
      c=(char)channel.inStream.read();
      if (c == '\r') {
        String[] words=requestContent.toString().split(" ");
        if (words.length < 3) {
          OLogManager.instance().warn(this,"->" + channel.socket.getInetAddress().getHostAddress() + ": Error on invalid content:\n"+ requestContent);
          break;
        }
        channel.inStream.read();
        request.method=words[0];
        request.url=URLDecoder.decode(words[1],"UTF-8").trim();
        request.httpVersion=words[2];
        readAllContent(request);
        if (request.content != null)         request.content=URLDecoder.decode(request.content,"UTF-8").trim();
        service();
        return;
      }
      requestContent.append(c);
    }
    if (OLogManager.instance().isDebugEnabled())     OLogManager.instance().debug(this,"Parsing request from client " + channel.socket.getInetAddress().getHostAddress() + ":\n"+ requestContent);
  }
 catch (  SocketException e) {
    connectionError();
  }
catch (  SocketTimeoutException e) {
    timeout();
  }
catch (  Throwable t) {
    if (request.method != null && request.url != null) {
      try {
        sendTextContent(505,"Error on executing of " + request.method + " for the resource: "+ request.url,null,"text/plain",t.toString());
      }
 catch (      IOException e) {
      }
    }
 else     sendTextContent(505,"Error on executing request",null,"text/plain",t.toString());
    readAllContent(request);
  }
 finally {
    if (data.lastCommandReceived > -1)     OProfiler.getInstance().stopChrono("ONetworkProtocolHttp.execute",data.lastCommandReceived);
  }
}
