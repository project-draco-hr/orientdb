{
  LRUEntry lruEntry=fetchedOnce.get(fileName,pageIndex);
  if (lruEntry != null) {
    fetchedOnce.remove(fileName,pageIndex);
    fetchedSeveralTimes.putToMRU(fileName,pageIndex,lruEntry.dataPointer,lruEntry.isDirty);
    return lruEntry;
  }
  lruEntry=fetchedSeveralTimes.get(fileName,pageIndex);
  if (lruEntry != null) {
    fetchedSeveralTimes.putToMRU(fileName,pageIndex,lruEntry.dataPointer,lruEntry.isDirty);
    return lruEntry;
  }
  if (fetchedOnceEvicted.contains(fileName,pageIndex)) {
    int onceSize=fetchedOnceEvicted.size();
    int severalTimesSize=fetchedSeveralTimesEvicted.size();
    long delta=onceSize >= severalTimesSize ? 1 : severalTimesSize / onceSize;
    p=Math.min(p + delta,maxSize);
    long dataPointer=cacheFileContent(fileName,pageIndex);
    replace(false);
    fetchedOnceEvicted.remove(fileName,pageIndex);
    return fetchedSeveralTimes.putToMRU(fileName,pageIndex,dataPointer,false);
  }
  if (fetchedSeveralTimesEvicted.contains(fileName,pageIndex)) {
    int onceSize=fetchedOnceEvicted.size();
    int severalTimesSize=fetchedSeveralTimesEvicted.size();
    long delta=severalTimesSize >= onceSize ? 1 : onceSize / severalTimesSize;
    p=Math.max(p - delta,0);
    replace(true);
    fetchedSeveralTimesEvicted.remove(fileName,pageIndex);
    long dataPointer=cacheFileContent(fileName,pageIndex);
    return fetchedSeveralTimes.putToMRU(fileName,pageIndex,dataPointer,false);
  }
  if (fetchedOnce.size() + fetchedOnceEvicted.size() == maxSize) {
    if (fetchedOnce.size() < maxSize) {
      fetchedOnceEvicted.removeLRU();
      replace(false);
    }
 else {
      LRUEntry removedEntry=fetchedOnce.getLRU();
      lockManager.acquireLock(Thread.currentThread(),new FileLockKey(removedEntry.fileName,removedEntry.pageIndex),OLockManager.LOCK.EXCLUSIVE);
      try {
        fetchedOnce.removeLRU();
        evictFileContent(removedEntry.fileName,removedEntry.pageIndex,removedEntry.dataPointer,removedEntry.isDirty);
      }
  finally {
        lockManager.releaseLock(Thread.currentThread(),new FileLockKey(removedEntry.fileName,removedEntry.pageIndex),OLockManager.LOCK.EXCLUSIVE);
      }
    }
  }
 else {
    int totalSize=fetchedOnce.size() + fetchedSeveralTimes.size() + fetchedOnceEvicted.size()+ fetchedSeveralTimesEvicted.size();
    if (totalSize >= maxSize) {
      if (totalSize == 2 * maxSize)       fetchedSeveralTimesEvicted.removeLRU();
      replace(false);
    }
  }
  long dataPointer=cacheFileContent(fileName,pageIndex);
  return fetchedOnce.putToMRU(fileName,pageIndex,dataPointer,false);
}
