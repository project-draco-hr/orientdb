{
  final ORecord rec=txEntry.getRecord();
  if (txEntry.type != ORecordOperation.DELETED && !rec.isDirty())   return;
  ORecordId rid=(ORecordId)rec.getIdentity();
  if (txEntry.type == ORecordOperation.UPDATED && rid.isNew())   txEntry.type=ORecordOperation.CREATED;
  ORecordSerializationContext.pushContext();
  try {
    int clusterId=rid.clusterId;
    if (rid.clusterId == ORID.CLUSTER_ID_INVALID && rec instanceof ODocument && ODocumentInternal.getImmutableSchemaClass(((ODocument)rec)) != null) {
      final OClass schemaClass=ODocumentInternal.getImmutableSchemaClass(((ODocument)rec));
      clusterId=schemaClass.getClusterForNewInstance((ODocument)rec);
    }
    final OCluster cluster=getClusterById(clusterId);
    if (cluster.getName().equals(OMetadataDefault.CLUSTER_INDEX_NAME) || cluster.getName().equals(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME))     return;
    if (rec instanceof OTxListener)     ((OTxListener)rec).onEvent(txEntry,OTxListener.EVENT.BEFORE_COMMIT);
switch (txEntry.type) {
case ORecordOperation.LOADED:
      break;
case ORecordOperation.CREATED:
{
      final ORecordId oldRID;
      if (rid.isNew()) {
        oldRID=rid.copy();
        rid.clusterId=clusterId;
      }
 else       oldRID=rid;
      final byte[] stream=rec.toStream();
      if (stream == null) {
        OLogManager.instance().warn(this,"Null serialization on committing new record %s in transaction",rid);
        break;
      }
      if (rid.isNew()) {
        rid=rid.copy();
        rid.clusterId=cluster.getId();
        final OPhysicalPosition ppos;
        final byte recordType=ORecordInternal.getRecordType(rec);
        ppos=doCreateRecord(rid,stream,rec.getRecordVersion(),recordType,null,cluster,new OPhysicalPosition(recordType)).getResult();
        rid.clusterPosition=ppos.clusterPosition;
        rec.getRecordVersion().copyFrom(ppos.recordVersion);
        clientTx.updateIdentityAfterCommit(oldRID,rid);
      }
 else {
        rec.getRecordVersion().copyFrom(updateRecord(rid,ORecordInternal.isContentChanged(rec),stream,rec.getRecordVersion(),ORecordInternal.getRecordType(rec),-1,null).getResult());
      }
      break;
    }
case ORecordOperation.UPDATED:
{
    final byte[] stream=rec.toStream();
    if (stream == null) {
      OLogManager.instance().warn(this,"Null serialization on committing updated record %s in transaction",rid);
      break;
    }
    OStorageOperationResult<ORecordVersion> updateRes=doUpdateRecord(rid,ORecordInternal.isContentChanged(rec),stream,rec.getRecordVersion(),ORecordInternal.getRecordType(rec),null,cluster);
    rec.getRecordVersion().copyFrom(updateRes.getResult());
    if (updateRes.getModifiedRecordContent() != null) {
      ORecordInternal.fill(rec,rid,updateRes.getResult(),updateRes.getModifiedRecordContent(),false);
    }
    break;
  }
case ORecordOperation.DELETED:
{
  deleteRecord(rid,rec.getRecordVersion(),-1,null);
  break;
}
default :
throw new OStorageException("Unknown record operation " + txEntry.type);
}
}
  finally {
ORecordSerializationContext.pullContext();
}
if (rec instanceof ODocument && ((ODocument)rec).isTrackingChanges()) {
ODocumentInternal.clearTrackData(((ODocument)rec));
}
ORecordInternal.unsetDirty(rec);
if (rec instanceof OTxListener) ((OTxListener)rec).onEvent(txEntry,OTxListener.EVENT.AFTER_COMMIT);
}
