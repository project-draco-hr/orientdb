{
  acquireExclusiveLock();
  try {
    V removedValue;
    OAtomicOperation atomicOperation=startAtomicOperation();
    if (key != null) {
      key=keySerializer.preprocess(key,(Object[])keyTypes);
      BucketSearchResult bucketSearchResult=findBucket(key,atomicOperation);
      if (bucketSearchResult.itemIndex < 0) {
        endAtomicOperation(false);
        return null;
      }
      OCacheEntry keyBucketCacheEntry=loadPage(atomicOperation,fileId,bucketSearchResult.getLastPathItem(),false,diskCache);
      keyBucketCacheEntry.acquireExclusiveLock();
      try {
        OSBTreeBucket<K,V> keyBucket=new OSBTreeBucket<K,V>(keyBucketCacheEntry,keySerializer,keyTypes,valueSerializer,getChangesTree(atomicOperation,keyBucketCacheEntry));
        final OSBTreeValue<V> removed=keyBucket.getEntry(bucketSearchResult.itemIndex).value;
        final V value=readValue(removed,atomicOperation);
        long removedValueLink=keyBucket.remove(bucketSearchResult.itemIndex);
        if (removedValueLink >= 0)         removeLinkedValue(removedValueLink,atomicOperation);
        setSize(size() - 1,atomicOperation);
        removedValue=value;
      }
  finally {
        keyBucketCacheEntry.releaseExclusiveLock();
        releasePage(atomicOperation,keyBucketCacheEntry,diskCache);
      }
    }
 else {
      if (getFilledUpTo(atomicOperation,diskCache,nullBucketFileId) == 0) {
        endAtomicOperation(false);
        return null;
      }
      OCacheEntry nullCacheEntry=loadPage(atomicOperation,nullBucketFileId,0,false,diskCache);
      nullCacheEntry.acquireExclusiveLock();
      try {
        ONullBucket<V> nullBucket=new ONullBucket<V>(nullCacheEntry,getChangesTree(atomicOperation,nullCacheEntry),valueSerializer,false);
        OSBTreeValue<V> treeValue=nullBucket.getValue();
        if (treeValue == null)         return null;
        removedValue=readValue(treeValue,atomicOperation);
        nullBucket.removeValue();
      }
  finally {
        nullCacheEntry.releaseExclusiveLock();
        releasePage(atomicOperation,nullCacheEntry,diskCache);
      }
      if (removedValue != null)       setSize(size() - 1,atomicOperation);
    }
    endAtomicOperation(false);
    return removedValue;
  }
 catch (  IOException e) {
    rollback();
    throw new OSBTreeException("Error during removing key " + key + " from sbtree "+ name,e);
  }
catch (  Exception e) {
    rollback();
    throw new OSBTreeException("Error during removing key " + key + " from sbtree "+ name,e);
  }
 finally {
    releaseExclusiveLock();
  }
}
