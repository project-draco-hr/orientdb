{
  if (iValue == null)   return "";
  final StringBuilder buffer=new StringBuilder();
switch (iType) {
case LINK:
{
      final Object link=linkToStream(buffer,iRecord,iValue);
      if (link != null)       iRecord.field(iName,link);
      break;
    }
case LINKLIST:
{
    buffer.append(OStringSerializerHelper.COLLECTION_BEGIN);
    if (iValue != null) {
      Object link;
      int items=0;
      List<Object> coll=(List<Object>)iValue;
      if (coll instanceof OLazyObjectList<?>) {
        ((OLazyObjectList<?>)coll).setConvertToRecord(false);
      }
      boolean autoConvert=false;
      if (coll instanceof ORecordLazyMultiValue) {
        autoConvert=((ORecordLazyMultiValue)coll).isAutoConvertToRecord();
        ((ORecordLazyMultiValue)coll).convertRecords2Links();
        ((ORecordLazyMultiValue)coll).setAutoConvertToRecord(false);
      }
      try {
        for (int i=0; i < coll.size(); ++i) {
          if (items++ > 0)           buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);
          link=linkToStream(buffer,iRecord,coll.get(i));
          if (link != null)           coll.set(i,link);
        }
      }
  finally {
        if (coll instanceof OLazyObjectList<?>) {
          ((OLazyObjectList<?>)coll).setConvertToRecord(true);
        }
      }
      if (coll instanceof ORecordLazyMultiValue)       ((ORecordLazyMultiValue)coll).setAutoConvertToRecord(autoConvert);
    }
    buffer.append(OStringSerializerHelper.COLLECTION_END);
    break;
  }
case LINKSET:
{
  buffer.append(OStringSerializerHelper.COLLECTION_BEGIN);
  int items=0;
  ORecordLazySet coll;
  if (!(iValue instanceof ORecordLazySet)) {
    coll=new ORecordLazySet(iRecord);
    coll.addAll((Collection<? extends OIdentifiable>)iValue);
    ((Collection<? extends OIdentifiable>)iValue).clear();
    iRecord.field(iName,coll);
  }
 else   coll=(ORecordLazySet)iValue;
  for (Iterator<OIdentifiable> it=coll.rawIterator(); it.hasNext(); ) {
    if (items++ > 0)     buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);
    linkToStream(buffer,iRecord,it.next());
  }
  buffer.append(OStringSerializerHelper.COLLECTION_END);
  break;
}
case LINKMAP:
{
buffer.append(OStringSerializerHelper.MAP_BEGIN);
Object link;
int items=0;
Map<String,Object> map=(Map<String,Object>)iValue;
boolean invalidMap=false;
if (map instanceof OLazyObjectMap<?>) {
  ((OLazyObjectMap<?>)map).setConvertToRecord(false);
}
try {
  for (  Map.Entry<String,Object> entry : map.entrySet()) {
    if (items++ > 0)     buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);
    fieldTypeToString(buffer,iDatabase,OType.STRING,entry.getKey());
    buffer.append(OStringSerializerHelper.ENTRY_SEPARATOR);
    link=linkToStream(buffer,iRecord,entry.getValue());
    if (link != null && !invalidMap)     invalidMap=true;
  }
}
  finally {
  if (map instanceof OLazyObjectMap<?>) {
    ((OLazyObjectMap<?>)map).setConvertToRecord(true);
  }
}
if (invalidMap) {
  final ORecordLazyMap newMap=new ORecordLazyMap(iRecord,ODocument.RECORD_TYPE);
  for (  Map.Entry<String,Object> entry : map.entrySet()) {
    newMap.put(entry.getKey(),(OIdentifiable)entry.getValue());
  }
  map.clear();
  iRecord.field(iName,newMap);
}
buffer.append(OStringSerializerHelper.MAP_END);
break;
}
case EMBEDDED:
if (iValue instanceof ODocument) {
buffer.append(OStringSerializerHelper.PARENTHESIS_BEGIN);
buffer.append(toString((ODocument)iValue,null,iObjHandler,iMarshalledRecords));
buffer.append(OStringSerializerHelper.PARENTHESIS_END);
}
 else if (iValue != null) buffer.append(iValue.toString());
break;
case EMBEDDEDLIST:
case EMBEDDEDSET:
{
buffer.append(embeddedCollectionToStream(iDatabase,iObjHandler,iLinkedClass,iLinkedType,iValue,iMarshalledRecords,iSaveOnlyDirty));
break;
}
case EMBEDDEDMAP:
{
buffer.append(embeddedMapToStream(iDatabase,iObjHandler,iLinkedClass,iLinkedType,iValue,iMarshalledRecords,iSaveOnlyDirty));
break;
}
default :
fieldTypeToString(buffer,iDatabase,iType,iValue);
}
return buffer.toString();
}
