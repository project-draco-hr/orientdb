{
  final ExecutorService executorService=Executors.newSingleThreadExecutor();
  final Callable<Void> assertEmptyRecord=new Callable<Void>(){
    @Override public Void call() throws Exception {
      final ODatabaseDocumentTx db=new ODatabaseDocumentTx(database.getURL());
      db.open("admin","admin");
      try {
        Assert.assertEquals(db.countClass("NestedTxRollbackOne"),1);
      }
  finally {
        db.close();
      }
      return null;
    }
  }
;
  final OSchema schema=database.getMetadata().getSchema();
  if (!schema.existsClass("NestedTxRollbackOne"))   schema.createClass("NestedTxRollbackOne");
  ODocument brokenDocOne=new ODocument("NestedTxRollbackOne");
  brokenDocOne.save();
  brokenDocOne=database.load(brokenDocOne.getIdentity(),"*:-1",true);
  ODocument brokenDocTwo=database.load(brokenDocOne.getIdentity(),"*:-1",true);
  brokenDocTwo.setDirty();
  brokenDocTwo.field("v","vstr");
  brokenDocTwo.save();
  try {
    database.begin();
    final ODocument externalDocOne=new ODocument("NestedTxRollbackOne");
    externalDocOne.field("v","val1");
    externalDocOne.save();
    Future assertFuture=executorService.submit(assertEmptyRecord);
    assertFuture.get();
    database.begin();
    ODocument externalDocTwo=new ODocument("NestedTxRollbackOne");
    externalDocTwo.field("v","val2");
    externalDocTwo.save();
    assertFuture=executorService.submit(assertEmptyRecord);
    assertFuture.get();
    brokenDocOne.setDirty();
    brokenDocOne.save();
    database.commit();
    assertFuture=executorService.submit(assertEmptyRecord);
    assertFuture.get();
    final ODocument externalDocThree=new ODocument("NestedTxRollbackOne");
    externalDocThree.field("v","val3");
    externalDocThree.save();
    database.commit();
    Assert.fail();
  }
 catch (  OConcurrentModificationException e) {
    database.rollback();
  }
catch (  OResponseProcessingException e) {
    database.rollback();
  }
  Assert.assertTrue(!database.getTransaction().isActive());
  Assert.assertEquals(database.countClass("NestedTxRollbackOne"),1);
}
