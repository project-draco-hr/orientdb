{
  long[] result=null;
  filesLock.acquireWriteLock();
  try {
    result=new long[files.size()];
    int counter=0;
    for (    int fileId : files.keySet()) {
      doDeleteFile(fileId);
      result[counter++]=composeFileId(id,fileId);
    }
    if (nameIdMapHolderFile != null) {
      if (nameIdMapHolderFile.exists()) {
        nameIdMapHolder.close();
        if (!nameIdMapHolderFile.delete())         throw new OStorageException("Can not delete disk cache file which contains name-id mapping.");
      }
      nameIdMapHolder=null;
      nameIdMapHolderFile=null;
    }
  }
  finally {
    filesLock.releaseWriteLock();
  }
  if (!commitExecutor.isShutdown()) {
    commitExecutor.shutdown();
    try {
      if (!commitExecutor.awaitTermination(5,TimeUnit.MINUTES))       throw new OException("Background data flush task can not be stopped.");
    }
 catch (    InterruptedException e) {
      OLogManager.instance().error(this,"Data flush thread was interrupted");
      Thread.interrupted();
      throw new OException("Data flush thread was interrupted",e);
    }
  }
  return result;
}
