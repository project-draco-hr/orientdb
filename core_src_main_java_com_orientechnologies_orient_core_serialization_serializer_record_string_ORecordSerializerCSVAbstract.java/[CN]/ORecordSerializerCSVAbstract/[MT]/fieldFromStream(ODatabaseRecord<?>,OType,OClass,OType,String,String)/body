{
  if (iValue == null)   return null;
switch (iType) {
case EMBEDDEDLIST:
case EMBEDDEDSET:
    return embeddedCollectionFromStream(iDatabase,iType,iLinkedClass,iLinkedType,iValue);
case LINKLIST:
case LINKSET:
{
    if (iValue.length() == 0)     return null;
    String value=iValue.startsWith("[") ? iValue.substring(1,iValue.length() - 1) : iValue;
    Collection<Object> coll=iType == OType.LINKLIST ? new OLazyRecordList(iDatabase,ODocument.RECORD_TYPE) : new OLazyRecordSet(iDatabase,ODocument.RECORD_TYPE);
    if (value.length() == 0)     return coll;
    final List<String> items=OStringSerializerHelper.smartSplit(value,OStringSerializerHelper.RECORD_SEPARATOR);
    for (    String item : items) {
      int classSeparatorPos=value.indexOf(OStringSerializerHelper.CLASS_SEPARATOR);
      if (classSeparatorPos > -1) {
        String className=value.substring(1,classSeparatorPos);
        if (className != null) {
          iLinkedClass=iDatabase.getMetadata().getSchema().getClass(className);
          item=item.substring(classSeparatorPos + 1);
        }
      }
 else       item=item.substring(1);
      if (item.length() == 0)       continue;
      coll.add(new ORecordId(item));
    }
    return coll;
  }
case EMBEDDEDMAP:
{
  return embeddedMapFromStream(iDatabase,iLinkedType,iValue);
}
case LINK:
if (iValue.length() > 1) {
int pos=iValue.indexOf(OStringSerializerHelper.CLASS_SEPARATOR);
if (pos > -1) iLinkedClass=iDatabase.getMetadata().getSchema().getClass(iValue.substring(OStringSerializerHelper.LINK.length(),pos));
 else pos=0;
return new ORecordId(iValue.substring(pos + 1));
}
 else return null;
default :
return OStringSerializerHelper.fieldTypeFromStream(iType,iValue);
}
}
