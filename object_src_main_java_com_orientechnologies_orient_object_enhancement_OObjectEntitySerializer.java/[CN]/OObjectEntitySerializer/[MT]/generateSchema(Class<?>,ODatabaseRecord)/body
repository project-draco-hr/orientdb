{
  registerClass(iClass);
  List<String> fields=allFields.get(iClass);
  OClass schema=database.getMetadata().getSchema().getClass(iClass);
  for (  String field : fields) {
    if (schema.existsProperty(field))     continue;
    if (isVersionField(iClass,field) || isIdField(iClass,field))     continue;
    Field f=getField(field,iClass);
    if (f.getType().equals(Object.class) || f.getType().equals(ODocument.class) || f.getType().equals(ORecordBytes.class)) {
      continue;
    }
    OType t=getTypeByClass(iClass,field,f);
    if (t == null) {
      if (f.getType().isEnum())       t=OType.STRING;
 else {
        t=OType.LINK;
      }
    }
    OClass linkedClass;
switch (t) {
case LINK:
case LINKLIST:
case LINKMAP:
case LINKSET:
      Class<?> linkedClazz;
    if (t.equals(OType.LINK))     linkedClazz=f.getType();
 else     linkedClazz=OReflectionHelper.getGenericMultivalueType(f);
  linkedClass=database.getMetadata().getSchema().getClass(linkedClazz);
if (linkedClass == null) {
  registerClass(linkedClazz);
  linkedClass=database.getMetadata().getSchema().getClass(linkedClazz);
}
schema.createProperty(field,t,linkedClass);
break;
case EMBEDDED:
linkedClazz=f.getType();
if (linkedClazz.equals(Object.class) || linkedClazz.equals(ODocument.class) || f.getType().equals(ORecordBytes.class)) {
continue;
}
 else {
linkedClass=database.getMetadata().getSchema().getClass(linkedClazz);
if (linkedClass == null) {
registerClass(linkedClazz);
linkedClass=database.getMetadata().getSchema().getClass(linkedClazz);
}
schema.createProperty(field,t,linkedClass);
}
break;
case EMBEDDEDLIST:
case EMBEDDEDSET:
case EMBEDDEDMAP:
linkedClazz=OReflectionHelper.getGenericMultivalueType(f);
if (linkedClazz.equals(Object.class) || linkedClazz.equals(ODocument.class) || f.getType().equals(ORecordBytes.class)) {
continue;
}
 else {
if (OReflectionHelper.isJavaType(linkedClazz)) {
schema.createProperty(field,t,OType.getTypeByClass(linkedClazz));
}
 else if (linkedClazz.isEnum()) {
schema.createProperty(field,t,OType.STRING);
}
 else {
linkedClass=database.getMetadata().getSchema().getClass(linkedClazz);
if (linkedClass == null) {
registerClass(linkedClazz);
linkedClass=database.getMetadata().getSchema().getClass(linkedClazz);
}
schema.createProperty(field,t,linkedClass);
}
}
break;
default :
schema.createProperty(field,t);
break;
}
}
}
