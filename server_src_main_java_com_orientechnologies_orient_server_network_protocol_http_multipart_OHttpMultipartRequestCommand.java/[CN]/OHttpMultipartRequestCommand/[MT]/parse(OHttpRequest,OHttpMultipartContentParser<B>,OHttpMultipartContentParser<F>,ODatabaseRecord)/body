{
  char currChar;
  boolean endRequest=false;
  final OHttpMultipartContentInputStream contentIn=new OHttpMultipartContentInputStream(iRequest.multipartStream,iRequest.boundary);
  final HashMap<String,String> headers=new LinkedHashMap<String,String>();
  int in;
  try {
    while (!endRequest && (in=iRequest.multipartStream.read()) > 0) {
      currChar=(char)in;
switch (parseStatus) {
case STATUS_EXPECTED_BOUNDARY:
{
          readBoundary(iRequest,currChar);
          parseStatus=STATUS.STATUS_EXPECTED_BOUNDARY_CRLF;
          break;
        }
case STATUS_EXPECTED_BOUNDARY_CRLF:
{
        endRequest=readBoundaryCrLf(iRequest,currChar,endRequest);
        parseStatus=STATUS.STATUS_EXPECTED_PART_HEADERS;
        break;
      }
case STATUS_EXPECTED_PART_HEADERS:
{
      parsePartHeaders(iRequest,currChar,endRequest,headers);
      parseStatus=STATUS.STATUS_EXPECTED_PART_CONTENT;
      break;
    }
case STATUS_EXPECTED_PART_CONTENT:
{
    iRequest.multipartStream.setSkipInput(in);
    contentIn.reset();
    if (headers.get(OHttpUtils.MULTIPART_CONTENT_FILENAME) != null) {
      parseFileContent(iRequest,fileContentParser,headers,contentIn,database);
    }
 else {
      parseBaseContent(iRequest,standardContentParser,headers,contentIn,database);
    }
    break;
  }
case STATUS_EXPECTED_END_REQUEST:
{
  iRequest.multipartStream.setSkipInput(in);
  endRequest=OHttpMultipartHelper.isEndRequest(iRequest);
  if (!endRequest) {
    parseStatus=STATUS.STATUS_EXPECTED_BOUNDARY_CRLF;
  }
 else {
    parseStatus=STATUS.STATUS_EXPECTED_BOUNDARY;
  }
  break;
}
}
}
parseStatus=STATUS.STATUS_EXPECTED_BOUNDARY;
}
 catch (Exception e) {
throw e;
}
}
