{
  updateLastClusterChange();
  final Member member=iEvent.getMember();
  final String nodeLeftName=getNodeName(member);
  if (nodeLeftName != null) {
    for (    ODistributedLifecycleListener l : listeners)     l.onNodeLeft(nodeLeftName);
    if (messageService != null)     for (    String dbName : messageService.getDatabases())     messageService.getDatabase(dbName).unlockRecords(nodeLeftName);
    for (Iterator<String> it=getConfigurationMap().keySet().iterator(); it.hasNext(); ) {
      final String n=it.next();
      if (n.startsWith(CONFIG_DBSTATUS_PREFIX))       if (n.substring(CONFIG_DBSTATUS_PREFIX.length()).equals(nodeLeftName)) {
        ODistributedServerLog.debug(this,nodeLeftName,null,DIRECTION.NONE,"removing dbstatus for the node %s that just left: %s",nodeLeftName,n);
        it.remove();
      }
    }
    activeNodes.remove(nodeLeftName);
    if (messageService != null)     messageService.handleUnreachableNode(nodeLeftName);
    ODistributedServerLog.warn(this,nodeLeftName,null,DIRECTION.NONE,"node removed id=%s name=%s",member,nodeLeftName);
    if (nodeLeftName.startsWith("ext:")) {
      final List<String> registeredNodes=getRegisteredNodes();
      ODistributedServerLog.error(this,nodeLeftName,null,DIRECTION.NONE,"removed node id=%s name=%s has not being recognized. Remove the node manually (registeredNodes=%s)",member,nodeLeftName,registeredNodes);
    }
  }
  serverInstance.getClientConnectionManager().pushDistribCfg2Clients(getClusterConfiguration());
}
