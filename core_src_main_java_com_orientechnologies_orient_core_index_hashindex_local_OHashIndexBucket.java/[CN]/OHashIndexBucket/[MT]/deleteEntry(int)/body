{
  final Entry<K,V> removedEntry=getEntry(index);
  final int freePointer=getIntValue(FREE_POINTER_OFFSET);
  final int positionOffset=POSITIONS_ARRAY_OFFSET + index * OIntegerSerializer.INT_SIZE;
  final int entryPosition=getIntValue(positionOffset);
  final int keySize=keySerializer.getObjectSizeInDirectMemory(pagePointer,entryPosition + OLongSerializer.LONG_SIZE);
  final int ridSize=valueSerializer.getObjectSizeInDirectMemory(pagePointer,entryPosition + keySize + OLongSerializer.LONG_SIZE);
  final int entrySize=keySize + ridSize + OLongSerializer.LONG_SIZE;
  moveData(positionOffset + OIntegerSerializer.INT_SIZE,positionOffset,size() * OIntegerSerializer.INT_SIZE - (index + 1) * OIntegerSerializer.INT_SIZE);
  if (entryPosition > freePointer)   moveData(freePointer,freePointer + entrySize,entryPosition - freePointer);
  int currentPositionOffset=POSITIONS_ARRAY_OFFSET;
  int size=size();
  for (int i=0; i < size - 1; i++) {
    int currentEntryPosition=getIntValue(currentPositionOffset);
    if (currentEntryPosition < entryPosition)     setIntValue(currentPositionOffset,currentEntryPosition + entrySize);
    currentPositionOffset+=OIntegerSerializer.INT_SIZE;
  }
  setIntValue(FREE_POINTER_OFFSET,freePointer + entrySize);
  setIntValue(SIZE_OFFSET,size - 1);
  return removedEntry;
}
