{
  ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
  OrientBaseGraph graphDatabase;
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
graphDatabase=factory.getNoTx();
graphDatabase.setUseLightweightEdges(useLightweightEdges);
graphDatabase.setStandardElementConstraints(standardElementConstraints);
pipeline.setGraphDatabase(graphDatabase);
documentDatabase=graphDatabase.getRawGraph();
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
 else ODatabaseRecordThreadLocal.INSTANCE.set(documentDatabase);
if (classes != null) {
for (ODocument cls : classes) {
schemaClass=getOrCreateClass((String)cls.field("name"),(String)cls.field("extends"));
Integer clusters=cls.field("clusters");
if (clusters != null) OClassImpl.addClusters(schemaClass,clusters);
log(OETLProcessor.LOG_LEVELS.DEBUG,"%s: found %d %s in class '%s'",getName(),schemaClass.count(),getUnit(),className);
}
}
if (className != null) {
schemaClass=getOrCreateClass(className,null);
log(OETLProcessor.LOG_LEVELS.DEBUG,"%s: found %d %s in class '%s'",getName(),schemaClass.count(),getUnit(),className);
}
if (indexes != null) {
for (ODocument idx : indexes) {
OIndex index;
String idxName=(String)resolve(idx.field("name"));
if (idxName != null) {
index=documentDatabase.getMetadata().getIndexManager().getIndex(idxName);
if (index != null) continue;
}
final String idxClass=(String)resolve(idx.field("class"));
if (idxClass == null) throw new OConfigurationException("Index 'class' missed in OrientDB Loader");
final OClass cls=getOrCreateClass(idxClass,null);
final String idxType=idx.field("type");
if (idxType == null) throw new OConfigurationException("Index 'type' missed in OrientDB Loader for index '" + idxName + "'");
final List<String> idxFields=idx.field("fields");
if (idxFields == null) throw new OConfigurationException("Index 'fields' missed in OrientDB Loader");
String[] fields=new String[idxFields.size()];
for (int f=0; f < fields.length; ++f) {
final String fieldName=idxFields.get(f);
final String[] fieldNameParts=fieldName.split(":");
if (!cls.existsProperty(fieldNameParts[0])) {
if (fieldNameParts.length < 2) throw new OConfigurationException("Index field type missed in OrientDB Loader for field '" + fieldName + "'");
final String fieldType=fieldNameParts[1].toUpperCase();
final OType type=OType.valueOf(fieldType);
cls.createProperty(fieldNameParts[0],type);
log(OETLProcessor.LOG_LEVELS.DEBUG,"- OrientDBLoader: created property '%s.%s' of type: %s",idxClass,fieldNameParts[0],fieldNameParts[1]);
}
fields[f]=fieldNameParts[0];
}
if (idxName == null) {
idxName=idxClass + ".";
for (int i=0; i < fields.length; ++i) {
if (i > 0) idxName+='_';
idxName+=fields[i];
}
}
index=documentDatabase.getMetadata().getIndexManager().getIndex(idxName);
if (index != null) continue;
index=cls.createIndex(idxName,idxType,fields);
log(OETLProcessor.LOG_LEVELS.DEBUG,"- OrientDocumentLoader: created index '%s' type '%s' against Class '%s', fields %s",idxName,idxType,idxClass,idxFields);
}
}
return documentDatabase;
}
