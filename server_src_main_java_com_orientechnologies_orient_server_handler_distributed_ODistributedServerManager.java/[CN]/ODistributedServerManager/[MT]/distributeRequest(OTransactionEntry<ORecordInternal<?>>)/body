{
  final HashMap<ODistributedServerNode,SYNCH_TYPE> nodeList;
  lock.acquireSharedLock();
  try {
    if (nodes == null)     return;
    final ODocument database=clusterDbConfigurations.get(iTransactionEntry.getRecord().getDatabase().getName());
    if (database == null)     return;
    OLogManager.instance().info(this,"Caught change " + iTransactionEntry.status + " in database '"+ iTransactionEntry.getRecord().getDatabase().getName()+ "', record: "+ iTransactionEntry.getRecord().getIdentity()+ " and distributed to all the configured cluster nodes");
    final ODocument clusters=database.field("clusters");
    final ODocument servers=(ODocument)(clusters.containsField(iTransactionEntry.clusterName) ? clusters.field(iTransactionEntry.clusterName) : clusters.field("*"));
    nodeList=new HashMap<ODistributedServerNode,ODistributedServerNode.SYNCH_TYPE>();
    if (servers.field("synch") != null)     for (    String s : ((Map<String,Object>)servers.field("synch")).keySet()) {
      nodeList.put(nodes.get(s),ODistributedServerNode.SYNCH_TYPE.SYNCHRONOUS);
    }
    if (servers.field("asynch") != null)     for (    String s : ((Map<String,Object>)servers.field("asynch")).keySet()) {
      nodeList.put(nodes.get(s),ODistributedServerNode.SYNCH_TYPE.ASYNCHRONOUS);
    }
  }
  finally {
    lock.releaseSharedLock();
  }
  for (  Entry<ODistributedServerNode,SYNCH_TYPE> entry : nodeList.entrySet()) {
    entry.getKey().sendRequest(iTransactionEntry,entry.getValue());
  }
}
