{
  OScenarioThreadLocal.INSTANCE.set(OScenarioThreadLocal.RUN_MODE.RUNNING_DISTRIBUTED);
  try {
    final String senderNodeName=manager.getNodeNameById(iRequest.getSenderNodeId());
    final ORemoteTask task=iRequest.getTask();
    if (ODistributedServerLog.isDebugEnabled())     ODistributedServerLog.debug(this,manager.getLocalNodeName(),senderNodeName,DIRECTION.OUT,"received request: %s",iRequest);
    Serializable responsePayload;
    OSecurityUser origin=null;
    try {
      for (int retry=1; ; ++retry) {
        task.setNodeSource(senderNodeName);
        waitNodeIsOnline();
        initDatabaseInstance();
        if (database != null) {
          database.activateOnCurrentThread();
          origin=database.getUser();
          try {
            if (lastUser == null || !(lastUser.getIdentity()).equals(iRequest.getUserRID()))             lastUser=database.getMetadata().getSecurity().getUser(iRequest.getUserRID());
            database.setUser(lastUser);
          }
 catch (          Throwable ex) {
            OLogManager.instance().error(this,"Failed on user switching " + ex.getMessage());
          }
        }
        responsePayload=manager.executeOnLocalNode(iRequest,database);
        if (responsePayload instanceof OModificationOperationProhibitedException) {
          try {
            ODistributedServerLog.info(this,manager.getLocalNodeName(),senderNodeName,DIRECTION.OUT,"Database is frozen, waiting and retrying. Request %s (retry=%d)",iRequest,retry);
            Thread.sleep(1000);
          }
 catch (          InterruptedException e) {
          }
        }
 else {
          if (retry > 1)           ODistributedServerLog.info(this,manager.getLocalNodeName(),senderNodeName,DIRECTION.OUT,"Request %s succeed after retry=%d",iRequest,retry);
          break;
        }
      }
    }
  finally {
      if (database != null && !database.isClosed()) {
        database.activateOnCurrentThread();
        if (!database.isClosed()) {
          database.rollback();
          database.getLocalCache().clear();
          database.setUser(origin);
        }
      }
    }
    if (running)     sendResponseBack(iRequest,task,responsePayload);
  }
  finally {
    OScenarioThreadLocal.INSTANCE.set(OScenarioThreadLocal.RUN_MODE.DEFAULT);
  }
}
