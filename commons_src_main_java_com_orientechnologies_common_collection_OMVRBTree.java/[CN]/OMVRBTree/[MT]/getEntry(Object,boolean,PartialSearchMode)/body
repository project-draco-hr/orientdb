{
  if (key == null)   return setLastSearchNode(null,null);
  pageItemFound=false;
  if (size() == 0) {
    pageIndex=0;
    return iGetContainer ? root : null;
  }
  OMVRBTreeEntry<K,V> p=getBestEntryPoint((K)key);
  checkTreeStructure(p);
  if (p == null)   return setLastSearchNode(key,null);
  OMVRBTreeEntry<K,V> lastNode=p;
  OMVRBTreeEntry<K,V> prevNode=null;
  OMVRBTreeEntry<K,V> tmpNode;
  int beginKey=-1;
  int steps=-1;
  final Comparable<? super K> k;
  if (keySize == 1)   k=(Comparable<? super K>)key;
 else   if (((OCompositeKey)key).getKeys().size() == keySize)   k=(Comparable<? super K>)key;
 else   if (partialSearchMode.equals(PartialSearchMode.NONE))   k=(Comparable<? super K>)key;
 else {
    final OCompositeKey fullKey=new OCompositeKey((Comparable<? super K>)key);
    int itemsToAdd=keySize - fullKey.getKeys().size();
    final Comparable keyItem;
    if (partialSearchMode.equals(PartialSearchMode.HIGHEST_BOUNDARY))     keyItem=ALWAYS_GREATER_KEY;
 else     keyItem=ALWAYS_LESS_KEY;
    for (int i=0; i < itemsToAdd; i++)     fullKey.addKey(keyItem);
    k=(Comparable)fullKey;
  }
  try {
    while (p != null && p.getSize() > 0) {
      searchNodeCallback();
      steps++;
      lastNode=p;
      if (comparator != null)       beginKey=comparator.compare((K)key,p.getFirstKey());
 else       try {
        beginKey=k.compareTo(p.getFirstKey());
      }
 catch (      Exception e) {
      }
      if (beginKey == 0) {
        pageIndex=0;
        pageItemFound=true;
        pageItemComparator=0;
        return setLastSearchNode(key,p);
      }
      if (comparator != null)       pageItemComparator=comparator.compare((K)key,p.getLastKey());
 else       pageItemComparator=k.compareTo(p.getLastKey());
      if (beginKey < 0) {
        if (pageItemComparator < 0) {
          tmpNode=predecessor(p);
          if (tmpNode != null && tmpNode != prevNode) {
            prevNode=p;
            p=tmpNode;
            continue;
          }
        }
      }
 else       if (beginKey > 0) {
        if (pageItemComparator > 0) {
          tmpNode=successor(p);
          if (tmpNode != null && tmpNode != prevNode) {
            prevNode=p;
            p=tmpNode;
            continue;
          }
        }
      }
      final V value=lastNode.search(k);
      if (key instanceof OCompositeKey) {
        final OCompositeKey compositeKey=(OCompositeKey)key;
        if (value != null && compositeKey.getKeys().size() == keySize) {
          return setLastSearchNode(key,lastNode);
        }
        if (partialSearchMode.equals(PartialSearchMode.NONE)) {
          if (value != null || iGetContainer)           return lastNode;
 else           return null;
        }
        if (partialSearchMode.equals(PartialSearchMode.HIGHEST_BOUNDARY)) {
          return adjustHighestPartialSearchResult(iGetContainer,lastNode,compositeKey);
        }
        if (partialSearchMode.equals(PartialSearchMode.LOWEST_BOUNDARY)) {
          return adjustLowestPartialSearchResult(iGetContainer,lastNode,compositeKey);
        }
      }
      if (value != null) {
        setLastSearchNode(key,lastNode);
      }
      if (value != null || iGetContainer)       return lastNode;
      return null;
    }
  }
  finally {
    checkTreeStructure(p);
    OProfiler.getInstance().updateStat("[OMVRBTree.getEntry] Steps of search",steps);
  }
  return setLastSearchNode(key,null);
}
