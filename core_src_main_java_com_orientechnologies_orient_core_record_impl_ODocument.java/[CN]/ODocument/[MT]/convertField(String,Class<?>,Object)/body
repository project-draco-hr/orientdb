{
  if (iType == null)   return (RET)iValue;
  if (iValue instanceof ORID && !ORID.class.equals(iType) && !ORecordId.class.equals(iType)) {
    iValue=(RET)new ODocument(_database,(ORID)iValue);
    _fieldValues.put(iPropertyName,iValue);
  }
 else   if (ORID.class.equals(iType)) {
    if (iValue instanceof ORecord<?>)     return (RET)((ORecord<?>)iValue).getIdentity();
  }
 else   if (Set.class.isAssignableFrom(iType) && !(iValue instanceof Set)) {
    final Collection<?> newValue;
    if (iValue instanceof ORecordLazyList || iValue instanceof ORecordLazyMap)     newValue=new ORecordLazySet(this);
 else     newValue=new OTrackedSet<Object>(this);
    if (iValue instanceof Collection<?>)     ((Collection<Object>)newValue).addAll((Collection<Object>)iValue);
 else     if (iValue instanceof Map)     ((Collection<Object>)newValue).addAll(((Map<String,Object>)iValue).values());
    _fieldValues.put(iPropertyName,newValue);
    iValue=(RET)newValue;
  }
 else   if (List.class.isAssignableFrom(iType) && !(iValue instanceof List)) {
    final Collection<?> newValue;
    if (iValue instanceof ORecordLazySet || iValue instanceof ORecordLazyMap)     newValue=new ORecordLazyList(this);
 else     newValue=new OTrackedList<Object>(this);
    if (iValue instanceof Collection)     ((Collection<Object>)newValue).addAll((Collection<Object>)iValue);
 else     if (iValue instanceof Map)     ((Collection<Object>)newValue).addAll(((Map<String,Object>)iValue).values());
    _fieldValues.put(iPropertyName,newValue);
    iValue=(RET)newValue;
  }
 else   if (iValue instanceof Enum) {
    if (iType.isAssignableFrom(Integer.TYPE))     iValue=((Enum<?>)iValue).ordinal();
 else     iValue=((Enum<?>)iValue).name();
    if (!(iValue instanceof String) && !iType.isAssignableFrom(iValue.getClass()))     throw new IllegalArgumentException("Property '" + iPropertyName + "' of type '"+ iType+ "' can't accept value of type: "+ iValue.getClass());
  }
 else   if (Date.class.isAssignableFrom(iType) && iValue != null && iValue instanceof String && _database != null) {
    final OStorageConfiguration config=_database.getStorage().getConfiguration();
    DateFormat formatter=config.getDateFormatInstance();
    if (((String)iValue).length() > config.dateFormat.length()) {
      formatter=config.getDateTimeFormatInstance();
    }
    try {
      iValue=formatter.parse((String)iValue);
      _fieldValues.put(iPropertyName,iValue);
    }
 catch (    ParseException pe) {
      throw new OQueryParsingException("Error on conversion of date '" + iValue + "' using the format: "+ formatter.toString());
    }
  }
  iValue=OType.convert(iValue,iType);
  return (RET)iValue;
}
