{
  atomicOperationsManager.acquireReadLock(this);
  try {
    acquireSharedLock();
    try {
      OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
      OClusterPositionMapBucket.PositionEntry positionEntry=clusterPositionMap.get(clusterPosition,0);
      if (positionEntry == null)       throw new ORecordNotFoundException("Record for cluster with id " + id + " and position "+ clusterPosition+ " is absent.");
      int recordPosition=positionEntry.getRecordPosition();
      long pageIndex=positionEntry.getPageIndex();
      if (getFilledUpTo(atomicOperation,fileId) <= pageIndex)       throw new ORecordNotFoundException("Record for cluster with id " + id + " and position "+ clusterPosition+ " is absent.");
      ORecordVersion loadedRecordVersion=null;
      OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,pageIndex,false);
      try {
        final OClusterPage localPage=new OClusterPage(cacheEntry,false,getChangesTree(atomicOperation,cacheEntry));
        if (localPage.isDeleted(recordPosition))         throw new ORecordNotFoundException("Record for cluster with id " + id + " and position "+ clusterPosition+ " is absent.");
        loadedRecordVersion=localPage.getRecordVersion(recordPosition);
      }
  finally {
        releasePage(atomicOperation,cacheEntry);
      }
      if (loadedRecordVersion.compareTo(recordVersion) > 0)       return readRecord(clusterPosition);
      return null;
    }
  finally {
      releaseSharedLock();
    }
  }
  finally {
    atomicOperationsManager.releaseReadLock(this);
  }
}
