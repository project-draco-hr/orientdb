{
  acquireExclusiveLock();
  try {
    final OMVRBTreeEntry<Object,Set<OIdentifiable>> firstEntry;
    if (iInclusive)     firstEntry=map.getCeilingEntry(iRangeFrom,OMVRBTree.PartialSearchMode.LOWEST_BOUNDARY);
 else     firstEntry=map.getHigherEntry(iRangeFrom);
    if (firstEntry == null)     return Collections.emptySet();
    final int firstEntryIndex=map.getPageIndex();
    final OMVRBTreeEntry<Object,Set<OIdentifiable>> lastEntry;
    if (iInclusive)     lastEntry=map.getHigherEntry(iRangeTo);
 else     lastEntry=map.getCeilingEntry(iRangeTo,OMVRBTree.PartialSearchMode.LOWEST_BOUNDARY);
    final int lastEntryIndex;
    if (lastEntry != null)     lastEntryIndex=map.getPageIndex();
 else     lastEntryIndex=-1;
    OMVRBTreeEntry<Object,Set<OIdentifiable>> entry=firstEntry;
    map.setPageIndex(firstEntryIndex);
    final Set<ODocument> result=new ODocumentFieldsHashSet();
    while (entry != null && !(entry == lastEntry && map.getPageIndex() == lastEntryIndex)) {
      final Object key=entry.getKey();
      final OMVRBTreeRIDSet values=(OMVRBTreeRIDSet)entry.getValue();
      if (values.isEmpty())       continue;
      for (      final OIdentifiable value : values) {
        if (maxEntriesToFetch > -1 && maxEntriesToFetch == result.size())         return result;
        final ODocument document=new ODocument();
        document.field("key",key);
        document.field("rid",value.getIdentity());
        document.unsetDirty();
        result.add(document);
      }
      entry=OMVRBTree.next(entry);
    }
    return result;
  }
  finally {
    releaseExclusiveLock();
  }
}
