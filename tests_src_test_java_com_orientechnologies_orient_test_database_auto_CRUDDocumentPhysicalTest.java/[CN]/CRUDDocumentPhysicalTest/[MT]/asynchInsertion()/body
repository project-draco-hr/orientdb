{
  ODatabaseDocumentPool pool=new ODatabaseDocumentPool(url,"admin","admin");
  database=pool.acquire();
  try {
    startRecordNumber=database.countClusterElements("Account");
    final AtomicInteger callBackCalled=new AtomicInteger();
    final long total=startRecordNumber + TOT_RECORDS;
    for (long i=startRecordNumber; i < total; ++i) {
      record.reset();
      record.setClassName("Account");
      record.field("id",i);
      record.field("name","Asynch insertion test");
      record.field("location","Italy");
      record.field("salary",(i + 300));
      database.save(record,OPERATION_MODE.ASYNCHRONOUS,false,new ORecordCallback<Long>(){
        public void call(        ORecordId iRID,        Long iParameter){
          System.out.println("asynchInsertion callback for record " + iRID + ": "+ callBackCalled.incrementAndGet());
        }
      }
);
    }
    while (callBackCalled.intValue() < total) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
      }
    }
    Assert.assertEquals(callBackCalled.intValue(),total);
    final ODatabaseDocumentTx db=ODatabaseDocumentPool.global().acquire(url,"admin","admin");
    long tot;
    while ((tot=db.countClusterElements("Account")) < startRecordNumber + TOT_RECORDS) {
      System.out.println("Asynchronous insertion: found " + tot + " records but waiting till "+ (startRecordNumber + TOT_RECORDS)+ " is reached");
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
      }
    }
    db.close();
    while (database.countClusterElements("Account") > 0)     for (    ODocument d : database.browseClass("Account")) {
      if (d.field("name").equals("Asynch insertion test"))       d.delete();
    }
  }
  finally {
    database.close();
  }
}
