{
  final int records=10000;
  long seed=System.currentTimeMillis();
  MersenneTwisterFast mersenneTwisterFast=new MersenneTwisterFast(seed);
  System.out.println("testGetPhysicalPosition seed : " + seed);
  Set<OPhysicalPosition> positions=new HashSet<OPhysicalPosition>();
  ORecordVersion recordVersion=OVersionFactory.instance().createVersion();
  recordVersion.increment();
  recordVersion.increment();
  for (int i=0; i < records; i++) {
    int recordSize=mersenneTwisterFast.nextInt(2 * OClusterPage.MAX_RECORD_SIZE) + 1;
    byte[] record=new byte[recordSize];
    mersenneTwisterFast.nextBytes(record);
    recordVersion.increment();
    final OPhysicalPosition physicalPosition=paginatedCluster.createRecord(record,recordVersion,(byte)i);
    positions.add(physicalPosition);
  }
  Set<OPhysicalPosition> removedPositions=new HashSet<OPhysicalPosition>();
  for (  OPhysicalPosition position : positions) {
    OPhysicalPosition physicalPosition=new OPhysicalPosition();
    physicalPosition.clusterPosition=position.clusterPosition;
    physicalPosition=paginatedCluster.getPhysicalPosition(physicalPosition);
    Assert.assertEquals(physicalPosition.clusterPosition,position.clusterPosition);
    Assert.assertEquals(physicalPosition.recordType,position.recordType);
    Assert.assertEquals(physicalPosition.recordSize,position.recordSize);
    if (mersenneTwisterFast.nextBoolean()) {
      paginatedCluster.deleteRecord(position.clusterPosition);
      removedPositions.add(position);
    }
  }
  for (  OPhysicalPosition position : positions) {
    OPhysicalPosition physicalPosition=new OPhysicalPosition();
    physicalPosition.clusterPosition=position.clusterPosition;
    physicalPosition=paginatedCluster.getPhysicalPosition(physicalPosition);
    if (removedPositions.contains(position))     Assert.assertNull(physicalPosition);
 else {
      Assert.assertEquals(physicalPosition.clusterPosition,position.clusterPosition);
      Assert.assertEquals(physicalPosition.recordType,position.recordType);
      Assert.assertEquals(physicalPosition.recordSize,position.recordSize);
    }
  }
}
