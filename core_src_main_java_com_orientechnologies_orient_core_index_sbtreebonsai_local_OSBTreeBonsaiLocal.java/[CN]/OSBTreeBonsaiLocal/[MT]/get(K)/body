{
  atomicOperationsManager.acquireReadLock(this);
  try {
    final Lock lock=fileLockManager.acquireSharedLock(fileId);
    try {
      OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
      BucketSearchResult bucketSearchResult=findBucket(key,atomicOperation);
      if (bucketSearchResult.itemIndex < 0)       return null;
      OBonsaiBucketPointer bucketPointer=bucketSearchResult.getLastPathItem();
      OCacheEntry keyBucketCacheEntry=loadPage(atomicOperation,fileId,bucketPointer.getPageIndex(),false);
      try {
        OSBTreeBonsaiBucket<K,V> keyBucket=new OSBTreeBonsaiBucket<K,V>(keyBucketCacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChangesTree(atomicOperation,keyBucketCacheEntry));
        return keyBucket.getEntry(bucketSearchResult.itemIndex).value;
      }
  finally {
        releasePage(atomicOperation,keyBucketCacheEntry);
      }
    }
  finally {
      lock.unlock();
    }
  }
 catch (  IOException e) {
    throw new OSBTreeException("Error during retrieving  of sbtree with name " + name,e);
  }
 finally {
    atomicOperationsManager.releaseReadLock(this);
  }
}
