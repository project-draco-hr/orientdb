{
  checkConnection();
  final List<ORecordOperation> committedEntries=new ArrayList<ORecordOperation>();
  do {
    try {
      OStorageRemoteThreadLocal.INSTANCE.get().commandExecuting=true;
      OChannelBinaryClient network=null;
      try {
        network=beginRequest(OChannelBinaryProtocol.REQUEST_TX_COMMIT);
        network.writeInt(iTx.getId());
        network.writeByte((byte)(iTx.isUsingLog() ? 1 : 0));
        final List<ORecordOperation> tmpEntries=new ArrayList<ORecordOperation>();
        if (iTx.getCurrentRecordEntries().iterator().hasNext()) {
          while (iTx.getCurrentRecordEntries().iterator().hasNext()) {
            for (            ORecordOperation txEntry : iTx.getCurrentRecordEntries())             tmpEntries.add(txEntry);
            iTx.clearRecordEntries();
            if (tmpEntries.size() > 0) {
              for (              ORecordOperation txEntry : tmpEntries) {
                commitEntry(network,txEntry);
                committedEntries.add(txEntry);
              }
              tmpEntries.clear();
            }
          }
        }
 else         if (committedEntries.size() > 0) {
          for (          ORecordOperation txEntry : committedEntries)           commitEntry(network,txEntry);
        }
        network.writeByte((byte)0);
        network.writeBytes(iTx.getIndexChanges().toStream());
      }
  finally {
        endRequest(network);
      }
      try {
        beginResponse(network);
        final int createdRecords=network.readInt();
        ORecordId currentRid;
        ORecordId createdRid;
        for (int i=0; i < createdRecords; i++) {
          currentRid=network.readRID();
          createdRid=network.readRID();
          for (          ORecordOperation txEntry : iTx.getAllRecordEntries()) {
            if (txEntry.getRecord().getIdentity().equals(currentRid)) {
              txEntry.getRecord().setIdentity(createdRid);
              break;
            }
          }
        }
        final int updatedRecords=network.readInt();
        ORecordId rid;
        for (int i=0; i < updatedRecords; ++i) {
          rid=network.readRID();
          for (          ORecordOperation txEntry : iTx.getAllRecordEntries()) {
            if (txEntry.getRecord().getIdentity().equals(rid)) {
              txEntry.getRecord().getRecordVersion().copyFrom(network.readVersion());
              break;
            }
          }
        }
        committedEntries.clear();
      }
  finally {
        endResponse(network);
      }
      for (      ORecordOperation txEntry : iTx.getAllRecordEntries())       txEntry.getRecord().unload();
      OTransactionAbstract.updateCacheFromEntries(this,iTx,iTx.getAllRecordEntries(),false);
      break;
    }
 catch (    OModificationOperationProhibitedException mope) {
      handleDBFreeze();
    }
catch (    Exception e) {
      handleException("Error on commit",e);
    }
 finally {
      OStorageRemoteThreadLocal.INSTANCE.get().commandExecuting=false;
    }
  }
 while (true);
}
