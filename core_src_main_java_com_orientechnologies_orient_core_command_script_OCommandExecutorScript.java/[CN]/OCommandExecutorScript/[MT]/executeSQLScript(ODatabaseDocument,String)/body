{
  Object lastResult=null;
  int maxRetry=1;
  context.setVariable("transactionRetries",0);
  for (int retry=0; retry < maxRetry; retry++) {
    try {
      int txBegunAtLine=-1;
      int txBegunAtPart=-1;
      lastResult=null;
      final BufferedReader reader=new BufferedReader(new StringReader(iText));
      int line=0;
      int linePart=0;
      String lastLine;
      boolean txBegun=false;
      for (; line < txBegunAtLine; ++line)       reader.readLine();
      for (; (lastLine=reader.readLine()) != null; ++line) {
        lastLine=lastLine.trim();
        final List<String> lineParts=OStringSerializerHelper.smartSplit(lastLine,';');
        if (line == txBegunAtLine)         linePart=txBegunAtPart;
 else         linePart=0;
        for (; linePart < lineParts.size(); ++linePart) {
          final String lastCommand=lineParts.get(linePart);
          if (OStringSerializerHelper.startsWithIgnoreCase(lastCommand,"let ")) {
            final int equalsPos=lastCommand.indexOf('=');
            final String variable=lastCommand.substring("let ".length(),equalsPos).trim();
            final String cmd=lastCommand.substring(equalsPos + 1).trim();
            lastResult=db.command(new OCommandSQL(cmd).setContext(getContext())).execute();
            getContext().setVariable(variable,lastResult);
          }
 else           if (OStringSerializerHelper.startsWithIgnoreCase(lastCommand,"begin")) {
            if (txBegun)             throw new OCommandSQLParsingException("Transaction already begun");
            if (db.getTransaction().isActive())             db.commit();
            txBegun=true;
            txBegunAtLine=line;
            txBegunAtPart=linePart;
            db.begin();
            if (lastCommand.length() > "begin ".length()) {
              String next=lastCommand.substring("begin ".length()).trim();
              if (OStringSerializerHelper.startsWithIgnoreCase(next,"isolation ")) {
                next=next.substring("isolation ".length()).trim();
                db.getTransaction().setIsolationLevel(OTransaction.ISOLATION_LEVEL.valueOf(next.toUpperCase()));
              }
            }
          }
 else           if ("rollback".equalsIgnoreCase(lastCommand)) {
            if (!txBegun)             throw new OCommandSQLParsingException("Transaction not begun");
            db.rollback();
            txBegun=false;
            txBegunAtLine=-1;
            txBegunAtPart=-1;
          }
 else           if (OStringSerializerHelper.startsWithIgnoreCase(lastCommand,"commit")) {
            if (txBegunAtLine < 0)             throw new OCommandSQLParsingException("Transaction not begun");
            if (retry == 0 && lastCommand.length() > "commit ".length()) {
              String next=lastCommand.substring("commit ".length()).trim();
              if (OStringSerializerHelper.startsWithIgnoreCase(next,"retry ")) {
                next=next.substring("retry ".length()).trim();
                maxRetry=Integer.parseInt(next) + 1;
              }
            }
            db.commit();
            txBegun=false;
            txBegunAtLine=-1;
            txBegunAtPart=-1;
          }
 else           if (OStringSerializerHelper.startsWithIgnoreCase(lastCommand,"sleep ")) {
            final String sleepTimeInMs=lastCommand.substring("sleep ".length()).trim();
            try {
              Thread.sleep(Integer.parseInt(sleepTimeInMs));
            }
 catch (            InterruptedException e) {
            }
          }
 else           if (OStringSerializerHelper.startsWithIgnoreCase(lastCommand,"return ")) {
            final String variable=lastCommand.substring("return ".length()).trim();
            if (variable.equalsIgnoreCase("NULL"))             lastResult=null;
 else             if (variable.startsWith("$"))             lastResult=getContext().getVariable(variable);
 else             if (variable.startsWith("[") && variable.endsWith("]")) {
              final List<String> items=new ArrayList<String>();
              OStringSerializerHelper.getCollection(variable,0,items);
              final List<Object> result=new ArrayList<Object>(items.size());
              for (int i=0; i < items.size(); ++i) {
                String item=items.get(i);
                Object res;
                if (item.startsWith("$"))                 res=getContext().getVariable(item);
 else                 res=item;
                if (OMultiValue.isMultiValue(res) && OMultiValue.getSize(res) == 1)                 res=OMultiValue.getFirstValue(res);
                result.add(res);
              }
              lastResult=result;
            }
 else             if (variable.startsWith("{") && variable.endsWith("}")) {
              final Map<String,String> map=OStringSerializerHelper.getMap(variable);
              final Map<Object,Object> result=new HashMap<Object,Object>(map.size());
              for (              Map.Entry<String,String> entry : map.entrySet()) {
                String stringKey=entry.getKey();
                if (stringKey == null)                 continue;
                stringKey=stringKey.trim();
                Object key;
                if (stringKey.startsWith("$"))                 key=getContext().getVariable(stringKey);
 else                 key=stringKey;
                if (OMultiValue.isMultiValue(key) && OMultiValue.getSize(key) == 1)                 key=OMultiValue.getFirstValue(key);
                String stringValue=entry.getValue();
                if (stringValue == null)                 continue;
                stringValue=stringValue.trim();
                Object value;
                if (stringValue.toString().startsWith("$"))                 value=getContext().getVariable(stringValue);
 else                 value=stringValue;
                if (OMultiValue.isMultiValue(value) && OMultiValue.getSize(value) == 1)                 value=OMultiValue.getFirstValue(value);
                result.put(key,value);
              }
              lastResult=result;
            }
 else             lastResult=variable;
            break;
          }
 else           if (lastCommand != null && lastCommand.length() > 0)           lastResult=db.command(new OCommandSQL(lastCommand).setContext(getContext())).execute();
        }
      }
      break;
    }
 catch (    OConcurrentModificationException e) {
      context.setVariable("retries",retry);
      getDatabase().getLocalCache().clear();
    }
  }
  return lastResult;
}
