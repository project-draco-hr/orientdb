{
  parserPreviousPos=parserCurrentPos;
  parserLastWord.setLength(0);
  parserSkipWhiteSpaces();
  if (parserCurrentPos == -1)   return;
  char stringBeginChar=' ';
  final String text2Use=iForceUpperCase ? parserTextUpperCase : parserText;
  while (parserCurrentPos < text2Use.length()) {
    final char c=text2Use.charAt(parserCurrentPos);
    boolean found=false;
    for (int sepIndex=0; sepIndex < iSeparatorChars.length(); ++sepIndex) {
      if (iSeparatorChars.charAt(sepIndex) == c) {
        found=true;
        break;
      }
    }
    if (!found)     break;
    parserCurrentPos++;
  }
  try {
    int openParenthesis=0;
    int openBraket=0;
    int openGraph=0;
    boolean escape=false;
    for (; parserCurrentPos < text2Use.length(); parserCurrentPos++) {
      final char c=text2Use.charAt(parserCurrentPos);
      if (!escape && c == '\\' && ((parserCurrentPos + 1) < text2Use.length())) {
        final char nextChar=text2Use.charAt(parserCurrentPos + 1);
        if (nextChar == 'u') {
          parserCurrentPos=OStringParser.readUnicode(text2Use,parserCurrentPos + 2,parserLastWord);
        }
 else {
          parserLastWord.append(nextChar);
          parserCurrentPos++;
        }
        continue;
      }
      if (openBraket == 0 && openGraph == 0 && openParenthesis == 0 && !escape && (c == '\'' || c == '"')) {
        if (stringBeginChar != ' ') {
          if (stringBeginChar == c) {
            stringBeginChar=' ';
            parserLastWord.append(c);
            parserCurrentPos++;
            break;
          }
        }
 else         stringBeginChar=c;
      }
 else       if (stringBeginChar == ' ') {
        if (openBraket == 0 && openGraph == 0 && openParenthesis == 0 && parserCheckSeparator(c,iSeparatorChars)) {
          break;
        }
 else         if (c == '(')         openParenthesis++;
 else         if (c == ')' && openParenthesis > 0)         openParenthesis--;
 else         if (c == '[')         openBraket++;
 else         if (c == ']' && openBraket > 0)         openBraket--;
 else         if (c == '{')         openGraph++;
 else         if (c == '}' && openGraph > 0)         openGraph--;
      }
      parserLastWord.append(c);
      if (escape)       escape=false;
    }
    if (stringBeginChar != ' ')     throw new IllegalStateException("Missing closed string character: '" + stringBeginChar + "', position: "+ parserCurrentPos);
    if (openBraket > 0)     throw new IllegalStateException("Missing closed braket character: ']', position: " + parserCurrentPos);
    if (openGraph > 0)     throw new IllegalStateException("Missing closed graph character: '}', position: " + parserCurrentPos);
    if (openParenthesis > 0)     throw new IllegalStateException("Missing closed parenthesis character: ')', position: " + parserCurrentPos);
  }
  finally {
    if (parserCurrentPos >= text2Use.length()) {
      parserCurrentPos=-1;
      parserLastSeparator=' ';
    }
  }
}
