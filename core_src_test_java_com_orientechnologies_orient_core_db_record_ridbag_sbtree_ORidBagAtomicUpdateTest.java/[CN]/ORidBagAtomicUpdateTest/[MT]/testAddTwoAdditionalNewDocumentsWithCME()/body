{
  final ODocument cmeDoc=new ODocument();
  cmeDoc.save();
  database.begin();
  ODocument rootDoc=new ODocument();
  ORidBag ridBag=new ORidBag();
  rootDoc.field("ridBag",ridBag);
  ODocument docOne=new ODocument();
  ODocument docTwo=new ODocument();
  ridBag.add(docOne);
  ridBag.add(docTwo);
  rootDoc.save();
  database.commit();
  long recordsCount=database.countClusterElements(database.getDefaultClusterId());
  rootDoc=database.load(rootDoc.getIdentity());
  ridBag=rootDoc.field("ridBag");
  ODocument staleCMEDoc=database.load(cmeDoc.getIdentity());
  Assert.assertNotSame(staleCMEDoc,cmeDoc);
  cmeDoc.field("v","v");
  cmeDoc.save();
  database.begin();
  ODocument docThree=new ODocument();
  ODocument docFour=new ODocument();
  ridBag.add(docThree);
  ridBag.add(docFour);
  rootDoc.save();
  staleCMEDoc.field("v","v1");
  staleCMEDoc.save();
  try {
    database.commit();
    Assert.fail();
  }
 catch (  OConcurrentModificationException e) {
  }
  Assert.assertEquals(database.countClusterElements(database.getDefaultClusterId()),recordsCount);
  rootDoc=database.load(rootDoc.getIdentity());
  ridBag=rootDoc.field("ridBag");
  Assert.assertEquals(ridBag.size(),2);
  Iterator<OIdentifiable> iterator=ridBag.iterator();
  List<OIdentifiable> addedDocs=new ArrayList<OIdentifiable>(Arrays.asList(docOne,docTwo));
  Assert.assertTrue(addedDocs.remove(iterator.next()));
  Assert.assertTrue(addedDocs.remove(iterator.next()));
}
