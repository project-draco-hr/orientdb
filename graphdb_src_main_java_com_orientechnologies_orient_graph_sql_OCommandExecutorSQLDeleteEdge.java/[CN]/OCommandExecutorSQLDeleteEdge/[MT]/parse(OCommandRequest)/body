{
  init((OCommandRequestText)iRequest);
  parserRequiredKeyword("DELETE");
  parserRequiredKeyword("EDGE");
  OClass clazz=null;
  String temp=parseOptionalWord(true);
  final OrientBaseGraph graph=OGraphCommandExecutorSQLFactory.getGraph();
  try {
    while (temp != null) {
      if (temp.equals("FROM")) {
        fromExpr=parserRequiredWord(false,"Syntax error"," =><,\r\n");
        if (rid != null)         throwSyntaxErrorException("FROM '" + fromExpr + "' is not allowed when specify a RID ("+ rid+ ")");
      }
 else       if (temp.equals("TO")) {
        toExpr=parserRequiredWord(false,"Syntax error"," =><,\r\n");
        if (rid != null)         throwSyntaxErrorException("TO '" + toExpr + "' is not allowed when specify a RID ("+ rid+ ")");
      }
 else       if (temp.startsWith("#")) {
        rid=new ORecordId(temp);
        if (fromExpr != null || toExpr != null)         throwSyntaxErrorException("Specifying the RID " + rid + " is not allowed with FROM/TO");
      }
 else       if (temp.equals(KEYWORD_WHERE)) {
        if (clazz == null)         clazz=graph.getEdgeType(OGraphDatabase.EDGE_CLASS_NAME);
        final String condition=parserGetCurrentPosition() > -1 ? " " + parserText.substring(parserGetCurrentPosition()) : "";
        compiledFilter=OSQLEngine.getInstance().parseCondition(condition,getContext(),KEYWORD_WHERE);
        break;
      }
 else       if (temp.length() > 0) {
        clazz=graph.getEdgeType(temp);
        if (clazz == null)         throw new OCommandSQLParsingException("Class '" + temp + " was not found");
      }
      temp=parseOptionalWord(true);
      if (parserIsEnded())       break;
    }
    if (fromExpr == null && toExpr == null && rid == null)     if (clazz == null)     query=graph.getRawGraph().command(new OSQLAsynchQuery<ODocument>("select from E",this));
 else     query=graph.getRawGraph().command(new OSQLAsynchQuery<ODocument>("select from " + clazz.getName(),this));
  }
  finally {
    graph.shutdown();
  }
  return this;
}
