{
  Iterator<Map.Entry<GroupKey,WriteGroup>> entriesIterator=subMap.entrySet().iterator();
  long currentTime=System.currentTimeMillis();
  while (entriesIterator.hasNext() && flushedWriteGroups < writeGroupsToFlush) {
    Map.Entry<GroupKey,WriteGroup> entry=entriesIterator.next();
    final WriteGroup group=entry.getValue();
    final GroupKey groupKey=entry.getKey();
    lockManager.acquireLock(Thread.currentThread(),entry.getKey(),OLockManager.LOCK.EXCLUSIVE);
    try {
      if (group.recencyBit && group.creationTime - currentTime < groupTTL && !forceFlush)       group.recencyBit=false;
 else {
        for (int i=0; i < 16; i++) {
          final long pagePointer=group.pages[i];
          if (pagePointer != ODirectMemory.NULL_POINTER) {
            flushPage(groupKey.fileId,groupKey.groupIndex * 16 + i,pagePointer);
            directMemory.free(pagePointer);
            cacheSize.decrementAndGet();
          }
        }
        lastGroupKey=entry.getKey();
        entriesIterator.remove();
        flushedWriteGroups++;
      }
    }
  finally {
      lockManager.releaseLock(Thread.currentThread(),entry.getKey(),OLockManager.LOCK.EXCLUSIVE);
    }
  }
  return flushedWriteGroups;
}
