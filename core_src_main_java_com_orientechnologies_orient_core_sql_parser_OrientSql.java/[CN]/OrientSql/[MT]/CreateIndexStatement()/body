{
  OCreateIndexStatement jjtn000=new OCreateIndexStatement(JJTCREATEINDEXSTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  OCreateIndexStatement.Property lastProperty;
  OIdentifier lastIdentifier;
  ORecordAttribute lastRecordAttr;
  try {
    jj_consume_token(CREATE);
    jj_consume_token(INDEX);
    jjtn000.name=IndexName();
    if (jj_2_129(3)) {
      jj_consume_token(ON);
      jjtn000.className=Identifier();
      jj_consume_token(LPAREN);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case CACHE:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case EXECUTE:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case BEGIN:
case COMMIT:
case ROLLBACK:
case IF:
case ISOLATION:
case SLEEP:
case CONSOLE:
case BLOB:
case SHARED:
case DEFAULT_:
case SEQUENCE:
case START:
case OPTIONAL:
case COUNT:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
        lastIdentifier=Identifier();
      lastProperty=new OCreateIndexStatement.Property();
    lastProperty.name=lastIdentifier;
  jjtn000.propertyList.add(lastProperty);
break;
case RECORD_ATTRIBUTE:
lastRecordAttr=RecordAttribute();
lastProperty=new OCreateIndexStatement.Property();
lastProperty.recordAttribute=lastRecordAttr;
jjtn000.propertyList.add(lastProperty);
break;
default :
jj_la1[306]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case BY:
jj_consume_token(BY);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case KEY:
jj_consume_token(KEY);
lastProperty.byKey=true;
break;
case VALUE:
jj_consume_token(VALUE);
lastProperty.byValue=true;
break;
default :
jj_la1[307]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[308]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COLLATE:
jj_consume_token(COLLATE);
lastProperty.collate=Identifier();
break;
default :
jj_la1[309]=jj_gen;
;
}
label_52: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[310]=jj_gen;
break label_52;
}
jj_consume_token(COMMA);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case CACHE:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case EXECUTE:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case BEGIN:
case COMMIT:
case ROLLBACK:
case IF:
case ISOLATION:
case SLEEP:
case CONSOLE:
case BLOB:
case SHARED:
case DEFAULT_:
case SEQUENCE:
case START:
case OPTIONAL:
case COUNT:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
lastIdentifier=Identifier();
lastProperty=new OCreateIndexStatement.Property();
lastProperty.name=lastIdentifier;
jjtn000.propertyList.add(lastProperty);
break;
case RECORD_ATTRIBUTE:
lastRecordAttr=RecordAttribute();
lastProperty=new OCreateIndexStatement.Property();
lastProperty.recordAttribute=lastRecordAttr;
jjtn000.propertyList.add(lastProperty);
break;
default :
jj_la1[311]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case BY:
jj_consume_token(BY);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case KEY:
jj_consume_token(KEY);
lastProperty.byKey=true;
break;
case VALUE:
jj_consume_token(VALUE);
lastProperty.byValue=true;
break;
default :
jj_la1[312]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[313]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COLLATE:
jj_consume_token(COLLATE);
lastProperty.collate=Identifier();
break;
default :
jj_la1[314]=jj_gen;
;
}
}
jj_consume_token(RPAREN);
jjtn000.type=Identifier();
}
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case CACHE:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case EXECUTE:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case BEGIN:
case COMMIT:
case ROLLBACK:
case IF:
case ISOLATION:
case SLEEP:
case CONSOLE:
case BLOB:
case SHARED:
case DEFAULT_:
case SEQUENCE:
case START:
case OPTIONAL:
case COUNT:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
jjtn000.type=Identifier();
break;
default :
jj_la1[315]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
if (jj_2_132(2)) {
jj_consume_token(ENGINE);
jjtn000.engine=Identifier();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case CACHE:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case EXECUTE:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case BEGIN:
case COMMIT:
case ROLLBACK:
case IF:
case ISOLATION:
case SLEEP:
case CONSOLE:
case BLOB:
case SHARED:
case DEFAULT_:
case SEQUENCE:
case START:
case OPTIONAL:
case COUNT:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
if (jj_2_130(2)) {
jj_consume_token(METADATA);
jjtn000.metadata=Json();
}
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case CACHE:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case EXECUTE:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case BEGIN:
case COMMIT:
case ROLLBACK:
case IF:
case ISOLATION:
case SLEEP:
case CONSOLE:
case BLOB:
case SHARED:
case DEFAULT_:
case SEQUENCE:
case START:
case OPTIONAL:
case COUNT:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
lastIdentifier=Identifier();
jjtn000.keyTypes.add(lastIdentifier);
label_53: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[316]=jj_gen;
break label_53;
}
jj_consume_token(COMMA);
lastIdentifier=Identifier();
jjtn000.keyTypes.add(lastIdentifier);
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case METADATA:
jj_consume_token(METADATA);
jjtn000.metadata=Json();
break;
default :
jj_la1[317]=jj_gen;
;
}
break;
default :
jj_la1[318]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
break;
default :
jj_la1[319]=jj_gen;
;
}
}
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case CACHE:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case EXECUTE:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case BEGIN:
case COMMIT:
case ROLLBACK:
case IF:
case ISOLATION:
case SLEEP:
case CONSOLE:
case BLOB:
case SHARED:
case DEFAULT_:
case SEQUENCE:
case START:
case OPTIONAL:
case COUNT:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
if (jj_2_131(2)) {
jj_consume_token(METADATA);
jjtn000.metadata=Json();
}
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUE:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case CACHE:
case LUCENE:
case NEAR:
case WITHIN:
case MINDEPTH:
case CLASS:
case SUPERCLASS:
case CLASSES:
case SUPERCLASSES:
case EXCEPTION:
case PROFILE:
case STORAGE:
case ON:
case OFF:
case TRUNCATE:
case FIND:
case REFERENCES:
case EXTENDS:
case CLUSTERS:
case ABSTRACT:
case ALTER:
case NAME:
case SHORTNAME:
case OVERSIZE:
case STRICTMODE:
case ADDCLUSTER:
case REMOVECLUSTER:
case CUSTOM:
case CLUSTERSELECTION:
case DESCRIPTION:
case ENCRYPTION:
case DROP:
case PROPERTY:
case FORCE:
case METADATA:
case INDEX:
case COLLATE:
case ENGINE:
case REBUILD:
case ID:
case DATABASE:
case OPTIMIZE:
case LINK:
case TYPE:
case INVERSE:
case EXPLAIN:
case GRANT:
case REVOKE:
case READ:
case EXECUTE:
case ALL:
case NONE:
case FUNCTION:
case PARAMETERS:
case IDEMPOTENT:
case LANGUAGE:
case BEGIN:
case COMMIT:
case ROLLBACK:
case IF:
case ISOLATION:
case SLEEP:
case CONSOLE:
case BLOB:
case SHARED:
case DEFAULT_:
case SEQUENCE:
case START:
case OPTIONAL:
case COUNT:
case IN:
case KEY:
case IDENTIFIER:
case QUOTED_IDENTIFIER:
lastIdentifier=Identifier();
jjtn000.keyTypes.add(lastIdentifier);
label_54: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[320]=jj_gen;
break label_54;
}
jj_consume_token(COMMA);
lastIdentifier=Identifier();
jjtn000.keyTypes.add(lastIdentifier);
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case METADATA:
jj_consume_token(METADATA);
jjtn000.metadata=Json();
break;
default :
jj_la1[321]=jj_gen;
;
}
break;
default :
jj_la1[322]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
break;
default :
jj_la1[323]=jj_gen;
;
}
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
