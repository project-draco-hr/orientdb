{
  CRC32 crc32=new CRC32();
  try {
    masterRecordLSNHolder.seek(index * (2 * OIntegerSerializer.INT_SIZE + OLongSerializer.LONG_SIZE));
    int firstCRC=masterRecordLSNHolder.readInt();
    int segment=masterRecordLSNHolder.readInt();
    long position=masterRecordLSNHolder.readLong();
    byte[] serializedLSN=new byte[OIntegerSerializer.INT_SIZE + OLongSerializer.LONG_SIZE];
    OIntegerSerializer.INSTANCE.serialize(segment,serializedLSN,0);
    OLongSerializer.INSTANCE.serialize(position,serializedLSN,OIntegerSerializer.INT_SIZE);
    crc32.update(serializedLSN);
    if (firstCRC != ((int)crc32.getValue())) {
      OLogManager.instance().error(this,"Can not restore %d WAL master record for storage %s crc check is failed",index,storageName);
      return null;
    }
    return new OLogSequenceNumber(segment,position);
  }
 catch (  EOFException eofException) {
    OLogManager.instance().warn(this,"Can not restore %d WAL master record for storage %s",index,storageName);
    return null;
  }
}
