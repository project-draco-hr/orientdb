{
  super(OGlobalConfiguration.ENVIRONMENT_CONCURRENT.getValueAsBoolean(),OGlobalConfiguration.MVRBTREE_TIMEOUT.getValueAsInteger(),true);
  this.name=name;
  this.builder=builder;
  this.queryBuilder=queryBuilder;
  indexAnalyzer=new OLucenePerFieldAnalyzerWrapper(new StandardAnalyzer());
  queryAnalyzer=new OLucenePerFieldAnalyzerWrapper(new StandardAnalyzer());
  oindexes=new HashMap<String,OLuceneClassIndexContext>();
  try {
    reOpen();
  }
 catch (  IOException e) {
    OLogManager.instance().error(this,"Error on initializing Lucene index",e);
  }
  Orient.instance().registerListener(this);
  commitTask=new TimerTask(){
    @Override public void run(){
      if (Boolean.FALSE.equals(closed.get())) {
        commit();
      }
    }
  }
;
  Orient.instance().scheduleTask(commitTask,10000,10000);
  OLogManager.instance().info(this,"Index CREATED, timerTASK scheduled");
}
