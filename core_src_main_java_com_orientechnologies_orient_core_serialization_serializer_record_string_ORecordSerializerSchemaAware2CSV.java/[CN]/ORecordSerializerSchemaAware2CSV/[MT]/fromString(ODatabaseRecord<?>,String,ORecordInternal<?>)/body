{
  iContent=iContent.trim();
  if (iContent.length() == 0)   return iRecord;
  ORecordSchemaAware<?> record=(ORecordSchemaAware<?>)iRecord;
  int posFirstValue=iContent.indexOf(OStringSerializerHelper.ENTRY_SEPARATOR);
  int pos=iContent.indexOf(OStringSerializerHelper.CLASS_SEPARATOR);
  if (pos > -1 && pos < posFirstValue) {
    record.setClassName(iContent.substring(0,pos));
    iContent=iContent.substring(pos + 1);
  }
 else   record.setClassName(null);
  String[] fields=OStringSerializerHelper.split(iContent,OStringSerializerHelper.RECORD_SEPARATOR_AS_CHAR);
  String field;
  String fieldName;
  String fieldValue;
  OType type=null;
  OClass linkedClass;
  OType linkedType;
  OProperty prop;
  final DecimalFormatSymbols unusualSymbols=new DecimalFormatSymbols(iDatabase.getStorage().getConfiguration().getLocaleInstance());
  for (int i=0; i < fields.length; ++i) {
    field=fields[i].trim();
    pos=field.indexOf(FIELD_VALUE_SEPARATOR);
    if (pos > -1) {
      fieldName=field.substring(0,pos);
      fieldValue=field.length() > pos + 1 ? field.substring(pos + 1) : null;
      prop=record.getSchemaClass() != null ? record.getSchemaClass().getProperty(fieldName) : null;
      if (prop != null) {
        type=prop.getType();
        linkedClass=prop.getLinkedClass();
        linkedType=prop.getLinkedType();
      }
 else {
        linkedClass=null;
        linkedType=null;
        if (fieldValue != null) {
          if (fieldValue.length() > 1 && fieldValue.charAt(0) == '"' && fieldValue.charAt(fieldValue.length() - 1) == '"') {
            type=OType.STRING;
          }
 else           if (fieldValue.charAt(0) == OStringSerializerHelper.COLLECTION_BEGIN && fieldValue.charAt(fieldValue.length() - 1) == OStringSerializerHelper.COLLECTION_END) {
            type=OType.EMBEDDEDLIST;
            String value=fieldValue.substring(1,fieldValue.length() - 1);
            if (value.length() > 0) {
              if (value.contains(ORID.SEPARATOR)) {
                type=OType.LINKLIST;
                linkedType=OType.LINK;
                int classSeparatorPos=value.indexOf(OStringSerializerHelper.CLASS_SEPARATOR);
                if (classSeparatorPos > -1) {
                  String className=value.substring(1,classSeparatorPos);
                  if (className != null)                   linkedClass=iDatabase.getMetadata().getSchema().getClass(className);
                }
              }
 else               if (Character.isDigit(value.charAt(0)) || value.charAt(0) == '+' || value.charAt(0) == '-') {
                linkedType=getNumber(unusualSymbols,value);
              }
 else               if (value.charAt(0) == '\'' || value.charAt(0) == '"')               linkedType=OType.STRING;
 else               linkedType=OType.EMBEDDED;
            }
          }
 else           if (fieldValue.charAt(0) == OStringSerializerHelper.MAP_BEGIN && fieldValue.charAt(fieldValue.length() - 1) == OStringSerializerHelper.MAP_END) {
            type=OType.EMBEDDEDMAP;
          }
 else           if (fieldValue.startsWith(OStringSerializerHelper.LINK))           type=OType.LINK;
 else           if (fieldValue.equals("true") || fieldValue.equals("false"))           type=OType.BOOLEAN;
 else           type=getNumber(unusualSymbols,fieldValue);
        }
      }
      record.field(fieldName,fieldFromStream(iRecord.getDatabase(),type,linkedClass,linkedType,fieldName,fieldValue,unusualSymbols));
    }
  }
  return iRecord;
}
