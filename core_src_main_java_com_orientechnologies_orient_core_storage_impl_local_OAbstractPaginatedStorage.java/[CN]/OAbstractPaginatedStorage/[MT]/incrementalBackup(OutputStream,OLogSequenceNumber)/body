{
  final OLogSequenceNumber lastLsn;
  checkOpeness();
  stateLock.acquireReadLock();
  try {
    checkOpeness();
    final long freezeId;
    if (!isWritesAllowedDuringBackup())     freezeId=atomicOperationsManager.freezeAtomicOperations(OModificationOperationProhibitedException.class,"Incremental backup in progress");
 else     freezeId=-1;
    try {
      final BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(stream);
      try {
        final ZipOutputStream zipOutputStream=new ZipOutputStream(bufferedOutputStream,Charset.forName(configuration.getCharset()));
        try {
          final long newSegmentFreezeId=atomicOperationsManager.freezeAtomicOperations(OModificationOperationProhibitedException.class,"Backup in progress");
          try {
            writeAheadLog.newSegment();
          }
  finally {
            atomicOperationsManager.releaseAtomicOperations(newSegmentFreezeId);
          }
          final OLogSequenceNumber startLsn=writeAheadLog.end();
          writeAheadLog.preventCutTill(startLsn);
          final long startSegment=writeAheadLog.activeSegment();
          try {
            lastLsn=backupPagesWithChanges(fromLsn,zipOutputStream);
            final ZipEntry configurationEntry=new ZipEntry(CONF_ENTRY_NAME);
            zipOutputStream.putNextEntry(configurationEntry);
            final byte[] btConf=configuration.toStream();
            zipOutputStream.write(btConf);
            zipOutputStream.closeEntry();
            finalizeIncrementalBackup(zipOutputStream,startSegment);
          }
  finally {
            writeAheadLog.preventCutTill(null);
          }
        }
  finally {
          zipOutputStream.flush();
        }
      }
  finally {
        bufferedOutputStream.flush();
      }
    }
  finally {
      if (!isWritesAllowedDuringBackup())       atomicOperationsManager.releaseAtomicOperations(freezeId);
    }
  }
  finally {
    stateLock.releaseReadLock();
  }
  return lastLsn;
}
