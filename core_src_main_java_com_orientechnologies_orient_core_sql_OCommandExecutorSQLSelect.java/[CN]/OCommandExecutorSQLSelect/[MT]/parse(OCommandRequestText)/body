{
  iRequest.getDatabase().checkSecurity(ODatabaseSecurityResources.COMMAND,ORole.PERMISSION_READ);
  init(iRequest.getDatabase(),iRequest.getText());
  if (iRequest instanceof OSQLSynchQuery) {
    request=(OSQLSynchQuery<ORecordSchemaAware<?>>)iRequest;
  }
 else   if (iRequest instanceof OSQLAsynchQuery)   request=(OSQLAsynchQuery<ORecordSchemaAware<?>>)iRequest;
 else {
    request=new OSQLSynchQuery<ORecordSchemaAware<?>>(iRequest.getText());
    request.setDatabase(iRequest.getDatabase());
    if (iRequest.getResultListener() != null)     request.setResultListener(iRequest.getResultListener());
  }
  final int pos=parseProjections();
  if (pos == -1)   return this;
  int endPosition=text.length();
  int endP=textUpperCase.indexOf(" " + OCommandExecutorSQLSelect.KEYWORD_ORDER_BY,currentPos);
  if (endP > -1 && endP < endPosition)   endPosition=endP;
  endP=textUpperCase.indexOf(" " + OCommandExecutorSQLSelect.KEYWORD_LIMIT,currentPos);
  if (endP > -1 && endP < endPosition)   endPosition=endP;
  compiledFilter=OSQLEngine.getInstance().parseFromWhereCondition(iRequest.getDatabase(),text.substring(pos,endPosition));
  optimize();
  currentPos=compiledFilter.currentPos < 0 ? endPosition : compiledFilter.currentPos + pos;
  if (currentPos > -1 && currentPos < text.length()) {
    currentPos=OStringParser.jump(text,currentPos," \r\n");
    final StringBuilder word=new StringBuilder();
    String w;
    while (currentPos > -1) {
      currentPos=OSQLHelper.nextWord(text,textUpperCase,currentPos,word,true);
      if (currentPos > -1) {
        w=word.toString();
        if (w.equals(KEYWORD_ORDER))         parseOrderBy(word);
 else         if (w.equals(KEYWORD_LIMIT))         parseLimit(word);
      }
    }
  }
  if (limit == 0 || limit < -1) {
    throw new IllegalArgumentException("Limit must be > 0 or = -1 (no limit)");
  }
  return this;
}
