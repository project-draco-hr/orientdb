{
  final OCacheEntry bucketEntry=loadPage(null,fileId,bucketPointer.getPageIndex(),false);
  OSBTreeBonsaiBucket.SBTreeEntry<K,V> entry;
  try {
    final OSBTreeBonsaiBucket<K,V> keyBucket=new OSBTreeBonsaiBucket<K,V>(bucketEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,null);
    if (keyBucket.isLeaf()) {
      for (int i=0; i < path.size(); i++)       writer.append("\t");
      writer.append(" Leaf backet:" + bucketPointer.getPageIndex() + "|"+ bucketPointer.getPageOffset());
      writer.append(" size:" + keyBucket.size());
      writer.append(" content: [");
      for (int index=0; index < keyBucket.size(); index++) {
        entry=keyBucket.getEntry(index);
        writer.append(entry.getKey() + ",");
      }
      writer.append("]\n");
    }
 else {
      for (int i=0; i < path.size(); i++)       writer.append("\t");
      writer.append(" node bucket:" + bucketPointer.getPageIndex() + "|"+ bucketPointer.getPageOffset());
      writer.append("\n");
      for (int index=0; index < keyBucket.size(); index++) {
        entry=keyBucket.getEntry(index);
        for (int i=0; i < path.size(); i++)         writer.append("\t");
        writer.append(" entry:" + index + " left "+ entry.getKey()+ "\n");
        OBonsaiBucketPointer next=entry.leftChild;
        path.add(next);
        debugPrintBucket(next,writer,path);
        path.remove(next);
        for (int i=0; i < path.size(); i++)         writer.append("\t");
        writer.append(" entry:" + index + " right "+ entry.getKey()+ "\n");
        next=entry.rightChild;
        path.add(next);
        debugPrintBucket(next,writer,path);
        path.remove(next);
      }
    }
  }
  finally {
    releasePage(null,bucketEntry);
  }
}
