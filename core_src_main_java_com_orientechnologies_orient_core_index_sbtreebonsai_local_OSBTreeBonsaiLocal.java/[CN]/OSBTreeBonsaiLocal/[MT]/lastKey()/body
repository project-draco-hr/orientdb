{
  final OSessionStoragePerformanceStatistic statistic=performanceStatisticManager.getSessionPerformanceStatistic();
  startOperation();
  if (statistic != null)   statistic.startRidBagEntryReadTimer();
  try {
    atomicOperationsManager.acquireReadLock(this);
    try {
      final Lock lock=fileLockManager.acquireSharedLock(fileId);
      try {
        LinkedList<PagePathItemUnit> path=new LinkedList<PagePathItemUnit>();
        OBonsaiBucketPointer bucketPointer=rootBucketPointer;
        OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
        OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,bucketPointer.getPageIndex(),false);
        OSBTreeBonsaiBucket<K,V> bucket=new OSBTreeBonsaiBucket<K,V>(cacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChanges(atomicOperation,cacheEntry),this);
        int itemIndex=bucket.size() - 1;
        try {
          while (true) {
            if (bucket.isLeaf()) {
              if (bucket.isEmpty()) {
                if (path.isEmpty()) {
                  return null;
                }
 else {
                  PagePathItemUnit pagePathItemUnit=path.removeLast();
                  bucketPointer=pagePathItemUnit.bucketPointer;
                  itemIndex=pagePathItemUnit.itemIndex - 1;
                }
              }
 else {
                return bucket.getKey(bucket.size() - 1);
              }
            }
 else {
              if (itemIndex < -1) {
                if (!path.isEmpty()) {
                  PagePathItemUnit pagePathItemUnit=path.removeLast();
                  bucketPointer=pagePathItemUnit.bucketPointer;
                  itemIndex=pagePathItemUnit.itemIndex - 1;
                }
 else                 return null;
              }
 else {
                path.add(new PagePathItemUnit(bucketPointer,itemIndex));
                if (itemIndex > -1) {
                  OSBTreeBonsaiBucket.SBTreeEntry<K,V> entry=bucket.getEntry(itemIndex);
                  bucketPointer=entry.rightChild;
                }
 else {
                  OSBTreeBonsaiBucket.SBTreeEntry<K,V> entry=bucket.getEntry(0);
                  bucketPointer=entry.leftChild;
                }
                itemIndex=OSBTreeBonsaiBucket.MAX_BUCKET_SIZE_BYTES + 1;
              }
            }
            releasePage(atomicOperation,cacheEntry);
            cacheEntry=loadPage(atomicOperation,fileId,bucketPointer.getPageIndex(),false);
            bucket=new OSBTreeBonsaiBucket<K,V>(cacheEntry,bucketPointer.getPageOffset(),keySerializer,valueSerializer,getChanges(atomicOperation,cacheEntry),this);
            if (itemIndex == OSBTreeBonsaiBucket.MAX_BUCKET_SIZE_BYTES + 1)             itemIndex=bucket.size() - 1;
          }
        }
  finally {
          releasePage(atomicOperation,cacheEntry);
        }
      }
  finally {
        lock.unlock();
      }
    }
 catch (    IOException e) {
      throw OException.wrapException(new OSBTreeBonsaiLocalException("Error during finding first key in sbtree [" + getName() + "]",this),e);
    }
 finally {
      atomicOperationsManager.releaseReadLock(this);
    }
  }
  finally {
    if (statistic != null)     statistic.stopRidBagEntryReadTimer(1);
    completeOperation();
  }
}
