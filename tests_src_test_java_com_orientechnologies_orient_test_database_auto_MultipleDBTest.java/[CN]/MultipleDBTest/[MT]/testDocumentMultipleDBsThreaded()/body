{
  final int operations_write=1000;
  final int operations_read=1;
  final int dbs=10;
  final Set<String> times=Collections.newSetFromMap(new ConcurrentHashMap<String,Boolean>());
  Set<Future> results=new HashSet<Future>();
  ExecutorService executorService=Executors.newFixedThreadPool(4);
  for (int i=0; i < dbs; i++) {
    final String dbUrl=url + i;
    Callable<Void> t=new Callable<Void>(){
      @Override public Void call() throws InterruptedException, IOException {
        ODatabaseDocumentTx tx=new ODatabaseDocumentTx(dbUrl);
        ODatabaseHelper.deleteDatabase(tx,getStorageType());
        ODatabaseHelper.createDatabase(tx,dbUrl,getStorageType());
        try {
          if (tx.isClosed()) {
            tx.open("admin","admin");
          }
          long start=System.currentTimeMillis();
          for (int j=0; j < operations_write; j++) {
            ODocument dummy=new ODocument("DummyObject");
            dummy.field("name","name" + j);
            Assert.assertEquals(ODatabaseRecordThreadLocal.INSTANCE.get().getURL(),dbUrl);
            dummy=tx.save(dummy);
            Assert.assertEquals(dummy.getIdentity().getClusterPosition(),j,"RID was " + dummy.getIdentity());
          }
          long end=System.currentTimeMillis();
          String time="(" + getDbId(tx) + ") "+ "Executed operations (WRITE) in: "+ (end - start)+ " ms";
          times.add(time);
          start=System.currentTimeMillis();
          for (int j=0; j < operations_read; j++) {
            List<DummyObject> l=tx.query(new OSQLSynchQuery<DummyObject>(" select * from DummyObject "));
            Assert.assertEquals(l.size(),operations_write);
          }
          end=System.currentTimeMillis();
          time="(" + getDbId(tx) + ") "+ "Executed operations (READ) in: "+ (end - start)+ " ms";
          times.add(time);
        }
  finally {
          tx.close();
          ODatabaseHelper.deleteDatabase(tx,getStorageType());
        }
        return null;
      }
    }
;
    results.add(executorService.submit(t));
  }
  for (  Future future : results)   future.get();
}
