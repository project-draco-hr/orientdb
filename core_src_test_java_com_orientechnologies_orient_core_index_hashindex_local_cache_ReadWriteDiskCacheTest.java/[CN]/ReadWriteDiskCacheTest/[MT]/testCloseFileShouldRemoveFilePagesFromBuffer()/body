{
  long fileId=buffer.openFile(fileName);
  OCacheEntry[] entries=new OCacheEntry[4];
  for (int i=0; i < 4; i++) {
    entries[i]=buffer.load(fileId,i,false);
    entries[i].getCachePointer().acquireExclusiveLock();
    entries[i].markDirty();
    entries[i].getCachePointer().getDataPointer().set(systemOffset + OWOWCache.PAGE_PADDING,new byte[]{(byte)i,1,2,seed,4,5,6,(byte)i},0,8);
    entries[i].getCachePointer().releaseExclusiveLock();
    buffer.release(entries[i]);
  }
  LRUList am=buffer.getAm();
  LRUList a1in=buffer.getA1in();
  LRUList a1out=buffer.getA1out();
  Assert.assertEquals(am.size(),0);
  Assert.assertEquals(a1out.size(),0);
  for (int i=0; i < 4; i++) {
    OCacheEntry entry=generateEntry(fileId,i,entries[i].getCachePointer().getDataPointer(),false,new OLogSequenceNumber(0,0));
    Assert.assertEquals(a1in.get(entry.fileId,entry.pageIndex),entry);
  }
  Assert.assertEquals(buffer.getFilledUpTo(fileId),4);
  buffer.closeFile(fileId);
  Assert.assertEquals(buffer.getA1out().size(),0);
  Assert.assertEquals(buffer.getA1in().size(),0);
  Assert.assertEquals(buffer.getAm().size(),0);
}
