{
  if (attribute == null)   throw new IllegalArgumentException("attribute is null");
  final String stringValue=iValue != null ? iValue.toString() : null;
  final boolean isNull=stringValue == null || stringValue.equalsIgnoreCase("NULL");
switch (attribute) {
case NAME:
    setName(stringValue);
  break;
case SHORTNAME:
setShortName(stringValue);
break;
case SUPERCLASS:
if (stringValue == null) throw new IllegalArgumentException("Superclass is null");
if (stringValue.startsWith("+")) {
addSuperClass(getDatabase().getMetadata().getSchema().getClass(stringValue.substring(1)));
}
 else if (stringValue.startsWith("-")) {
removeSuperClass(getDatabase().getMetadata().getSchema().getClass(stringValue.substring(1)));
}
 else {
setSuperClass(getDatabase().getMetadata().getSchema().getClass(stringValue));
}
break;
case SUPERCLASSES:
setSuperClassesByNames(stringValue != null ? Arrays.asList(stringValue.split(",\\s*")) : null);
break;
case OVERSIZE:
setOverSize(Float.parseFloat(stringValue));
break;
case STRICTMODE:
setStrictMode(Boolean.parseBoolean(stringValue));
break;
case ABSTRACT:
setAbstract(Boolean.parseBoolean(stringValue));
break;
case ADDCLUSTER:
{
addCluster(stringValue);
break;
}
case REMOVECLUSTER:
int clId=owner.getClusterId(stringValue);
if (clId == NOT_EXISTENT_CLUSTER_ID) throw new IllegalArgumentException("Cluster id '" + stringValue + "' cannot be removed");
removeClusterId(clId);
break;
case CLUSTERSELECTION:
setClusterSelection(stringValue);
break;
case CUSTOM:
int indx=stringValue != null ? stringValue.indexOf('=') : -1;
if (indx < 0) {
if (isNull || "clear".equalsIgnoreCase(stringValue)) {
clearCustom();
}
 else throw new IllegalArgumentException("Syntax error: expected <name> = <value> or clear, instead found: " + iValue);
}
 else {
String customName=stringValue.substring(0,indx).trim();
String customValue=stringValue.substring(indx + 1).trim();
if (customValue.isEmpty()) removeCustom(customName);
 else setCustom(customName,customValue);
}
break;
case DESCRIPTION:
setDescription(stringValue);
break;
case ENCRYPTION:
setEncryption(stringValue);
break;
}
return this;
}
