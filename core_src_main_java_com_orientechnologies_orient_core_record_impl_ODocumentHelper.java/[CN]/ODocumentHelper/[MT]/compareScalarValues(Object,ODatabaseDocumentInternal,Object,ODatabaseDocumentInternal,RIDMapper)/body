{
  if (myValue == null && otherValue != null || myValue != null && otherValue == null)   return false;
  if (myValue == null)   return true;
  if (myValue.getClass().isArray() && !otherValue.getClass().isArray() || !myValue.getClass().isArray() && otherValue.getClass().isArray())   return false;
  if (myValue.getClass().isArray() && otherValue.getClass().isArray()) {
    final int myArraySize=Array.getLength(myValue);
    final int otherArraySize=Array.getLength(otherValue);
    if (myArraySize != otherArraySize)     return false;
    for (int i=0; i < myArraySize; i++) {
      final Object first=Array.get(myValue,i);
      final Object second=Array.get(otherValue,i);
      if (first == null && second != null)       return false;
      if (first instanceof ODocument && second instanceof ODocument)       return hasSameContentOf((ODocument)first,iMyDb,(ODocument)second,iOtherDb,ridMapper);
      if (first != null && !first.equals(second))       return false;
    }
    return true;
  }
  if (myValue instanceof Number && otherValue instanceof Number) {
    final Number myNumberValue=(Number)myValue;
    final Number otherNumberValue=(Number)otherValue;
    if (isInteger(myNumberValue) && isInteger(otherNumberValue))     return myNumberValue.longValue() == otherNumberValue.longValue();
 else     if (isFloat(myNumberValue) && isFloat(otherNumberValue))     return myNumberValue.doubleValue() == otherNumberValue.doubleValue();
  }
  if (ridMapper != null && myValue instanceof ORID && otherValue instanceof ORID && ((ORID)myValue).isPersistent()) {
    ORID convertedValue=ridMapper.map((ORID)myValue);
    if (convertedValue != null)     myValue=convertedValue;
  }
  return myValue.equals(otherValue);
}
