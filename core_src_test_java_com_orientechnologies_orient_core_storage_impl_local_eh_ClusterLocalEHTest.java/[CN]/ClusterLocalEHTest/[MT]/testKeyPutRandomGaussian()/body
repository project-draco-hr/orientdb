{
  List<ONodeId> keys=new ArrayList<ONodeId>();
  MersenneTwisterFast random=new MersenneTwisterFast();
  keys.clear();
  while (keys.size() < KEYS_COUNT) {
    long key=(long)(random.nextGaussian() * Long.MAX_VALUE / 2 + Long.MAX_VALUE);
    if (key < 0)     continue;
    final ONodeId nodeId=ONodeId.valueOf(key).shiftLeft(128);
    final OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionNodeId(nodeId));
    if (extendibleHashingCluster.addPhysicalPosition(position)) {
      keys.add(nodeId);
      Assert.assertNotNull(extendibleHashingCluster.getPhysicalPosition(position),"key " + key);
    }
  }
  for (  ONodeId key : keys) {
    final OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionNodeId(key));
    Assert.assertNotNull(extendibleHashingCluster.getPhysicalPosition(position),"" + key);
  }
}
