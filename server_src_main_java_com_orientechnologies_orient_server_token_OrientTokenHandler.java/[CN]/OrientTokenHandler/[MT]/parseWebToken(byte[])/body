{
  JsonWebToken token=null;
  int firstDot=-1, secondDot=-1;
  for (int x=0; x < tokenBytes.length; x++) {
    if (tokenBytes[x] == JWT_DELIMITER) {
      if (firstDot == -1)       firstDot=x;
 else {
        secondDot=x;
        break;
      }
    }
  }
  if (firstDot == -1)   throw new RuntimeException("Token data too short: missed header");
  if (secondDot == -1)   throw new RuntimeException("Token data too short: missed signature");
  final byte[] decodedHeader=OBase64Utils.decode(tokenBytes,0,firstDot,OBase64Utils.URL_SAFE);
  final byte[] decodedPayload=OBase64Utils.decode(tokenBytes,firstDot + 1,secondDot - (firstDot + 1),OBase64Utils.URL_SAFE);
  final byte[] decodedSignature=OBase64Utils.decode(tokenBytes,secondDot + 1,tokenBytes.length - (secondDot + 1),OBase64Utils.URL_SAFE);
  final OrientJwtHeader header=deserializeWebHeader(decodedHeader);
  final OJwtPayload deserializeWebPayload=deserializeWebPayload(header.getType(),decodedPayload);
  token=new JsonWebToken(header,deserializeWebPayload);
  token.setIsVerified(verifyTokenSignature(header,tokenBytes,0,secondDot,decodedSignature));
  return token;
}
