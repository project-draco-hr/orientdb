{
  if (closed)   throw new IOException("Stream is closed");
  if (eof && nextout < 0)   return -1;
  if (off < 0 || len < 0 || len > b.length - off)   throw new IndexOutOfBoundsException();
  int oldOff=off;
  if (nextout >= 0) {
    do {
      if (len == 0)       return off - oldOff;
      b[off++]=(byte)(bits >> nextout);
      len--;
      nextout-=8;
    }
 while (nextout >= 0);
    bits=0;
  }
  while (len > 0) {
    int v=is.read();
    if (v == -1) {
      eof=true;
      if (nextin != 18) {
        if (nextin == 12)         throw new IOException("Base64 stream has one un-decoded dangling byte.");
        b[off++]=(byte)(bits >> (16));
        len--;
        if (nextin == 0) {
          if (len == 0) {
            bits>>=8;
            nextout=0;
          }
 else {
            b[off++]=(byte)(bits >> 8);
          }
        }
      }
      if (off == oldOff)       return -1;
 else       return off - oldOff;
    }
    if (v == '=') {
      if (nextin == 18 || nextin == 12 || nextin == 6 && is.read() != '=') {
        throw new IOException("Illegal base64 ending sequence:" + nextin);
      }
      b[off++]=(byte)(bits >> (16));
      len--;
      if (nextin == 0) {
        if (len == 0) {
          bits>>=8;
          nextout=0;
        }
 else {
          b[off++]=(byte)(bits >> 8);
        }
      }
      eof=true;
      break;
    }
    if ((v=base64[v]) == -1) {
      if (isMIME)       continue;
 else       throw new IOException("Illegal base64 character " + Integer.toString(v,16));
    }
    bits|=(v << nextin);
    if (nextin == 0) {
      nextin=18;
      nextout=16;
      while (nextout >= 0) {
        b[off++]=(byte)(bits >> nextout);
        len--;
        nextout-=8;
        if (len == 0 && nextout >= 0) {
          return off - oldOff;
        }
      }
      bits=0;
    }
 else {
      nextin-=6;
    }
  }
  return off - oldOff;
}
