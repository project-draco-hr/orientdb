{
  if (iConfig == null)   return;
  final Set<String> pushed=new HashSet<String>();
  for (  OClientConnection c : connections.values()) {
    if (!c.getData().supportsPushMessages)     continue;
    try {
      final String remoteAddress=c.getRemoteAddress();
      if (pushed.contains(remoteAddress))       continue;
    }
 catch (    Exception e) {
      continue;
    }
    if (!(c.getProtocol() instanceof ONetworkProtocolBinary) || c.getData().serializationImpl == null)     continue;
    final ONetworkProtocolBinary p=(ONetworkProtocolBinary)c.getProtocol();
    final OChannelBinary channel=(OChannelBinary)p.getChannel();
    final ORecordSerializer ser=ORecordSerializerFactory.instance().getFormat(c.getData().serializationImpl);
    if (ser == null)     return;
    final byte[] content=ser.toStream(iConfig,false);
    try {
      channel.acquireWriteLock();
      try {
        channel.writeByte(OChannelBinaryProtocol.PUSH_DATA);
        channel.writeInt(Integer.MIN_VALUE);
        channel.writeByte(OChannelBinaryProtocol.REQUEST_PUSH_DISTRIB_CONFIG);
        channel.writeBytes(content);
        channel.flush();
        pushed.add(c.getRemoteAddress());
        OLogManager.instance().info(this,"Sent updated cluster configuration to the remote client %s",c.getRemoteAddress());
      }
  finally {
        channel.releaseWriteLock();
      }
    }
 catch (    IOException e) {
      disconnect(c);
    }
catch (    Exception e) {
      OLogManager.instance().warn(this,"Cannot push cluster configuration to the client %s",e,c.getRemoteAddress());
      disconnect(c);
    }
  }
}
