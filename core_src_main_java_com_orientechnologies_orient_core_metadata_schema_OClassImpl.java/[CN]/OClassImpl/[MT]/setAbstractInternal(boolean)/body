{
  getDatabase().checkSecurity(ODatabaseSecurityResources.SCHEMA,ORole.PERMISSION_UPDATE);
  acquireSchemaWriteLock();
  try {
    if (isAbstract) {
      if (defaultClusterId != NOT_EXISTENT_CLUSTER_ID) {
        if (count() > 0)         throw new IllegalStateException("Cannot set the class as abstract because contains records.");
        tryDropCluster(defaultClusterId);
        for (        int clusterId : getClusterIds()) {
          tryDropCluster(clusterId);
          removePolymorphicClusterId(clusterId);
          owner.removeClusterForClass(clusterId,this);
        }
        setClusterIds(new int[]{NOT_EXISTENT_CLUSTER_ID});
        defaultClusterId=NOT_EXISTENT_CLUSTER_ID;
      }
    }
 else {
      if (!abstractClass)       return;
      int clusterId=getDatabase().getClusterIdByName(name);
      if (clusterId == -1)       clusterId=getDatabase().addCluster(name);
      this.defaultClusterId=clusterId;
      this.clusterIds[0]=this.defaultClusterId;
    }
    this.abstractClass=isAbstract;
  }
  finally {
    releaseSchemaWriteLock();
  }
}
