{
  activateOnCurrentThread();
  try {
    if (status == STATUS.OPEN)     throw new IllegalStateException("Database " + getName() + " is already open");
    if (storage == null)     storage=Orient.instance().loadStorage(url);
    if (iInitialSettings != null) {
      final OContextConfiguration ctxCfg=storage.getConfiguration().getContextConfiguration();
      for (      Map.Entry<OGlobalConfiguration,Object> e : iInitialSettings.entrySet()) {
        ctxCfg.setValue(e.getKey(),e.getValue());
      }
    }
    storage.create(properties);
    status=STATUS.OPEN;
    componentsFactory=getStorage().getComponentsFactory();
    sbTreeCollectionManager=getStorage().getSBtreeCollectionManager();
    localCache.startup();
    getStorage().getConfiguration().setRecordSerializer(getSerializer().toString());
    getStorage().getConfiguration().setRecordSerializerVersion(getSerializer().getCurrentVersion());
    getStorage().getConfiguration().setProperty(OStatement.CUSTOM_STRICT_SQL,"true");
    getStorage().getConfiguration().update();
    if (!(getStorage() instanceof OStorageProxy))     installHooks();
    metadata=new OMetadataDefault(this);
    metadata.create();
    if (!(getStorage() instanceof OStorageProxy))     registerHook(new OCommandCacheHook(this),ORecordHook.HOOK_POSITION.REGULAR);
    registerHook(new OSecurityTrackerHook(metadata.getSecurity(),this),ORecordHook.HOOK_POSITION.LAST);
    final OUser usr=getMetadata().getSecurity().getUser(OUser.ADMIN);
    if (usr == null)     user=null;
 else     user=new OImmutableUser(getMetadata().getSecurity().getVersion(),usr);
    if (!metadata.getSchema().existsClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME))     metadata.getSchema().createClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME);
    if (OGlobalConfiguration.DB_MAKE_FULL_CHECKPOINT_ON_SCHEMA_CHANGE.getValueAsBoolean())     metadata.getSchema().setFullCheckpointOnChange(true);
    if (OGlobalConfiguration.DB_MAKE_FULL_CHECKPOINT_ON_INDEX_CHANGE.getValueAsBoolean())     metadata.getIndexManager().setFullCheckpointOnChange(true);
    getStorage().synch();
    for (Iterator<ODatabaseLifecycleListener> it=Orient.instance().getDbLifecycleListeners(); it.hasNext(); )     it.next().onCreate(getDatabaseOwner());
    for (    ODatabaseListener listener : browseListeners())     try {
      listener.onCreate(this);
    }
 catch (    Throwable ignore) {
    }
  }
 catch (  Exception e) {
    throw new ODatabaseException("Cannot create database '" + getName() + "'",e);
  }
  return (DB)this;
}
