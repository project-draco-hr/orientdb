{
  size--;
  if (listener != null)   listener.signalTreeChanged(this);
  if (pageIndex > -1) {
    p.remove();
    if (p.getSize() > 0)     return;
  }
  modCount++;
  if (p.getLeft() != null && p.getRight() != null) {
    OMVRBTreeEntry<K,V> s=next(p);
    p.copyFrom(s);
    p=s;
  }
  final OMVRBTreeEntry<K,V> replacement=(p.getLeft() != null ? p.getLeft() : p.getRight());
  if (replacement != null) {
    replacement.setParent(p.getParent());
    if (p.getParent() == null)     setRoot(replacement);
 else     if (p == p.getParent().getLeft())     p.getParent().setLeft(replacement);
 else     p.getParent().setRight(replacement);
    p.setLeft(p.setRight(p.setParent(null)));
    if (p.getColor() == BLACK)     fixAfterDeletion(replacement);
  }
 else   if (p.getParent() == null) {
    clear();
  }
 else {
    if (p.getColor() == BLACK)     fixAfterDeletion(p);
    if (p.getParent() != null) {
      if (p == p.getParent().getLeft())       p.getParent().setLeft(null);
 else       if (p == p.getParent().getRight())       p.getParent().setRight(null);
      p.setParent(null);
    }
  }
}
