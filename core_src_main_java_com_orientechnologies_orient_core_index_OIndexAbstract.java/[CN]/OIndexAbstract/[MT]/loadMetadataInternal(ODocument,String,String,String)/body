{
  String indexName=config.field(OIndexInternal.CONFIG_NAME);
  final ODocument indexDefinitionDoc=config.field(OIndexInternal.INDEX_DEFINITION);
  OIndexDefinition loadedIndexDefinition=null;
  if (indexDefinitionDoc != null) {
    try {
      final String indexDefClassName=config.field(OIndexInternal.INDEX_DEFINITION_CLASS);
      final Class<?> indexDefClass=Class.forName(indexDefClassName);
      loadedIndexDefinition=(OIndexDefinition)indexDefClass.getDeclaredConstructor().newInstance();
      loadedIndexDefinition.fromStream(indexDefinitionDoc);
    }
 catch (    final ClassNotFoundException e) {
      throw new OIndexException("Error during deserialization of index definition",e);
    }
catch (    final NoSuchMethodException e) {
      throw new OIndexException("Error during deserialization of index definition",e);
    }
catch (    final InvocationTargetException e) {
      throw new OIndexException("Error during deserialization of index definition",e);
    }
catch (    final InstantiationException e) {
      throw new OIndexException("Error during deserialization of index definition",e);
    }
catch (    final IllegalAccessException e) {
      throw new OIndexException("Error during deserialization of index definition",e);
    }
  }
 else {
    final Boolean isAutomatic=config.field(OIndexInternal.CONFIG_AUTOMATIC);
    OIndexFactory factory=OIndexes.getFactory(type,algorithm);
    if (Boolean.TRUE.equals(isAutomatic)) {
      final int pos=indexName.lastIndexOf('.');
      if (pos < 0)       throw new OIndexException("Can not convert from old index model to new one. " + "Invalid index name. Dot (.) separator should be present.");
      final String className=indexName.substring(0,pos);
      final String propertyName=indexName.substring(pos + 1);
      final String keyTypeStr=config.field(OIndexInternal.CONFIG_KEYTYPE);
      if (keyTypeStr == null)       throw new OIndexException("Can not convert from old index model to new one. " + "Index key type is absent.");
      final OType keyType=OType.valueOf(keyTypeStr.toUpperCase(Locale.ENGLISH));
      loadedIndexDefinition=new OPropertyIndexDefinition(className,propertyName,keyType);
      config.removeField(OIndexInternal.CONFIG_AUTOMATIC);
      config.removeField(OIndexInternal.CONFIG_KEYTYPE);
    }
 else     if (config.field(OIndexInternal.CONFIG_KEYTYPE) != null) {
      final String keyTypeStr=config.field(OIndexInternal.CONFIG_KEYTYPE);
      final OType keyType=OType.valueOf(keyTypeStr.toUpperCase(Locale.ENGLISH));
      loadedIndexDefinition=new OSimpleKeyIndexDefinition(factory.getLastVersion(),keyType);
      config.removeField(OIndexInternal.CONFIG_KEYTYPE);
    }
  }
  final Set<String> clusters=new HashSet<String>((Collection<String>)config.field(CONFIG_CLUSTERS,OType.EMBEDDEDSET));
  return new IndexMetadata(indexName,loadedIndexDefinition,clusters,type,algorithm,valueContainerAlgorithm);
}
