{
  if (rids != null && rids.size() > 0) {
    if (rids.size() == 1) {
      return rids.get(0).toString();
    }
 else {
      StringBuilder builder=new StringBuilder();
      builder.append("[");
      boolean first=true;
      for (      ORid rid : rids) {
        if (!first) {
          builder.append(", ");
        }
        builder.append(rid.toString());
        first=false;
      }
      builder.append("]");
      return builder.toString();
    }
  }
 else   if (cluster != null) {
    return cluster.toString();
  }
 else   if (clusterList != null) {
    return clusterList.toString();
  }
 else   if (metadata != null) {
    return metadata.toString();
  }
 else   if (statement != null) {
    return "(" + statement.toString() + ")";
  }
 else   if (index != null) {
    return index.toString();
  }
 else   if (inputParam != null) {
    if (inputFinalValue == UNSET) {
      return inputParam.toString();
    }
 else     if (inputFinalValue == null) {
      return "NULL";
    }
 else {
      if (inputFinalValue instanceof String) {
        inputFinalValue=OPatternConst.PATTERN_SINGLE_SPACE.matcher(((String)inputFinalValue)).replaceAll("");
      }
      return inputFinalValue.toString();
    }
  }
 else   if (identifier != null) {
    StringBuilder result=new StringBuilder();
    result.append(identifier.toString());
    if (modifier != null) {
      result.append(modifier.toString());
    }
    return result.toString();
  }
  return super.toString();
}
