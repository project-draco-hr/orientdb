{
  int openPos=iText.indexOf(MAP_BEGIN);
  if (openPos == -1)   return Collections.emptyMap();
  int closePos=iText.indexOf(MAP_END,openPos + 1);
  if (closePos == -1)   return Collections.emptyMap();
  final List<String> entries=smartSplit(iText.substring(openPos + 1,closePos),COLLECTION_SEPARATOR);
  if (entries.size() == 0)   return Collections.emptyMap();
  Map<String,String> map=new HashMap<String,String>();
  List<String> entry;
  for (  String item : entries) {
    if (item != null && !item.isEmpty()) {
      entry=OStringSerializerHelper.split(item,OStringSerializerHelper.ENTRY_SEPARATOR);
      final String key=entry.get(0).trim();
      final String value=entry.get(1).trim();
      map.put((String)fieldTypeFromStream(null,OType.STRING,key),value);
    }
  }
  return map;
}
