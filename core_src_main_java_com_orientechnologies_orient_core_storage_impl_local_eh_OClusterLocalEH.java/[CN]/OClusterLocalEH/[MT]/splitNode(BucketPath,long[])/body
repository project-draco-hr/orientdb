{
  final long[] newNode=new long[maxLevelSize];
  final int hashMapSize=1 << (bucketPath.nodeLocalDepth + 1);
  boolean hashMapItemsAreEqual=true;
  boolean allLeftItemsAreEqual;
  boolean allRightItemsAreEqual;
  int mapCounter=0;
  long firstPosition=-1;
  for (int i=maxLevelSize / 2; i < maxLevelSize; i++) {
    final long position=node[i];
    if (hashMapItemsAreEqual && mapCounter == 0)     firstPosition=position;
    newNode[2 * (i - maxLevelSize / 2)]=position;
    newNode[2 * (i - maxLevelSize / 2) + 1]=position;
    if (hashMapItemsAreEqual) {
      hashMapItemsAreEqual=firstPosition == position;
      mapCounter+=2;
      if (mapCounter >= hashMapSize)       mapCounter=0;
    }
  }
  mapCounter=0;
  allRightItemsAreEqual=hashMapItemsAreEqual;
  hashMapItemsAreEqual=true;
  final long[] updatedNode=new long[node.length];
  for (int i=0; i < maxLevelSize / 2; i++) {
    final long position=node[i];
    if (hashMapItemsAreEqual && mapCounter == 0)     firstPosition=position;
    updatedNode[2 * i]=position;
    updatedNode[2 * i + 1]=position;
    if (hashMapItemsAreEqual) {
      hashMapItemsAreEqual=firstPosition == position;
      mapCounter+=2;
      if (mapCounter >= hashMapSize)       mapCounter=0;
    }
  }
  allLeftItemsAreEqual=hashMapItemsAreEqual;
  nodesMetadata[bucketPath.nodeIndex].incrementLocalNodeDepth();
  hashTree[bucketPath.nodeIndex]=updatedNode;
  return new NodeSplitResult(newNode,allLeftItemsAreEqual,allRightItemsAreEqual);
}
