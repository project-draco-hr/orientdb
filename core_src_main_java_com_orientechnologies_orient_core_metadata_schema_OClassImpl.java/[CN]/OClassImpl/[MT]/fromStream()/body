{
  subclasses=null;
  superClasses.clear();
  name=document.field("name");
  if (document.containsField("shortName"))   shortName=document.field("shortName");
 else   shortName=null;
  if (document.containsField("description"))   description=document.field("description");
 else   description=null;
  defaultClusterId=document.field("defaultClusterId");
  if (document.containsField("strictMode"))   strictMode=document.field("strictMode");
 else   strictMode=false;
  if (document.containsField("abstract"))   abstractClass=document.field("abstract");
 else   abstractClass=false;
  if (document.field("overSize") != null)   overSize=document.field("overSize");
 else   overSize=0f;
  final Object cc=document.field("clusterIds");
  if (cc instanceof Collection<?>) {
    final Collection<Integer> coll=document.field("clusterIds");
    clusterIds=new int[coll.size()];
    int i=0;
    for (    final Integer item : coll)     clusterIds[i++]=item;
  }
 else   clusterIds=(int[])cc;
  Arrays.sort(clusterIds);
  if (clusterIds.length == 1 && clusterIds[0] == -1)   setPolymorphicClusterIds(OCommonConst.EMPTY_INT_ARRAY);
 else   setPolymorphicClusterIds(clusterIds);
  OPropertyImpl prop;
  final Map<String,OProperty> newProperties=new HashMap<String,OProperty>();
  final Collection<ODocument> storedProperties=document.field("properties");
  if (storedProperties != null)   for (  OIdentifiable id : storedProperties) {
    ODocument p=id.getRecord();
    prop=new OPropertyImpl(this,p);
    prop.fromStream();
    if (properties.containsKey(prop.getName())) {
      prop=(OPropertyImpl)properties.get(prop.getName().toLowerCase());
      prop.fromStream(p);
    }
    newProperties.put(prop.getName().toLowerCase(),prop);
  }
  properties.clear();
  properties.putAll(newProperties);
  customFields=document.field("customFields",OType.EMBEDDEDMAP);
  clusterSelection=owner.getClusterSelectionFactory().getStrategy((String)document.field("clusterSelection"));
}
