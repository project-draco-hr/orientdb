{
  final Integer identityRecord=System.identityHashCode(record);
  final Set<Integer> marshalledRecords=OSerializationThreadLocal.INSTANCE.get();
  if (marshalledRecords.contains(identityRecord)) {
    return new byte[]{};
  }
 else   marshalledRecords.add(identityRecord);
  if (parent != null && parentRid.isNew()) {
    parent.record.setDirty();
    parent.save();
    parentRid=parent.record.getIdentity();
    record.setDirty();
  }
  if (left != null && leftRid.isNew()) {
    left.record.setDirty();
    left.save();
    leftRid=left.record.getIdentity();
    record.setDirty();
  }
  if (right != null && rightRid.isNew()) {
    right.record.setDirty();
    right.save();
    rightRid=right.record.getIdentity();
    record.setDirty();
  }
  final long timer=OProfiler.getInstance().startChrono();
  OMemoryOutputStream stream=new OMemoryOutputStream();
  try {
    stream.add(pageSize);
    stream.addAsFixed(parentRid.toStream());
    stream.addAsFixed(leftRid.toStream());
    stream.addAsFixed(rightRid.toStream());
    stream.add(color);
    stream.add(size);
    serializeNewKeys();
    serializeNewValues();
    for (int i=0; i < size; ++i)     stream.add(serializedKeys[i]);
    for (int i=0; i < size; ++i)     stream.add(serializedValues[i]);
    stream.flush();
    final byte[] buffer=stream.getByteArray();
    record.fromStream(buffer);
    return buffer;
  }
 catch (  IOException e) {
    throw new OSerializationException("Can't marshall RB+Tree node",e);
  }
 finally {
    stream.close();
    marshalledRecords.remove(identityRecord);
    checkEntryStructure();
    OProfiler.getInstance().stopChrono("OMVRBTreeEntryP.toStream",timer);
  }
}
