{
  OSchema schema1=databaseDocumentTxOne.getMetadata().getImmutableSchemaSnapshot();
  OSchema schema2=databaseDocumentTxTwo.getMetadata().getImmutableSchemaSnapshot();
  boolean ok=true;
  for (  OClass clazz : schema1.getClasses()) {
    OClass clazz2=schema2.getClass(clazz.getName());
    if (clazz2 == null) {
      listener.onMessage("\n- ERR: Class definition " + clazz.getName() + " for DB2 is null.");
      continue;
    }
    final List<String> sc1=clazz.getSuperClassesNames();
    final List<String> sc2=clazz2.getSuperClassesNames();
    if (!sc1.isEmpty() || !sc2.isEmpty()) {
      if (!sc1.containsAll(sc2) || !sc2.containsAll(sc1)) {
        listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " in DB1 is not equals in superclasses in DB2.");
        ok=false;
      }
    }
    if (!clazz.getClassIndexes().equals(clazz2.getClassIndexes())) {
      listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " in DB1 is not equals in indexes in DB2.");
      ok=false;
    }
    if (!Arrays.equals(clazz.getClusterIds(),clazz2.getClusterIds())) {
      listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " in DB1 is not equals in clusters in DB2.");
      ok=false;
    }
    if (!clazz.getCustomKeys().equals(clazz2.getCustomKeys())) {
      listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " in DB1 is not equals in custom keys in DB2.");
      ok=false;
    }
    if (clazz.getOverSize() != clazz2.getOverSize()) {
      listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " in DB1 is not equals in overSize in DB2.");
      ok=false;
    }
    if (clazz.getDefaultClusterId() != clazz2.getDefaultClusterId()) {
      listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " in DB1 is not equals in default cluser id in DB2.");
      ok=false;
    }
    for (    OProperty prop : clazz.declaredProperties()) {
      OProperty prop2=clazz2.getProperty(prop.getName());
      if (prop2 == null) {
        listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " as missed property "+ prop.getName()+ "in DB2.");
        ok=false;
        continue;
      }
      if (prop.getType() != prop2.getType()) {
        listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " as not same type for property "+ prop.getName()+ "in DB2. ");
        ok=false;
      }
      if (prop.getLinkedType() != prop2.getLinkedType()) {
        listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " as not same linkedtype for property "+ prop.getName()+ "in DB2.");
        ok=false;
      }
      if (prop.getMin() != null) {
        if (!prop.getMin().equals(prop2.getMin())) {
          listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " as not same min for property "+ prop.getName()+ "in DB2.");
          ok=false;
        }
      }
      if (prop.getMax() != null) {
        if (!prop.getMax().equals(prop2.getMax())) {
          listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " as not same max for property "+ prop.getName()+ "in DB2.");
          ok=false;
        }
      }
      if (prop.getMax() != null) {
        if (!prop.getMax().equals(prop2.getMax())) {
          listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " as not same regexp for property "+ prop.getName()+ "in DB2.");
          ok=false;
        }
      }
      if (prop.getLinkedClass() != null) {
        if (!prop.getLinkedClass().equals(prop2.getLinkedClass())) {
          listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " as not same linked class for property "+ prop.getName()+ "in DB2.");
          ok=false;
        }
      }
      if (prop.getLinkedClass() != null) {
        if (!prop.getCustomKeys().equals(prop2.getCustomKeys())) {
          listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " as not same custom keys for property "+ prop.getName()+ "in DB2.");
          ok=false;
        }
      }
      if (prop.isMandatory() != prop2.isMandatory()) {
        listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " as not same mandatory flag for property "+ prop.getName()+ "in DB2.");
        ok=false;
      }
      if (prop.isNotNull() != prop2.isNotNull()) {
        listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " as not same nut null flag for property "+ prop.getName()+ "in DB2.");
        ok=false;
      }
      if (prop.isReadonly() != prop2.isReadonly()) {
        listener.onMessage("\n- ERR: Class definition for " + clazz.getName() + " as not same readonly flag setting for property "+ prop.getName()+ "in DB2.");
        ok=false;
      }
    }
    if (!ok) {
      ++differences;
      ok=true;
    }
  }
}
