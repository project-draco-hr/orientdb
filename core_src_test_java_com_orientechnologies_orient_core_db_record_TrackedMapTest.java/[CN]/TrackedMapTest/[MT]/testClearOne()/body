{
  final ODocument doc=new ODocument();
  final OTrackedMap<String> trackedMap=new OTrackedMap<String>(doc);
  trackedMap.put("key1","value1");
  trackedMap.put("key2","value2");
  trackedMap.put("key3","value3");
  ORecordInternal.unsetDirty(doc);
  Assert.assertFalse(doc.isDirty());
  final Set<OMultiValueChangeEvent<Object,String>> firedEvents=new HashSet<OMultiValueChangeEvent<Object,String>>();
  firedEvents.add(new OMultiValueChangeEvent<Object,String>(OMultiValueChangeEvent.OChangeType.REMOVE,"key1",null,"value1"));
  firedEvents.add(new OMultiValueChangeEvent<Object,String>(OMultiValueChangeEvent.OChangeType.REMOVE,"key2",null,"value2"));
  firedEvents.add(new OMultiValueChangeEvent<Object,String>(OMultiValueChangeEvent.OChangeType.REMOVE,"key3",null,"value3"));
  final ORef<Boolean> changed=new ORef<Boolean>(false);
  trackedMap.addChangeListener(new OMultiValueChangeListener<Object,String>(){
    public void onAfterRecordChanged(    final OMultiValueChangeEvent<Object,String> event){
      if (!firedEvents.remove(event))       Assert.fail();
      changed.value=true;
    }
  }
);
  trackedMap.clear();
  Assert.assertEquals(firedEvents.size(),0);
  Assert.assertTrue(changed.value);
  Assert.assertTrue(doc.isDirty());
}
