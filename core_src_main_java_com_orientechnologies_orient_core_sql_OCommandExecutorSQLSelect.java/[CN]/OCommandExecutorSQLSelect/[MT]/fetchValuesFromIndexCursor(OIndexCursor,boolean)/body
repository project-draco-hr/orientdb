{
  int needsToFetch;
  if (fetchLimit > 0)   needsToFetch=fetchLimit + skip;
 else   needsToFetch=-1;
  Entry<Object,OIdentifiable> entryRecord=cursor.next(needsToFetch);
  if (needsToFetch > 0)   needsToFetch--;
  cursorLoop:   while (entryRecord != null) {
    final OIdentifiable identifiable=entryRecord.getValue();
    final ORecord record=identifiable.getRecord();
    if (record instanceof ORecordSchemaAware<?>) {
      final ORecordSchemaAware<?> recordSchemaAware=(ORecordSchemaAware<?>)record;
      final Map<OClass,String> targetClasses=parsedTarget.getTargetClasses();
      if ((targetClasses != null) && (!targetClasses.isEmpty())) {
        for (        OClass targetClass : targetClasses.keySet()) {
          if (!targetClass.isSuperClassOf(recordSchemaAware.getSchemaClass()))           continue cursorLoop;
        }
      }
    }
    if (compiledFilter == null || !evaluateRecords || evaluateRecord(record)) {
      if (!handleResult(record))       break;
    }
    entryRecord=cursor.next(needsToFetch);
    if (needsToFetch > 0)     needsToFetch--;
  }
}
