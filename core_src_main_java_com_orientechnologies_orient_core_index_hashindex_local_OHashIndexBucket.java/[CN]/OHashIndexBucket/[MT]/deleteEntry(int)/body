{
  final Entry<K,V> removedEntry=getEntry(index);
  final int freePointer=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(bufferPointer,FREE_POINTER_OFFSET);
  final int positionOffset=POSITIONS_ARRAY_OFFSET + index * OIntegerSerializer.INT_SIZE;
  final int entryPosition=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(bufferPointer,positionOffset);
  final int keySize=keySerializer.getObjectSizeInDirectMemory(bufferPointer,entryPosition);
  final int ridSize=valueSerializer.getObjectSizeInDirectMemory(bufferPointer,entryPosition + keySize);
  final int entrySize=keySize + ridSize;
  bufferPointer.copyData(positionOffset + OIntegerSerializer.INT_SIZE,bufferPointer,positionOffset,size() * OIntegerSerializer.INT_SIZE - (index + 1) * OIntegerSerializer.INT_SIZE);
  if (entryPosition > freePointer)   bufferPointer.copyData(freePointer,bufferPointer,freePointer + entrySize,entryPosition - freePointer);
  int currentPositionOffset=POSITIONS_ARRAY_OFFSET;
  int size=size();
  for (int i=0; i < size - 1; i++) {
    int currentEntryPosition=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(bufferPointer,currentPositionOffset);
    if (currentEntryPosition < entryPosition)     OIntegerSerializer.INSTANCE.serializeInDirectMemory(currentEntryPosition + entrySize,bufferPointer,currentPositionOffset);
    currentPositionOffset+=OIntegerSerializer.INT_SIZE;
  }
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(freePointer + entrySize,bufferPointer,FREE_POINTER_OFFSET);
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(size - 1,bufferPointer,SIZE_OFFSET);
  return removedEntry;
}
