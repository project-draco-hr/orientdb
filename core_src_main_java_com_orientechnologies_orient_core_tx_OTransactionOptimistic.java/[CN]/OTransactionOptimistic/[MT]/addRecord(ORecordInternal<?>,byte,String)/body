{
  checkTransaction();
  invokeBeforeRecordListener(iStatus,iRecord);
  if ((status == OTransaction.TXSTATUS.COMMITTING) && database.getStorage() instanceof OStorageEmbedded) {
switch (iStatus) {
case ORecordOperation.CREATED:
case ORecordOperation.UPDATED:
      ORID prevRid=new ORecordId(iRecord.getIdentity());
    database.executeSaveRecord(iRecord,iClusterName,iRecord.getVersion(),iRecord.getRecordType(),OPERATION_MODE.SYNCHRONOUS);
  if (prevRid.isNew())   updateIndexIdentityAfterCommit(prevRid,iRecord.getIdentity());
break;
case ORecordOperation.DELETED:
database.executeDeleteRecord(iRecord,iRecord.getVersion(),false,OPERATION_MODE.SYNCHRONOUS);
break;
}
invokeAfterRecordListener(iStatus,iRecord);
}
 else {
final ORecordId rid=(ORecordId)iRecord.getIdentity();
if (!rid.isValid()) {
iRecord.onBeforeIdentityChanged(rid);
if (rid.clusterId == ORID.CLUSTER_ID_INVALID) rid.clusterId=iClusterName != null ? database.getClusterIdByName(iClusterName) : database.getDefaultClusterId();
rid.clusterPosition=newObjectCounter--;
iRecord.onAfterIdentityChanged(iRecord);
}
 else database.getLevel1Cache().freeRecord(rid);
ORecordOperation txEntry=getRecordEntry(rid);
if (txEntry == null) {
txEntry=new ORecordOperation(iRecord,iStatus);
recordEntries.put(rid,txEntry);
invokeAfterRecordListener(iStatus,iRecord);
}
 else {
txEntry.record=iRecord;
switch (txEntry.type) {
case ORecordOperation.LOADED:
switch (iStatus) {
case ORecordOperation.UPDATED:
txEntry.type=ORecordOperation.UPDATED;
invokeAfterRecordListener(iStatus,iRecord);
break;
case ORecordOperation.DELETED:
txEntry.type=ORecordOperation.DELETED;
invokeAfterRecordListener(iStatus,iRecord);
break;
}
break;
case ORecordOperation.UPDATED:
switch (iStatus) {
case ORecordOperation.DELETED:
txEntry.type=ORecordOperation.DELETED;
invokeAfterRecordListener(iStatus,iRecord);
break;
case ORecordOperation.UPDATED:
invokeAfterRecordListener(iStatus,iRecord);
break;
}
break;
case ORecordOperation.DELETED:
break;
case ORecordOperation.CREATED:
switch (iStatus) {
case ORecordOperation.DELETED:
recordEntries.remove(rid);
invokeAfterRecordListener(iStatus,iRecord);
break;
case ORecordOperation.UPDATED:
invokeAfterRecordListener(iStatus,iRecord);
break;
}
break;
}
}
}
}
