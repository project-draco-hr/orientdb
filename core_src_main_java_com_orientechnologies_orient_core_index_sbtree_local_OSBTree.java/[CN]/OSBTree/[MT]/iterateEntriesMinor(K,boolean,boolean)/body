{
  atomicOperationsManager.acquireReadLock(this);
  try {
    acquireSharedLock();
    try {
      OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
      if (!ascSortOrder)       return iterateEntriesMinorDesc(key,inclusive,atomicOperation);
      return iterateEntriesMinorAsc(key,inclusive,atomicOperation);
    }
  finally {
      releaseSharedLock();
    }
  }
 catch (  IOException ioe) {
    throw new OSBTreeException("Error during iteration of minor values for key " + key + " in sbtree "+ name);
  }
 finally {
    atomicOperationsManager.releaseReadLock(this);
  }
}
