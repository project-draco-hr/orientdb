{
  if (OScenarioThreadLocal.INSTANCE.get() == RUN_MODE.RUNNING_DISTRIBUTED)   return wrapped.createRecord(iRecordId,iContent,iRecordVersion,iRecordType,iMode,iCallback);
  try {
    String clusterName=getClusterNameByRID(iRecordId);
    int clusterId=iRecordId.getClusterId();
    if (clusterId == ORID.CLUSTER_ID_INVALID) {
      throw new IllegalArgumentException("Cluster not valid");
    }
    final ODistributedConfiguration dbCfg=dManager.getDatabaseConfiguration(getName());
    final List<String> nodes=dbCfg.getServers(clusterName,null);
    if (nodes.isEmpty()) {
      return (OStorageOperationResult<OPhysicalPosition>)ODistributedAbstractPlugin.runInDistributedMode(new Callable(){
        @Override public Object call() throws Exception {
          return wrapped.createRecord(iRecordId,iContent,iRecordVersion,iRecordType,iMode,iCallback);
        }
      }
);
    }
    final String masterNode=nodes.get(0);
    if (!masterNode.equals(dManager.getLocalNodeName()))     throw new ODistributedException("Error on inserting into cluster '" + clusterName + "' where local node '"+ dManager.getLocalNodeName()+ "' is not the master of it, but it's '"+ masterNode+ "'");
    Boolean executionModeSynch=dbCfg.isExecutionModeSynchronous(clusterName);
    if (executionModeSynch == null)     executionModeSynch=iMode == 0;
    if (executionModeSynch) {
      final Object masterResult=dManager.sendRequest(getName(),Collections.singleton(clusterName),nodes,new OCreateRecordTask(iRecordId,iContent,iRecordVersion,iRecordType),EXECUTION_MODE.RESPONSE);
      if (masterResult instanceof ONeedRetryException)       throw (ONeedRetryException)masterResult;
 else       if (masterResult instanceof Throwable)       throw new ODistributedException("Error on execution distributed CREATE_RECORD",(Throwable)masterResult);
      final OPlaceholder masterPlaceholder=(OPlaceholder)masterResult;
      iRecordId.copyFrom(masterPlaceholder.getIdentity());
      return new OStorageOperationResult<OPhysicalPosition>(new OPhysicalPosition(masterPlaceholder.getIdentity().getClusterPosition(),masterPlaceholder.getRecordVersion()));
    }
    final OStorageOperationResult<OPhysicalPosition> localResult;
    localResult=(OStorageOperationResult<OPhysicalPosition>)ODistributedAbstractPlugin.runInDistributedMode(new Callable(){
      @Override public Object call() throws Exception {
        return wrapped.createRecord(iRecordId,iContent,iRecordVersion,iRecordType,iMode,iCallback);
      }
    }
);
    nodes.remove(dManager.getLocalNodeName());
    if (!nodes.isEmpty()) {
      asynchronousExecution(new OAsynchDistributedOperation(getName(),Collections.singleton(clusterName),nodes,new OCreateRecordTask(iRecordId,iContent,iRecordVersion,iRecordType)));
    }
    return localResult;
  }
 catch (  ONeedRetryException e) {
    throw e;
  }
catch (  Exception e) {
    handleDistributedException("Cannot route CREATE_RECORD operation for %s to the distributed node",e,iRecordId);
    return null;
  }
}
