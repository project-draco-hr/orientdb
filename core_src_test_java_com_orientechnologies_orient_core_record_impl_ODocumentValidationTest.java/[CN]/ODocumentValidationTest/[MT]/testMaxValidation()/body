{
  ODatabaseDocument db=new ODatabaseDocumentTx("memory:" + ODocumentValidationTest.class.getSimpleName());
  db.create();
  try {
    OClass clazz=db.getMetadata().getSchema().createClass("Validation");
    clazz.createProperty("int",OType.INTEGER).setMax("11");
    clazz.createProperty("long",OType.LONG).setMax("11");
    clazz.createProperty("float",OType.FLOAT).setMax("11");
    clazz.createProperty("binary",OType.BINARY).setMax("11");
    clazz.createProperty("byte",OType.BYTE).setMax("11");
    Calendar cal=Calendar.getInstance();
    cal.add(Calendar.HOUR,1);
    SimpleDateFormat format=((ODatabaseDocumentTx)db).getStorage().getConfiguration().getDateFormatInstance();
    clazz.createProperty("date",OType.DATE).setMax(format.format(cal.getTime()));
    format=((ODatabaseDocumentTx)db).getStorage().getConfiguration().getDateTimeFormatInstance();
    clazz.createProperty("datetime",OType.DATETIME).setMax(format.format(cal.getTime()));
    clazz.createProperty("decimal",OType.DECIMAL).setMax("11");
    clazz.createProperty("double",OType.DOUBLE).setMax("11");
    clazz.createProperty("short",OType.SHORT).setMax("11");
    clazz.createProperty("string",OType.STRING).setMax("11");
    clazz.createProperty("embeddedList",OType.EMBEDDEDLIST).setMax("2");
    clazz.createProperty("embeddedSet",OType.EMBEDDEDSET).setMax("2");
    clazz.createProperty("embeddedMap",OType.EMBEDDEDMAP).setMax("2");
    clazz.createProperty("linkList",OType.LINKLIST).setMax("2");
    clazz.createProperty("linkSet",OType.LINKSET).setMax("2");
    clazz.createProperty("linkMap",OType.LINKMAP).setMax("2");
    ODocument d=new ODocument(clazz);
    d.field("int",11);
    d.field("long",11);
    d.field("float",11);
    d.field("binary",new byte[]{1,2,3,4,5,6,7,8,9,10,11});
    d.field("byte",11);
    d.field("date",new Date());
    d.field("datetime",new Date());
    d.field("decimal",10);
    d.field("double",10);
    d.field("short",10);
    d.field("string","yeah");
    d.field("embeddedList",Arrays.asList("a","b"));
    d.field("embeddedSet",new HashSet<String>(Arrays.asList("a","b")));
    HashMap<String,String> cont=new HashMap<String,String>();
    cont.put("one","one");
    cont.put("two","one");
    d.field("embeddedMap",cont);
    d.field("linkList",Arrays.asList(new ORecordId(40,30),new ORecordId(40,34)));
    d.field("linkSet",new HashSet<ORecordId>(Arrays.asList(new ORecordId(40,30),new ORecordId(40,31))));
    HashMap<String,ORecordId> cont1=new HashMap<String,ORecordId>();
    cont1.put("one",new ORecordId(30,30));
    cont1.put("two",new ORecordId(30,30));
    d.field("linkMap",cont1);
    d.validate();
    checkField(d,"int",12);
    checkField(d,"long",12);
    checkField(d,"float",20);
    checkField(d,"binary",new byte[]{1,2,3,4,5,6,7,8,9,10,11,12,13});
    checkField(d,"byte",20);
    cal=Calendar.getInstance();
    cal.add(Calendar.DAY_OF_MONTH,1);
    checkField(d,"date",cal.getTime());
    checkField(d,"datetime",cal.getTime());
    checkField(d,"decimal",20);
    checkField(d,"double",20);
    checkField(d,"short",20);
    checkField(d,"string","0123456789101112");
    checkField(d,"embeddedList",Arrays.asList("a","b","d"));
    checkField(d,"embeddedSet",new HashSet<String>(Arrays.asList("a","b","d")));
    HashMap<String,String> con1=new HashMap<String,String>();
    con1.put("one","one");
    con1.put("two","one");
    con1.put("three","one");
    checkField(d,"embeddedMap",con1);
    checkField(d,"linkList",Arrays.asList(new ORecordId(40,30),new ORecordId(40,33),new ORecordId(40,31)));
    checkField(d,"linkSet",new HashSet<ORecordId>(Arrays.asList(new ORecordId(40,30),new ORecordId(40,33),new ORecordId(40,31))));
    HashMap<String,ORecordId> cont3=new HashMap<String,ORecordId>();
    cont3.put("one",new ORecordId(30,30));
    cont3.put("two",new ORecordId(30,30));
    cont3.put("three",new ORecordId(30,30));
    checkField(d,"linkMap",cont3);
  }
  finally {
    db.drop();
  }
}
