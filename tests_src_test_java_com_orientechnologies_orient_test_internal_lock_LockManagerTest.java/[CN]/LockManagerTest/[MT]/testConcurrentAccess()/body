{
  resources.add(new ResourceRead());
  resources.add(new ResourceWrite());
  resources.add(new ResourceReadWrite());
  resources.add(new ResourceReantrance());
  System.out.println("Starting " + THREADS + " threads: ");
  for (int i=0; i < THREADS; ++i) {
    if (i % THREADS / 10 == 0)     System.out.print('.');
    processes.add(new Thread(new Process()));
  }
  for (  Thread thread : processes) {
    thread.start();
  }
  System.out.println("\nOk, waiting for end: ");
  for (int i=0; i < THREADS; ++i) {
    if (i % THREADS / 10 == 0)     System.out.print('.');
    processes.get(i).join();
  }
  System.out.println("\nOk, all threads back");
  if (exceptions.size() > 0) {
    for (    Throwable exc : exceptions) {
      exc.printStackTrace();
    }
    throw exceptions.get(0);
  }
  Assert.assertEquals(counter.get(),processes.size() * resources.size() * cyclesByProcess);
}
