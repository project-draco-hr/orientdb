{
  final OSessionStoragePerformanceStatistic statistic=performanceStatisticManager.getSessionPerformanceStatistic();
  atomicOperationsManager.acquireReadLock(this);
  long browsed=0;
  try {
    acquireSharedLock();
    try {
      final long firstPos=from > -1 ? from : getFirstPosition();
      final long lastPos=to > -1 ? to : getLastPosition();
      final long recordsToScan=lastPos - firstPos;
      final long progressDump=recordsToScan / 10;
      final int prefetchPages=OGlobalConfiguration.QUERY_SCAN_PREFETCH_PAGES.getValueAsInteger();
      long clusterPosition=ascendingOrder ? firstPos : lastPos;
      for (; ascendingOrder ? clusterPosition <= lastPos : clusterPosition >= firstPos; clusterPosition+=(ascendingOrder ? 1 : -1)) {
        startOperation();
        if (statistic != null)         statistic.startRecordReadTimer();
        try {
          final ORawBuffer buffer=readRecordNoLock(clusterPosition,Math.max(prefetchPages,1));
          if (buffer == null)           continue;
          if (progressDump > 1 && OLogManager.instance().isDebugEnabled()) {
            final long recordsScanned=clusterPosition - firstPos;
            if ((recordsScanned + 1) % progressDump == 0) {
              OLogManager.instance().debug(this,"Scan cluster id=%d read %d/%d %.2f%%",id,recordsScanned,recordsToScan,((float)recordsScanned * 100 / recordsToScan));
            }
          }
          final ORecord rec=Orient.instance().getRecordFactoryManager().newInstance(buffer.recordType);
          ORecordInternal.fill(rec,new ORecordId(id,clusterPosition),buffer.version,buffer.buffer,false);
          if (callback.call(rec).equals(Boolean.FALSE))           break;
          if (Thread.currentThread().isInterrupted()) {
            Thread.currentThread().interrupt();
            break;
          }
          if (++browsed == limit) {
            return clusterPosition;
          }
        }
  finally {
          if (statistic != null)           statistic.stopRecordReadTimer();
          completeOperation();
        }
      }
      return -1;
    }
  finally {
      releaseSharedLock();
    }
  }
  finally {
    atomicOperationsManager.releaseReadLock(this);
    storageLocal.getRecordScanned().addAndGet(browsed);
    OLogManager.instance().debug(this,"Scan cluster id=%d completed",id);
  }
}
