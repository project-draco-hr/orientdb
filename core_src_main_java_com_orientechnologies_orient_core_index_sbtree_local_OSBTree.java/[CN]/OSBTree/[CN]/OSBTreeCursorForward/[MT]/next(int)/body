{
  final OSessionStoragePerformanceStatistic statistic=performanceStatisticManager.getSessionPerformanceStatistic();
  startOperation();
  if (statistic != null)   statistic.startIndexEntryReadTimer();
  try {
    if (dataCacheIterator == null)     return null;
    if (dataCacheIterator.hasNext())     return dataCacheIterator.next();
    dataCache.clear();
    if (prefetchSize < 0 || prefetchSize > OGlobalConfiguration.INDEX_CURSOR_PREFETCH_SIZE.getValueAsInteger())     prefetchSize=OGlobalConfiguration.INDEX_CURSOR_PREFETCH_SIZE.getValueAsInteger();
    if (prefetchSize == 0)     prefetchSize=1;
    atomicOperationsManager.acquireReadLock(OSBTree.this);
    try {
      acquireSharedLock();
      try {
        OAtomicOperation atomicOperation=atomicOperationsManager.getCurrentOperation();
        while (dataCache.size() < prefetchSize) {
          if (pageIndex == -1)           break;
          if (pageIndex >= getFilledUpTo(atomicOperation,fileId)) {
            pageIndex=-1;
            break;
          }
          final OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,pageIndex,false);
          cacheEntry.acquireSharedLock();
          try {
            final OSBTreeBucket<K,V> bucket=new OSBTreeBucket<K,V>(cacheEntry,keySerializer,keyTypes,valueSerializer,getChanges(atomicOperation,cacheEntry));
            if (itemIndex >= bucket.size()) {
              pageIndex=bucket.getRightSibling();
              itemIndex=0;
              continue;
            }
            final Map.Entry<K,V> entry=convertToMapEntry(bucket.getEntry(itemIndex),atomicOperation);
            itemIndex++;
            if (fromKey != null && (fromKeyInclusive ? comparator.compare(entry.getKey(),fromKey) < 0 : comparator.compare(entry.getKey(),fromKey) <= 0))             continue;
            if (toKey != null && (toKeyInclusive ? comparator.compare(entry.getKey(),toKey) > 0 : comparator.compare(entry.getKey(),toKey) >= 0)) {
              pageIndex=-1;
              break;
            }
            dataCache.add(entry);
          }
  finally {
            cacheEntry.releaseSharedLock();
            releasePage(atomicOperation,cacheEntry);
          }
        }
      }
  finally {
        releaseSharedLock();
      }
    }
 catch (    IOException e) {
      throw OException.wrapException(new OSBTreeException("Error during element iteration",OSBTree.this),e);
    }
 finally {
      atomicOperationsManager.releaseReadLock(OSBTree.this);
    }
    if (dataCache.isEmpty()) {
      dataCacheIterator=null;
      return null;
    }
    dataCacheIterator=dataCache.iterator();
    return dataCacheIterator.next();
  }
  finally {
    if (statistic != null)     statistic.stopIndexEntryReadTimer();
    completeOperation();
  }
}
