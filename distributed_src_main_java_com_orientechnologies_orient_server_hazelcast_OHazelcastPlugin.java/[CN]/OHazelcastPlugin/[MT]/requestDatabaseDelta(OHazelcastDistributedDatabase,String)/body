{
  final ODistributedConfiguration cfg=getDatabaseConfiguration(databaseName);
  final Collection<String> nodes=cfg.getServers(null,getLocalNodeName());
  ODistributedServerLog.warn(this,getLocalNodeName(),nodes.toString(),DIRECTION.OUT,"requesting sync database delta '%s' on local server...",databaseName);
  final Map<String,OLogSequenceNumber> selectedNodes=new HashMap<String,OLogSequenceNumber>(nodes.size());
  for (  String node : nodes) {
    final OLogSequenceNumber lsn=distrDatabase.getSyncConfiguration().getLSN(node);
    if (lsn != null) {
      selectedNodes.put(node,lsn);
    }
 else     ODistributedServerLog.info(this,getLocalNodeName(),node,DIRECTION.OUT,"Last LSN not found for database '%s', skip synchronization of delta",databaseName);
  }
  for (  Map.Entry<String,OLogSequenceNumber> entry : selectedNodes.entrySet()) {
    final OAbstractReplicatedTask deployTask=new OSyncDatabaseDeltaTask(entry.getValue());
    final List<String> targetNodes=new ArrayList<String>(1);
    targetNodes.add(entry.getKey());
    ODistributedServerLog.info(this,getLocalNodeName(),entry.getKey(),DIRECTION.OUT,"Requesting database delta for '%s'...",databaseName);
    final Map<String,Object> results=(Map<String,Object>)sendRequest(databaseName,null,targetNodes,deployTask,EXECUTION_MODE.RESPONSE);
    ODistributedServerLog.info(this,getLocalNodeName(),entry.getKey(),DIRECTION.IN,"Receiving delta of database '%s'...",databaseName);
    ODistributedServerLog.debug(this,getLocalNodeName(),selectedNodes.toString(),DIRECTION.OUT,"Sync delta database returned: %s",results);
    final String dbPath=serverInstance.getDatabaseDirectory() + databaseName;
    for (    Entry<String,Object> r : results.entrySet()) {
      final Object value=r.getValue();
      if (value instanceof Boolean)       continue;
 else       if (value instanceof ODiscardedResponse) {
        ODistributedServerLog.warn(this,getLocalNodeName(),selectedNodes.toString(),DIRECTION.OUT,"Requesting sync of delta database '%s' on local server failed, retrying...",databaseName);
        return false;
      }
 else       if (value instanceof ODistributedDatabaseDeltaBackupException) {
        ODistributedServerLog.error(this,getLocalNodeName(),r.getKey(),DIRECTION.IN,"Error on installing database %s in %s",databaseName,dbPath);
        throw (ODistributedDatabaseDeltaBackupException)value;
      }
 else       if (value instanceof Throwable) {
        ODistributedServerLog.error(this,getLocalNodeName(),r.getKey(),DIRECTION.IN,"Error on installing database %s in %s",(Exception)value,databaseName,dbPath);
      }
 else       if (value instanceof ODistributedDatabaseChunk) {
        final Set<String> toSyncClusters=installDatabaseFromNetwork(dbPath,databaseName,distrDatabase,r.getKey(),(ODistributedDatabaseChunk)value,true);
        for (        String cl : toSyncClusters) {
          OCommandExecutorSQLSyncCluster.replaceCluster(this,serverInstance,databaseName,cl);
        }
        ODistributedServerLog.info(this,getLocalNodeName(),entry.getKey(),DIRECTION.IN,"Installed delta of database '%s'...",databaseName);
      }
 else       throw new IllegalArgumentException("Type " + value + " not supported");
    }
  }
  return true;
}
