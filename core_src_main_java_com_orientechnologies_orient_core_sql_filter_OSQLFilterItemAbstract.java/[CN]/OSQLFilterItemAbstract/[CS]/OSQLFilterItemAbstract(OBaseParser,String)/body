{
  final List<String> parts=OStringSerializerHelper.smartSplit(iText,new char[]{'.','['},new boolean[]{false,true},0,-1,false,true,false,false,new char[]{});
  setRoot(iQueryToParse,parts.get(0));
  if (parts.size() > 1) {
    operationsChain=new ArrayList<OPair<OSQLMethod,Object[]>>();
    for (int i=1; i < parts.size(); ++i) {
      final String part=parts.get(i);
      final int pindex=part.indexOf('(');
      if (pindex > -1) {
        final String methodName=part.substring(0,pindex).trim().toLowerCase(Locale.ENGLISH);
        OSQLMethod method=OSQLHelper.getMethodByName(methodName);
        final Object[] arguments;
        if (method != null) {
          if (method.getMaxParams() == -1 || method.getMaxParams() > 0) {
            arguments=OStringSerializerHelper.getParameters(part).toArray();
            if (arguments.length < method.getMinParams() || (method.getMaxParams() > -1 && arguments.length > method.getMaxParams()))             throw new OQueryParsingException(iQueryToParse.parserText,"Syntax error: field operator '" + method.getName() + "' needs "+ (method.getMinParams() == method.getMaxParams() ? method.getMinParams() : method.getMinParams() + "-" + method.getMaxParams())+ " argument(s) while has been received "+ arguments.length,0);
          }
 else           arguments=null;
        }
 else {
          final OSQLFunction f=OSQLEngine.getInstance().getFunction(methodName);
          if (f == null)           throw new OQueryParsingException(iQueryToParse.parserText,"Syntax error: function or field operator not recognized between the supported ones: " + Arrays.toString(OSQLHelper.getAllMethodNames()),0);
          if (f.getMaxParams() == -1 || f.getMaxParams() > 0) {
            arguments=OStringSerializerHelper.getParameters(part).toArray();
            if (arguments.length + 1 < f.getMinParams() || (f.getMaxParams() > -1 && arguments.length + 1 > f.getMaxParams()))             throw new OQueryParsingException(iQueryToParse.parserText,"Syntax error: function '" + f.getName() + "' needs "+ (f.getMinParams() == f.getMaxParams() ? f.getMinParams() : f.getMinParams() + "-" + f.getMaxParams())+ " argument(s) while has been received "+ arguments.length,0);
          }
 else           arguments=null;
          method=new OSQLMethodFunctionDelegate(f);
        }
        operationsChain.add(new OPair<OSQLMethod,Object[]>(method,arguments));
      }
 else       if (part.charAt(0) == '[') {
        operationsChain.add(new OPair<OSQLMethod,Object[]>(OSQLHelper.getMethodByName(OSQLFunctionMultiValue.NAME),new Object[]{part}));
      }
 else {
        operationsChain.add(new OPair<OSQLMethod,Object[]>(OSQLHelper.getMethodByName(OSQLMethodField.NAME),new Object[]{part}));
      }
    }
  }
}
