{
  NavigableSet<Integer> keys=new TreeSet<Integer>();
  for (int i=0; i < KEYS_COUNT; i++) {
    sbTree.put(i,new ORecordId(i % 32000,i));
    doReset();
    keys.add(i);
  }
  Iterator<Integer> keysIterator=keys.iterator();
  while (keysIterator.hasNext()) {
    int key=keysIterator.next();
    if (key % 3 == 0) {
      sbTree.remove(key);
      doReset();
      keysIterator.remove();
    }
  }
  Assert.assertEquals(sbTree.firstKey(),keys.first());
  doReset();
  Assert.assertEquals(sbTree.lastKey(),keys.last());
  doReset();
  for (  int key : keys) {
    if (key % 3 == 0) {
      Assert.assertNull(sbTree.get(key));
      doReset();
    }
 else {
      Assert.assertEquals(sbTree.get(key),new ORecordId(key % 32000,key));
      doReset();
    }
  }
}
