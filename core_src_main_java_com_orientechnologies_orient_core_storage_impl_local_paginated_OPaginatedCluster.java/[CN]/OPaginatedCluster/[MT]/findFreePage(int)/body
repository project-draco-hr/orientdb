{
  diskCache.loadPinnedPage(pinnedStateEntry);
  try {
    OAtomicOperation atomicOperation=storage.getAtomicOperationsManager().getCurrentOperation();
    while (true) {
      int freePageIndex=contentSize / ONE_KB;
      freePageIndex-=PAGINATED_STORAGE_LOWEST_FREELIST_BOUNDARY.getValueAsInteger();
      if (freePageIndex < 0)       freePageIndex=0;
      OPaginatedClusterState freePageLists=new OPaginatedClusterState(pinnedStateEntry,getChangesTree(atomicOperation,pinnedStateEntry));
      long pageIndex;
      do {
        pageIndex=freePageLists.getFreeListPage(freePageIndex);
        freePageIndex++;
      }
 while (pageIndex < 0 && freePageIndex < FREE_LIST_SIZE);
      if (pageIndex < 0)       pageIndex=diskCache.getFilledUpTo(fileId);
 else       freePageIndex--;
      if (freePageIndex < FREE_LIST_SIZE) {
        OCacheEntry cacheEntry=diskCache.load(fileId,pageIndex,false);
        int realFreePageIndex;
        try {
          OClusterPage localPage=new OClusterPage(cacheEntry,false,getChangesTree(atomicOperation,cacheEntry));
          realFreePageIndex=calculateFreePageIndex(localPage);
        }
  finally {
          diskCache.release(cacheEntry);
        }
        if (realFreePageIndex != freePageIndex) {
          OLogManager.instance().warn(this,"Page in file %s with index %d was placed in wrong free list, this error will be fixed automatically.",name + DEF_EXTENSION,pageIndex);
          updateFreePagesIndex(freePageIndex,pageIndex);
          continue;
        }
      }
      return new FindFreePageResult(pageIndex,freePageIndex);
    }
  }
  finally {
    diskCache.release(pinnedStateEntry);
  }
}
