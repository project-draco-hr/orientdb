{
  OrientBaseGraph graph=getGraph();
  graph.setUseLightweightEdges(false);
  Assert.assertEquals(VERTEXES_COUNT,graph.countVertices("TestVertex"));
  Assert.assertEquals(EDGES_COUNT,graph.countEdges("TestEdge"));
  for (  TestVertex vertex : vertexes) {
    Iterable<Vertex> vertexes=graph.command(new OSQLSynchQuery<Vertex>("select from TestVertex where uuid = '" + vertex.uuid + "'")).execute();
    Assert.assertTrue(vertexes.iterator().hasNext());
  }
  for (  TestEdge edge : edges) {
    Iterable<Edge> edges=graph.command(new OSQLSynchQuery<Edge>("select from TestEdge where uuid = '" + edge.uuid + "'")).execute();
    Assert.assertTrue(edges.iterator().hasNext());
  }
  for (  TestVertex vertex : vertexes) {
    Iterable<Vertex> vertexes=graph.command(new OSQLSynchQuery<Vertex>("select from TestVertex where uuid = '" + vertex.uuid + "'")).execute();
    Assert.assertTrue(vertexes.iterator().hasNext());
    Vertex gVertex=vertexes.iterator().next();
    Iterable<Edge> outEdges=gVertex.getEdges(Direction.OUT);
    Iterator<Edge> outGEdgesIterator=outEdges.iterator();
    int counter=0;
    while (outGEdgesIterator.hasNext()) {
      counter++;
      Edge gEdge=outGEdgesIterator.next();
      TestEdge testEdge=new TestEdge();
      testEdge.uuid=gEdge.getProperty("uuid");
      Assert.assertTrue(vertex.outEdges.contains(testEdge));
    }
    Assert.assertEquals(vertex.outEdges.size(),counter);
    Iterable<Edge> inEdges=gVertex.getEdges(Direction.IN);
    Iterator<Edge> inGEdgesIterator=inEdges.iterator();
    counter=0;
    while (inGEdgesIterator.hasNext()) {
      counter++;
      Edge gEdge=inGEdgesIterator.next();
      TestEdge testEdge=new TestEdge();
      testEdge.uuid=gEdge.getProperty("uuid");
      Assert.assertTrue(vertex.inEdges.contains(testEdge));
    }
    Assert.assertEquals(vertex.inEdges.size(),counter);
  }
  graph.shutdown();
}
