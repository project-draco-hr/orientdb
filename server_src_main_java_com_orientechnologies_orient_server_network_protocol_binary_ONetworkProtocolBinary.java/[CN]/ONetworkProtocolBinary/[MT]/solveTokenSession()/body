{
  if (requestType == OChannelBinaryProtocol.REQUEST_CONNECT || requestType == OChannelBinaryProtocol.REQUEST_DB_OPEN) {
    connection=server.getClientConnectionManager().getConnection(clientTxId,this);
    if (clientTxId < 0) {
      short protocolId=0;
      if (connection != null)       protocolId=connection.data.protocolVersion;
      connection=server.getClientConnectionManager().connect(this);
      if (connection != null) {
        connection.data.protocolVersion=protocolId;
        connection.data.sessionId=clientTxId;
      }
    }
    this.tokenBytes=null;
    if (connection != null)     connection.acquire();
  }
 else {
    byte[] bytes=channel.readBytes();
    connection=server.getClientConnectionManager().getConnection(clientTxId,this);
    if (connection != null && requestType != OChannelBinaryProtocol.REQUEST_DB_REOPEN)     connection.acquire();
    if (tokenBytes == null || tokenBytes.length == 0 || !Arrays.equals(bytes,tokenBytes) || connection == null || connection.database == null) {
      this.tokenBytes=bytes;
      try {
        if (tokenBytes != null)         this.token=tokenHandler.parseBinaryToken(tokenBytes);
      }
 catch (      Exception e) {
        throw OException.wrapException(new OSystemException("error on token parse"),e);
      }
      if (this.token == null || !this.token.getIsVerified()) {
        throw new OTokenSecurityException("The token provided is not a valid token, signature does not match");
      }
      if (tokenBased == null) {
        tokenBased=Boolean.TRUE;
      }
      if (token != null) {
        if (!tokenHandler.validateBinaryToken(token)) {
          throw new OTokenSecurityException("The token provided is expired");
        }
        if (connection != null && connection.database != null && !connection.database.isClosed()) {
          connection.database.activateOnCurrentThread();
          connection.database.close();
        }
        if (connection != null)         connection.database=null;
        if (requestType == OChannelBinaryProtocol.REQUEST_DB_REOPEN) {
          server.getClientConnectionManager().disconnect(clientTxId);
          connection=server.getClientConnectionManager().reConnect(this,tokenBytes,token);
          connection.acquire();
        }
        if (connection != null) {
          if (requestType != OChannelBinaryProtocol.REQUEST_DB_CLOSE && connection.database == null) {
            final ONetworkProtocolData data=tokenHandler.getProtocolDataFromToken(token);
            if (data != null)             connection.data=data;
            final String db=token.getDatabase();
            final String type=token.getDatabaseType();
            if (db != null && type != null) {
              if (connection.data.serverUser) {
                connection.database=(ODatabaseDocumentTx)server.openDatabase(type + ":" + db,token.getUserName(),null,connection.data,true);
              }
 else               connection.database=(ODatabaseDocumentTx)server.openDatabase(type + ":" + db,token);
            }
          }
          if (connection.data.serverUser) {
            connection.serverUser=server.getUser(connection.data.serverUsername);
          }
        }
      }
    }
  }
}
