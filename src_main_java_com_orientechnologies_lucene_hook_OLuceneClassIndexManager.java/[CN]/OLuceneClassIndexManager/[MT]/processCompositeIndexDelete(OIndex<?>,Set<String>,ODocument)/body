{
  final OCompositeIndexDefinition indexDefinition=(OCompositeIndexDefinition)index.getDefinition();
  final String multiValueField=indexDefinition.getMultiValueField();
  final List<String> indexFields=indexDefinition.getFields();
  for (  final String indexField : indexFields) {
    if (dirtyFields.contains(indexField)) {
      final List<Object> origValues=new ArrayList<Object>(indexFields.size());
      for (      final String field : indexFields) {
        if (!field.equals(multiValueField))         if (dirtyFields.contains(field))         origValues.add(iRecord.getOriginalValue(field));
 else         origValues.add(iRecord.<Object>field(field));
      }
      if (multiValueField != null) {
        final OMultiValueChangeTimeLine<?,?> multiValueChangeTimeLine=iRecord.getCollectionTimeLine(multiValueField);
        if (multiValueChangeTimeLine != null) {
          final OTrackedMultiValue fieldValue=iRecord.field(multiValueField);
          final Object restoredMultiValue=fieldValue.returnOriginalState(multiValueChangeTimeLine.getMultiValueChangeEvents());
          origValues.add(indexDefinition.getMultiValueDefinitionIndex(),restoredMultiValue);
        }
 else         if (dirtyFields.contains(multiValueField))         origValues.add(indexDefinition.getMultiValueDefinitionIndex(),iRecord.getOriginalValue(multiValueField));
 else         origValues.add(indexDefinition.getMultiValueDefinitionIndex(),iRecord.field(multiValueField));
      }
      final Object origValue=indexDefinition.createValue(origValues);
      deleteIndexKey(index,iRecord,origValue);
      return true;
    }
  }
  return false;
}
