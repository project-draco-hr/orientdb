{
  final long timer=OProfiler.getInstance().startChrono();
  lock.acquireExclusiveLock();
  try {
    lockManager.acquireLock(Thread.currentThread(),iRid,LOCK.EXCLUSIVE);
    try {
      final OPhysicalPosition ppos=iClusterSegment.getPhysicalPosition(iRid.clusterPosition,new OPhysicalPosition());
      if (!checkForRecordValidity(ppos))       return -1;
switch (iVersion) {
case -1:
        ++ppos.version;
      iClusterSegment.updateVersion(iRid.clusterPosition,ppos.version);
    break;
case -2:
  break;
case -3:
--ppos.version;
iClusterSegment.updateVersion(iRid.clusterPosition,ppos.version);
break;
default :
if (iVersion > -1) {
if (iVersion != ppos.version) throw new OConcurrentModificationException("Cannot update record " + iRid + " in storage '"+ name+ "' because the version is not the latest. Probably you are updating an old record or it has been modified by another user (db=v"+ ppos.version+ " your=v"+ iVersion+ ")");
++ppos.version;
iClusterSegment.updateVersion(iRid.clusterPosition,ppos.version);
}
 else throw new IllegalArgumentException("Cannot update record " + iRid + " in storage '"+ name+ "' because the version is not correct: recieved="+ iVersion+ " expected=-1 (skip version control),-2 (skip version control and increment),-3 (rollback) or "+ ppos.version+ "(current version)");
}
if (ppos.type != iRecordType) iClusterSegment.updateRecordType(iRid.clusterPosition,iRecordType);
final long newDataSegmentOffset;
if (ppos.dataPosition == -1) newDataSegmentOffset=getDataSegment(ppos.dataSegment).addRecord(iRid,iContent);
 else newDataSegmentOffset=getDataSegment(ppos.dataSegment).setRecord(ppos.dataPosition,iRid,iContent);
if (newDataSegmentOffset != ppos.dataPosition) iClusterSegment.setPhysicalPosition(iRid.clusterPosition,ppos.dataSegment,newDataSegmentOffset,iRecordType,ppos.version);
incrementVersion();
return ppos.version;
}
  finally {
lockManager.releaseLock(Thread.currentThread(),iRid,LOCK.EXCLUSIVE);
}
}
 catch (IOException e) {
OLogManager.instance().error(this,"Error on updating record " + iRid + " (cluster: "+ iClusterSegment+ ")",e);
}
 finally {
lock.releaseExclusiveLock();
OProfiler.getInstance().stopChrono(PROFILER_UPDATE_RECORD,timer);
}
return -1;
}
