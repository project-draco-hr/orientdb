{
  if (optimization == -1)   return 0;
  if (!iForce && optimization == 0)   return 0;
  optimization=-1;
  final long timer=OProfiler.getInstance().startChrono();
  try {
    if (root == null)     return 0;
    if (OLogManager.instance().isDebugEnabled())     OLogManager.instance().debug(this,"Starting optimization of MVRB+Tree with %d items in memory...",cache.size());
    if (entryPoints.size() == 0)     addNodeAsEntrypoint((OMVRBTreeEntryPersistent<K,V>)root);
    config();
    if (OLogManager.instance().isDebugEnabled())     OLogManager.instance().debug(this,"Found %d items on disk, threshold=%f, entryPoints=%d, nodesInCache=%d",size,(entryPointsSize * optimizeEntryPointsFactor),entryPoints.size(),cache.size());
    final int nodesInMemory=cache.size();
    if (!iForce && nodesInMemory < entryPointsSize * optimizeEntryPointsFactor)     return 0;
    lastSearchFound=false;
    lastSearchKey=null;
    lastSearchNode=null;
    int totalDisconnected=0;
    if (nodesInMemory > entryPointsSize) {
      final int distance=nodesInMemory / entryPointsSize + 1;
      final Set<OMVRBTreeEntryPersistent<K,V>> entryPointsToRemove=new HashSet<OMVRBTreeEntryPersistent<K,V>>(nodesInMemory - entryPointsSize + 2);
      int currNode=0;
      for (final Iterator<OMVRBTreeEntryPersistent<K,V>> it=entryPoints.values().iterator(); it.hasNext(); ) {
        final OMVRBTreeEntryPersistent<K,V> currentNode=it.next();
        if (currentNode != root && currentNode != lastSearchNode && it.hasNext())         if (++currNode % distance != 0) {
          entryPointsToRemove.add(currentNode);
          it.remove();
        }
      }
      addNodeAsEntrypoint((OMVRBTreeEntryPersistent<K,V>)lastSearchNode);
      addNodeAsEntrypoint((OMVRBTreeEntryPersistent<K,V>)root);
      for (      OMVRBTreeEntryPersistent<K,V> currentNode : entryPointsToRemove)       totalDisconnected+=currentNode.disconnectLinked(false);
    }
    if (isRuntimeCheckEnabled()) {
      for (      OMVRBTreeEntryPersistent<K,V> entryPoint : entryPoints.values())       for (OMVRBTreeEntryPersistent<K,V> e=(OMVRBTreeEntryPersistent<K,V>)entryPoint.getFirstInMemory(); e != null; e=e.getNextInMemory())       e.checkEntryStructure();
    }
    if (OLogManager.instance().isDebugEnabled())     OLogManager.instance().debug(this,"After optimization: %d items on disk, threshold=%f, entryPoints=%d, nodesInCache=%d",size,(entryPointsSize * optimizeEntryPointsFactor),entryPoints.size(),cache.size());
    if (debug) {
      int i=0;
      for (      OMVRBTreeEntryPersistent<K,V> entryPoint : entryPoints.values())       System.out.println("- Entrypoint " + ++i + "/"+ entryPoints.size()+ ": "+ entryPoint);
    }
    return totalDisconnected;
  }
  finally {
    optimization=0;
    if (isRuntimeCheckEnabled()) {
      if (entryPoints.size() > 0)       for (      OMVRBTreeEntryPersistent<K,V> entryPoint : entryPoints.values())       checkTreeStructure(entryPoint.getFirstInMemory());
 else       checkTreeStructure(root);
    }
    OProfiler.getInstance().stopChrono("OMVRBTreePersistent.optimize",timer);
    if (OLogManager.instance().isDebugEnabled())     OLogManager.instance().debug(this,"Optimization completed in %d ms\n",System.currentTimeMillis() - timer);
  }
}
