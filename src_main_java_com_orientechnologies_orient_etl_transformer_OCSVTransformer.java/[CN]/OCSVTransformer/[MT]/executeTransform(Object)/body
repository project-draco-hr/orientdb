{
  line++;
  if (skipFrom > -1) {
    if (skipTo > -1) {
      if (line >= skipFrom && line <= skipTo)       return null;
    }
 else     if (line >= skipFrom)     return null;
  }
  final List<String> fields=OStringSerializerHelper.smartSplit(input.toString(),new char[]{separator},0,-1,false,false,false,false);
  if (columnNames == null) {
    if (!columnsOnFirstLine)     throw new OTransformException("CSV: columnsOnFirstLine=false and no columns declared");
    columnNames=fields;
    for (int i=0; i < columnNames.size(); ++i)     columnNames.set(i,OStringSerializerHelper.getStringContent(columnNames.get(i)));
    return null;
  }
  final ODocument doc=new ODocument();
  for (int i=0; i < columnNames.size() && i < fields.size(); ++i) {
    final String fieldName=columnNames.get(i);
    Object fieldValue=null;
    try {
      final String fieldStringValue=fields.get(i);
      final OType fieldType=columnTypes != null ? columnTypes.get(i) : null;
      if (fieldType != null && fieldType != OType.ANY) {
        fieldValue=OStringSerializerHelper.getStringContent(fieldStringValue);
        try {
          fieldValue=OType.convert(fieldValue,fieldType.getDefaultJavaType());
          doc.field(fieldName,fieldValue);
        }
 catch (        Exception e) {
          processor.getStats().incrementErrors();
          log("Error on converting row %d field '%s' (%d), value '%s' (class:%s) to type: %s",processor.getExtractor().getProgress(),fieldName,i,fieldValue,fieldValue.getClass().getName(),fieldType);
        }
      }
 else       if (fieldStringValue != null && !fieldStringValue.isEmpty()) {
        final char firstChar=fieldStringValue.charAt(0);
        if (firstChar == stringCharacter)         fieldValue=OStringSerializerHelper.getStringContent(fieldStringValue);
 else         if (Character.isDigit(firstChar))         if (fieldStringValue.contains(".") || fieldStringValue.contains(","))         try {
          fieldValue=Float.parseFloat(fieldStringValue);
        }
 catch (        Exception e) {
          fieldValue=Double.parseDouble(fieldStringValue);
        }
 else         try {
          fieldValue=Integer.parseInt(fieldStringValue);
        }
 catch (        Exception e) {
          fieldValue=Long.parseLong(fieldStringValue);
        }
 else         fieldValue=fieldStringValue;
        if (nullValue != null && nullValue.equals(fieldValue))         continue;
        doc.field(fieldName,fieldValue);
      }
    }
 catch (    Exception e) {
      processor.getStats().incrementErrors();
      debug("Error on setting document field %s=%s (cause=%s)",fieldName,fieldValue,e.toString());
    }
  }
  return doc;
}
