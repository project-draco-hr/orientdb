{
  stateLock.acquireReadLock();
  try {
    if (status == STATUS.OPEN)     return;
  }
  finally {
    stateLock.releaseReadLock();
  }
  stateLock.acquireWriteLock();
  try {
    if (status == STATUS.OPEN)     return;
    if (!exists())     throw new OStorageException("Cannot open the storage '" + name + "' because it does not exist in path: "+ url);
    configuration.load(iProperties);
    componentsFactory=new OCurrentStorageComponentsFactory(configuration);
    preOpenSteps();
    try {
      performanceStatisticManager.registerMBean(name,id);
    }
 catch (    Exception e) {
      OLogManager.instance().error(this,"MBean for profiler cannot be registered.");
    }
    initWalAndDiskCache();
    atomicOperationsManager=new OAtomicOperationsManager(this);
    try {
      atomicOperationsManager.registerMBean();
    }
 catch (    Exception e) {
      OLogManager.instance().error(this,"MBean for atomic operations manager cannot be registered",e);
    }
    recoverIfNeeded();
    openClusters();
    openIndexes();
    if (OGlobalConfiguration.STORAGE_MAKE_FULL_CHECKPOINT_AFTER_OPEN.getValueAsBoolean())     makeFullCheckpoint();
    writeCache.startFuzzyCheckpoints();
    status=STATUS.OPEN;
    readCache.loadCacheState(writeCache);
  }
 catch (  Exception e) {
    for (    OCluster c : clusters) {
      try {
        c.close(false);
      }
 catch (      IOException e1) {
        OLogManager.instance().error(this,"Cannot close cluster after exception on open");
      }
    }
    try {
      status=STATUS.OPEN;
      close(true,false);
    }
 catch (    RuntimeException re) {
      OLogManager.instance().error(this,"Error during storage close",e);
    }
    status=STATUS.CLOSED;
    throw OException.wrapException(new OStorageException("Cannot open local storage '" + url + "' with mode="+ mode),e);
  }
 finally {
    stateLock.releaseWriteLock();
  }
}
