{
  previousLevel1CacheEnabled=iDatabase.getDatabaseOwner().getLevel1Cache().isEnabled();
  iDatabase.getDatabaseOwner().getLevel1Cache().setEnable(false);
  previousLevel2CacheEnabled=iDatabase.getDatabaseOwner().getLevel2Cache().isEnabled();
  iDatabase.getDatabaseOwner().getLevel2Cache().setEnable(false);
  ODatabaseComplex<?> ownerDb=iDatabase.getDatabaseOwner();
  if (ownerDb instanceof ODatabaseRecord) {
    previousRetainRecords=((ODatabaseRecord)ownerDb).isRetainRecords();
    ((ODatabaseRecord)ownerDb).setRetainRecords(false);
  }
  while (ownerDb.getDatabaseOwner() != ownerDb)   ownerDb=ownerDb.getDatabaseOwner();
  if (ownerDb instanceof ODatabaseObject) {
    previousRetainObjects=((ODatabaseObject)ownerDb).isRetainObjects();
    ((ODatabaseObject)ownerDb).setRetainObjects(false);
  }
  removedHooks=new HashMap<ORecordHook,ORecordHook.HOOK_POSITION>();
  HashMap<ORecordHook,ORecordHook.HOOK_POSITION> hooks=new HashMap<ORecordHook,ORecordHook.HOOK_POSITION>(ownerDb.getHooks());
  for (  Map.Entry<ORecordHook,ORecordHook.HOOK_POSITION> hook : hooks.entrySet()) {
    if (!(hook.getKey() instanceof OClassIndexManager)) {
      removedHooks.put(hook.getKey(),hook.getValue());
      ownerDb.unregisterHook(hook.getKey());
    }
  }
}
