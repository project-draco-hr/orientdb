{
  if (record == null)   return;
  if (!iListener.requireFieldProcessing() && iFetchPlan == OFetchHelper.DEFAULT_FETCHPLAN)   return;
  Object fieldValue;
  iContext.onBeforeFetch(record);
  Set<String> toRemove=new HashSet<String>();
  for (  String fieldName : record.fieldNames()) {
    String fieldPath=!iFieldPathFromRoot.isEmpty() ? iFieldPathFromRoot + "." + fieldName : fieldName;
    int depthLevel;
    depthLevel=getDepthLevel(iFetchPlan,fieldPath,iCurrentLevel);
    if (depthLevel == -2) {
      toRemove.add(fieldName);
      continue;
    }
    if (iFieldDepthLevel > -1)     depthLevel=iFieldDepthLevel;
    fieldValue=record.rawField(fieldName);
    OType fieldType=record.fieldType(fieldName);
    boolean fetch=!iFormat.contains("shallow") && (!(fieldValue instanceof OIdentifiable) || depthLevel == -1 || iCurrentLevel <= depthLevel || (iFetchPlan != null && iFetchPlan.has(fieldPath,iCurrentLevel)));
    final boolean isEmbedded=isEmbedded(fieldValue);
    if (!fetch && isEmbedded && iContext.fetchEmbeddedDocuments())     fetch=true;
    if (iFormat.contains("shallow") || fieldValue == null || (!fetch && fieldValue instanceof OIdentifiable) || !(fieldValue instanceof OIdentifiable) && (!(fieldValue instanceof ORecordLazyMultiValue) || !((ORecordLazyMultiValue)fieldValue).rawIterator().hasNext() || !(((ORecordLazyMultiValue)fieldValue).rawIterator().next() instanceof OIdentifiable)) && (!(fieldValue.getClass().isArray()) || Array.getLength(fieldValue) == 0 || !(Array.get(fieldValue,0) instanceof OIdentifiable))&& !containsIdentifiers(fieldValue)) {
      iContext.onBeforeStandardField(fieldValue,fieldName,iUserObject,fieldType);
      iListener.processStandardField(record,fieldValue,fieldName,iContext,iUserObject,iFormat,fieldType);
      iContext.onAfterStandardField(fieldValue,fieldName,iUserObject,fieldType);
    }
 else {
      try {
        if (fetch) {
          final int nextLevel=isEmbedded ? iLevelFromRoot : iLevelFromRoot + 1;
          fetch(record,iUserObject,iFetchPlan,fieldValue,fieldName,iCurrentLevel,nextLevel,iFieldDepthLevel,parsedRecords,depthLevel,fieldPath,iListener,iContext);
        }
      }
 catch (      Exception e) {
        OLogManager.instance().error(null,"Fetching error on record %s",e,record.getIdentity());
      }
    }
  }
  for (  String fieldName : toRemove) {
    iListener.skipStandardField(record,fieldName,iContext,iUserObject,iFormat);
  }
  iContext.onAfterFetch(record);
}
