{
  closeBufferAndDeleteFile();
  File file=new File(storageLocal.getConfiguration().getDirectory());
  if (!file.exists())   file.mkdir();
  writeAheadLog=new ODiskWriteAheadLog(1024,-1,10 * 1024,100L * 1024 * 1024* 1024,storageLocal);
  final OStorageSegmentConfiguration segmentConfiguration=new OStorageSegmentConfiguration(storageLocal.getConfiguration(),"readWriteDiskCacheTest.tst",0);
  segmentConfiguration.fileType=OFileClassic.NAME;
  buffer=new OReadWriteDiskCache(4 * (8 + systemOffset + 2 * OWOWCache.PAGE_PADDING),2 * (8 + systemOffset + 2 * OWOWCache.PAGE_PADDING),8 + systemOffset,10000,-1,storageLocal,writeAheadLog,true,false);
  long fileId=buffer.openFile(fileName);
  OLogSequenceNumber lsnToFlush=null;
  for (int i=0; i < 8; i++) {
    OCacheEntry cacheEntry=buffer.load(fileId,i,false);
    OCachePointer dataPointer=cacheEntry.getCachePointer();
    dataPointer.acquireExclusiveLock();
    OLogSequenceNumber pageLSN=writeAheadLog.log(new WriteAheadLogTest.TestRecord(30,false));
    setLsn(dataPointer.getDataPointer(),pageLSN);
    if (i == 5)     lsnToFlush=pageLSN;
    cacheEntry.markDirty();
    dataPointer.releaseExclusiveLock();
    buffer.release(cacheEntry);
  }
  Assert.assertEquals(writeAheadLog.getFlushedLSN(),lsnToFlush);
}
