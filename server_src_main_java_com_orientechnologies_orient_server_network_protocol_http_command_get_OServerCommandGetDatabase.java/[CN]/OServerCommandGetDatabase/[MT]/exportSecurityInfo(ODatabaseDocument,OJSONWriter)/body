{
  json.beginCollection("users");
  for (  ODocument doc : db.getMetadata().getSecurity().getAllUsers()) {
    OUser user=new OUser(doc);
    json.beginObject();
    json.writeAttribute("name",user.getName());
    json.writeAttribute("roles",user.getRoles() != null ? Arrays.toString(user.getRoles().toArray()) : "null");
    json.endObject();
  }
  json.endCollection();
  json.beginCollection("roles");
  ORole role;
  for (  ODocument doc : db.getMetadata().getSecurity().getAllRoles()) {
    role=new ORole(doc);
    json.beginObject();
    json.writeAttribute("name",role.getName());
    json.writeAttribute("mode",role.getMode().toString());
    json.beginCollection("rules");
    if (role.getRules() != null) {
      for (      Map.Entry<String,Byte> rule : role.getRules().entrySet()) {
        json.beginObject();
        json.writeAttribute("name",rule.getKey());
        json.writeAttribute("create",role.allow(rule.getKey(),ORole.PERMISSION_CREATE));
        json.writeAttribute("read",role.allow(rule.getKey(),ORole.PERMISSION_READ));
        json.writeAttribute("update",role.allow(rule.getKey(),ORole.PERMISSION_UPDATE));
        json.writeAttribute("delete",role.allow(rule.getKey(),ORole.PERMISSION_DELETE));
        json.endObject();
      }
    }
    json.endCollection();
    json.endObject();
  }
  json.endCollection();
}
