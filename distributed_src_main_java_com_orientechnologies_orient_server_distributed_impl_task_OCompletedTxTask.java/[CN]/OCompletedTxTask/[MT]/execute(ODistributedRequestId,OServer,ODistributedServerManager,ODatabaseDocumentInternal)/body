{
  ODistributedServerLog.debug(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.IN,"%s transaction db=%s originalReqId=%s...",(success ? "Committing" : fixTasks.isEmpty() ? "Rolling back" : "Fixing"),database.getName(),requestId,requestId);
  ODatabaseRecordThreadLocal.INSTANCE.set(database);
  final ODistributedDatabase ddb=iManager.getMessageService().getDatabase(database.getName());
  if (ddb == null)   throw new ODatabaseException("Database '" + database.getName() + " is not available on server '"+ iManager.getLocalNodeName()+ "'");
  final ODistributedTxContext pRequest=ddb.popTxContext(requestId);
  try {
    if (success) {
      if (pRequest != null)       pRequest.commit();
 else {
        ODistributedServerLog.debug(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.IN,"Error on committing distributed transaction %s db=%s",requestId,database.getName());
        return Boolean.FALSE;
      }
    }
 else     if (fixTasks.isEmpty()) {
      if (pRequest != null)       pRequest.rollback(database);
 else {
        ODistributedServerLog.debug(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.IN,"Error on rolling back distributed transaction %s db=%s",requestId,database.getName());
        return Boolean.FALSE;
      }
    }
 else {
      if (pRequest != null)       pRequest.fix(database,fixTasks);
 else {
        ODistributedServerLog.debug(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.IN,"Error on fixing distributed transaction %s db=%s",requestId,database.getName());
        return Boolean.FALSE;
      }
    }
  }
  finally {
    if (pRequest != null)     pRequest.destroy();
  }
  return Boolean.TRUE;
}
