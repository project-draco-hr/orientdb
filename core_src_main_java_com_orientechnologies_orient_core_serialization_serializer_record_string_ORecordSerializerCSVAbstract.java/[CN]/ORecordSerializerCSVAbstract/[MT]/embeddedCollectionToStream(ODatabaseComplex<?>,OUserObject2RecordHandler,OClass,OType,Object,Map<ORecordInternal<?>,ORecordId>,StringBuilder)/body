{
  buffer.append(OStringSerializerHelper.COLLECTION_BEGIN);
  int size=iValue instanceof Collection<?> ? ((Collection<Object>)iValue).size() : Array.getLength(iValue);
  Iterator<Object> iterator=iValue instanceof Collection<?> ? ((Collection<Object>)iValue).iterator() : null;
  Object o;
  for (int i=0; i < size; ++i) {
    if (iValue instanceof Collection<?>)     o=iterator.next();
 else     o=Array.get(iValue,i);
    if (i > 0)     buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);
    if (o instanceof ORecord<?>)     buffer.append(OStringSerializerHelper.EMBEDDED);
    if (iLinkedClass != null) {
      ODocument record;
      if (o != null) {
        if (o instanceof ODocument)         record=(ODocument)o;
 else         record=OObjectSerializerHelper.toStream(o,new ODocument((ODatabaseRecord<?>)iDatabase,o.getClass().getSimpleName()),iDatabase instanceof ODatabaseObjectTx ? ((ODatabaseObjectTx)iDatabase).getEntityManager() : OEntityManagerInternal.INSTANCE,iLinkedClass,iObjHandler != null ? iObjHandler : new OUserObject2RecordHandler(){
          public Object getUserObjectByRecord(          ORecordInternal<?> iRecord,          final String iFetchPlan){
            return iRecord;
          }
          public ORecordInternal<?> getRecordByUserObject(          Object iPojo,          boolean iIsMandatory){
            return new ODocument(iLinkedClass);
          }
        }
);
        buffer.append(toString(record,null,iObjHandler,iMarshalledRecords));
      }
    }
 else {
      buffer.append(OStringSerializerHelper.fieldTypeToString(iLinkedType,o));
    }
    if (o instanceof ORecord<?>)     buffer.append(OStringSerializerHelper.EMBEDDED);
  }
  buffer.append(OStringSerializerHelper.COLLECTION_END);
}
