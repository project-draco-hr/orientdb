{
  iContent=iContent.trim();
  if (iContent.length() == 0)   return iRecord;
  final ODocument record=(ODocument)iRecord;
  int pos;
  final ODatabaseDocumentInternal database=ODatabaseRecordThreadLocal.INSTANCE.getIfDefined();
  final int posFirstValue=iContent.indexOf(OStringSerializerHelper.ENTRY_SEPARATOR);
  pos=iContent.indexOf(OStringSerializerHelper.CLASS_SEPARATOR);
  if (pos > -1 && (pos < posFirstValue || posFirstValue == -1)) {
    if ((record.getIdentity().getClusterId() < 0 || database == null || !database.getStorageVersions().classesAreDetectedByClusterId()))     record.setClassNameIfExists(iContent.substring(0,pos));
    iContent=iContent.substring(pos + 1);
  }
 else   record.setClassNameIfExists(null);
  if (iFields != null && iFields.length == 1 && iFields[0].equals("@class"))   return iRecord;
  final List<String> fields=OStringSerializerHelper.smartSplit(iContent,OStringSerializerHelper.RECORD_SEPARATOR,true,true);
  String fieldName=null;
  String fieldValue;
  OType type;
  OClass linkedClass;
  OType linkedType;
  OProperty prop;
  final Set<String> fieldSet;
  if (iFields != null && iFields.length > 0) {
    fieldSet=new HashSet<String>(iFields.length);
    for (    String f : iFields)     fieldSet.add(f);
  }
 else   fieldSet=null;
  for (  String fieldEntry : fields) {
    fieldEntry=fieldEntry.trim();
    boolean uncertainType=false;
    try {
      pos=fieldEntry.indexOf(FIELD_VALUE_SEPARATOR);
      if (pos > -1) {
        fieldName=fieldEntry.substring(0,pos);
        if (fieldSet != null && !fieldSet.contains(fieldName))         continue;
        if (record.containsField(fieldName))         continue;
        fieldValue=fieldEntry.length() > pos + 1 ? fieldEntry.substring(pos + 1) : null;
        boolean setFieldType=false;
        prop=ODocumentInternal.getImmutableSchemaClass(record) != null ? ODocumentInternal.getImmutableSchemaClass(record).getProperty(fieldName) : null;
        if (prop != null && prop.getType() != OType.ANY) {
          type=prop.getType();
          linkedClass=prop.getLinkedClass();
          linkedType=prop.getLinkedType();
        }
 else {
          type=record.fieldType(fieldName);
          if (type == OType.ANY)           type=null;
          if (type != null)           setFieldType=true;
          linkedClass=null;
          linkedType=null;
          if (fieldValue != null && type == null) {
            if (fieldValue.length() > 1 && fieldValue.charAt(0) == '"' && fieldValue.charAt(fieldValue.length() - 1) == '"') {
              type=OType.STRING;
            }
 else             if (fieldValue.startsWith(OStringSerializerHelper.LINKSET_PREFIX)) {
              type=OType.LINKSET;
            }
 else             if (fieldValue.charAt(0) == OStringSerializerHelper.LIST_BEGIN && fieldValue.charAt(fieldValue.length() - 1) == OStringSerializerHelper.LIST_END || fieldValue.charAt(0) == OStringSerializerHelper.SET_BEGIN && fieldValue.charAt(fieldValue.length() - 1) == OStringSerializerHelper.SET_END) {
              type=fieldValue.charAt(0) == OStringSerializerHelper.LIST_BEGIN ? OType.EMBEDDEDLIST : OType.EMBEDDEDSET;
              final String value=fieldValue.substring(1,fieldValue.length() - 1);
              if (!value.isEmpty()) {
                if (value.charAt(0) == OStringSerializerHelper.LINK) {
                  int max=value.length();
                  boolean allLinks=true;
                  boolean checkRid=true;
                  for (int i=0; i < max; ++i) {
                    char c=value.charAt(i);
                    if (checkRid) {
                      if (c != '#') {
                        allLinks=false;
                        break;
                      }
                      checkRid=false;
                    }
 else                     if (c == ',')                     checkRid=true;
                  }
                  if (allLinks) {
                    type=fieldValue.charAt(0) == OStringSerializerHelper.LIST_BEGIN ? OType.LINKLIST : OType.LINKSET;
                    linkedType=OType.LINK;
                  }
                }
 else                 if (value.charAt(0) == OStringSerializerHelper.EMBEDDED_BEGIN) {
                  linkedType=OType.EMBEDDED;
                }
 else                 if (value.charAt(0) == OStringSerializerHelper.CUSTOM_TYPE) {
                  linkedType=OType.CUSTOM;
                }
 else                 if (Character.isDigit(value.charAt(0)) || value.charAt(0) == '+' || value.charAt(0) == '-') {
                  String[] items=value.split(",");
                  linkedType=getType(items[0]);
                }
 else                 if (value.charAt(0) == '\'' || value.charAt(0) == '"')                 linkedType=OType.STRING;
              }
 else               uncertainType=true;
            }
 else             if (fieldValue.charAt(0) == OStringSerializerHelper.MAP_BEGIN && fieldValue.charAt(fieldValue.length() - 1) == OStringSerializerHelper.MAP_END) {
              type=OType.EMBEDDEDMAP;
            }
 else             if (fieldValue.charAt(0) == OStringSerializerHelper.LINK)             type=OType.LINK;
 else             if (fieldValue.charAt(0) == OStringSerializerHelper.EMBEDDED_BEGIN) {
              if (fieldValue.startsWith("(ORIDs"))               type=OType.LINKSET;
 else               type=OType.EMBEDDED;
            }
 else             if (fieldValue.charAt(0) == OStringSerializerHelper.BAG_BEGIN) {
              type=OType.LINKBAG;
            }
 else             if (fieldValue.equals("true") || fieldValue.equals("false"))             type=OType.BOOLEAN;
 else             type=getType(fieldValue);
          }
        }
        record.field(fieldName,fieldFromStream(iRecord,type,linkedClass,linkedType,fieldName,fieldValue),type);
        if (uncertainType)         record.setFieldType(fieldName,null);
      }
    }
 catch (    Exception e) {
      throw OException.wrapException(new OSerializationException("Error on unmarshalling field '" + fieldName + "' in record "+ iRecord.getIdentity()+ " with value: "+ fieldEntry),e);
    }
  }
  return iRecord;
}
