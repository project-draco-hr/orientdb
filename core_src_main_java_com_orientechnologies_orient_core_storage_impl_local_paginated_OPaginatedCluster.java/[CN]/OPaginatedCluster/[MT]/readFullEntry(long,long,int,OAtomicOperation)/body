{
  if (getFilledUpTo(atomicOperation,fileId) <= pageIndex)   return null;
  final List<byte[]> recordChunks=new ArrayList<byte[]>();
  int contentSize=0;
  long nextPagePointer=-1;
  boolean firstEntry=true;
  do {
    OCacheEntry cacheEntry=loadPage(atomicOperation,fileId,pageIndex,false);
    try {
      final OClusterPage localPage=new OClusterPage(cacheEntry,false,getChangesTree(atomicOperation,cacheEntry));
      if (localPage.isDeleted(recordPosition)) {
        if (recordChunks.isEmpty())         return null;
 else         throw new OStorageException("Content of record " + new ORecordId(id,clusterPosition) + " was broken.");
      }
      byte[] content=localPage.getRecordBinaryValue(recordPosition,0,localPage.getRecordSize(recordPosition));
      if (firstEntry && content[content.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] == 0)       return null;
      recordChunks.add(content);
      nextPagePointer=OLongSerializer.INSTANCE.deserializeNative(content,content.length - OLongSerializer.LONG_SIZE);
      contentSize+=content.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE;
      firstEntry=false;
    }
  finally {
      releasePage(atomicOperation,cacheEntry);
    }
    pageIndex=getPageIndex(nextPagePointer);
    recordPosition=getRecordPosition(nextPagePointer);
  }
 while (nextPagePointer >= 0);
  byte[] fullContent;
  if (recordChunks.size() == 1)   fullContent=recordChunks.get(0);
 else {
    fullContent=new byte[contentSize + OLongSerializer.LONG_SIZE + OByteSerializer.BYTE_SIZE];
    int fullContentPosition=0;
    for (    byte[] recordChuck : recordChunks) {
      System.arraycopy(recordChuck,0,fullContent,fullContentPosition,recordChuck.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE);
      fullContentPosition+=recordChuck.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE;
    }
  }
  return fullContent;
}
