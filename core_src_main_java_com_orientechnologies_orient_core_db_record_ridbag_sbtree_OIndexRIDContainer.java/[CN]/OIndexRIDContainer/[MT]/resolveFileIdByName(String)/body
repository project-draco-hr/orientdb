{
  final OAbstractPaginatedStorage storage=(OAbstractPaginatedStorage)ODatabaseRecordThreadLocal.INSTANCE.get().getStorage().getUnderlying();
  try {
    final OAtomicOperation atomicOperation=storage.getAtomicOperationsManager().startAtomicOperation(fileName);
    final OReadCache readCache=storage.getReadCache();
    final OWriteCache writeCache=storage.getWriteCache();
    if (atomicOperation == null) {
      if (writeCache.exists(fileName))       return readCache.openFile(fileName,writeCache);
      return readCache.addFile(fileName,writeCache);
    }
 else {
      long fileId;
      if (atomicOperation.isFileExists(fileName))       fileId=atomicOperation.openFile(fileName);
 else       fileId=atomicOperation.addFile(fileName);
      storage.getAtomicOperationsManager().endAtomicOperation(false,null);
      return fileId;
    }
  }
 catch (  IOException e) {
    try {
      storage.getAtomicOperationsManager().endAtomicOperation(true,e);
    }
 catch (    IOException ioe) {
      throw new OSBTreeException("Error of rollback of atomic operation");
    }
    throw new OSBTreeException("Error creation of sbtree with name " + fileName,e);
  }
}
