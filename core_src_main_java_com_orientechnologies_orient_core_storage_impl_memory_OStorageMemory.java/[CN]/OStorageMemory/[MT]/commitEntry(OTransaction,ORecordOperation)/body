{
  final ORecordId rid=(ORecordId)txEntry.getRecord().getIdentity();
  final OCluster cluster=txEntry.clusterName != null ? getClusterByName(txEntry.clusterName) : getClusterById(rid.clusterId);
  rid.clusterId=cluster.getId();
  if (txEntry.getRecord() instanceof OTxListener)   ((OTxListener)txEntry.getRecord()).onEvent(txEntry,OTxListener.EVENT.BEFORE_COMMIT);
switch (txEntry.type) {
case ORecordOperation.LOADED:
    break;
case ORecordOperation.CREATED:
  if (rid.isNew()) {
    byte[] stream=txEntry.getRecord().toStream();
    if (rid.isNew()) {
      if (iTx.getDatabase().callbackHooks(ORecordHook.TYPE.BEFORE_CREATE,txEntry.getRecord()))       stream=txEntry.getRecord().toStream();
      createRecord(rid,stream,txEntry.getRecord().getRecordType(),0,null);
      iTx.getDatabase().callbackHooks(ORecordHook.TYPE.AFTER_CREATE,txEntry.getRecord());
    }
 else {
      txEntry.getRecord().setVersion(updateRecord(rid,stream,txEntry.getRecord().getVersion(),txEntry.getRecord().getRecordType(),0,null));
    }
  }
break;
case ORecordOperation.UPDATED:
byte[] stream=txEntry.getRecord().toStream();
if (iTx.getDatabase().callbackHooks(ORecordHook.TYPE.BEFORE_UPDATE,txEntry.getRecord())) stream=txEntry.getRecord().toStream();
txEntry.getRecord().setVersion(updateRecord(rid,stream,txEntry.getRecord().getVersion(),txEntry.getRecord().getRecordType(),0,null));
iTx.getDatabase().callbackHooks(ORecordHook.TYPE.AFTER_UPDATE,txEntry.getRecord());
break;
case ORecordOperation.DELETED:
iTx.getDatabase().callbackHooks(ORecordHook.TYPE.BEFORE_DELETE,txEntry.getRecord());
deleteRecord(rid,txEntry.getRecord().getVersion(),0,null);
iTx.getDatabase().callbackHooks(ORecordHook.TYPE.AFTER_DELETE,txEntry.getRecord());
break;
}
txEntry.getRecord().unsetDirty();
if (txEntry.getRecord() instanceof OTxListener) ((OTxListener)txEntry.getRecord()).onEvent(txEntry,OTxListener.EVENT.AFTER_COMMIT);
}
