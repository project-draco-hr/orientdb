{
  super.begin();
  try {
    setUsingLog(channel.readByte() == 1);
    byte lastTxStatus;
    for (lastTxStatus=channel.readByte(); lastTxStatus == 1; lastTxStatus=channel.readByte()) {
      final byte recordStatus=channel.readByte();
      final ORecordId rid=channel.readRID();
      final byte recordType=channel.readByte();
      final ORecordOperation entry;
switch (recordStatus) {
case ORecordOperation.CREATED:
        entry=new OTransactionEntryProxy(recordType);
      entry.type=recordStatus;
    entry.getRecord().fill(rid,0,channel.readBytes(),true);
  createdRecords.put(rid.copy(),entry.getRecord());
break;
case ORecordOperation.UPDATED:
final ORecordInternal<?> newRecord=Orient.instance().getRecordFactoryManager().newInstance(recordType);
newRecord.fill(rid,channel.readInt(),channel.readBytes(),true);
final ORecordInternal<?> currentRecord;
if (newRecord.getRecordType() == ODocument.RECORD_TYPE) {
currentRecord=getDatabase().load(rid);
if (currentRecord == null) throw new ORecordNotFoundException(rid.toString());
if (currentRecord.getRecordType() == ODocument.RECORD_TYPE) ((ODocument)currentRecord).merge((ODocument)newRecord,false,false);
}
 else currentRecord=newRecord;
currentRecord.setVersion(newRecord.getVersion());
entry=new ORecordOperation(currentRecord,recordStatus);
updatedRecords.put(rid,currentRecord);
break;
case ORecordOperation.DELETED:
entry=new OTransactionEntryProxy(recordType);
entry.type=recordStatus;
entry.getRecord().fill(rid,channel.readInt(),null,false);
break;
default :
throw new OTransactionException("Unrecognized tx command: " + recordStatus);
}
recordEntries.put(entry.getRecord().getIdentity(),entry);
}
if (lastTxStatus == -1) throw new OTransactionException("Transaction aborted by the client");
remoteIndexEntries=new ODocument(channel.readBytes());
for (Entry<ORID,ORecordOperation> entry : recordEntries.entrySet()) {
addRecord(entry.getValue().getRecord(),entry.getValue().type,null);
}
for (ORecord<?> record : createdRecords.values()) unmarshallRecord(record);
for (ORecord<?> record : updatedRecords.values()) unmarshallRecord(record);
}
 catch (IOException e) {
rollback();
throw new OSerializationException("Cannot read transaction record from the network. Transaction aborted",e);
}
}
