{
  final OServerUserConfiguration replicatorUser=manager.getServerInstance().getUser(ODistributedAbstractPlugin.REPLICATOR_USER);
  database=(ODatabaseDocumentTx)manager.getServerInstance().openDatabase("document",databaseName,replicatorUser.name,replicatorUser.password);
  final String queueName=getRequestQueueName(manager.getLocalNodeName(),iDatabaseName);
  final IQueue<ODistributedRequest> requestQueue=getQueue(queueName);
  if (ODistributedServerLog.isDebugEnabled())   ODistributedServerLog.debug(this,getLocalNodeNameAndThread(),null,DIRECTION.NONE,"listening for incoming requests on queue: %s",queueName);
  final IMap<Object,Object> undoMap=restoreMessagesBeforeFailure(iDatabaseName);
  checkForPendingMessages(requestQueue,queueName);
  new Thread(new Runnable(){
    @Override public void run(){
      while (!Thread.interrupted()) {
        String senderNode=null;
        ODistributedRequest message=null;
        try {
          message=requestQueue.take();
          undoMap.put(iDatabaseName,message);
          if (message != null) {
            senderNode=message.getSenderNodeName();
            onMessage(message);
          }
          undoMap.remove(iDatabaseName);
        }
 catch (        InterruptedException e) {
          Thread.interrupted();
          break;
        }
catch (        Throwable e) {
          ODistributedServerLog.error(this,getLocalNodeNameAndThread(),senderNode,DIRECTION.IN,"error on reading distributed request: %s",e,message != null ? message.getPayload() : "-");
        }
      }
    }
  }
).start();
}
