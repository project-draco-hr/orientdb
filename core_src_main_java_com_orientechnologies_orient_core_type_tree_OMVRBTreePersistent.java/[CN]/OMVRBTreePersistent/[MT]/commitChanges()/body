{
  final long timer=PROFILER.startChrono();
  int totalCommitted=0;
  try {
    if (!recordsToCommit.isEmpty()) {
      final List<OMVRBTreeEntryPersistent<K,V>> tmp=new ArrayList<OMVRBTreeEntryPersistent<K,V>>();
      while (recordsToCommit.iterator().hasNext()) {
        tmp.addAll(recordsToCommit);
        recordsToCommit.clear();
        for (        OMVRBTreeEntryPersistent<K,V> node : tmp)         if (node.dataProvider.isEntryDirty()) {
          boolean wasNew=node.dataProvider.getIdentity().isNew();
          node.save();
          if (debug)           System.out.printf("\nSaved %s tree node %s: parent %s, left %s, right %s",wasNew ? "new" : "",node.dataProvider.getIdentity(),node.dataProvider.getParent(),node.dataProvider.getLeft(),node.dataProvider.getRight());
        }
        totalCommitted+=tmp.size();
        tmp.clear();
      }
    }
    if (dataProvider.isDirty())     saveTreeNode();
  }
 catch (  IOException e) {
    OLogManager.instance().exception("Error on saving the tree",e,OStorageException.class);
  }
 finally {
    PROFILER.stopChrono(PROFILER.getProcessMetric("mvrbtree.commitChanges"),"Commit pending changes to a MVRBTree",timer);
  }
  return totalCommitted;
}
