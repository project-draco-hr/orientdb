{
  checkOpeness();
  checkIfActive();
  getMetadata().makeThreadLocalSchemaSnapshot();
  ORecordSerializationContext.pushContext();
  try {
    final Set<ORecord> records=new HashSet<ORecord>(iRids.size() > 0 ? iRids.size() : 1);
    if (iRids == null || iRids.isEmpty())     return records;
    final Set<ORecordId> rids=new HashSet<ORecordId>(iRids);
    for (Iterator<ORecordId> it=rids.iterator(); it.hasNext(); ) {
      final ORecordId rid=it.next();
      ORecord record=getTransaction().getRecord(rid);
      if (record == OTransactionRealAbstract.DELETED_RECORD) {
        it.remove();
        continue;
      }
      if (record == null && !ignoreCache)       record=getLocalCache().findRecord(rid);
      if (record != null) {
        records.add(record);
        it.remove();
      }
    }
    final List<OPair<ORecordId,ORawBuffer>> rawRecords=((OAbstractPaginatedStorage)storage).readRecords(rids);
    for (    OPair<ORecordId,ORawBuffer> entry : rawRecords) {
      final ORecord record=Orient.instance().getRecordFactoryManager().newInstance(entry.value.recordType);
      ORecordInternal.fill(record,entry.key,entry.value.version,entry.value.buffer,false);
      records.add(record);
    }
    return records;
  }
  finally {
    ORecordSerializationContext.pullContext();
    getMetadata().clearThreadLocalSchemaSnapshot();
  }
}
