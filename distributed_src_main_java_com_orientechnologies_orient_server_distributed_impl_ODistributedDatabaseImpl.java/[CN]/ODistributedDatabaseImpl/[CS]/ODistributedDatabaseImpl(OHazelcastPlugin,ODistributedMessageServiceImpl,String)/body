{
  this.manager=manager;
  this.msgService=msgService;
  this.databaseName=iDatabaseName;
  this.localNodeName=manager.getLocalNodeName();
  this.requestLock=manager.getHazelcastInstance().getLock(NODE_LOCK_PREFIX + iDatabaseName);
  startAcceptingRequests();
  checkLocalNodeInConfiguration();
  startTxTimeoutTimerTask();
  repairer=new OConflictResolverDatabaseRepairer(manager,databaseName);
  Orient.instance().getProfiler().registerHookValue("distributed.db." + databaseName + ".msgSent","Number of replication messages sent from current node",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return totalSentRequests.get();
    }
  }
,"distributed.db.*.msgSent");
  Orient.instance().getProfiler().registerHookValue("distributed.db." + databaseName + ".msgReceived","Number of replication messages received from external nodes",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return totalReceivedRequests.get();
    }
  }
,"distributed.db.*.msgReceived");
  Orient.instance().getProfiler().registerHookValue("distributed.db." + databaseName + ".activeContexts","Number of active distributed transactions",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return (long)activeTxContexts.size();
    }
  }
,"distributed.db.*.activeContexts");
  Orient.instance().getProfiler().registerHookValue("distributed.db." + databaseName + ".workerThreads","Number of worker threads",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return (long)workerThreads.size();
    }
  }
,"distributed.db.*.workerThreads");
  Orient.instance().getProfiler().registerHookValue("distributed.db." + databaseName + ".recordLocks","Number of record locked",OProfiler.METRIC_TYPE.COUNTER,new OAbstractProfiler.OProfilerHookValue(){
    @Override public Object getValue(){
      return (long)lockManager.size();
    }
  }
,"distributed.db.*.recordLocks");
}
