{
  OMatchesCondition jjtn000=new OMatchesCondition(JJTMATCHESCONDITION);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  Token token;
  try {
    jjtn000.expression=Expression();
    jj_consume_token(MATCHES);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING_LITERAL:
      token=jj_consume_token(STRING_LITERAL);
    jjtn000.right=token.image;
  break;
case CHARACTER_LITERAL:
token=jj_consume_token(CHARACTER_LITERAL);
jjtn000.right=token.image;
break;
case HOOK:
case COLON:
jjtn000.rightParam=InputParameter();
break;
default :
jj_la1[186]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
