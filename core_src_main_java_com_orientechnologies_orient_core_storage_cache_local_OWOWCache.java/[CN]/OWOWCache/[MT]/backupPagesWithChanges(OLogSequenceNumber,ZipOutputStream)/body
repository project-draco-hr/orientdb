{
  filesLock.acquireWriteLock();
  try {
    OLogSequenceNumber lastLsn=changeLsn;
    for (    Map.Entry<Integer,OFileClassic> entry : files.entrySet()) {
      final int fileId=entry.getKey();
      final OFileClassic fileClassic=entry.getValue();
      flush(fileId);
      final boolean closeFile=!fileClassic.isOpen();
      final long filledUpTo=fileClassic.getFileSize();
      final ZipEntry zipEntry=new ZipEntry(fileClassic.getName());
      stream.putNextEntry(zipEntry);
      for (long pos=0; pos < filledUpTo; pos+=pageSize) {
        final byte[] data=new byte[pageSize + OLongSerializer.LONG_SIZE];
        fileClassic.read(pos,data,pageSize,OLongSerializer.LONG_SIZE);
        final OLogSequenceNumber pageLsn=ODurablePage.getLogSequenceNumber(OLongSerializer.LONG_SIZE,data);
        if (changeLsn == null || pageLsn.compareTo(changeLsn) > 0) {
          OLongSerializer.INSTANCE.serializeNative(pos,data,0);
          stream.write(data);
          if (lastLsn == null || pageLsn.compareTo(lastLsn) > 0) {
            lastLsn=pageLsn;
          }
        }
      }
      if (closeFile)       fileClassic.close();
      stream.closeEntry();
    }
    return lastLsn;
  }
  finally {
    filesLock.releaseWriteLock();
  }
}
