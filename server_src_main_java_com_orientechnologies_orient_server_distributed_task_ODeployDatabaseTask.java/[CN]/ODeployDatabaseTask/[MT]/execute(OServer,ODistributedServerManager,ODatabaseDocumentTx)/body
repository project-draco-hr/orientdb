{
  if (!getNodeSource().equals(iManager.getLocalNodeName())) {
    final String databaseName=database.getName();
    final Lock lock=iManager.getLock(databaseName);
    if (lock.tryLock()) {
      try {
        ODistributedServerLog.warn(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.OUT,"deploying database %s...",databaseName);
        final File f=new File(Orient.getTempPath() + "/backup_" + database.getName()+ ".zip");
        if (f.exists())         f.delete();
 else         f.getParentFile().mkdirs();
        f.createNewFile();
        ODistributedServerLog.info(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.OUT,"creating backup of database '%s' in directory: %s...",databaseName,f.getAbsolutePath());
        FileOutputStream fileOutputStream=new FileOutputStream(f);
        try {
          database.backup(fileOutputStream,null,null,this,OGlobalConfiguration.DISTRIBUTED_DEPLOYDB_TASK_COMPRESSION.getValueAsInteger(),CHUNK_MAX_SIZE);
          fileSize=f.length();
          ODistributedServerLog.info(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.OUT,"sending the compressed database '%s' over the NETWORK to node '%s', size=%s...",databaseName,getNodeSource(),OFileUtils.getSizeAsString(fileSize));
          final ODistributedDatabaseChunk chunk=new ODistributedDatabaseChunk(f,0,CHUNK_MAX_SIZE);
          ODistributedServerLog.info(this,iManager.getLocalNodeName(),getNodeSource(),ODistributedServerLog.DIRECTION.OUT,"- transferring chunk #%d offset=%d size=%s...",1,0,OFileUtils.getSizeAsNumber(chunk.buffer.length));
          return chunk;
        }
  finally {
          fileOutputStream.close();
        }
      }
  finally {
        lock.unlock();
      }
    }
 else     ODistributedServerLog.debug(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.NONE,"skip deploying database %s because another node is doing it",databaseName);
  }
 else   ODistributedServerLog.debug(this,iManager.getLocalNodeName(),getNodeSource(),DIRECTION.NONE,"skip deploying database from the same node");
  return Boolean.FALSE;
}
