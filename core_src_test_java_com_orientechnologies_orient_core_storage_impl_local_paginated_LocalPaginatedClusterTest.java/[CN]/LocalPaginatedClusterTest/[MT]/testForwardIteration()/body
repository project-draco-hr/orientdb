{
  final int records=10000;
  long seed=System.currentTimeMillis();
  Random mersenneTwisterFast=new Random(seed);
  System.out.println("testForwardIteration seed : " + seed);
  NavigableMap<Long,byte[]> positionRecordMap=new TreeMap<Long,byte[]>();
  int recordVersion=0;
  recordVersion++;
  recordVersion++;
  for (int i=0; i < records; i++) {
    int recordSize=mersenneTwisterFast.nextInt(2 * OClusterPage.MAX_RECORD_SIZE) + 1;
    byte[] record=new byte[recordSize];
    mersenneTwisterFast.nextBytes(record);
    final OPhysicalPosition physicalPosition=paginatedCluster.createRecord(record,recordVersion,(byte)2);
    positionRecordMap.put(physicalPosition.clusterPosition,record);
  }
  Iterator<Long> positionIterator=positionRecordMap.keySet().iterator();
  while (positionIterator.hasNext()) {
    long clusterPosition=positionIterator.next();
    if (mersenneTwisterFast.nextBoolean()) {
      Assert.assertTrue(paginatedCluster.deleteRecord(clusterPosition));
      positionIterator.remove();
    }
  }
  OPhysicalPosition physicalPosition=new OPhysicalPosition();
  physicalPosition.clusterPosition=0;
  OPhysicalPosition[] positions=paginatedCluster.ceilingPositions(physicalPosition);
  Assert.assertTrue(positions.length > 0);
  int counter=0;
  for (  long testedPosition : positionRecordMap.keySet()) {
    Assert.assertTrue(positions.length > 0);
    Assert.assertEquals(positions[0].clusterPosition,testedPosition);
    OPhysicalPosition positionToFind=positions[0];
    positions=paginatedCluster.higherPositions(positionToFind);
    counter++;
  }
  Assert.assertEquals(paginatedCluster.getEntries(),counter);
  Assert.assertEquals(paginatedCluster.getFirstPosition(),(long)positionRecordMap.firstKey());
  Assert.assertEquals(paginatedCluster.getLastPosition(),(long)positionRecordMap.lastKey());
}
