{
  final OStoragePerformanceStatistic storagePerformanceStatistic=new OStoragePerformanceStatistic(1024,"test",1,new OStoragePerformanceStatistic.NanoTimer(){
    private long counter=0;
    @Override public long getNano(){
      return counter+=100;
    }
  }
);
  Assert.assertFalse(storagePerformanceStatistic.isMeasurementEnabled());
  Assert.assertEquals(storagePerformanceStatistic.getReadSpeedFromCacheInPages(),-1);
  Assert.assertEquals(storagePerformanceStatistic.getReadSpeedFromCacheInMB(),-1);
  Assert.assertEquals(storagePerformanceStatistic.getAmountOfPagesReadFromCache(),0);
  storagePerformanceStatistic.startMeasurement();
  storagePerformanceStatistic.startCommitTimer();
  for (int i=0; i < 100; i++) {
    storagePerformanceStatistic.startPageReadFromCacheTimer();
    storagePerformanceStatistic.stopPageReadFromCacheTimer();
  }
  storagePerformanceStatistic.stopCommitTimer();
  Thread.sleep(2000);
  Assert.assertEquals(storagePerformanceStatistic.getReadSpeedFromCacheInPages(),10000000);
  Assert.assertEquals(storagePerformanceStatistic.getReadSpeedFromCacheInMB(),10000000 / 1024);
  Assert.assertEquals(storagePerformanceStatistic.getAmountOfPagesReadFromCache(),100);
  storagePerformanceStatistic.stopMeasurement();
  for (int i=0; i < 100; i++) {
    storagePerformanceStatistic.startPageReadFromCacheTimer();
    storagePerformanceStatistic.stopPageReadFromCacheTimer();
  }
  Thread.sleep(2000);
  Assert.assertEquals(storagePerformanceStatistic.getReadSpeedFromCacheInPages(),10000000);
  Assert.assertEquals(storagePerformanceStatistic.getReadSpeedFromCacheInMB(),10000000 / 1024);
  Assert.assertEquals(storagePerformanceStatistic.getAmountOfPagesReadFromCache(),100);
  Assert.assertFalse(storagePerformanceStatistic.isMeasurementEnabled());
}
