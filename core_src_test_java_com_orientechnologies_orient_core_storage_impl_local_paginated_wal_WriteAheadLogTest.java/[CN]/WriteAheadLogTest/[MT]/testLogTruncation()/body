{
  writeAheadLog.close();
  OLocalPaginatedStorage paginatedStorage=mock(OLocalPaginatedStorage.class);
  when(paginatedStorage.getName()).thenReturn("WriteAheadLogTest");
  when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());
  writeAheadLog=new OWriteAheadLog(2,-1,2 * OWALPage.PAGE_SIZE,4 * OWALPage.PAGE_SIZE,paginatedStorage);
  List<OWALRecord> writtenRecords=new ArrayList<OWALRecord>();
  long seed=System.currentTimeMillis();
  System.out.println("testLogTruncation seed " + seed);
  Random rnd=new Random(seed);
  long logSize=writeAheadLog.size() + 1;
  long prevLogSize=0;
  int firstSegmentIndex=-1;
  int counter=0;
  OLogSequenceNumber end=null;
  while (logSize > prevLogSize) {
    int contentSize=rnd.nextInt(OWALPage.PAGE_SIZE - 128) + 128;
    OWALRecord walRecord=new TestRecord(contentSize,false);
    end=writeAheadLog.log(walRecord);
    writtenRecords.add(walRecord);
    prevLogSize=logSize;
    logSize=writeAheadLog.size();
    if (firstSegmentIndex < 0 && logSize > 2 * OWALPage.PAGE_SIZE)     firstSegmentIndex=counter;
    counter++;
  }
  Assert.assertEquals(writeAheadLog.end(),end);
  assertLogContent(writeAheadLog,writtenRecords.subList(firstSegmentIndex + 1,writtenRecords.size()));
  Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstSegmentIndex).getLsn()));
}
