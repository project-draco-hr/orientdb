{
  final ODocument doc=new ODocument();
  doc.unsetDirty();
  Assert.assertFalse(doc.isDirty());
  final OTrackedSet<String> trackedSet=new OTrackedSet<String>(doc);
  trackedSet.add("value1");
  trackedSet.add("value2");
  trackedSet.add("value3");
  doc.unsetDirty();
  Assert.assertFalse(doc.isDirty());
  final Set<OMultiValueChangeEvent<String,String>> firedEvents=new HashSet<OMultiValueChangeEvent<String,String>>();
  firedEvents.add(new OMultiValueChangeEvent<String,String>(OMultiValueChangeEvent.OChangeType.REMOVE,"value1",null,"value1"));
  firedEvents.add(new OMultiValueChangeEvent<String,String>(OMultiValueChangeEvent.OChangeType.REMOVE,"value2",null,"value2"));
  firedEvents.add(new OMultiValueChangeEvent<String,String>(OMultiValueChangeEvent.OChangeType.REMOVE,"value3",null,"value3"));
  final ORef<Boolean> changed=new ORef<Boolean>(false);
  trackedSet.addChangeListener(new OMultiValueChangeListener<String,String>(){
    public void onAfterRecordChanged(    final OMultiValueChangeEvent<String,String> event){
      if (!firedEvents.remove(event))       Assert.fail();
      changed.value=true;
    }
  }
);
  trackedSet.clear();
  Assert.assertEquals(firedEvents.size(),0);
  Assert.assertTrue(changed.value);
  Assert.assertTrue(doc.isDirty());
}
