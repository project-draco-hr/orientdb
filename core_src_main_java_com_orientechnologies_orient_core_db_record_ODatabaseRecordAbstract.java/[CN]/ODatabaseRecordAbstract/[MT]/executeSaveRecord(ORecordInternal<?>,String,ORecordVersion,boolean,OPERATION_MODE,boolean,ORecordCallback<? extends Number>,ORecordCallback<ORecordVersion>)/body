{
  checkOpeness();
  if (!record.isDirty())   return (RET)record;
  final ORecordId rid=(ORecordId)record.getIdentity();
  if (rid == null)   throw new ODatabaseException("Cannot create record because it has no identity. Probably is not a regular record or contains projections of fields rather than a full record");
  setCurrentDatabaseinThreadLocal();
  final Set<OIndex<?>> lockedIndexes=new HashSet<OIndex<?>>();
  record.setInternalStatus(com.orientechnologies.orient.core.db.record.ORecordElement.STATUS.MARSHALLING);
  try {
    if (record instanceof ODocument)     acquireIndexModificationLock((ODocument)record,lockedIndexes);
    final boolean wasNew=iForceCreate || rid.isNew();
    if (wasNew && rid.clusterId == -1)     rid.clusterId=iClusterName != null ? getClusterIdByName(iClusterName) : getDefaultClusterId();
    byte[] stream;
    final OStorageOperationResult<ORecordVersion> operationResult;
    ORecordSerializationContext.pushContext();
    try {
      stream=record.toStream();
      final boolean isNew=iForceCreate || rid.isNew();
      if (isNew)       record.onBeforeIdentityChanged(rid);
 else       if (stream == null || stream.length == 0)       return (RET)record;
      if (isNew && rid.clusterId < 0)       rid.clusterId=iClusterName != null ? getClusterIdByName(iClusterName) : getDefaultClusterId();
      if (rid.clusterId > -1 && iClusterName == null)       iClusterName=getClusterNameById(rid.clusterId);
      checkRecordClass(record,iClusterName,rid,isNew);
      final int permission;
      if (wasNew)       permission=ORole.PERMISSION_CREATE;
 else       permission=ORole.PERMISSION_UPDATE;
      checkSecurity(ODatabaseSecurityResources.CLUSTER,permission,iClusterName);
      if (stream != null && stream.length > 0) {
        if (iCallTriggers) {
          final TYPE triggerType=wasNew ? TYPE.BEFORE_CREATE : TYPE.BEFORE_UPDATE;
          final RESULT hookResult=callbackHooks(triggerType,record);
          if (hookResult == RESULT.RECORD_CHANGED)           stream=updateStream(record);
 else           if (hookResult == RESULT.SKIP_IO)           return (RET)record;
        }
      }
      if (!record.isDirty())       return (RET)record;
      final ORecordVersion realVersion=!mvcc || iVersion.isUntracked() ? OVersionFactory.instance().createUntrackedVersion() : record.getRecordVersion();
      final int dataSegmentId=dataSegmentStrategy.assignDataSegmentId(this,record);
      try {
        operationResult=underlying.save(dataSegmentId,rid,stream == null ? new byte[0] : stream,realVersion,record.getRecordType(),iMode.ordinal(),iForceCreate,iRecordCreatedCallback,iRecordUpdatedCallback);
        final ORecordVersion version=operationResult.getResult();
        if (isNew) {
          ((ORecordId)record.getIdentity()).copyFrom(rid);
          record.onAfterIdentityChanged(record);
        }
        record.fill(rid,version,stream,stream == null || stream.length == 0);
        if (iCallTriggers && stream != null && stream.length > 0) {
          if (!operationResult.isMoved()) {
            callbackHooks(wasNew ? TYPE.AFTER_CREATE : TYPE.AFTER_UPDATE,record);
          }
 else {
            callbackHooks(wasNew ? TYPE.CREATE_REPLICATED : TYPE.UPDATE_REPLICATED,record);
          }
        }
      }
 catch (      Throwable t) {
        if (iCallTriggers && stream != null && stream.length > 0)         callbackHooks(wasNew ? TYPE.CREATE_FAILED : TYPE.UPDATE_FAILED,record);
        throw t;
      }
    }
  finally {
      ORecordSerializationContext.pullContext();
    }
    if (stream != null && stream.length > 0 && !operationResult.isMoved())     getLocalCache().updateRecord(record);
  }
 catch (  OException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new ODatabaseException("Error on saving record in cluster #" + record.getIdentity().getClusterId(),t);
  }
 finally {
    releaseIndexModificationLock(lockedIndexes);
    record.setInternalStatus(com.orientechnologies.orient.core.db.record.ORecordElement.STATUS.LOADED);
  }
  return (RET)record;
}
