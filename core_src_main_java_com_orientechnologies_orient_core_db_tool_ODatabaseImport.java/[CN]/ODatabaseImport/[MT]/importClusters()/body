{
  listener.onMessage("\nImporting clusters...");
  long total=0;
  jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);
  boolean makeFullCheckPointAfterClusterCreation=false;
  if (database.getStorage() instanceof OLocalPaginatedStorage) {
    makeFullCheckPointAfterClusterCreation=((OLocalPaginatedStorage)database.getStorage()).isMakeFullCheckPointAfterClusterCreate();
    ((OLocalPaginatedStorage)database.getStorage()).disableFullCheckPointAfterClusterCreate();
  }
  boolean recreateManualIndex=false;
  if (exporterVersion <= 4) {
    removeDefaultClusters();
    recreateManualIndex=true;
  }
  final Set<String> indexesToRebuild=new HashSet<String>();
  @SuppressWarnings("unused") ORecordId rid=null;
  while (jsonReader.lastChar() != ']') {
    jsonReader.readNext(OJSONReader.BEGIN_OBJECT);
    String name=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"name\"").readString(OJSONReader.COMMA_SEPARATOR);
    if (name.length() == 0)     name=null;
    if (name != null)     if (includeClusters != null) {
      if (!includeClusters.contains(name)) {
        jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
        continue;
      }
    }
 else     if (excludeClusters != null) {
      if (excludeClusters.contains(name)) {
        jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
        continue;
      }
    }
    int id=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"id\"").readInteger(OJSONReader.COMMA_SEPARATOR);
    String type=jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"type\"").readString(OJSONReader.NEXT_IN_OBJECT);
    if (jsonReader.lastChar() == ',') {
      rid=new ORecordId(jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"rid\"").readString(OJSONReader.NEXT_IN_OBJECT));
    }
 else     rid=null;
    listener.onMessage("\n- Creating cluster " + (name != null ? "'" + name + "'" : "NULL") + "...");
    int clusterId=name != null ? database.getClusterIdByName(name) : -1;
    if (clusterId == -1) {
      clusterId=database.addCluster(type,name,null,null);
    }
    if (clusterId != id) {
      if (database.countClusterElements(clusterId - 1) == 0) {
        listener.onMessage("Found previous version: migrating old clusters...");
        database.dropCluster(name,true);
        database.addCluster(type,"temp_" + clusterId,null,null);
        clusterId=database.addCluster(type,name,null,null);
      }
 else       throw new OConfigurationException("Imported cluster '" + name + "' has id="+ clusterId+ " different from the original: "+ id+ ". To continue the import drop the cluster '"+ database.getClusterNameById(clusterId - 1)+ "' that has "+ database.countClusterElements(clusterId - 1)+ " records");
    }
    if (name != null && !(name.equalsIgnoreCase(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME) || name.equalsIgnoreCase(OMetadataDefault.CLUSTER_INTERNAL_NAME) || name.equalsIgnoreCase(OMetadataDefault.CLUSTER_INDEX_NAME))) {
      database.command(new OCommandSQL("truncate cluster " + name)).execute();
      for (      OIndex existingIndex : database.getMetadata().getIndexManager().getIndexes()) {
        if (existingIndex.getClusters().contains(name)) {
          indexesToRebuild.add(existingIndex.getName());
        }
      }
    }
    listener.onMessage("\nOK, assigned id=" + clusterId);
    total++;
    jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
  }
  jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);
  listener.onMessage("\nRebuilding indexes of truncated clusters ...");
  for (  final String indexName : indexesToRebuild)   database.getMetadata().getIndexManager().getIndex(indexName).rebuild(new OProgressListener(){
    @Override public void onBegin(    Object iTask,    long iTotal){
      listener.onMessage("\nCluster content was truncated and index " + indexName + " will be rebuilt");
    }
    @Override public boolean onProgress(    Object iTask,    long iCounter,    float iPercent){
      listener.onMessage(String.format("\nIndex %s is rebuilt on %f percent",indexName,iPercent));
      return true;
    }
    @Override public void onCompletition(    Object iTask,    boolean iSucceed){
      listener.onMessage("\nIndex " + indexName + " was successfully rebuilt.");
    }
  }
);
  listener.onMessage("\nDone " + indexesToRebuild.size() + " indexes were rebuilt.");
  if (recreateManualIndex) {
    database.addCluster(OStorage.CLUSTER_TYPE.PHYSICAL.toString(),OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME,null,null);
    database.getMetadata().getIndexManager().create();
    listener.onMessage("\nManual index cluster was recreated.");
  }
  listener.onMessage("\nDone. Imported " + total + " clusters");
  if (database.load(new ORecordId(database.getStorage().getConfiguration().indexMgrRecordId)) == null) {
    ODocument indexDocument=new ODocument();
    indexDocument.save(OMetadataDefault.CLUSTER_INTERNAL_NAME);
    database.getStorage().getConfiguration().indexMgrRecordId=indexDocument.getIdentity().toString();
    database.getStorage().getConfiguration().update();
  }
  if (database.getStorage() instanceof OLocalPaginatedStorage && makeFullCheckPointAfterClusterCreation)   ((OLocalPaginatedStorage)database.getStorage()).enableFullCheckPointAfterClusterCreate();
  return total;
}
