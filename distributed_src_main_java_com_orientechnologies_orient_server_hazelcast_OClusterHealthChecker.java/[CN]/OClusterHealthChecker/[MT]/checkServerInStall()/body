{
  if (manager.getNodeStatus() != ODistributedServerManager.NODE_STATUS.ONLINE)   return;
  for (  String dbName : manager.getMessageService().getDatabases()) {
    final ODistributedServerManager.DB_STATUS localNodeStatus=manager.getDatabaseStatus(manager.getLocalNodeName(),dbName);
    if (localNodeStatus != ODistributedServerManager.DB_STATUS.ONLINE)     continue;
    final List<String> servers=manager.getOnlineNodes(dbName);
    servers.remove(manager.getLocalNodeName());
    if (servers.isEmpty())     continue;
    if (ODistributedServerLog.isDebugEnabled())     ODistributedServerLog.debug(this,manager.getLocalNodeName(),servers.toString(),ODistributedServerLog.DIRECTION.OUT,"Sending heartbeat message to servers (db=%s)",dbName);
    try {
      final ODistributedResponse response=manager.sendRequest(dbName,null,servers,new OHeartbeatTask(),manager.getNextMessageIdCounter(),ODistributedRequest.EXECUTION_MODE.RESPONSE,null,null);
      final Object payload=response.getPayload();
      if (payload instanceof Map) {
        final Map<String,Object> responses=(Map<String,Object>)payload;
        servers.removeAll(responses.keySet());
      }
    }
 catch (    ODistributedOperationException e) {
    }
    for (    String server : servers) {
      setDatabaseOffline(dbName,server);
    }
  }
}
