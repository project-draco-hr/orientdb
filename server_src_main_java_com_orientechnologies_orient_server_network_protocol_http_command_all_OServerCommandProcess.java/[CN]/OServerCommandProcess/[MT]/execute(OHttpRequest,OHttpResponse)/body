{
  final String[] parts=checkSyntax(iRequest.url,3,"Syntax error: process/<database>/<template-name>[/param]*");
  iRequest.data.commandInfo="Processes a transformation returning a JSON";
  ODatabaseDocumentTx db=null;
  try {
    db=getProfiledDatabaseInstance(iRequest);
    final String name=parts[2];
    final Object[] args=new String[parts.length - 3];
    for (int i=3; i < parts.length; ++i)     args[i - 3]=parts[i];
    final OCommandContext context=new OBasicCommandContext();
    int argIdx=0;
    for (    Object arg : args)     context.setVariable("arg" + (argIdx++),arg);
    context.setVariable("request",new OHttpRequestWrapper(iRequest,(String[])args));
    context.setVariable("response",new OHttpResponseWrapper(iResponse));
    final String debugMode=iRequest.getParameter("debug");
    if (debugMode != null && Boolean.parseBoolean(debugMode))     context.setVariable("debugMode",Boolean.TRUE);
    final OComposableProcessor processEngine=(OComposableProcessor)OProcessorManager.getInstance().get("composable");
    Object result=processEngine.processFromFile(name,context,iRequest.httpMethod.equals("GET"));
    if (result instanceof ODocument)     result=((ODocument)result).field("result");
    iResponse.writeResult(result,"");
  }
 catch (  OCommandScriptException e) {
    final StringBuilder msg=new StringBuilder();
    for (Exception currentException=e; currentException != null; currentException=(Exception)currentException.getCause()) {
      if (msg.length() > 0)       msg.append("\n");
      msg.append(currentException.getMessage());
    }
    iResponse.send(OHttpUtils.STATUS_BADREQ_CODE,OHttpUtils.STATUS_BADREQ_DESCRIPTION,OHttpUtils.CONTENT_TEXT_PLAIN,msg.toString(),null,true);
  }
 finally {
    if (db != null)     db.close();
  }
  return false;
}
