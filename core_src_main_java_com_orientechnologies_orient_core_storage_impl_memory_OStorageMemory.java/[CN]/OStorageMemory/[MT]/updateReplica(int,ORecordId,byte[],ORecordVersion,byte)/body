{
  if (rid.isNew())   throw new OStorageException("Passed record with id " + rid + " is new and can not be treated as replica.");
  checkOpeness();
  final OCluster cluster=getClusterById(rid.clusterId);
  final ODataSegmentMemory data=getDataSegmentById(dataSegmentId);
  lock.acquireSharedLock();
  try {
    lockManager.acquireLock(Thread.currentThread(),rid,LOCK.EXCLUSIVE);
    try {
      OPhysicalPosition ppos=cluster.getPhysicalPosition(new OPhysicalPosition(rid.clusterPosition));
      if (ppos == null) {
        if (!cluster.isHashBased())         throw new OStorageException("Cluster with LH support is required.");
        ppos=new OPhysicalPosition(rid.clusterPosition,recordVersion);
        ppos.recordType=recordType;
        ppos.dataSegmentId=data.getId();
        if (!recordVersion.isTombstone()) {
          ppos.dataSegmentPos=data.createRecord(content);
        }
        cluster.addPhysicalPosition(ppos);
        return true;
      }
 else {
        if (ppos.recordType != recordType)         throw new OStorageException("Record types of provided and stored replicas are different " + recordType + ":"+ ppos.recordType+ ".");
        if (ppos.recordVersion.compareTo(recordVersion) < 0) {
          if (!recordVersion.isTombstone() && !ppos.recordVersion.isTombstone()) {
            data.updateRecord(ppos.dataSegmentPos,content);
          }
 else           if (recordVersion.isTombstone() && !ppos.recordVersion.isTombstone()) {
            data.deleteRecord(ppos.dataSegmentPos);
          }
 else           if (!recordVersion.isTombstone() && ppos.recordVersion.isTombstone()) {
            ppos.dataSegmentPos=data.createRecord(content);
            cluster.updateDataSegmentPosition(ppos.clusterPosition,dataSegmentId,ppos.dataSegmentPos);
          }
          cluster.updateVersion(ppos.clusterPosition,recordVersion);
          return true;
        }
      }
    }
  finally {
      lockManager.releaseLock(Thread.currentThread(),rid,LOCK.EXCLUSIVE);
    }
  }
  finally {
    lock.releaseSharedLock();
  }
  return false;
}
