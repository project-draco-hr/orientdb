{
  String consoleInput="";
  try {
    StringBuffer buffer=new StringBuffer();
    currentPos=0;
    int historyNum=history.size();
    while (true) {
      boolean escape=false;
      boolean ctrl=false;
      int next=System.in.read();
      if (next == 27) {
        escape=true;
        System.in.read();
        next=System.in.read();
      }
      if (escape) {
        writetempFile("escape char " + next);
        if (next == 49) {
          System.in.read();
          next=System.in.read();
          writetempFile("escape char maybe ctrl" + next);
        }
        if (next == 53) {
          ctrl=true;
          next=System.in.read();
        }
        if (ctrl) {
          writetempFile("ctrl char " + next);
          if (next == RIGHT_CHAR) {
            currentPos=buffer.indexOf(" ",currentPos) + 1;
            if (currentPos == 0)             currentPos=buffer.length();
            StringBuffer cleaner=new StringBuffer();
            for (int i=0; i < buffer.length(); i++) {
              cleaner.append(" ");
            }
            rewriteConsole(cleaner,true);
            rewriteConsole(buffer,false);
          }
 else           if (next == LEFT_CHAR) {
            if (currentPos > 1 && currentPos < buffer.length() && buffer.charAt(currentPos - 1) == ' ') {
              currentPos=buffer.lastIndexOf(" ",(currentPos - 2)) + 1;
            }
 else {
              currentPos=buffer.lastIndexOf(" ",currentPos) + 1;
            }
            if (currentPos < 0)             currentPos=0;
            StringBuffer cleaner=new StringBuffer();
            for (int i=0; i < buffer.length(); i++) {
              cleaner.append(" ");
            }
            rewriteConsole(cleaner,true);
            rewriteConsole(buffer,false);
          }
 else {
          }
        }
 else {
          if (next == UP_CHAR && !history.isEmpty()) {
            if (history.size() > 0) {
              StringBuffer cleaner=new StringBuffer();
              for (int i=0; i < buffer.length(); i++) {
                cleaner.append(" ");
              }
              rewriteConsole(cleaner,true);
              historyNum=historyNum > 0 ? historyNum - 1 : 0;
              buffer=new StringBuffer(history.get(historyNum));
              currentPos=buffer.length();
              rewriteConsole(buffer,false);
            }
          }
 else           if (next == DOWN_CHAR && !history.isEmpty()) {
            if (history.size() > 0) {
              StringBuffer cleaner=new StringBuffer();
              for (int i=0; i < buffer.length(); i++) {
                cleaner.append(" ");
              }
              rewriteConsole(cleaner,true);
              historyNum=historyNum < history.size() ? historyNum + 1 : history.size();
              if (historyNum == history.size()) {
                buffer=new StringBuffer("");
              }
 else {
                buffer=new StringBuffer(history.get(historyNum));
              }
              currentPos=buffer.length();
              rewriteConsole(buffer,false);
            }
          }
 else           if (next == RIGHT_CHAR) {
            if (currentPos < buffer.length()) {
              currentPos++;
              StringBuffer cleaner=new StringBuffer();
              for (int i=0; i < buffer.length(); i++) {
                cleaner.append(" ");
              }
              rewriteConsole(cleaner,true);
              rewriteConsole(buffer,false);
            }
          }
 else           if (next == LEFT_CHAR) {
            if (currentPos > 0) {
              currentPos--;
              StringBuffer cleaner=new StringBuffer();
              for (int i=0; i < buffer.length(); i++) {
                cleaner.append(" ");
              }
              rewriteConsole(cleaner,true);
              rewriteConsole(buffer,false);
            }
          }
 else           if (next == END_CHAR) {
            currentPos=buffer.length();
            StringBuffer cleaner=new StringBuffer();
            for (int i=0; i < buffer.length(); i++) {
              cleaner.append(" ");
            }
            rewriteConsole(cleaner,true);
            rewriteConsole(buffer,false);
          }
 else           if (next == BEGIN_CHAR) {
            currentPos=0;
            StringBuffer cleaner=new StringBuffer();
            for (int i=0; i < buffer.length(); i++) {
              cleaner.append(" ");
            }
            rewriteConsole(cleaner,true);
            rewriteConsole(buffer,false);
          }
 else {
          }
        }
      }
 else {
        writetempFile("standard char " + next);
        if (next == NEW_LINE_CHAR) {
          System.out.println();
          break;
        }
 else         if (next == BACKSPACE_CHAR) {
          if (buffer.length() > 0 && currentPos > 0) {
            StringBuffer cleaner=new StringBuffer();
            for (int i=0; i < buffer.length(); i++) {
              cleaner.append(" ");
            }
            buffer.deleteCharAt(currentPos - 1);
            currentPos--;
            rewriteConsole(cleaner,true);
            rewriteConsole(buffer,false);
          }
        }
 else         if (next == DEL_CHAR) {
          if (buffer.length() > 0 && currentPos > 0 && currentPos < buffer.length()) {
            StringBuffer cleaner=new StringBuffer();
            for (int i=0; i < buffer.length(); i++) {
              cleaner.append(" ");
            }
            buffer.deleteCharAt(currentPos);
            rewriteConsole(cleaner,true);
            rewriteConsole(buffer,false);
          }
        }
 else         if (next == HORIZONTAL_TAB_CHAR) {
          StringBuffer cleaner=new StringBuffer();
          for (int i=0; i < buffer.length(); i++) {
            cleaner.append(" ");
          }
          buffer=writeHint(buffer);
          rewriteConsole(cleaner,true);
          rewriteConsole(buffer,false);
          currentPos=buffer.length();
        }
 else {
          if (next > UNIT_SEPARATOR_CHAR && next < BACKSPACE_CHAR) {
            StringBuffer cleaner=new StringBuffer();
            for (int i=0; i < buffer.length(); i++) {
              cleaner.append(" ");
            }
            if (currentPos == buffer.length()) {
              buffer.append((char)next);
            }
 else {
              buffer.insert(currentPos,(char)next);
            }
            currentPos++;
            rewriteConsole(cleaner,true);
            rewriteConsole(buffer,false);
          }
 else {
            System.out.println();
            System.out.print(buffer);
          }
        }
        historyNum=history.size();
      }
    }
    consoleInput=buffer.toString();
    history.remove(consoleInput);
    history.add(consoleInput);
    historyNum=history.size();
    writeHistory(historyNum);
  }
 catch (  IOException e) {
    return null;
  }
  return consoleInput;
}
