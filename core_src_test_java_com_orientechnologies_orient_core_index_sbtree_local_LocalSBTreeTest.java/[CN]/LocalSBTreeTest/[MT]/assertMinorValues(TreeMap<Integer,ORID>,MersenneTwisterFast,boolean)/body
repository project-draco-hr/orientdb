{
  for (int i=0; i < 100; i++) {
    int upperBorder=keyValues.lastKey() + 5000;
    int toKey;
    if (upperBorder > 0)     toKey=random.nextInt(upperBorder) - 5000;
 else     toKey=random.nextInt(Integer.MAX_VALUE) - 5000;
    if (random.nextBoolean()) {
      Integer includedKey=keyValues.ceilingKey(toKey);
      if (includedKey != null)       toKey=includedKey;
 else       toKey=keyValues.floorKey(toKey);
    }
    int maxValuesToFetch=10000;
    Collection<ORID> orids=localSBTree.getValuesMinor(toKey,keyInclusive,maxValuesToFetch);
    Set<ORID> result=new HashSet<ORID>(orids);
    Iterator<ORID> valuesIterator=keyValues.headMap(toKey,keyInclusive).descendingMap().values().iterator();
    int fetchedValues=0;
    while (valuesIterator.hasNext() && fetchedValues < maxValuesToFetch) {
      ORID value=valuesIterator.next();
      Assert.assertTrue(result.remove(value));
      fetchedValues++;
    }
    if (valuesIterator.hasNext())     Assert.assertEquals(fetchedValues,maxValuesToFetch);
    Assert.assertEquals(result.size(),0);
  }
}
