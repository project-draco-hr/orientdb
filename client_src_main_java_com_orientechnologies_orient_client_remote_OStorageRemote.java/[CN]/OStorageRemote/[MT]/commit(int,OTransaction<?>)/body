{
  checkConnection();
  do {
    boolean locked=acquireExclusiveLock();
    try {
      writeCommand(OChannelBinaryProtocol.REQUEST_TX_COMMIT);
      network.writeInt(iTx.getId());
      network.writeInt(iTx.size());
      for (      OTransactionEntry<? extends ORecord<?>> txEntry : iTx.getEntries()) {
        if (txEntry.status == OTransactionEntry.LOADED)         continue;
        network.writeByte(txEntry.status);
        network.writeShort((short)txEntry.getRecord().getIdentity().getClusterId());
        network.writeByte(txEntry.getRecord().getRecordType());
switch (txEntry.status) {
case OTransactionEntry.CREATED:
          network.writeString(txEntry.clusterName);
        network.writeBytes(txEntry.getRecord().toStream());
      break;
case OTransactionEntry.UPDATED:
    network.writeLong(txEntry.getRecord().getIdentity().getClusterPosition());
  network.writeInt(txEntry.getRecord().getVersion());
network.writeBytes(txEntry.getRecord().toStream());
break;
case OTransactionEntry.DELETED:
network.writeLong(txEntry.getRecord().getIdentity().getClusterPosition());
network.writeInt(txEntry.getRecord().getVersion());
break;
}
}
readStatus();
break;
}
 catch (Exception e) {
if (handleException("Error on commit",e)) break;
}
 finally {
releaseExclusiveLock(locked);
}
}
 while (true);
}
