{
  final ORecordId rid2Lock;
  if (!rid.isPersistent())   rid2Lock=new ORecordId(rid.getClusterId(),-1l);
 else   rid2Lock=rid;
  ODistributedRequestId requestId=null;
  final AtomicBoolean lockReleased=new AtomicBoolean(false);
  try {
    requestId=acquireRecordLock(rid2Lock);
    final ODistributedRequestId finalReqId=requestId;
    final OCallable<Void,ODistributedRequestId> unlockCallback=new OCallable<Void,ODistributedRequestId>(){
      @Override public Void call(      final ODistributedRequestId requestId){
        releaseRecordLock(rid2Lock,finalReqId);
        lockReleased.set(true);
        return null;
      }
    }
;
    return OScenarioThreadLocal.executeAsDistributed(new Callable(){
      @Override public Object call() throws Exception {
        return callback.call(unlockCallback);
      }
    }
);
  }
  finally {
    if (iUnlockAtTheEnd) {
      if (lockReleased.compareAndSet(false,true))       releaseRecordLock(rid2Lock,requestId);
    }
  }
}
