{
  if (status == STATUS.CLOSED)   return;
  OChannelBinaryAsynchClient network=null;
  stateLock.acquireWriteLock();
  try {
    if (status == STATUS.CLOSED)     return;
    if (getSessionToken() != null && getSessionId() != -1) {
      network=beginRequest(OChannelBinaryProtocol.REQUEST_DB_CLOSE);
      try {
        setSessionId(null,-1,null);
      }
  finally {
        endRequest(network);
        engine.getConnectionManager().release(network);
      }
      if (!checkForClose(iForce))       return;
    }
 else {
      return;
    }
    status=STATUS.CLOSING;
    engine.getConnectionManager().closePool(getCurrentServerURL());
    sbTreeCollectionManager.close();
    super.close(iForce,onDelete);
    this.tokens.clear();
    status=STATUS.CLOSED;
    Orient.instance().unregisterStorage(this);
  }
 catch (  Exception e) {
    if (network != null) {
      OLogManager.instance().debug(this,"Error on closing remote connection: %s",e,network);
      try {
        network.close();
      }
 catch (      Exception e2) {
        OLogManager.instance().debug(this,"Error on closing socket: %s",e2,network);
      }
    }
  }
 finally {
    stateLock.releaseWriteLock();
  }
}
