{
  final List<OAbstractRemoteTask> undoTasks=new ArrayList<OAbstractRemoteTask>();
  for (  ORecordOperation op : iTx.getAllRecordEntries()) {
    OAbstractRemoteTask undoTask=null;
    final ORecord record=op.getRecord();
switch (op.type) {
case ORecordOperation.CREATED:
      break;
case ORecordOperation.UPDATED:
case ORecordOperation.DELETED:
    final ORecordId rid=(ORecordId)record.getIdentity();
  final OStorageOperationResult<ORawBuffer> loaded=ODatabaseRecordThreadLocal.INSTANCE.get().getStorage().getUnderlying().readRecord(rid,null,true,null);
if (loaded == null || loaded.getResult() == null) throw new ORecordNotFoundException(rid);
final ORecord previousRecord=Orient.instance().getRecordFactoryManager().newInstance(loaded.getResult().recordType);
ORecordInternal.fill(previousRecord,rid,loaded.getResult().version,loaded.getResult().getBuffer(),false);
if (op.type == ORecordOperation.UPDATED) undoTask=new OUpdateRecordTask(previousRecord,ORecordVersionHelper.clearRollbackMode(previousRecord.getVersion()));
 else undoTask=new OResurrectRecordTask(previousRecord,ORecordVersionHelper.clearRollbackMode(previousRecord.getVersion()));
break;
default :
continue;
}
if (undoTask != null) undoTasks.add(undoTask);
}
return undoTasks;
}
