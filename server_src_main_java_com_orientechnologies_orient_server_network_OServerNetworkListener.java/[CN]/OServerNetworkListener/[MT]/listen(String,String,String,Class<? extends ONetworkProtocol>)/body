{
  for (  int port : getPorts(iHostPortRange)) {
    inboundAddr=new InetSocketAddress(iHostName,port);
    try {
      serverSocket=socketFactory.createServerSocket(port,0,InetAddress.getByName(iHostName));
      if (serverSocket.isBound()) {
        OLogManager.instance().info(this,"Listening $ANSI{green " + iProtocolName + "} connections on $ANSI{green "+ inboundAddr.getAddress().getHostAddress()+ ":"+ inboundAddr.getPort()+ "} (protocol v."+ protocolVersion+ ", socket="+ socketFactory.getName()+ ")");
        Thread.currentThread().setName("OrientDB " + protocolClass.getSimpleName() + " listen at "+ iHostName+ ":"+ port);
        return;
      }
    }
 catch (    BindException be) {
      OLogManager.instance().warn(this,"Port %s:%d busy, trying the next available...",iHostName,port);
    }
catch (    SocketException se) {
      OLogManager.instance().error(this,"Unable to create socket",se);
      ShutdownHelper.shutdown(1);
    }
catch (    IOException ioe) {
      OLogManager.instance().error(this,"Unable to read data from an open socket",ioe);
      System.err.println("Unable to read data from an open socket.");
      ShutdownHelper.shutdown(1);
    }
  }
  OLogManager.instance().error(this,"Unable to listen for connections using the configured ports '%s' on host '%s'",iHostPortRange,iHostName);
  ShutdownHelper.shutdown(1);
}
