{
  List<String> servers=(List<String>)iCommand.getContext().getVariable("servers");
  if (servers == null) {
    servers=new ArrayList<String>();
    iCommand.getContext().setVariable("servers",servers);
  }
  final String localNodeName=dManager.getLocalNodeName();
  servers.add(localNodeName);
  if (OScenarioThreadLocal.INSTANCE.isRunModeDistributed())   return wrapped.command(iCommand);
  final ODistributedConfiguration dbCfg=distributedConfiguration;
  if (!dbCfg.isReplicationActive(null,localNodeName))   return wrapped.command(iCommand);
  final OCommandExecutor executor=OCommandManager.instance().getExecutor(iCommand);
  executor.setProgressListener(iCommand.getProgressListener());
  executor.parse(iCommand);
  final OCommandExecutor exec=executor instanceof OCommandExecutorSQLDelegate ? ((OCommandExecutorSQLDelegate)executor).getDelegate() : executor;
  if (exec.isIdempotent() && !dManager.isNodeAvailable(dManager.getLocalNodeName(),getName())) {
    ODistributedServerLog.warn(this,dManager.getLocalNodeName(),null,ODistributedServerLog.DIRECTION.NONE,"Node '%s' is offline, the command '%s' against database '%s' will be executed only on local server with the possibility to have partial result",dManager.getLocalNodeName(),iCommand,wrapped.getName());
    return wrapped.command(iCommand);
  }
  checkLocalNodeIsAvailable();
  if (!exec.isIdempotent())   checkNodeIsMaster(localNodeName,dbCfg);
  try {
    Object result=null;
    OCommandDistributedReplicateRequest.DISTRIBUTED_EXECUTION_MODE executionMode=OCommandDistributedReplicateRequest.DISTRIBUTED_EXECUTION_MODE.LOCAL;
    OCommandDistributedReplicateRequest.DISTRIBUTED_RESULT_MGMT resultMgmt=OCommandDistributedReplicateRequest.DISTRIBUTED_RESULT_MGMT.CHECK_FOR_EQUALS;
    if (OScenarioThreadLocal.INSTANCE.getRunMode() != RUN_MODE.RUNNING_DISTRIBUTED) {
      if (exec instanceof OCommandDistributedReplicateRequest) {
        executionMode=((OCommandDistributedReplicateRequest)exec).getDistributedExecutionMode();
        resultMgmt=((OCommandDistributedReplicateRequest)exec).getDistributedResultManagement();
      }
    }
switch (executionMode) {
case LOCAL:
      return wrapped.command(iCommand);
case REPLICATE:
    final Collection<String> involvedClusters=exec.getInvolvedClusters();
  if (resultMgmt == OCommandDistributedReplicateRequest.DISTRIBUTED_RESULT_MGMT.MERGE) {
    final Map<String,Collection<String>> nodeClusterMap=dbCfg.getServerClusterMap(involvedClusters,localNodeName);
    final Map<String,Object> results;
    if (nodeClusterMap.size() == 1 && nodeClusterMap.keySet().iterator().next().equals(localNodeName)) {
      result=wrapped.command(iCommand);
      results=new HashMap<String,Object>(1);
      results.put(localNodeName,result);
    }
 else {
      results=executeOnServers(iCommand,involvedClusters,nodeClusterMap);
    }
    final OCommandExecutorSQLSelect select=exec instanceof OCommandExecutorSQLSelect ? (OCommandExecutorSQLSelect)exec : null;
    if (select != null && select.isAnyFunctionAggregates() && !select.hasGroupBy()) {
      result=mergeResultByAggregation(select,results);
    }
 else {
      result=exec.mergeResults(results);
    }
  }
 else {
    final OAbstractCommandTask task=iCommand instanceof OCommandScript ? new OScriptTask(iCommand) : new OSQLCommandTask(iCommand,new HashSet<String>());
    task.setResultStrategy(OAbstractRemoteTask.RESULT_STRATEGY.ANY);
    final Set<String> nodes=dbCfg.getServers(involvedClusters);
    if (iCommand instanceof ODistributedCommand)     nodes.removeAll(((ODistributedCommand)iCommand).nodesToExclude());
    if (executeOnlyLocally(localNodeName,dbCfg,exec,involvedClusters,nodes))     return wrapped.command(iCommand);
    final Object localResult;
    final boolean executedLocally=nodes.contains(localNodeName);
    if (executedLocally) {
      try {
        localResult=OScenarioThreadLocal.executeAsDistributed(new Callable(){
          @Override public Object call() throws Exception {
            return wrapped.command(iCommand);
          }
        }
);
      }
 catch (      RuntimeException e) {
        throw e;
      }
catch (      Exception e) {
        OException.wrapException(new ODistributedException("Cannot execute command " + iCommand),e);
        return null;
      }
      nodes.remove(localNodeName);
    }
 else     localResult=null;
    if (!nodes.isEmpty()) {
      final ODistributedResponse dResponse=dManager.sendRequest(getName(),involvedClusters,nodes,task,dManager.getNextMessageIdCounter(),EXECUTION_MODE.RESPONSE,localResult,null);
      result=dResponse.getPayload();
    }
 else     result=localResult;
  }
if (exec.involveSchema()) dManager.propagateSchemaChanges(ODatabaseRecordThreadLocal.INSTANCE.get());
break;
}
if (result instanceof ONeedRetryException) throw (ONeedRetryException)result;
 else if (result instanceof RuntimeException) throw (RuntimeException)result;
 else if (result instanceof Exception) throw OException.wrapException(new ODistributedException("Error on execution distributed COMMAND"),(Exception)result);
return result;
}
 catch (ONeedRetryException e) {
throw e;
}
catch (HazelcastInstanceNotActiveException e) {
throw new OOfflineNodeException("Hazelcast instance is not available");
}
catch (HazelcastException e) {
throw new OOfflineNodeException("Hazelcast instance is not available");
}
catch (Exception e) {
handleDistributedException("Cannot route COMMAND operation to the distributed node",e);
return null;
}
}
