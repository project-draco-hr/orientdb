{
  final BytesContainer fieldValue1=iField1.bytes;
  final int offset1=fieldValue1.offset;
  final BytesContainer fieldValue2=iField2.bytes;
  final int offset2=fieldValue2.offset;
  try {
switch (iField1.type) {
case INTEGER:
{
        final int value1=OVarIntSerializer.readAsInteger(fieldValue1);
switch (iField2.type) {
case INTEGER:
{
            final int value2=OVarIntSerializer.readAsInteger(fieldValue2);
            return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
          }
case LONG:
case DATETIME:
{
          final long value2=OVarIntSerializer.readAsLong(fieldValue2);
          return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
        }
case DATE:
{
        final long value2=OVarIntSerializer.readAsLong(fieldValue2) * ORecordSerializerBinaryV0.MILLISEC_PER_DAY;
        return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
      }
case SHORT:
{
      final short value2=OVarIntSerializer.readAsShort(fieldValue2);
      return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
    }
case BYTE:
{
    final byte value2=OVarIntSerializer.readAsByte(fieldValue2);
    return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
  }
case FLOAT:
{
  final float value2=Float.intBitsToFloat(ORecordSerializerBinaryV0.readInteger(fieldValue2));
  return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DOUBLE:
{
final double value2=Double.longBitsToDouble(ORecordSerializerBinaryV0.readLong(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case STRING:
{
final int value2=Integer.parseInt(ORecordSerializerBinaryV0.readString(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DECIMAL:
{
final int value2=ODecimalSerializer.INSTANCE.deserialize(fieldValue2.bytes,fieldValue2.offset).intValue();
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
}
break;
}
case LONG:
{
final long value1=OVarIntSerializer.readAsLong(fieldValue1);
switch (iField2.type) {
case INTEGER:
{
final int value2=OVarIntSerializer.readAsInteger(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case LONG:
case DATETIME:
{
final long value2=OVarIntSerializer.readAsLong(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DATE:
{
final long value2=OVarIntSerializer.readAsLong(fieldValue2) * ORecordSerializerBinaryV0.MILLISEC_PER_DAY;
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case SHORT:
{
final short value2=OVarIntSerializer.readAsShort(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case BYTE:
{
final byte value2=OVarIntSerializer.readAsByte(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case FLOAT:
{
final float value2=Float.intBitsToFloat(ORecordSerializerBinaryV0.readInteger(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DOUBLE:
{
final double value2=Double.longBitsToDouble(ORecordSerializerBinaryV0.readLong(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case STRING:
{
final long value2=Long.parseLong(ORecordSerializerBinaryV0.readString(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DECIMAL:
{
final long value2=ODecimalSerializer.INSTANCE.deserialize(fieldValue2.bytes,fieldValue2.offset).longValue();
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
}
break;
}
case SHORT:
{
final short value1=OVarIntSerializer.readAsShort(fieldValue1);
switch (iField2.type) {
case INTEGER:
{
final int value2=OVarIntSerializer.readAsInteger(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case LONG:
case DATETIME:
{
final long value2=OVarIntSerializer.readAsLong(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DATE:
{
final long value2=OVarIntSerializer.readAsLong(fieldValue2) * ORecordSerializerBinaryV0.MILLISEC_PER_DAY;
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case SHORT:
{
final short value2=OVarIntSerializer.readAsShort(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case BYTE:
{
final byte value2=OVarIntSerializer.readAsByte(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case FLOAT:
{
final float value2=Float.intBitsToFloat(ORecordSerializerBinaryV0.readInteger(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DOUBLE:
{
final double value2=Double.longBitsToDouble(ORecordSerializerBinaryV0.readLong(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case STRING:
{
final short value2=Short.parseShort(ORecordSerializerBinaryV0.readString(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DECIMAL:
{
final short value2=ODecimalSerializer.INSTANCE.deserialize(fieldValue2.bytes,fieldValue2.offset).shortValue();
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
}
break;
}
case STRING:
{
final String value1=ORecordSerializerBinaryV0.readString(fieldValue1);
switch (iField2.type) {
case INTEGER:
{
final int value2=OVarIntSerializer.readAsInteger(fieldValue2);
return value1.compareTo(Integer.toString(value2));
}
case LONG:
case DATETIME:
{
final long value2=OVarIntSerializer.readAsLong(fieldValue2);
return value1.compareTo(Long.toString(value2));
}
case DATE:
{
final long value2=OVarIntSerializer.readAsLong(fieldValue2) * ORecordSerializerBinaryV0.MILLISEC_PER_DAY;
return value1.compareTo(Long.toString(value2));
}
case SHORT:
{
final short value2=OVarIntSerializer.readAsShort(fieldValue2);
return value1.compareTo(Short.toString(value2));
}
case BYTE:
{
final byte value2=OVarIntSerializer.readAsByte(fieldValue2);
return value1.compareTo(Byte.toString(value2));
}
case FLOAT:
{
final float value2=Float.intBitsToFloat(ORecordSerializerBinaryV0.readInteger(fieldValue2));
return value1.compareTo(Float.toString(value2));
}
case DOUBLE:
{
final double value2=Double.longBitsToDouble(ORecordSerializerBinaryV0.readLong(fieldValue2));
return value1.compareTo(Double.toString(value2));
}
case STRING:
{
final String value2=ORecordSerializerBinaryV0.readString(fieldValue2);
return value1.compareTo(value2);
}
case BOOLEAN:
{
final boolean value2=ORecordSerializerBinaryV0.readByte(fieldValue2) == 1;
return value1.compareTo(Boolean.toString(value2));
}
case DECIMAL:
{
final BigDecimal value2=ODecimalSerializer.INSTANCE.deserialize(fieldValue2.bytes,fieldValue2.offset);
return new BigDecimal(value1).compareTo(value2);
}
}
break;
}
case DOUBLE:
{
final double value1=Double.longBitsToDouble(ORecordSerializerBinaryV0.readLong(fieldValue1));
switch (iField2.type) {
case INTEGER:
{
final int value2=OVarIntSerializer.readAsInteger(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case LONG:
{
final long value2=OVarIntSerializer.readAsLong(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case SHORT:
{
final short value2=OVarIntSerializer.readAsShort(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case BYTE:
{
final byte value2=OVarIntSerializer.readAsByte(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case FLOAT:
{
final float value2=Float.intBitsToFloat(ORecordSerializerBinaryV0.readInteger(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DOUBLE:
{
final double value2=Double.longBitsToDouble(ORecordSerializerBinaryV0.readLong(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case STRING:
{
final double value2=Double.parseDouble(ORecordSerializerBinaryV0.readString(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DECIMAL:
{
final double value2=ODecimalSerializer.INSTANCE.deserialize(fieldValue2.bytes,fieldValue2.offset).doubleValue();
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
}
break;
}
case FLOAT:
{
final float value1=Float.intBitsToFloat(ORecordSerializerBinaryV0.readInteger(fieldValue1));
switch (iField2.type) {
case INTEGER:
{
final int value2=OVarIntSerializer.readAsInteger(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case LONG:
{
final long value2=OVarIntSerializer.readAsLong(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case SHORT:
{
final short value2=OVarIntSerializer.readAsShort(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case BYTE:
{
final byte value2=OVarIntSerializer.readAsByte(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case FLOAT:
{
final float value2=Float.intBitsToFloat(ORecordSerializerBinaryV0.readInteger(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DOUBLE:
{
final double value2=Double.longBitsToDouble(ORecordSerializerBinaryV0.readLong(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case STRING:
{
final float value2=Float.parseFloat(ORecordSerializerBinaryV0.readString(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DECIMAL:
{
final float value2=ODecimalSerializer.INSTANCE.deserialize(fieldValue2.bytes,fieldValue2.offset).floatValue();
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
}
break;
}
case BYTE:
{
final byte value1=ORecordSerializerBinaryV0.readByte(fieldValue1);
switch (iField2.type) {
case INTEGER:
{
final int value2=OVarIntSerializer.readAsInteger(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case LONG:
{
final long value2=OVarIntSerializer.readAsLong(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case SHORT:
{
final short value2=OVarIntSerializer.readAsShort(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case BYTE:
{
final byte value2=ORecordSerializerBinaryV0.readByte(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case FLOAT:
{
final float value2=Float.intBitsToFloat(ORecordSerializerBinaryV0.readInteger(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DOUBLE:
{
final double value2=Double.longBitsToDouble(ORecordSerializerBinaryV0.readLong(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case STRING:
{
final byte value2=Byte.parseByte((ORecordSerializerBinaryV0.readString(fieldValue2)));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DECIMAL:
{
final byte value2=ODecimalSerializer.INSTANCE.deserialize(fieldValue2.bytes,fieldValue2.offset).byteValue();
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
}
break;
}
case BOOLEAN:
{
final boolean value1=ORecordSerializerBinaryV0.readByte(fieldValue1) == 1;
switch (iField2.type) {
case BOOLEAN:
{
final boolean value2=ORecordSerializerBinaryV0.readByte(fieldValue2) == 1;
return (value1 == value2) ? 0 : value1 ? 1 : 0;
}
case STRING:
{
final boolean value2=Boolean.parseBoolean(ORecordSerializerBinaryV0.readString(fieldValue2));
return (value1 == value2) ? 0 : value1 ? 1 : 0;
}
}
break;
}
case DATETIME:
{
final long value1=OVarIntSerializer.readAsLong(fieldValue1);
switch (iField2.type) {
case INTEGER:
{
final int value2=OVarIntSerializer.readAsInteger(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case LONG:
case DATETIME:
{
final long value2=OVarIntSerializer.readAsLong(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DATE:
{
final long value2=OVarIntSerializer.readAsLong(fieldValue2) * ORecordSerializerBinaryV0.MILLISEC_PER_DAY;
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case SHORT:
{
final short value2=OVarIntSerializer.readAsShort(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case BYTE:
{
final byte value2=OVarIntSerializer.readAsByte(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case FLOAT:
{
final float value2=Float.intBitsToFloat(ORecordSerializerBinaryV0.readInteger(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DOUBLE:
{
final double value2=Double.longBitsToDouble(ORecordSerializerBinaryV0.readLong(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case STRING:
{
final String value2AsString=ORecordSerializerBinaryV0.readString(fieldValue2);
if (OIOUtils.isLong(value2AsString)) {
final long value2=Long.parseLong(value2AsString);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
try {
final Date value2AsDate=ODatabaseRecordThreadLocal.INSTANCE.get().getStorage().getConfiguration().getDateFormatInstance().parse(value2AsString);
final long value2=value2AsDate.getTime();
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
 catch (ParseException e) {
try {
final Date value2AsDate=ODatabaseRecordThreadLocal.INSTANCE.get().getStorage().getConfiguration().getDateTimeFormatInstance().parse(value2AsString);
final long value2=value2AsDate.getTime();
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
 catch (ParseException e1) {
return new Date(value1).toString().compareTo(value2AsString);
}
}
}
case DECIMAL:
{
final long value2=ODecimalSerializer.INSTANCE.deserialize(fieldValue2.bytes,fieldValue2.offset).longValue();
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
}
break;
}
case DATE:
{
final long value1=OVarIntSerializer.readAsLong(fieldValue1) * ORecordSerializerBinaryV0.MILLISEC_PER_DAY;
switch (iField2.type) {
case INTEGER:
{
final int value2=OVarIntSerializer.readAsInteger(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case LONG:
case DATETIME:
{
final long value2=OVarIntSerializer.readAsLong(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DATE:
{
final long value2=OVarIntSerializer.readAsLong(fieldValue2) * ORecordSerializerBinaryV0.MILLISEC_PER_DAY;
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case SHORT:
{
final short value2=OVarIntSerializer.readAsShort(fieldValue2);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case FLOAT:
{
final float value2=Float.intBitsToFloat(ORecordSerializerBinaryV0.readInteger(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case DOUBLE:
{
final double value2=Double.longBitsToDouble(ORecordSerializerBinaryV0.readLong(fieldValue2));
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
case STRING:
{
final String value2AsString=ORecordSerializerBinaryV0.readString(fieldValue2);
if (OIOUtils.isLong(value2AsString)) {
final long value2=Long.parseLong(value2AsString);
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
try {
final Date value2AsDate=ODatabaseRecordThreadLocal.INSTANCE.get().getStorage().getConfiguration().getDateTimeFormatInstance().parse(value2AsString);
final long value2=value2AsDate.getTime();
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
 catch (ParseException e) {
try {
final Date value2AsDate=ODatabaseRecordThreadLocal.INSTANCE.get().getStorage().getConfiguration().getDateFormatInstance().parse(value2AsString);
final long value2=value2AsDate.getTime();
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
 catch (ParseException e1) {
return new Date(value1).toString().compareTo(value2AsString);
}
}
}
case DECIMAL:
{
final long value2=ODecimalSerializer.INSTANCE.deserialize(fieldValue2.bytes,fieldValue2.offset).longValue();
return (value1 < value2) ? -1 : ((value1 == value2) ? 0 : 1);
}
}
break;
}
case BINARY:
{
switch (iField2.type) {
case BINARY:
{
final int length1=OVarIntSerializer.readAsInteger(fieldValue1);
final int length2=OVarIntSerializer.readAsInteger(fieldValue2);
final int max=Math.min(length1,length2);
for (int i=0; i < max; ++i) {
final byte b1=fieldValue1.bytes[fieldValue1.offset + i];
final byte b2=fieldValue2.bytes[fieldValue2.offset + i];
if (b1 > b2) return 1;
 else if (b2 > b1) return -1;
}
if (length1 > length2) return 1;
 else if (length2 > length1) return -1;
return 0;
}
}
break;
}
case LINK:
{
switch (iField2.type) {
case LINK:
{
final int clusterId1=OVarIntSerializer.readAsInteger(fieldValue1);
final int clusterId2=OVarIntSerializer.readAsInteger(fieldValue2);
if (clusterId1 > clusterId2) return 1;
 else if (clusterId1 < clusterId2) return -1;
 else {
final long clusterPos1=OVarIntSerializer.readAsLong(fieldValue1);
final long clusterPos2=OVarIntSerializer.readAsLong(fieldValue2);
if (clusterPos1 > clusterPos2) return 1;
 else if (clusterPos1 < clusterPos2) return -1;
return 0;
}
}
case STRING:
{
return ORecordSerializerBinaryV0.readOptimizedLink(fieldValue1).compareTo(new ORecordId(ORecordSerializerBinaryV0.readString(fieldValue2)));
}
}
break;
}
case DECIMAL:
{
final BigDecimal value1=ODecimalSerializer.INSTANCE.deserialize(fieldValue1.bytes,fieldValue1.offset);
switch (iField2.type) {
case INTEGER:
{
final int value2=OVarIntSerializer.readAsInteger(fieldValue2);
return value1.compareTo(new BigDecimal(value2));
}
case LONG:
{
final long value2=OVarIntSerializer.readAsLong(fieldValue2);
return value1.compareTo(new BigDecimal(value2));
}
case SHORT:
{
final short value2=OVarIntSerializer.readAsShort(fieldValue2);
return value1.compareTo(new BigDecimal(value2));
}
case FLOAT:
{
final float value2=Float.intBitsToFloat(ORecordSerializerBinaryV0.readInteger(fieldValue2));
return value1.compareTo(new BigDecimal(value2));
}
case DOUBLE:
{
final double value2=Double.longBitsToDouble(ORecordSerializerBinaryV0.readLong(fieldValue2));
return value1.compareTo(new BigDecimal(value2));
}
case STRING:
{
final String value2=ORecordSerializerBinaryV0.readString(fieldValue2);
return value1.compareTo(new BigDecimal(value2));
}
case DECIMAL:
{
final BigDecimal value2=ODecimalSerializer.INSTANCE.deserialize(fieldValue2.bytes,fieldValue2.offset);
return value1.compareTo(value2);
}
}
break;
}
}
}
  finally {
fieldValue1.offset=offset1;
fieldValue2.offset=offset2;
}
return 1;
}
