{
  OChannelBinaryClient network=null;
  if (debug)   System.out.println("-> req: " + getSessionId());
synchronized (networkPool) {
    final int beginCursor=networkPoolCursor;
    while (network == null) {
      if (networkPool.size() == 0)       throw new ONetworkProtocolException("Connection pool closed");
      network=networkPool.get(networkPoolCursor);
      if (network.getLockWrite().tryLock())       break;
      network=null;
      networkPoolCursor++;
      if (networkPoolCursor >= networkPool.size())       networkPoolCursor=0;
      if (networkPoolCursor == beginCursor) {
        if (networkPool.size() < maxPool) {
          network=createNetworkConnection();
          network.getLockWrite().lock();
          networkPool.add(network);
          if (debug)           System.out.println("Created new connection " + networkPool.size());
        }
 else {
          if (debug)           System.out.println("-> req (waiting) : " + getSessionId());
          final long startToWait=System.currentTimeMillis();
          try {
            networkPool.wait(5000);
            OProfiler.getInstance().updateCounter("network.connectionPool.timeout",+1);
          }
 catch (          InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new OStorageException("Cannot acquire a connection because the thread has been interrupted");
          }
          final long elapsed=OProfiler.getInstance().stopChrono("network.connectionPool.waitingTime",startToWait);
          if (debug)           System.out.println("Waiting for connection = elapsed: " + elapsed);
        }
      }
    }
  }
  network.writeByte(iCommand);
  network.writeInt(getSessionId());
  return network;
}
