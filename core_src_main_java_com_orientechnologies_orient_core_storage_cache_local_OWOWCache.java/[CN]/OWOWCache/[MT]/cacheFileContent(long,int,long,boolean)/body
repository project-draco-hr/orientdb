{
  final long startPosition=pageIndex * pageSize;
  final long endPosition=startPosition + pageSize;
  byte[] content=new byte[pageSize + 2 * PAGE_PADDING];
  OCachePointer dataPointer;
  final OFileClassic fileClassic=files.get(intId);
  if (fileClassic == null)   throw new IllegalArgumentException("File with id " + intId + " not found in WOW Cache");
  OLogSequenceNumber lastLsn;
  if (writeAheadLog != null)   lastLsn=writeAheadLog.getFlushedLSN();
 else   lastLsn=new OLogSequenceNumber(-1,-1);
  if (fileClassic.getFilledUpTo() >= endPosition) {
    final int length=content.length - 2 * PAGE_PADDING;
    if (OLogManager.instance().isDebugEnabled())     OLogManager.instance().debug(this,"Loading page from disk: file=%s, offset=%d, size=%d",fileClassic.getName(),startPosition,length);
    fileClassic.read(startPosition,content,length,PAGE_PADDING);
    final ODirectMemoryPointer pointer=new ODirectMemoryPointer(content);
    dataPointer=new OCachePointer(pointer,lastLsn,fileId,pageIndex);
  }
 else   if (addNewPages) {
    final int space=(int)(endPosition - fileClassic.getFilledUpTo());
    if (OLogManager.instance().isDebugEnabled())     OLogManager.instance().debug(this,"Allocation space to disk: file=%s, space=%d",fileClassic,space);
    fileClassic.allocateSpace(space);
    addAllocatedSpace(space);
    final ODirectMemoryPointer pointer=new ODirectMemoryPointer(content);
    dataPointer=new OCachePointer(pointer,lastLsn,fileId,pageIndex);
  }
 else   return null;
  return dataPointer;
}
