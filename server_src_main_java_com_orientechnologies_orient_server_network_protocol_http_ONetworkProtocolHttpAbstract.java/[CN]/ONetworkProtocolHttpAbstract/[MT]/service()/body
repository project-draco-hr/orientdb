{
  ++connection.data.totalRequests;
  connection.data.commandInfo=null;
  connection.data.commandDetail=null;
  final String callbackF;
  if ((request.parameters != null) && request.parameters.containsKey(OHttpUtils.CALLBACK_PARAMETER_NAME))   callbackF=request.parameters.get(OHttpUtils.CALLBACK_PARAMETER_NAME);
 else   callbackF=null;
  response=new OHttpResponse(channel.outStream,request.httpVersion,additionalResponseHeaders,responseCharSet,connection.data.serverInfo,request.sessionId,callbackF,request.keepAlive);
  response.setJsonErrorResponse(jsonResponseError);
  if (request.contentEncoding != null && request.contentEncoding.equals(OHttpUtils.CONTENT_ACCEPT_GZIP_ENCODED)) {
    response.setContentEncoding(OHttpUtils.CONTENT_ACCEPT_GZIP_ENCODED);
  }
  waitNodeIsOnline();
  final long begin=System.currentTimeMillis();
  boolean isChain;
  do {
    isChain=false;
    final String command;
    if (request.url.length() < 2) {
      command="";
    }
 else {
      command=request.url.substring(1);
    }
    final String commandString=getCommandString(command);
    final OServerCommand cmd=(OServerCommand)cmdManager.getCommand(commandString);
    Map<String,String> requestParams=cmdManager.extractUrlTokens(commandString);
    if (requestParams != null) {
      if (request.parameters == null) {
        request.parameters=new HashMap<String,String>();
      }
      for (      Map.Entry<String,String> entry : requestParams.entrySet()) {
        request.parameters.put(entry.getKey(),URLDecoder.decode(entry.getValue(),"UTF-8"));
      }
    }
    if (cmd != null)     try {
      if (cmd.beforeExecute(request,response))       try {
        isChain=cmd.execute(request,response);
      }
  finally {
        cmd.afterExecute(request,response);
      }
    }
 catch (    Exception e) {
      handleError(e);
    }
 else {
      try {
        OLogManager.instance().warn(this,"->" + channel.socket.getInetAddress().getHostAddress() + ": Command not found: "+ request.httpMethod+ "."+ URLDecoder.decode(command,"UTF-8"));
        sendTextContent(OHttpUtils.STATUS_INVALIDMETHOD_CODE,OHttpUtils.STATUS_INVALIDMETHOD_DESCRIPTION,null,OHttpUtils.CONTENT_TEXT_PLAIN,"Command not found: " + command,request.keepAlive);
      }
 catch (      IOException e1) {
        sendShutdown();
      }
    }
  }
 while (isChain);
  connection.data.lastCommandInfo=connection.data.commandInfo;
  connection.data.lastCommandDetail=connection.data.commandDetail;
  connection.data.lastCommandExecutionTime=System.currentTimeMillis() - begin;
  connection.data.totalCommandExecutionTime+=connection.data.lastCommandExecutionTime;
}
