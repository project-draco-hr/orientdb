{
  if (channel.socket.isInputShutdown()) {
    connectionClosed();
    return;
  }
  String method=null;
  String uri=null;
  long timer=-1;
  try {
    StringBuilder request=new StringBuilder();
    char c=(char)channel.inStream.read();
    if (channel.inStream.available() == 0) {
      connectionClosed();
      return;
    }
    timer=OProfiler.getInstance().startChrono();
    request.setLength(0);
    request.append(c);
    while (!channel.socket.isInputShutdown()) {
      c=(char)channel.inStream.read();
      if (c == '\r') {
        String[] words=request.toString().split(" ");
        if (words.length < 3) {
          OLogManager.instance().warn(this,"->" + channel.socket.getInetAddress().getHostAddress() + ": Error on invalid content:\n"+ request);
          break;
        }
        method=words[0];
        uri=words[1];
        httpVersion=words[2];
        channel.inStream.read();
        service(method,uri,readAllContent(),channel);
        return;
      }
      request.append(c);
    }
    if (OLogManager.instance().isDebugEnabled())     OLogManager.instance().debug(this,"Parsing request from client " + channel.socket.getInetAddress().getHostAddress() + ":\n"+ request);
  }
 catch (  SocketException e) {
    connectionError();
  }
catch (  SocketTimeoutException e) {
    timeout();
  }
catch (  Throwable t) {
    if (method != null && uri != null)     try {
      sendTextContent(505,"Error on excuting of " + method + " for the resource: "+ uri,"text/plain",t.toString());
    }
 catch (    IOException e) {
    }
  }
 finally {
    if (timer > -1)     OProfiler.getInstance().stopChrono("ONetworkProtocolHttp.execute",timer);
  }
}
