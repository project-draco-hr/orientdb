{
  long oldIndexUsage=profiler.getCounter("db.demo.query.indexUsed");
  long oldcompositeIndexUsed=profiler.getCounter("db.demo.query.compositeIndexUsed");
  long oldcompositeIndexUsed2=profiler.getCounter("db.demo.query.compositeIndexUsed.2");
  long oldcompositeIndexUsed3=profiler.getCounter("db.demo.query.compositeIndexUsed.3");
  long oldcompositeIndexUsed33=profiler.getCounter("db.demo.query.compositeIndexUsed.3.3");
  if (oldIndexUsage == -1) {
    oldIndexUsage=0;
  }
  if (oldcompositeIndexUsed == -1) {
    oldcompositeIndexUsed=0;
  }
  if (oldcompositeIndexUsed2 == -1) {
    oldcompositeIndexUsed2=0;
  }
  if (oldcompositeIndexUsed3 == -1)   oldcompositeIndexUsed3=0;
  if (oldcompositeIndexUsed33 == -1)   oldcompositeIndexUsed33=0;
  final List<ODocument> result=database.command(new OSQLSynchQuery<ODocument>("select * from sqlSelectHashIndexReuseTestClass " + "where prop9 = 0 and fEmbeddedSetTwo contains 92 and prop8 > 2")).execute();
  final Set<Integer> embeddedSet=new HashSet<Integer>(3);
  embeddedSet.add(90);
  embeddedSet.add(91);
  embeddedSet.add(92);
  Assert.assertEquals(result.size(),3);
  for (int i=0; i < 3; i++) {
    final ODocument document=new ODocument();
    document.field("prop8",i * 2 + 4);
    document.field("prop9",0);
    document.field("fEmbeddedSet",embeddedSet);
    Assert.assertEquals(containsDocument(result,document),1);
  }
  long indexUsage=profiler.getCounter("db.demo.query.indexUsed");
  long compositeIndexUsage=profiler.getCounter("db.demo.query.compositeIndexUsed");
  long compositeIndexUsage2=profiler.getCounter("db.demo.query.compositeIndexUsed.2");
  long compositeIndexUsage3=profiler.getCounter("db.demo.query.compositeIndexUsed.3");
  long compositeIndexUsage33=profiler.getCounter("db.demo.query.compositeIndexUsed.3.3");
  if (indexUsage < 0)   indexUsage=0;
  if (compositeIndexUsage < 0)   compositeIndexUsage=0;
  if (compositeIndexUsage2 < 0)   compositeIndexUsage2=0;
  if (compositeIndexUsage3 < 0)   compositeIndexUsage3=0;
  if (compositeIndexUsage33 < 0)   compositeIndexUsage33=0;
  Assert.assertEquals(indexUsage,oldIndexUsage);
  Assert.assertEquals(compositeIndexUsage,oldcompositeIndexUsed);
  Assert.assertEquals(compositeIndexUsage2,oldcompositeIndexUsed2);
  Assert.assertEquals(compositeIndexUsage3,oldcompositeIndexUsed3);
  Assert.assertEquals(compositeIndexUsage33,oldcompositeIndexUsed33);
}
