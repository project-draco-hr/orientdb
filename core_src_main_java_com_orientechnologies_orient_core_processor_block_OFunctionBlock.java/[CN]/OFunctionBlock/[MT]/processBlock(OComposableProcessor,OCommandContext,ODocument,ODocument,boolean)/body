{
  final String function=getRequiredFieldOfClass(iContext,iConfig,"function",String.class);
  final Object[] args;
  final Collection<Object> configuredArgs=getFieldOfClass(iContext,iConfig,"args",Collection.class);
  if (configuredArgs != null) {
    args=new Object[configuredArgs.size()];
    int argIdx=0;
    for (    Object arg : configuredArgs) {
      Object value=resolveValue(iContext,arg);
      if (value instanceof List<?>)       value=((List<?>)value).toArray();
      args[argIdx++]=value;
    }
  }
 else   args=null;
  final OFunction f=ODatabaseRecordThreadLocal.INSTANCE.get().getMetadata().getFunctionLibrary().getFunction(function);
  if (f != null) {
    debug(iContext,"Calling: " + function + "("+ Arrays.toString(args)+ ")...");
    return f.executeInContext(iContext,args);
  }
  int lastDot=function.lastIndexOf('.');
  if (lastDot > -1) {
    final String clsName=function.substring(0,lastDot);
    final String methodName=function.substring(lastDot + 1);
    Class<?> cls=null;
    try {
      cls=Class.forName(clsName);
      Class<?>[] argTypes=new Class<?>[args.length];
      for (int i=0; i < args.length; ++i)       argTypes[i]=args[i].getClass();
      Method m=cls.getMethod(methodName,argTypes);
      return m.invoke(null,args);
    }
 catch (    NoSuchMethodException e) {
      for (      Method m : cls.getMethods()) {
        if (m.getName().equals(methodName) && m.getParameterTypes().length == args.length) {
          try {
            return m.invoke(null,args);
          }
 catch (          Exception e1) {
            e1.printStackTrace();
            throw new OProcessException("Error on call function '" + function + "'",e);
          }
        }
      }
    }
catch (    Exception e) {
      e.printStackTrace();
    }
  }
  throw new OProcessException("Function '" + function + "' was not found");
}
