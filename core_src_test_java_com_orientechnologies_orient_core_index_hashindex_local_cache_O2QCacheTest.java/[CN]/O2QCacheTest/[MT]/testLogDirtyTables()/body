{
  closeBufferAndDeleteFile();
  File file=new File(storageLocal.getConfiguration().getDirectory());
  if (!file.exists())   file.mkdir();
  writeAheadLog=new OWriteAheadLog(1024,-1,10 * 1024,100L * 1024 * 1024* 1024,storageLocal);
  final OStorageSegmentConfiguration segmentConfiguration=new OStorageSegmentConfiguration(storageLocal.getConfiguration(),"o2QCacheTest",0);
  segmentConfiguration.fileType=OFileFactory.CLASSIC;
  buffer=new O2QCache(4 * (8 + systemOffset),2,directMemory,writeAheadLog,8 + systemOffset,storageLocal,true);
  long fileId=buffer.openFile(fileConfiguration,".tst");
  for (int i=0; i < 8; i++) {
    long dataPointer=buffer.load(fileId,i);
    setLsn(dataPointer,new OLogSequenceNumber(i,i + 1));
    buffer.markDirty(fileId,i);
    buffer.release(fileId,i);
  }
  buffer.flushBuffer();
  buffer.clear();
  for (int i=0; i < 8; i++) {
    long dataPointer=buffer.load(fileId,i);
    OIntegerSerializer.INSTANCE.serializeInDirectMemory(2 * i,directMemory,dataPointer + OLongSerializer.LONG_SIZE + OIntegerSerializer.INT_SIZE);
    OLongSerializer.INSTANCE.serializeInDirectMemory(2 * i + 1L,directMemory,dataPointer + OLongSerializer.LONG_SIZE + 2 * OIntegerSerializer.INT_SIZE);
    buffer.markDirty(fileId,i);
    buffer.release(fileId,i);
  }
  Set<ODirtyPage> dirtyPages=buffer.logDirtyPagesTable();
  Set<ODirtyPage> expectedDirtyPages=new HashSet<ODirtyPage>();
  for (int i=7; i >= 2; i--)   expectedDirtyPages.add(new ODirtyPage("o2QCacheTest",i,new OLogSequenceNumber(i,i + 1)));
  Assert.assertEquals(dirtyPages,expectedDirtyPages);
  final ODirtyPagesRecord dirtyPagesRecord=(ODirtyPagesRecord)writeAheadLog.read(writeAheadLog.begin());
  Assert.assertEquals(dirtyPagesRecord.getDirtyPages(),dirtyPages);
}
