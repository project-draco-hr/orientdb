{
  final OClass cls=iDocument.getSchemaClass();
  if (cls == null)   return;
  final Collection<OIndex<?>> indexes=new ArrayList<OIndex<?>>(cls.getIndexes());
  if (!indexes.isEmpty()) {
    final Set<String> dirtyFields=new HashSet<String>(Arrays.asList(iDocument.getDirtyFields()));
    if (!dirtyFields.isEmpty()) {
      final Iterator<OIndex<?>> indexIterator=indexes.iterator();
      while (indexIterator.hasNext()) {
        final OIndex<?> index=indexIterator.next();
        final boolean result;
        if (index.getDefinition() instanceof OCompositeIndexDefinition)         result=processCompositeIndexDelete(index,dirtyFields,iDocument);
 else         result=processSingleIndexDelete(index,dirtyFields,iDocument);
        if (result)         indexIterator.remove();
      }
    }
    for (    final OIndex<?> index : indexes) {
      final Object key=index.getDefinition().getDocumentValueToIndex(iDocument);
      deleteIndexKey(index,iDocument,key);
    }
  }
  if (iDocument.isTrackingChanges()) {
    iDocument.setTrackingChanges(false);
    iDocument.setTrackingChanges(true);
  }
}
