{
  final OCommandRequestText textRequest=(OCommandRequestText)iRequest;
  String queryText=textRequest.getText();
  String originalQuery=queryText;
  try {
    queryText=preParse(queryText,iRequest);
    textRequest.setText(queryText);
    init((OCommandRequestText)iRequest);
    parserRequiredKeyword("DELETE");
    parserRequiredKeyword("EDGE");
    OClass clazz=null;
    String where=null;
    String temp=parseOptionalWord(true);
    String originalTemp=null;
    if (temp != null && !parserIsEnded())     originalTemp=parserText.substring(parserGetPreviousPosition(),parserGetCurrentPosition()).trim();
    final OModifiableBoolean shutdownFlag=new OModifiableBoolean();
    ODatabaseDocumentInternal curDb=ODatabaseRecordThreadLocal.INSTANCE.get();
    final OrientGraph graph=OGraphCommandExecutorSQLFactory.getGraph(false,shutdownFlag);
    try {
      while (temp != null) {
        if (temp.equals("FROM")) {
          fromExpr=parserRequiredWord(false,"Syntax error"," =><,\r\n");
          if (rids != null)           throwSyntaxErrorException("FROM '" + fromExpr + "' is not allowed when specify a RIDs ("+ rids+ ")");
        }
 else         if (temp.equals("TO")) {
          toExpr=parserRequiredWord(false,"Syntax error"," =><,\r\n");
          if (rids != null)           throwSyntaxErrorException("TO '" + toExpr + "' is not allowed when specify a RID ("+ rids+ ")");
        }
 else         if (temp.startsWith("#")) {
          rids=new ArrayList<ORecordId>();
          rids.add(new ORecordId(temp));
          if (fromExpr != null || toExpr != null)           throwSyntaxErrorException("Specifying the RID " + rids + " is not allowed with FROM/TO");
        }
 else         if (temp.startsWith("[") && temp.endsWith("]")) {
          temp=temp.substring(1,temp.length() - 1);
          rids=new ArrayList<ORecordId>();
          for (          String rid : temp.split(",")) {
            rid=rid.trim();
            if (!rid.startsWith("#")) {
              throwSyntaxErrorException("Not a valid RID: " + rid);
            }
            rids.add(new ORecordId(rid));
          }
        }
 else         if (temp.equals(KEYWORD_WHERE)) {
          if (clazz == null)           clazz=graph.getEdgeType(OrientEdgeType.CLASS_NAME);
          where=parserGetCurrentPosition() > -1 ? " " + parserText.substring(parserGetCurrentPosition()) : "";
          compiledFilter=OSQLEngine.getInstance().parseCondition(where,getContext(),KEYWORD_WHERE);
          break;
        }
 else         if (temp.equals(KEYWORD_RETRY)) {
          parseRetry();
        }
 else         if (temp.equals(KEYWORD_BATCH)) {
          temp=parserNextWord(true);
          if (temp != null)           batch=Integer.parseInt(temp);
        }
 else         if (temp.length() > 0) {
          label=originalTemp;
          clazz=graph.getEdgeType(temp);
          if (clazz == null)           throw new OCommandSQLParsingException("Class '" + temp + "' was not found");
        }
        temp=parseOptionalWord(true);
        if (parserIsEnded())         break;
      }
      if (where == null)       where="";
 else       where=" WHERE " + where;
      if (fromExpr == null && toExpr == null && rids == null)       if (clazz == null)       query=graph.getRawGraph().command(new OSQLAsynchQuery<ODocument>("select from E" + where,this));
 else       query=graph.getRawGraph().command(new OSQLAsynchQuery<ODocument>("select from " + clazz.getName() + where,this));
      return this;
    }
  finally {
      if (shutdownFlag.getValue())       graph.shutdown(false);
      ODatabaseRecordThreadLocal.INSTANCE.set(curDb);
    }
  }
  finally {
    textRequest.setText(originalQuery);
  }
}
