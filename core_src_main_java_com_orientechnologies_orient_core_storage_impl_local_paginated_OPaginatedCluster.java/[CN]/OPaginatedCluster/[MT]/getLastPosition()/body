{
  acquireSharedLock();
  try {
    long pagesCount=diskCache.getFilledUpTo(fileId);
    for (long i=pagesCount - 1; i >= 0; i--) {
      OCacheEntry cacheEntry=diskCache.load(fileId,i,false);
      OCachePointer pagePointer=cacheEntry.getCachePointer();
      try {
        final OClusterPage localPage=new OClusterPage(pagePointer.getDataPointer(),false,ODurablePage.TrackMode.NONE);
        final int recordsCount=localPage.getRecordsCount();
        if (recordsCount > 0) {
          int recordPosition=Integer.MAX_VALUE;
          for (int n=0; n < recordsCount; n++) {
            recordPosition=localPage.findLastRecord(recordPosition);
            int recordPageOffset=localPage.getRecordPageOffset(recordPosition);
            int recordSize=localPage.getRecordSize(recordPosition);
            if (localPage.getByteValue(recordPageOffset + recordSize - OByteSerializer.BYTE_SIZE - OLongSerializer.LONG_SIZE) == 1)             return OClusterPositionFactory.INSTANCE.valueOf((i << PAGE_INDEX_OFFSET) | recordPosition);
            recordPosition--;
          }
        }
      }
  finally {
        diskCache.release(cacheEntry);
      }
    }
    return OClusterPosition.INVALID_POSITION;
  }
  finally {
    releaseSharedLock();
  }
}
