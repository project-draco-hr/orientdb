{
  final long[] parentNode=hashTree[nodeInfo.parent.nodeIndex];
  int startIndex=-1;
  for (int i=0; i < parentNode.length; i++)   if (parentNode[i] < 0 && (parentNode[i] & Long.MAX_VALUE) >>> 8 == nodeInfo.nodeIndex) {
    startIndex=i;
    break;
  }
  final int pointersSize=1 << (MAX_LEVEL_DEPTH - nodeLocalDepth);
  for (int i=0; i < pointersSize; i++) {
    parentNode[startIndex + i]=(nodeInfo.nodeIndex << 8) | (i * hashMapSize) | Long.MIN_VALUE;
  }
  if (allHashMapsEquals) {
    for (int i=0; i < pointersSize; i++) {
      final long position=newNode[i * hashMapSize];
      parentNode[startIndex + pointersSize + i]=position;
    }
  }
 else {
    for (int i=0; i < pointersSize; i++)     parentNode[startIndex + pointersSize + i]=(newNodeIndex << 8) | (i * hashMapSize) | Long.MIN_VALUE;
  }
}
