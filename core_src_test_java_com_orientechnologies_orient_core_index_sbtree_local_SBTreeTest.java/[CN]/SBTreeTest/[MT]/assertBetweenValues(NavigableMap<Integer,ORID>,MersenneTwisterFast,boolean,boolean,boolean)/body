{
  long totalTime=0;
  long totalIterations=0;
  for (int i=0; i < 100; i++) {
    int upperBorder=keyValues.lastKey() + 5000;
    int fromKey;
    if (upperBorder > 0)     fromKey=random.nextInt(upperBorder);
 else     fromKey=random.nextInt(Integer.MAX_VALUE - 1);
    if (random.nextBoolean()) {
      Integer includedKey=keyValues.ceilingKey(fromKey);
      if (includedKey != null)       fromKey=includedKey;
 else       fromKey=keyValues.floorKey(fromKey);
    }
    int toKey=random.nextInt() + fromKey + 1;
    if (toKey < 0)     toKey=Integer.MAX_VALUE;
    if (random.nextBoolean()) {
      Integer includedKey=keyValues.ceilingKey(toKey);
      if (includedKey != null)       toKey=includedKey;
 else       toKey=keyValues.floorKey(toKey);
    }
    if (fromKey > toKey)     toKey=fromKey;
    int maxValuesToFetch=10000;
    Collection<OIdentifiable> orids=sbTree.getValuesBetween(fromKey,fromInclusive,toKey,toInclusive,maxValuesToFetch,ascSortOrder);
    Iterator<ORID> valuesIterator;
    if (ascSortOrder)     valuesIterator=keyValues.subMap(fromKey,fromInclusive,toKey,toInclusive).values().iterator();
 else     valuesIterator=keyValues.descendingMap().subMap(toKey,toInclusive,fromKey,fromInclusive).values().iterator();
    Iterator<OIdentifiable> resultIterator=orids.iterator();
    long startTime=System.currentTimeMillis();
    int fetchedValues=0;
    while (valuesIterator.hasNext() && fetchedValues < maxValuesToFetch) {
      ORID value=valuesIterator.next();
      OIdentifiable resultValue=resultIterator.next();
      Assert.assertEquals(resultValue,value);
      fetchedValues++;
    }
    long endTime=System.currentTimeMillis();
    totalIterations+=fetchedValues;
    totalTime+=(endTime - startTime);
    if (valuesIterator.hasNext())     Assert.assertEquals(fetchedValues,maxValuesToFetch);
    Assert.assertFalse(resultIterator.hasNext());
  }
  if (totalTime != 0)   System.out.println("Iterations per second : " + (totalIterations * 1000) / totalTime);
}
