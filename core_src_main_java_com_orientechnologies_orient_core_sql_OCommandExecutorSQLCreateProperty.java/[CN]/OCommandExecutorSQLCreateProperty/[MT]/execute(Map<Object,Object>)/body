{
  if (type == null)   throw new OCommandExecutionException("Cannot execute the command because it has not been parsed yet");
  final ODatabaseDocument database=getDatabase();
  final OClassImpl sourceClass=(OClassImpl)database.getMetadata().getSchema().getClass(className);
  if (sourceClass == null)   throw new OCommandExecutionException("Source class '" + className + "' not found");
  OPropertyImpl prop=(OPropertyImpl)sourceClass.getProperty(fieldName);
  if (prop != null)   throw new OCommandExecutionException("Property '" + className + "."+ fieldName+ "' already exists. Remove it before to retry.");
  OClass linkedClass=null;
  OType linkedType=null;
  if (linked != null) {
    linkedClass=database.getMetadata().getSchema().getClass(linked);
    if (linkedClass == null)     linkedType=OType.valueOf(linked.toUpperCase(Locale.ENGLISH));
  }
  OPropertyImpl internalProp=sourceClass.addPropertyInternal(fieldName,type,linkedType,linkedClass,unsafe);
  boolean toSave=false;
  if (readonly) {
    internalProp.setReadonly(true);
    toSave=true;
  }
  if (mandatory) {
    internalProp.setMandatory(true);
    toSave=true;
  }
  if (notnull) {
    internalProp.setNotNull(true);
    toSave=true;
  }
  if (max != null) {
    internalProp.setMax(max);
    toSave=true;
  }
  if (min != null) {
    internalProp.setMin(min);
    toSave=true;
  }
  if (defaultValue != null) {
    internalProp.setDefaultValue(defaultValue);
    toSave=true;
  }
  if (collate != null) {
    internalProp.setCollate(collate);
    toSave=true;
  }
  if (regex != null) {
    internalProp.setRegexp(regex);
    toSave=true;
  }
  if (toSave) {
    internalProp.save();
  }
  return sourceClass.properties().size();
}
