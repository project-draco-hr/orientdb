{
  actualStorage=mock(OLocalPaginatedStorage.class);
  OStorageConfiguration storageConfiguration=mock(OStorageConfiguration.class);
  storageConfiguration.clusters=new ArrayList<OStorageClusterConfiguration>();
  storageConfiguration.fileTemplate=new OStorageSegmentConfiguration();
  actualStorageDir=buildDirectory + "/sbtreeWithWALTestActual";
  when(actualStorage.getStoragePath()).thenReturn(actualStorageDir);
  when(actualStorage.getName()).thenReturn("sbtreeWithWALTesActual");
  File buildDir=new File(buildDirectory);
  if (!buildDir.exists())   buildDir.mkdirs();
  File actualStorageDirFile=new File(actualStorageDir);
  if (!actualStorageDirFile.exists())   actualStorageDirFile.mkdirs();
  writeAheadLog=new OWriteAheadLog(6000,-1,10 * 1024L * OWALPage.PAGE_SIZE,100L * 1024 * 1024* 1024,actualStorage);
  actualDiskCache=new OReadWriteDiskCache(400L * 1024 * 1024* 1024,1648L * 1024 * 1024,OGlobalConfiguration.DISK_CACHE_PAGE_SIZE.getValueAsInteger() * 1024,1000000,100,actualStorage,null,false,false);
  OStorageVariableParser variableParser=new OStorageVariableParser(actualStorageDir);
  when(actualStorage.getStorageTransaction()).thenReturn(null);
  when(actualStorage.getDiskCache()).thenReturn(actualDiskCache);
  when(actualStorage.getWALInstance()).thenReturn(writeAheadLog);
  when(actualStorage.getVariableParser()).thenReturn(variableParser);
  when(actualStorage.getConfiguration()).thenReturn(storageConfiguration);
  when(actualStorage.getMode()).thenReturn("rw");
  when(storageConfiguration.getDirectory()).thenReturn(actualStorageDir);
  sbTree=new OSBTree<Integer,OIdentifiable>(".sbt",1,false);
  sbTree.create("actualSBTree",0,OIntegerSerializer.INSTANCE,OLinkSerializer.INSTANCE,actualStorage);
}
