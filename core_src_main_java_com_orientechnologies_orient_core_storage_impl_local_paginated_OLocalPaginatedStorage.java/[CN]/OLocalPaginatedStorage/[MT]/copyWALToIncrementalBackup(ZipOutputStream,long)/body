{
  File[] nonActiveSegments;
  OLogSequenceNumber lastLSN;
  long freezeId=getAtomicOperationsManager().freezeAtomicOperations(null,null);
  try {
    writeAheadLog.newSegment();
    nonActiveSegments=writeAheadLog.nonActiveSegments(startSegment);
    lastLSN=writeAheadLog.end();
  }
  finally {
    getAtomicOperationsManager().releaseAtomicOperations(freezeId);
  }
  for (  final File nonActiveSegment : nonActiveSegments) {
    final FileInputStream fileInputStream=new FileInputStream(nonActiveSegment);
    try {
      final BufferedInputStream bufferedInputStream=new BufferedInputStream(fileInputStream);
      try {
        final ZipEntry entry=new ZipEntry(nonActiveSegment.getName());
        zipOutputStream.putNextEntry(entry);
        try {
          final byte[] buffer=new byte[4096];
          int br=0;
          while ((br=bufferedInputStream.read(buffer)) >= 0) {
            zipOutputStream.write(buffer,0,br);
          }
        }
  finally {
          zipOutputStream.closeEntry();
        }
      }
  finally {
        bufferedInputStream.close();
      }
    }
  finally {
      fileInputStream.close();
    }
  }
  return lastLSN;
}
