{
  boolean preValidation=database.isValidationEnabled();
  try {
    listener.onMessage("\nStarted import of database '" + database.getURL() + "' from "+ fileName+ "...");
    long time=System.currentTimeMillis();
    jsonReader.readNext(OJSONReader.BEGIN_OBJECT);
    database.setMVCC(false);
    database.setValidationEnabled(false);
    database.setStatus(STATUS.IMPORTING);
    if (!merge) {
      removeDefaultNonSecurityClasses();
      database.getMetadata().getIndexManager().reload();
    }
    for (    OIndex<?> index : database.getMetadata().getIndexManager().getIndexes()) {
      if (index.isAutomatic())       indexesToRebuild.add(index.getName().toLowerCase());
    }
    String tag;
    boolean clustersImported=false;
    while (jsonReader.hasNext() && jsonReader.lastChar() != '}') {
      tag=jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);
      if (tag.equals("info"))       importInfo();
 else       if (tag.equals("clusters")) {
        importClusters();
        clustersImported=true;
      }
 else       if (tag.equals("schema"))       importSchema(clustersImported);
 else       if (tag.equals("records"))       importRecords();
 else       if (tag.equals("indexes"))       importIndexes();
 else       if (tag.equals("manualIndexes"))       importManualIndexes();
 else       throw new ODatabaseImportException("Invalid format. Found unsupported tag '" + tag + "'");
    }
    if (rebuildIndexes)     rebuildIndexes();
    database.getMetadata().reload();
    database.getStorage().synch();
    database.setStatus(STATUS.OPEN);
    if (isDeleteRIDMapping())     removeExportImportRIDsMap();
    listener.onMessage("\n\nDatabase import completed in " + ((System.currentTimeMillis() - time)) + " ms");
  }
 catch (  Exception e) {
    final StringWriter writer=new StringWriter();
    writer.append("Error on database import happened just before line " + jsonReader.getLineNumber() + ", column "+ jsonReader.getColumnNumber()+ "\n");
    final PrintWriter printWriter=new PrintWriter(writer);
    e.printStackTrace(printWriter);
    printWriter.flush();
    listener.onMessage(writer.toString());
    try {
      writer.close();
    }
 catch (    IOException e1) {
      throw new ODatabaseExportException("Error on importing database '" + database.getName() + "' from file: "+ fileName,e1);
    }
    throw new ODatabaseExportException("Error on importing database '" + database.getName() + "' from file: "+ fileName,e);
  }
 finally {
    database.setValidationEnabled(preValidation);
    close();
  }
  return this;
}
