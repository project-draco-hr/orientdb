{
  OLogManager.instance().info(this,"OrientDB Server v" + OConstants.getVersion() + " is starting up...");
  Orient.instance();
  clientConnectionManager=new OClientConnectionManager(this);
  initFromConfiguration();
  if (OGlobalConfiguration.ENVIRONMENT_DUMP_CFG_AT_STARTUP.getValueAsBoolean()) {
    System.out.println("Dumping environment after server startup...");
    OGlobalConfiguration.dumpConfiguration(System.out);
  }
  dbPoolFactory=new OPartitionedDatabasePoolFactory();
  dbPoolFactory.setMaxPoolSize(contextConfiguration.getValueAsInteger(OGlobalConfiguration.DB_POOL_MAX));
  databaseDirectory=contextConfiguration.getValue("server.database.path",serverRootDirectory + "/databases/");
  databaseDirectory=OFileUtils.getPath(OSystemVariableResolver.resolveSystemVariables(databaseDirectory));
  databaseDirectory=databaseDirectory.replace("//","/");
  databaseDirectory=(new File(databaseDirectory)).getCanonicalPath();
  databaseDirectory=OFileUtils.getPath(databaseDirectory);
  if (!databaseDirectory.endsWith("/"))   databaseDirectory+="/";
  OLogManager.instance().info(this,"Databases directory: " + new File(databaseDirectory).getAbsolutePath());
  Orient.instance().getProfiler().registerHookValue("system.databases","List of databases configured in Server",METRIC_TYPE.TEXT,new OProfilerHookValue(){
    @Override public Object getValue(){
      final StringBuilder dbs=new StringBuilder(64);
      for (      String dbName : getAvailableStorageNames().keySet()) {
        if (dbs.length() > 0)         dbs.append(',');
        dbs.append(dbName);
      }
      return dbs.toString();
    }
  }
);
  return this;
}
