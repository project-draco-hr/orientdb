{
  List<Integer> keys=new ArrayList<Integer>();
  keys.clear();
  Random random=new Random();
  while (keys.size() < KEYS_COUNT) {
    int key=random.nextInt();
    if (localHashTable.get(key) == null) {
      localHashTable.put(key,key + "");
      keys.add(key);
      Assert.assertEquals(localHashTable.get(key),key + "");
    }
  }
  Collections.sort(keys);
  for (  int key : keys) {
    OHashIndexBucket.Entry<Integer,String>[] entries=localHashTable.ceilingEntries(key);
    Assert.assertTrue(key == entries[0].key);
  }
  for (int j=0, keysSize=keys.size() - 1; j < keysSize; j++) {
    int key=keys.get(j);
    int sKey=localHashTable.higherEntries(key)[0].key;
    Assert.assertTrue(sKey == keys.get(j + 1));
  }
}
