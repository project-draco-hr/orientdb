{
  setDataCommandInfo(connection,"Execute remote command");
  byte type=channel.readByte();
  final boolean live=type == 'l';
  final boolean asynch=type == 'a';
  if (connection == null && connection.getDatabase() == null)   throw new IOException("Found invalid session");
  String dbSerializerName=connection.getDatabase().getSerializer().toString();
  String name=getRecordSerializerName(connection);
  if (!dbSerializerName.equals(name)) {
    ORecordSerializer ser=ORecordSerializerFactory.instance().getFormat(name);
    ONetworkThreadLocalSerializer.setNetworkSerializer(ser);
  }
  OCommandRequestText command=(OCommandRequestText)OStreamSerializerAnyStreamable.INSTANCE.fromStream(channel.readBytes());
  ONetworkThreadLocalSerializer.setNetworkSerializer(null);
  final Map<Object,Object> params=command.getParameters();
  if (asynch && command instanceof OSQLSynchQuery) {
    final OSQLAsynchQuery asynchQuery=new OSQLAsynchQuery(command.getText());
    asynchQuery.setFetchPlan(command.getFetchPlan());
    asynchQuery.setLimit(command.getLimit());
    asynchQuery.setTimeout(command.getTimeoutTime(),command.getTimeoutStrategy());
    asynchQuery.setUseCache(((OSQLSynchQuery)command).isUseCache());
    command=asynchQuery;
  }
  connection.getData().commandDetail=command.getText();
  beginResponse();
  try {
    connection.getData().command=command;
    OAbstractCommandResultListener listener=null;
    OLiveCommandResultListener liveListener=null;
    OCommandResultListener cmdResultListener=command.getResultListener();
    if (live) {
      liveListener=new OLiveCommandResultListener(server,connection,clientTxId,cmdResultListener);
      listener=new OSyncCommandResultListener(null);
      command.setResultListener(liveListener);
    }
 else     if (asynch) {
      final OCommandCache cmdCache=connection.getDatabase().getMetadata().getCommandCache();
      if (cmdCache.isEnabled())       cmdResultListener=new OAbstractCommandResultListener(cmdResultListener){
        private OResultSet collector=new OConcurrentResultSet<ORecord>();
        @Override public boolean isEmpty(){
          return collector != null && collector.isEmpty();
        }
        @Override public boolean result(        final Object iRecord){
          if (collector != null) {
            if (collector.currentSize() > cmdCache.getMaxResultsetSize()) {
              collector=null;
            }
 else             if (iRecord != null && iRecord instanceof ORecord)             collector.add(iRecord);
          }
          return true;
        }
        @Override public Object getResult(){
          return collector;
        }
        @Override public void end(){
          collector.setCompleted();
        }
      }
;
      listener=new OAsyncCommandResultListener(connection,this,clientTxId,cmdResultListener);
      command.setResultListener(listener);
    }
 else {
      listener=new OSyncCommandResultListener(null);
    }
    final long serverTimeout=OGlobalConfiguration.COMMAND_TIMEOUT.getValueAsLong();
    if (serverTimeout > 0 && command.getTimeoutTime() > serverTimeout)     command.setTimeout(serverTimeout,command.getTimeoutStrategy());
    if (!isConnectionAlive(connection))     return;
    command.setCacheableResult(true);
    listener.setFetchPlan(connection.getDatabase().command(command).getFetchPlan());
    final Object result;
    if (params == null)     result=connection.getDatabase().command(command).execute();
 else     result=connection.getDatabase().command(command).execute(params);
    listener.setFetchPlan(command.getFetchPlan());
    if (asynch) {
      if (listener.isEmpty())       try {
        sendOk(connection,clientTxId);
      }
 catch (      IOException ignored) {
      }
      channel.writeByte((byte)0);
    }
 else {
      sendOk(connection,clientTxId);
      boolean isRecordResultSet=true;
      if (command instanceof OCommandRequestInternal)       isRecordResultSet=command.isRecordResultSet();
      serializeValue(connection,listener,result,false,isRecordResultSet);
      if (listener instanceof OSyncCommandResultListener) {
        for (        ORecord rec : ((OSyncCommandResultListener)listener).getFetchedRecordsToSend()) {
          channel.writeByte((byte)2);
          writeIdentifiable(connection,rec);
        }
        channel.writeByte((byte)0);
      }
    }
  }
  finally {
    connection.getData().command=null;
    endResponse(connection);
  }
}
