{
  final int keySize=keySerializer.getObjectSize(treeEntry.key,(Object[])keyTypes);
  int valueSize=0;
  int entrySize=keySize;
  if (isLeaf) {
    if (valueSerializer.isFixedLength())     valueSize=valueSerializer.getFixedLength();
 else {
      if (treeEntry.value.isLink())       valueSize=OLongSerializer.LONG_SIZE;
 else       valueSize=valueSerializer.getObjectSize(treeEntry.value.getValue());
    }
    entrySize+=valueSize + OByteSerializer.BYTE_SIZE;
  }
 else   entrySize+=2 * OLongSerializer.LONG_SIZE;
  int size=size();
  int freePointer=getIntValue(FREE_POINTER_OFFSET);
  if (freePointer - entrySize < (size + 1) * OIntegerSerializer.INT_SIZE + POSITIONS_ARRAY_OFFSET)   return false;
  if (index <= size - 1) {
    moveData(POSITIONS_ARRAY_OFFSET + index * OIntegerSerializer.INT_SIZE,POSITIONS_ARRAY_OFFSET + (index + 1) * OIntegerSerializer.INT_SIZE,(size - index) * OIntegerSerializer.INT_SIZE);
  }
  freePointer-=entrySize;
  setIntValue(FREE_POINTER_OFFSET,freePointer);
  setIntValue(POSITIONS_ARRAY_OFFSET + index * OIntegerSerializer.INT_SIZE,freePointer);
  setIntValue(SIZE_OFFSET,size + 1);
  if (isLeaf) {
    byte[] serializedKey=new byte[keySize];
    keySerializer.serializeNative(treeEntry.key,serializedKey,0,(Object[])keyTypes);
    setBinaryValue(freePointer,serializedKey);
    freePointer+=keySize;
    setByteValue(freePointer,treeEntry.value.isLink() ? (byte)1 : (byte)0);
    freePointer+=OByteSerializer.BYTE_SIZE;
    byte[] serializedValue=new byte[valueSize];
    if (treeEntry.value.isLink())     OLongSerializer.INSTANCE.serializeNative(treeEntry.value.getLink(),serializedValue,0);
 else     valueSerializer.serializeNative(treeEntry.value.getValue(),serializedValue,0);
    setBinaryValue(freePointer,serializedValue);
  }
 else {
    setLongValue(freePointer,treeEntry.leftChild);
    freePointer+=OLongSerializer.LONG_SIZE;
    setLongValue(freePointer,treeEntry.rightChild);
    freePointer+=OLongSerializer.LONG_SIZE;
    byte[] serializedKey=new byte[keySize];
    keySerializer.serializeNative(treeEntry.key,serializedKey,0,(Object[])keyTypes);
    setBinaryValue(freePointer,serializedKey);
    size++;
    if (updateNeighbors && size > 1) {
      if (index < size - 1) {
        final int nextEntryPosition=getIntValue(POSITIONS_ARRAY_OFFSET + (index + 1) * OIntegerSerializer.INT_SIZE);
        setLongValue(nextEntryPosition,treeEntry.rightChild);
      }
      if (index > 0) {
        final int prevEntryPosition=getIntValue(POSITIONS_ARRAY_OFFSET + (index - 1) * OIntegerSerializer.INT_SIZE);
        setLongValue(prevEntryPosition + OLongSerializer.LONG_SIZE,treeEntry.leftChild);
      }
    }
  }
  return true;
}
