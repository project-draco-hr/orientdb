{
  OTraverseStatement jjtn000=new OTraverseStatement(JJTTRAVERSESTATEMENT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
  OTraverseProjectionItem lastProjection;
  try {
    jj_consume_token(TRAVERSE);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TO:
case VALUES:
case SET:
case ADD:
case PUT:
case MERGE:
case CONTENT:
case REMOVE:
case ORDER:
case GROUP:
case OFFSET:
case RECORD:
case LUCENE:
case MINDEPTH:
case THIS:
case CLASS:
case CLASSES:
case RECORD_ATTRIBUTE:
case LBRACKET:
case BACKTICK:
case STAR:
case IN:
case KEY:
case IDENTIFIER:
      lastProjection=TraverseProjectionItem();
    jjtn000.projections.add(lastProjection);
  label_1:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
      ;
    break;
default :
  jj_la1[30]=jj_gen;
break label_1;
}
jj_consume_token(COMMA);
lastProjection=TraverseProjectionItem();
jjtn000.projections.add(lastProjection);
}
break;
default :
jj_la1[31]=jj_gen;
;
}
jj_consume_token(FROM);
jjtn000.target=FromClause();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case MAXDEPTH:
jj_consume_token(MAXDEPTH);
jjtn000.maxDepth=Integer();
break;
default :
jj_la1[32]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case WHILE:
jj_consume_token(WHILE);
jjtn000.whereClause=WhereClause();
break;
default :
jj_la1[33]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIMIT:
jjtn000.limit=Limit();
break;
default :
jj_la1[34]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRATEGY:
jj_consume_token(STRATEGY);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DEPTH_FIRST:
jj_consume_token(DEPTH_FIRST);
jjtn000.strategy=OTraverseStatement.Strategy.DEPTH_FIRST;
break;
case BREADTH_FIRST:
jj_consume_token(BREADTH_FIRST);
jjtn000.strategy=OTraverseStatement.Strategy.BREADTH_FIRST;
break;
default :
jj_la1[35]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[36]=jj_gen;
;
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
jjtn000.jjtSetLastToken(getToken(0));
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
jjtn000.jjtSetLastToken(getToken(0));
}
}
throw new Error("Missing return statement in function");
}
