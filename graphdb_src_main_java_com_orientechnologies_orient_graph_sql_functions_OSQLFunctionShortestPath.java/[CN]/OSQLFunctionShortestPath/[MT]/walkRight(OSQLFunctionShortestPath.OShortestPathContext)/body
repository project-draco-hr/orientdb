{
  final ArrayDeque<OrientVertex> nextLevelQueue=new ArrayDeque<OrientVertex>();
  while (!ctx.queueRight.isEmpty()) {
    ctx.currentRight=ctx.queueRight.poll();
    Iterable<Vertex> neighbors;
    if (ctx.edgeType == null) {
      neighbors=ctx.currentRight.getVertices(ctx.directionRight);
    }
 else {
      neighbors=ctx.currentRight.getVertices(ctx.directionRight,ctx.edgeTypeParam);
    }
    for (    Vertex neighbor : neighbors) {
      final OrientVertex v=(OrientVertex)neighbor;
      final ORID neighborIdentity=v.getIdentity();
      if (ctx.leftVisited.contains(neighborIdentity)) {
        ctx.nexts.put(neighborIdentity,ctx.currentRight.getIdentity());
        return computePath(ctx.previouses,ctx.nexts,neighborIdentity);
      }
      if (!ctx.rightVisited.contains(neighborIdentity)) {
        ctx.nexts.put(neighborIdentity,ctx.currentRight.getIdentity());
        nextLevelQueue.offer(v);
        ctx.rightVisited.add(neighborIdentity);
      }
    }
  }
  ctx.queueRight=nextLevelQueue;
  return null;
}
