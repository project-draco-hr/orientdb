{
  stateLock.acquireWriteLock();
  try {
    if (status != STATUS.CLOSED)     throw new OStorageException("Cannot create new storage '" + getURL() + "' because it is not closed");
    if (exists())     throw new OStorageException("Cannot create new storage '" + getURL() + "' because it already exists");
    if (!configuration.getContextConfiguration().getContextKeys().contains(OGlobalConfiguration.STORAGE_COMPRESSION_METHOD.getKey())) {
      final String compression=iProperties != null ? (String)iProperties.get(OGlobalConfiguration.STORAGE_COMPRESSION_METHOD.getKey().toLowerCase()) : null;
      if (compression != null)       configuration.getContextConfiguration().setValue(OGlobalConfiguration.STORAGE_COMPRESSION_METHOD,compression);
 else       configuration.getContextConfiguration().setValue(OGlobalConfiguration.STORAGE_COMPRESSION_METHOD,OGlobalConfiguration.STORAGE_COMPRESSION_METHOD.getValue());
      final String compressionOptions=iProperties != null ? (String)iProperties.get(OGlobalConfiguration.STORAGE_COMPRESSION_OPTIONS.getKey().toLowerCase()) : null;
      if (compressionOptions != null)       configuration.getContextConfiguration().setValue(OGlobalConfiguration.STORAGE_COMPRESSION_OPTIONS,compressionOptions);
 else       configuration.getContextConfiguration().setValue(OGlobalConfiguration.STORAGE_COMPRESSION_OPTIONS,OGlobalConfiguration.STORAGE_COMPRESSION_OPTIONS.getValue());
    }
    componentsFactory=new OCurrentStorageComponentsFactory(configuration);
    initWalAndDiskCache();
    atomicOperationsManager=new OAtomicOperationsManager(this);
    try {
      atomicOperationsManager.registerMBean();
    }
 catch (    Exception e) {
      OLogManager.instance().error(this,"MBean for atomic operations manager can not be registered.",e);
    }
    preCreateSteps();
    status=STATUS.OPEN;
    doAddCluster(OMetadataDefault.CLUSTER_INTERNAL_NAME,false,null);
    configuration.create();
    doAddCluster(OMetadataDefault.CLUSTER_INDEX_NAME,false,null);
    doAddCluster(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME,false,null);
    defaultClusterId=doAddCluster(CLUSTER_DEFAULT_NAME,false,null);
    clearStorageDirty();
    if (OGlobalConfiguration.STORAGE_MAKE_FULL_CHECKPOINT_AFTER_CREATE.getValueAsBoolean())     makeFullCheckpoint();
    writeCache.startFuzzyCheckpoints();
    postCreateSteps();
  }
 catch (  OStorageException e) {
    close();
    throw e;
  }
catch (  IOException e) {
    close();
    throw new OStorageException("Error on creation of storage '" + name + "'",e);
  }
 finally {
    stateLock.releaseWriteLock();
  }
}
