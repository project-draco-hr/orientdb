{
  OExtendibleHashingTable extendibleHashingTable=new OExtendibleHashingTable();
  for (int i=0; i < KEYS_COUNT; i++) {
    final OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionLong(i));
    extendibleHashingTable.put(position);
  }
  for (int i=0; i < KEYS_COUNT; i++) {
    if (i % 3 == 0) {
      final OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionLong(i));
      Assert.assertEquals(position,extendibleHashingTable.delete(position.clusterPosition));
    }
  }
  for (int i=0; i < KEYS_COUNT; i++) {
    if (i % 3 == 0) {
      OClusterPosition position=new OClusterPositionLong(i);
      Assert.assertFalse(extendibleHashingTable.contains(position));
    }
 else {
      OClusterPosition position=new OClusterPositionLong(i);
      Assert.assertTrue(extendibleHashingTable.contains(position));
    }
  }
}
