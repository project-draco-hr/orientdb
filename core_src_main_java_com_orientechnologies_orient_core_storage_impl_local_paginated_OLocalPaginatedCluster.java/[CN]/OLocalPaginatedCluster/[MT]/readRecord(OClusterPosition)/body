{
  acquireSharedLock();
  try {
    long pagePointer=clusterPosition.longValue();
    int recordPosition=(int)(pagePointer & RECORD_POSITION_MASK);
    long pageIndex=pagePointer >>> PAGE_INDEX_OFFSET;
    if (diskCache.getFilledUpTo(fileId) <= pageIndex)     return null;
    ORecordVersion recordVersion=null;
    OCacheEntry cacheEntry=diskCache.load(fileId,pageIndex);
    OCachePointer pointer=cacheEntry.getCachePointer();
    try {
      final OLocalPage localPage=new OLocalPage(pointer.getDataPointer(),false,OAbstractPLocalPage.TrackMode.NONE);
      int recordPageOffset=localPage.getRecordPageOffset(recordPosition);
      if (recordPageOffset < 0)       return null;
      recordVersion=localPage.getRecordVersion(recordPosition);
    }
  finally {
      diskCache.release(cacheEntry);
    }
    byte[] fullContent=readFullEntry(clusterPosition);
    if (fullContent == null)     return null;
    int fullContentPosition=0;
    byte recordType=fullContent[fullContentPosition];
    fullContentPosition++;
    int readContentSize=OIntegerSerializer.INSTANCE.deserializeNative(fullContent,fullContentPosition);
    fullContentPosition+=OIntegerSerializer.INT_SIZE;
    byte[] recordContent=new byte[readContentSize];
    System.arraycopy(fullContent,fullContentPosition,recordContent,0,recordContent.length);
    recordContent=compression.uncompress(recordContent);
    return new ORawBuffer(recordContent,recordVersion,recordType);
  }
  finally {
    releaseSharedLock();
  }
}
