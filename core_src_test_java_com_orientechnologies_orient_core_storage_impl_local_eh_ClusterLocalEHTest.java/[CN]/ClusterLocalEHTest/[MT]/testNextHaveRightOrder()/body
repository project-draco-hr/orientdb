{
  List<ONodeId> keys=new ArrayList<ONodeId>();
  keys.clear();
  while (keys.size() < KEYS_COUNT) {
    ONodeId key=ONodeId.generateUniqueId();
    OPhysicalPosition position=new OPhysicalPosition(new OClusterPositionNodeId(key));
    if (extendibleHashingCluster.addPhysicalPosition(position)) {
      keys.add(key);
      Assert.assertNotNull(extendibleHashingCluster.getPhysicalPosition(position),"key " + key);
    }
  }
  Collections.sort(keys);
  OPhysicalPosition[] positions=extendibleHashingCluster.ceilingPositions(new OPhysicalPosition(new OClusterPositionNodeId(ONodeId.ZERO)));
  int curPos=0;
  for (  ONodeId key : keys) {
    OClusterPosition lhKey=positions[curPos].clusterPosition;
    Assert.assertEquals(new OClusterPositionNodeId(key),lhKey,"" + key);
    curPos++;
    if (curPos >= positions.length) {
      positions=extendibleHashingCluster.higherPositions(positions[positions.length - 1]);
      curPos=0;
    }
  }
}
