{
  lastRequestType=-1;
  lastClientTxId=0;
  try {
    lastRequestType=channel.readByte();
    lastClientTxId=channel.readInt();
    if (lastClientTxId > -1)     connection=OClientConnectionManager.instance().getConnection(lastClientTxId);
 else     connection=OClientConnectionManager.instance().connect(connection.protocol.getChannel().socket,this);
    if (connection != null) {
      ODatabaseRecordThreadLocal.INSTANCE.set(connection.database);
      ++connection.data.totalRequests;
      setDataCommandInfo("Listening");
      connection.data.commandDetail="-";
      connection.data.lastCommandReceived=System.currentTimeMillis();
    }
    OServerHandlerHelper.invokeHandlerCallbackOnBeforeClientRequest(connection,(byte)lastRequestType);
    parseCommand();
    OServerHandlerHelper.invokeHandlerCallbackOnAfterClientRequest(connection,(byte)lastRequestType);
  }
 catch (  EOFException e) {
    handleConnectionError(e);
    sendShutdown();
  }
catch (  SocketException e) {
    handleConnectionError(e);
    sendShutdown();
  }
catch (  OException e) {
    sendError(lastClientTxId,e);
  }
catch (  RuntimeException e) {
    sendError(lastClientTxId,e);
  }
catch (  Throwable t) {
    OLogManager.instance().error(this,"Error on executing request",t);
    sendError(lastClientTxId,t);
  }
 finally {
    try {
      channel.flush();
    }
 catch (    Throwable t) {
      OLogManager.instance().debug(this,"Error on send data over the network",t);
    }
    OSerializationThreadLocal.INSTANCE.get().clear();
    if (connection != null) {
      connection.data.lastCommandExecutionTime=System.currentTimeMillis() - connection.data.lastCommandReceived;
      connection.data.totalCommandExecutionTime+=connection.data.lastCommandExecutionTime;
      connection.data.lastCommandInfo=connection.data.commandInfo;
      connection.data.lastCommandDetail=connection.data.commandDetail;
      setDataCommandInfo("Listening");
      connection.data.commandDetail="-";
    }
  }
}
