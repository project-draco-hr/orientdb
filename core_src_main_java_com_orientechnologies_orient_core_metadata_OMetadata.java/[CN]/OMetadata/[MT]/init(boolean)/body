{
  final ODatabaseRecord database=getDatabase();
  schemaClusterId=database.getClusterIdByName(CLUSTER_INTERNAL_NAME);
  schema=new OSchemaProxy(database.getStorage().getResource(OSchema.class.getSimpleName(),new Callable<OSchemaShared>(){
    public OSchemaShared call(){
      final OSchemaShared instance=new OSchemaShared(schemaClusterId);
      if (iLoad)       instance.load();
      return instance;
    }
  }
),database);
  indexManager=new OIndexManagerProxy(database.getStorage().getResource(OIndexManager.class.getSimpleName(),new Callable<OIndexManager>(){
    public OIndexManager call(){
      OIndexManager instance;
      if (database.getStorage() instanceof OStorageProxy)       instance=new OIndexManagerRemote(database);
 else       instance=new OIndexManagerShared(database);
      if (iLoad)       instance.load();
      if (iLoad && OGlobalConfiguration.INDEX_AUTO_REBUILD_AFTER_NOTSOFTCLOSE.getValueAsBoolean() && (database.getStorage() instanceof OStorageLocal)&& !((OStorageLocal)database.getStorage()).isClusterSoftlyClosed(OMetadata.CLUSTER_INDEX_NAME))       for (      OIndex<?> idx : instance.getIndexes())       if (idx.isAutomatic()) {
        try {
          OLogManager.instance().info(idx,"Rebuilding index " + idx.getName() + "..");
          idx.rebuild();
        }
 catch (        Throwable e) {
          OLogManager.instance().info(idx,"Continue with remaining indexes...");
        }
      }
      return instance;
    }
  }
),database);
  final Boolean enableSecurity=(Boolean)database.getProperty(ODatabase.OPTIONS.SECURITY.toString());
  if (enableSecurity != null && !enableSecurity)   security=new OSecurityNull();
 else   security=new OSecurityProxy(database.getStorage().getResource(OSecurity.class.getSimpleName(),new Callable<OSecurityShared>(){
    public OSecurityShared call(){
      final OSecurityShared instance=new OSecurityShared();
      if (iLoad)       instance.load();
      return instance;
    }
  }
),database);
  functionLibrary=new OFunctionLibraryProxy(database.getStorage().getResource(OFunctionLibrary.class.getSimpleName(),new Callable<OFunctionLibrary>(){
    public OFunctionLibrary call(){
      final OFunctionLibraryImpl instance=new OFunctionLibraryImpl();
      if (iLoad)       instance.load();
      return instance;
    }
  }
),database);
}
