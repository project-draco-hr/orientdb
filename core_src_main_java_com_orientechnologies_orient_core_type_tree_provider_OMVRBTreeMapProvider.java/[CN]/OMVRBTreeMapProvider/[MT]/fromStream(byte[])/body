{
  final long timer=OProfiler.getInstance().startChrono();
  try {
    stream.setSource(iStream);
    byte protocolVersion=stream.peek();
    if (protocolVersion != -1) {
      stream.getAsByte();
      if (protocolVersion != CURRENT_PROTOCOL_VERSION)       throw new OSerializationException("The index has been created with a previous version of OrientDB. Soft transitions between versions is supported since 0.9.25. To use it with this version of OrientDB you need to export and import your database. " + protocolVersion + "<->"+ CURRENT_PROTOCOL_VERSION);
    }
    root=new ORecordId();
    root.fromStream(stream.getAsByteArrayFixed(ORecordId.PERSISTENT_SIZE));
    size=stream.getAsInteger();
    if (protocolVersion == -1)     pageSize=stream.getAsShort();
 else     pageSize=stream.getAsInteger();
    if (protocolVersion < 1) {
      keySize=1;
      OLogManager.instance().warn(this,"Previous index version was found, " + " partial composite index queries may do not work if you do not rebuild index.");
    }
 else     keySize=stream.getAsInteger();
    serializerFromStream(stream);
  }
 catch (  Exception e) {
    OLogManager.instance().error(this,"Error on unmarshalling OMVRBTreeMapProvider object from record: %s",e,OSerializationException.class,root);
  }
 finally {
    OProfiler.getInstance().stopChrono("OMVRBTreeMapProvider.fromStream",timer);
  }
  return this;
}
