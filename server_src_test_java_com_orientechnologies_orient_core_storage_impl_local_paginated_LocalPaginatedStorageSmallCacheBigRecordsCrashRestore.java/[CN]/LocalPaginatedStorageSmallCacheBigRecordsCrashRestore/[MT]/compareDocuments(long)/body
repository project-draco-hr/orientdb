{
  long minTs=Long.MAX_VALUE;
  int clusterId=baseDocumentTx.getClusterIdByName("TestClass");
  OStorage baseStorage=baseDocumentTx.getStorage();
  OPhysicalPosition[] physicalPositions=baseStorage.ceilingPhysicalPositions(clusterId,new OPhysicalPosition(0));
  int recordsRestored=0;
  int recordsTested=0;
  while (physicalPositions.length > 0) {
    final ORecordId rid=new ORecordId(clusterId);
    for (    OPhysicalPosition physicalPosition : physicalPositions) {
      rid.clusterPosition=physicalPosition.clusterPosition;
      ODatabaseRecordThreadLocal.INSTANCE.set(baseDocumentTx);
      ODocument baseDocument=baseDocumentTx.load(rid);
      ODatabaseRecordThreadLocal.INSTANCE.set(testDocumentTx);
      List<ODocument> testDocuments=testDocumentTx.query(new OSQLSynchQuery<ODocument>("select from TestClass where id  = " + baseDocument.field("id")));
      if (testDocuments.size() == 0) {
        if (((Long)baseDocument.field("timestamp")) < minTs)         minTs=baseDocument.field("timestamp");
      }
 else {
        ODocument testDocument=testDocuments.get(0);
        Assert.assertEquals(testDocument.field("id"),baseDocument.field("id"));
        Assert.assertEquals(testDocument.field("timestamp"),baseDocument.field("timestamp"));
        Assert.assertEquals(testDocument.field("stringValue"),baseDocument.field("stringValue"));
        Assert.assertEquals(testDocument.field("binaryValue"),baseDocument.field("binaryValue"));
        recordsRestored++;
      }
      recordsTested++;
      if (recordsTested % 10000 == 0)       System.out.println(recordsTested + " were tested, " + recordsRestored+ " were restored ...");
    }
    physicalPositions=baseStorage.higherPhysicalPositions(clusterId,physicalPositions[physicalPositions.length - 1]);
  }
  System.out.println(recordsRestored + " records were restored. Total records " + recordsTested+ ". Max interval for lost records "+ (lastTs - minTs));
}
