{
  final OStoragePerformanceStatistic storagePerformanceStatistic=new OStoragePerformanceStatistic(1024,"test",1,new OStoragePerformanceStatistic.NanoTimer(){
    private long counter=0;
    @Override public long getNano(){
      return counter+=100;
    }
  }
);
  Assert.assertFalse(storagePerformanceStatistic.isMeasurementEnabled());
  Assert.assertEquals(storagePerformanceStatistic.getReadSpeedFromFileInPages(),-1);
  Assert.assertEquals(storagePerformanceStatistic.getReadSpeedFromFileInMB(),-1);
  Assert.assertEquals(storagePerformanceStatistic.getAmountOfPagesReadFromFile(),0);
  storagePerformanceStatistic.startMeasurement();
  storagePerformanceStatistic.startCommitTimer();
  for (int i=0; i < 100; i++) {
    storagePerformanceStatistic.startPageReadFromFileTimer();
    storagePerformanceStatistic.stopPageReadFromFileTimer(10);
  }
  storagePerformanceStatistic.stopCommitTimer();
  Thread.sleep(2000);
  Assert.assertEquals(storagePerformanceStatistic.getReadSpeedFromFileInPages(),100000000);
  Assert.assertEquals(storagePerformanceStatistic.getReadSpeedFromFileInMB(),100000000 / 1024);
  Assert.assertEquals(storagePerformanceStatistic.getAmountOfPagesReadFromFile(),1000);
  storagePerformanceStatistic.stopMeasurement();
  for (int i=0; i < 100; i++) {
    storagePerformanceStatistic.startPageReadFromFileTimer();
    storagePerformanceStatistic.stopPageReadFromFileTimer(10);
  }
  Thread.sleep(2000);
  Assert.assertEquals(storagePerformanceStatistic.getReadSpeedFromFileInPages(),100000000);
  Assert.assertEquals(storagePerformanceStatistic.getReadSpeedFromFileInMB(),100000000 / 1024);
  Assert.assertEquals(storagePerformanceStatistic.getAmountOfPagesReadFromFile(),1000);
  Assert.assertFalse(storagePerformanceStatistic.isMeasurementEnabled());
}
