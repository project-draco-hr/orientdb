{
  try {
    ODocumentHelper.RIDMapper ridMapper=null;
    if (autoDetectExportImportMap) {
      listener.onMessage("\nAuto discovery of mapping between RIDs of exported and imported records is switched on, try to discover mapping data on disk.");
      exportImportHashTable=(OIndex<OIdentifiable>)databaseTwo.getMetadata().getIndexManager().getIndex(ODatabaseImport.EXPORT_IMPORT_MAP_NAME);
      if (exportImportHashTable != null) {
        listener.onMessage("\nMapping data were found and will be loaded.");
        ridMapper=new ODocumentHelper.RIDMapper(){
          @Override public ORID map(          ORID rid){
            if (rid == null)             return null;
            if (!rid.isPersistent())             return null;
            databaseTwo.activateOnCurrentThread();
            final OIdentifiable result=exportImportHashTable.get(rid);
            if (result == null)             return null;
            return result.getIdentity();
          }
        }
;
      }
 else       listener.onMessage("\nMapping data were not found.");
    }
    compareClusters();
    compareRecords(ridMapper);
    compareSchema();
    compareIndexes(ridMapper);
    if (differences == 0) {
      listener.onMessage("\n\nDatabases match.");
      return true;
    }
 else {
      listener.onMessage("\n\nDatabases do not match. Found " + differences + " difference(s).");
      return false;
    }
  }
 catch (  Exception e) {
    OLogManager.instance().error(this,"Error on comparing database '%s' against '%s'",e,databaseOne.getName(),databaseTwo.getName());
    throw new ODatabaseExportException("Error on comparing database '" + databaseOne.getName() + "' against '"+ databaseTwo.getName()+ "'",e);
  }
 finally {
    makeDbCall(databaseOne,new ODbRelatedCall<Void>(){
      @Override public Void call(      ODatabaseDocumentInternal database){
        database.close();
        return null;
      }
    }
);
    makeDbCall(databaseTwo,new ODbRelatedCall<Void>(){
      @Override public Void call(      ODatabaseDocumentInternal database){
        database.close();
        return null;
      }
    }
);
  }
}
