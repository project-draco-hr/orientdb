{
  long timer=OProfiler.getInstance().startChrono();
  Class<?> c=iPojo.getClass();
  List<Field> properties=classes.get(c.getName());
  if (properties == null)   properties=registerClass(c);
  String fieldName;
  Object fieldValue;
  Class<?> fieldClass;
  if (iRecord.getStatus() == STATUS.NOT_LOADED)   iRecord.load();
  for (  Field p : properties) {
    fieldName=p.getName();
    fieldValue=iRecord.field(fieldName);
    if (fieldValue instanceof ODocument && !OType.isSimpleType(p.getClass())) {
      fieldClass=iEntityManager.getEntityClass(p.getType().getSimpleName());
      if (fieldClass != null) {
        fieldValue=iObj2RecHandler.getUserObjectByRecord((ORecordInternal<?>)fieldValue);
      }
    }
 else     if (p.getType().isAssignableFrom(List.class)) {
      Collection<ODocument> list=(Collection<ODocument>)fieldValue;
      List<Object> targetList=new OLazyList<Object>((ODatabaseObjectTx)iRecord.getDatabase().getDatabaseOwner());
      fieldValue=targetList;
      if (list != null && list.size() > 0) {
        targetList.addAll(list);
      }
    }
 else     if (p.getType().isAssignableFrom(Set.class)) {
      Collection<ODocument> set=(Collection<ODocument>)fieldValue;
      Set<Object> target=new OLazySet<Object>((ODatabaseObjectTx)iRecord.getDatabase().getDatabaseOwner(),set);
      fieldValue=target;
    }
 else {
    }
    setFieldValue(iPojo,fieldName,fieldValue);
  }
  OProfiler.getInstance().stopChrono("Object.fromStream",timer);
  return iPojo;
}
