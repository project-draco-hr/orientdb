{
  final Object fieldValue;
  if (iRecord.containsField(p.getName())) {
    if (iRecord instanceof ODocument)     fieldValue=((ODocument)iRecord).rawField(p.getName());
 else     fieldValue=iRecord.field(p.getName());
    if (p.isNotNull() && fieldValue == null)     throw new OValidationException("The field '" + p.getFullName() + "' cannot be null");
    if (fieldValue != null && p.getRegexp() != null) {
      if (!fieldValue.toString().matches(p.getRegexp()))       throw new OValidationException("The field '" + p.getFullName() + "' does not match the regular expression '"+ p.getRegexp()+ "'. Field value is: "+ fieldValue);
    }
  }
 else {
    if (p.isMandatory())     throw new OValidationException("The field '" + p.getFullName() + "' is mandatory");
    fieldValue=null;
  }
  final OType type=p.getType();
  if (fieldValue != null && type != null) {
switch (type) {
case LINK:
      final ORecord<?> linkedRecord;
    if (fieldValue instanceof OIdentifiable)     linkedRecord=((OIdentifiable)fieldValue).getRecord();
 else     if (fieldValue instanceof String)     linkedRecord=new ORecordId((String)fieldValue).getRecord();
 else     throw new OValidationException("The field '" + p.getFullName() + "' has been declared as LINK but the value is not a record or a record-id");
  if (linkedRecord != null && p.getLinkedClass() != null) {
    if (!(linkedRecord instanceof ODocument))     throw new OValidationException("The field '" + p.getFullName() + "' has been declared as LINK of type '"+ p.getLinkedClass()+ "' but the value is the record "+ linkedRecord.getIdentity()+ " that is not a document");
    if (((ODocument)linkedRecord).getSchemaClass() != null && !p.getLinkedClass().isSuperClassOf(((ODocument)linkedRecord).getSchemaClass()))     throw new OValidationException("The field '" + p.getFullName() + "' has been declared as LINK of type '"+ p.getLinkedClass().getName()+ "' but the value is the document "+ linkedRecord.getIdentity()+ " of class '"+ ((ODocument)linkedRecord).getSchemaClass()+ "'");
  }
}
}
if (p.getMin() != null) {
final String min=p.getMin();
if (p.getType().equals(OType.STRING) && (fieldValue != null && ((String)fieldValue).length() < Integer.parseInt(min))) throw new OValidationException("The field '" + p.getFullName() + "' contains fewer characters than "+ min+ " requested");
 else if (p.getType().equals(OType.BINARY) && (fieldValue != null && ((byte[])fieldValue).length < Integer.parseInt(min))) throw new OValidationException("The field '" + p.getFullName() + "' contains fewer bytes than "+ min+ " requested");
 else if (p.getType().equals(OType.INTEGER) && (fieldValue != null && type.asInt(fieldValue) < Integer.parseInt(min))) throw new OValidationException("The field '" + p.getFullName() + "' is less than "+ min);
 else if (p.getType().equals(OType.LONG) && (fieldValue != null && type.asLong(fieldValue) < Long.parseLong(min))) throw new OValidationException("The field '" + p.getFullName() + "' is less than "+ min);
 else if (p.getType().equals(OType.FLOAT) && (fieldValue != null && type.asFloat(fieldValue) < Float.parseFloat(min))) throw new OValidationException("The field '" + p.getFullName() + "' is less than "+ min);
 else if (p.getType().equals(OType.DOUBLE) && (fieldValue != null && type.asDouble(fieldValue) < Double.parseDouble(min))) throw new OValidationException("The field '" + p.getFullName() + "' is less than "+ min);
 else if (p.getType().equals(OType.DATE)) {
try {
  if (fieldValue != null && ((Date)fieldValue).before(iRecord.getDatabase().getStorage().getConfiguration().getDateFormatInstance().parse(min)))   throw new OValidationException("The field '" + p.getFullName() + "' contains the date "+ fieldValue+ " which precedes the first acceptable date ("+ min+ ")");
}
 catch (ParseException e) {
}
}
 else if (p.getType().equals(OType.DATETIME)) {
try {
  if (fieldValue != null && ((Date)fieldValue).before(iRecord.getDatabase().getStorage().getConfiguration().getDateTimeFormatInstance().parse(min)))   throw new OValidationException("The field '" + p.getFullName() + "' contains the datetime "+ fieldValue+ " which precedes the first acceptable datetime ("+ min+ ")");
}
 catch (ParseException e) {
}
}
 else if ((p.getType().equals(OType.EMBEDDEDLIST) || p.getType().equals(OType.EMBEDDEDSET) || p.getType().equals(OType.LINKLIST)|| p.getType().equals(OType.LINKSET)) && (fieldValue != null && ((Collection<?>)fieldValue).size() < Integer.parseInt(min))) throw new OValidationException("The field '" + p.getFullName() + "' contains fewer items than "+ min+ " requested");
}
if (p.getMax() != null) {
final String max=p.getMax();
if (p.getType().equals(OType.STRING) && (fieldValue != null && ((String)fieldValue).length() > Integer.parseInt(max))) throw new OValidationException("The field '" + p.getFullName() + "' contains more characters than "+ max+ " requested");
 else if (p.getType().equals(OType.BINARY) && (fieldValue != null && ((byte[])fieldValue).length > Integer.parseInt(max))) throw new OValidationException("The field '" + p.getFullName() + "' contains more bytes than "+ max+ " requested");
 else if (p.getType().equals(OType.INTEGER) && (fieldValue != null && type.asInt(fieldValue) > Integer.parseInt(max))) throw new OValidationException("The field '" + p.getFullName() + "' is greater than "+ max);
 else if (p.getType().equals(OType.LONG) && (fieldValue != null && type.asLong(fieldValue) > Long.parseLong(max))) throw new OValidationException("The field '" + p.getFullName() + "' is greater than "+ max);
 else if (p.getType().equals(OType.FLOAT) && (fieldValue != null && type.asFloat(fieldValue) > Float.parseFloat(max))) throw new OValidationException("The field '" + p.getFullName() + "' is greater than "+ max);
 else if (p.getType().equals(OType.DOUBLE) && (fieldValue != null && type.asDouble(fieldValue) > Double.parseDouble(max))) throw new OValidationException("The field '" + p.getFullName() + "' is greater than "+ max);
 else if (p.getType().equals(OType.DATE)) {
try {
  if (fieldValue != null && ((Date)fieldValue).before(iRecord.getDatabase().getStorage().getConfiguration().getDateFormatInstance().parse(max)))   throw new OValidationException("The field '" + p.getFullName() + "' contains the date "+ fieldValue+ " which is after the last acceptable date ("+ max+ ")");
}
 catch (ParseException e) {
}
}
 else if (p.getType().equals(OType.DATETIME)) {
try {
  if (fieldValue != null && ((Date)fieldValue).before(iRecord.getDatabase().getStorage().getConfiguration().getDateTimeFormatInstance().parse(max)))   throw new OValidationException("The field '" + p.getFullName() + "' contains the datetime "+ fieldValue+ " which is after the last acceptable datetime ("+ max+ ")");
}
 catch (ParseException e) {
}
}
 else if ((p.getType().equals(OType.EMBEDDEDLIST) || p.getType().equals(OType.EMBEDDEDSET) || p.getType().equals(OType.LINKLIST)|| p.getType().equals(OType.LINKSET)) && (fieldValue != null && ((Collection<?>)fieldValue).size() > Integer.parseInt(max))) throw new OValidationException("The field '" + p.getFullName() + "' contains more items than "+ max+ " requested");
}
}
