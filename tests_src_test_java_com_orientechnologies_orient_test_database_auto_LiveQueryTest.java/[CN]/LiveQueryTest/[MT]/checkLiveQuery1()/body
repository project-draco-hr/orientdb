{
  final String className1="LiveQueryTest1_1";
  final String className2="LiveQueryTest1_2";
  database.getMetadata().getSchema().createClass(className1);
  database.getMetadata().getSchema().createClass(className2);
  MyLiveQueryListener listener=new MyLiveQueryListener();
  OResultSet<ODocument> tokens=database.query(new OLiveQuery<ODocument>("live select from " + className1,listener));
  Assert.assertEquals(tokens.size(),1);
  ODocument tokenDoc=tokens.get(0);
  int token=tokenDoc.field("token");
  Assert.assertNotNull(token);
  database.command(new OCommandSQL("insert into " + className1 + " set name = 'foo', surname = 'bar'")).execute();
  database.command(new OCommandSQL("insert into  " + className1 + " set name = 'foo', surname = 'baz'")).execute();
  database.command(new OCommandSQL("insert into " + className2 + " set name = 'foo'"));
  latch.await(1,TimeUnit.MINUTES);
  database.command(new OCommandSQL("live unsubscribe " + token)).execute();
  database.command(new OCommandSQL("insert into " + className1 + " set name = 'foo', surname = 'bax'")).execute();
  Assert.assertEquals(listener.ops.size(),2);
  for (  ORecordOperation doc : listener.ops) {
    Assert.assertEquals(doc.type,ORecordOperation.CREATED);
    Assert.assertEquals(((ODocument)doc.record).field("name"),"foo");
  }
  unLatch.await(1,TimeUnit.MINUTES);
  Assert.assertEquals(listener.unsubscribe,token);
}
