{
  database=OObjectDatabasePool.global().acquire(url,"admin","admin");
  try {
    JavaComplexTestClass p=database.newInstance(JavaComplexTestClass.class);
    p.setName("Silvester");
    Child c=database.newInstance(Child.class);
    c.setName("John");
    Child c1=database.newInstance(Child.class);
    c1.setName("Jack");
    Child c2=database.newInstance(Child.class);
    c2.setName("Bob");
    Child c3=database.newInstance(Child.class);
    c3.setName("Sam");
    Child c4=database.newInstance(Child.class);
    c4.setName("Dean");
    p.getList().add(c1);
    p.getList().add(c2);
    p.getList().add(c3);
    p.getList().add(c4);
    p.getChildren().put("first",c);
    p.getEnumList().add(EnumTest.ENUM1);
    p.getEnumList().add(EnumTest.ENUM2);
    p.getEnumSet().add(EnumTest.ENUM1);
    p.getEnumSet().add(EnumTest.ENUM3);
    p.getEnumMap().put("1",EnumTest.ENUM2);
    p.getEnumMap().put("2",EnumTest.ENUM3);
    database.save(p);
    List<Child> cresult=database.query(new OSQLSynchQuery<Child>("select * from Child"));
    Assert.assertTrue(cresult.size() > 0);
    ORID rid=new ORecordId(p.getId());
    database.close();
    database=OObjectDatabasePool.global().acquire(url,"admin","admin");
    JavaComplexTestClass loaded=database.load(rid);
    Assert.assertEquals(loaded.getList().size(),4);
    Assert.assertTrue(loaded.getList().get(0) instanceof Child);
    Assert.assertTrue(loaded.getList().get(1) instanceof Child);
    Assert.assertTrue(loaded.getList().get(2) instanceof Child);
    Assert.assertTrue(loaded.getList().get(3) instanceof Child);
    Assert.assertEquals(loaded.getList().get(0).getName(),"Jack");
    Assert.assertEquals(loaded.getList().get(1).getName(),"Bob");
    Assert.assertEquals(loaded.getList().get(2).getName(),"Sam");
    Assert.assertEquals(loaded.getList().get(3).getName(),"Dean");
    Assert.assertEquals(loaded.getEnumList().size(),2);
    Assert.assertEquals(loaded.getEnumList().get(0),EnumTest.ENUM1);
    Assert.assertEquals(loaded.getEnumList().get(1),EnumTest.ENUM2);
    Assert.assertEquals(loaded.getEnumSet().size(),2);
    Iterator<EnumTest> it=loaded.getEnumSet().iterator();
    Assert.assertEquals(it.next(),EnumTest.ENUM1);
    Assert.assertEquals(it.next(),EnumTest.ENUM3);
    Assert.assertEquals(loaded.getEnumMap().size(),2);
    Assert.assertEquals(loaded.getEnumMap().get("1"),EnumTest.ENUM2);
    Assert.assertEquals(loaded.getEnumMap().get("2"),EnumTest.ENUM3);
  }
  finally {
    database.close();
  }
}
