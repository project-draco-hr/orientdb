{
  Orient.instance().getProfiler().registerHookValue("system.file.mmap.mappedPages","Number of memory mapped pages used",METRIC_TYPE.COUNTER,new OProfilerHookValue(){
    public Object getValue(){
      return metricMappedPages;
    }
  }
);
  Orient.instance().getProfiler().registerHookValue("system.file.mmap.reusedPages","Number of times memory mapped pages have been reused",METRIC_TYPE.COUNTER,new OProfilerHookValue(){
    public Object getValue(){
      return metricReusedPages;
    }
  }
);
  int autoFlushTimer=OGlobalConfiguration.FILE_MMAP_AUTOFLUSH_TIMER.getValueAsInteger();
  if (autoFlushTimer > 0) {
    autoFlushTimer*=1000;
    autoFlushUnusedTime=OGlobalConfiguration.FILE_MMAP_AUTOFLUSH_UNUSED_TIME.getValueAsInteger() * 1000;
    autoFlushTask=new TimerTask(){
      @Override public void run(){
        flush();
      }
    }
;
    Orient.getTimer().schedule(autoFlushTask,autoFlushTimer,autoFlushTimer);
  }
}
