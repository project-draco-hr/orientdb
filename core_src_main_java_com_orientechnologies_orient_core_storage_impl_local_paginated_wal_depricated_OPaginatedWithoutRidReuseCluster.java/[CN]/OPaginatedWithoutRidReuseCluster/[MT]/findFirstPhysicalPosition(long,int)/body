{
  long pagesCount=diskCache.getFilledUpTo(fileId);
  pageLoop:   for (long i=pageIndex; i < pagesCount; i++) {
    OCacheEntry cacheEntry=diskCache.load(fileId,i,false);
    OCachePointer pointer=cacheEntry.getCachePointer();
    try {
      final OClusterPage localPage=new OClusterPage(pointer.getDataPointer(),false,ODurablePage.TrackMode.NONE);
      int recordsCount=localPage.getRecordsCount();
      if (recordsCount > 0) {
        while (true) {
          recordPosition=localPage.findFirstRecord(recordPosition);
          if (recordPosition < 0) {
            recordPosition=0;
            continue pageLoop;
          }
 else {
            int recordPageOffset=localPage.getRecordPageOffset(recordPosition);
            int recordSize=localPage.getRecordSize(recordPosition);
            if (localPage.getByteValue(recordPageOffset + recordSize - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE) == 1) {
              OPhysicalPosition physicalPosition=new OPhysicalPosition();
              physicalPosition.clusterPosition=OClusterPositionFactory.INSTANCE.valueOf((i << PAGE_INDEX_OFFSET) | recordPosition);
              physicalPosition.recordVersion=localPage.getRecordVersion(recordPosition);
              physicalPosition.recordType=localPage.getByteValue(recordPageOffset);
              physicalPosition.recordSize=-1;
              physicalPosition.dataSegmentId=-1;
              physicalPosition.dataSegmentPos=-1;
              return new OPhysicalPosition[]{physicalPosition};
            }
            recordPosition++;
          }
        }
      }
 else       recordPosition=0;
    }
  finally {
      diskCache.release(cacheEntry);
    }
  }
  return new OPhysicalPosition[0];
}
