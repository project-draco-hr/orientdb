{
  final String sqlOne="select * from company where id between 4 and 7";
  final String sqlTwo="select $names let $names = (select EXPAND( addresses.city ) as city from Account where addresses.size() > 0 )";
  final List<ODocument> synchResultOne=database.command(new OSQLSynchQuery<ODocument>(sqlOne)).execute();
  final List<ODocument> synchResultTwo=database.command(new OSQLSynchQuery<ODocument>(sqlTwo)).execute();
  Assert.assertTrue(synchResultOne.size() > 0);
  Assert.assertTrue(synchResultTwo.size() > 0);
  final List<ODocument> asynchResultOne=new ArrayList<ODocument>();
  final List<ODocument> asynchResultTwo=new ArrayList<ODocument>();
  final AtomicBoolean endOneCalled=new AtomicBoolean();
  final AtomicBoolean endTwoCalled=new AtomicBoolean();
  database.command(new OSQLAsynchQuery<ODocument>(sqlOne,new OCommandResultListener(){
    @Override public boolean result(    Object iRecord){
      asynchResultOne.add((ODocument)iRecord);
      return asynchResultOne.size() < synchResultOne.size() / 2;
    }
    @Override public void end(){
      endOneCalled.set(true);
      database.command(new OSQLAsynchQuery<ODocument>(sqlTwo,new OCommandResultListener(){
        @Override public boolean result(        Object iRecord){
          asynchResultTwo.add((ODocument)iRecord);
          return true;
        }
        @Override public void end(){
          endTwoCalled.set(true);
        }
        @Override public Object getResult(){
          return null;
        }
      }
)).execute();
    }
    @Override public Object getResult(){
      return null;
    }
  }
)).execute();
  Assert.assertTrue(endOneCalled.get());
  Assert.assertTrue(endTwoCalled.get());
  Assert.assertTrue(ODocumentHelper.compareCollections(database,synchResultOne.subList(0,synchResultOne.size() / 2),database,asynchResultOne,null));
  Assert.assertTrue(ODocumentHelper.compareCollections(database,synchResultTwo,database,asynchResultTwo,null));
}
