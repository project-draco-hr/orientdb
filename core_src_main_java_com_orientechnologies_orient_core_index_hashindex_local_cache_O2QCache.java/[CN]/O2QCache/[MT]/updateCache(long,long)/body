{
  LRUEntry lruEntry=am.get(fileId,pageIndex);
  if (lruEntry != null) {
    lruEntry=am.putToMRU(fileId,pageIndex,lruEntry.dataPointer,lruEntry.isDirty,lruEntry.loadedLSN);
    return lruEntry;
  }
  lruEntry=a1out.remove(fileId,pageIndex);
  if (lruEntry != null) {
    removeColdestPageIfNeeded();
    CacheResult cacheResult=cacheFileContent(fileId,pageIndex);
    lruEntry.dataPointer=cacheResult.dataPointer;
    lruEntry.isDirty=cacheResult.isDirty;
    OLogSequenceNumber lsn;
    if (cacheResult.isDirty)     lsn=dirtyPages.get(fileId).get(pageIndex);
 else     lsn=getLogSequenceNumberFromPage(cacheResult.dataPointer);
    lruEntry=am.putToMRU(fileId,pageIndex,lruEntry.dataPointer,lruEntry.isDirty,lsn);
    return lruEntry;
  }
  lruEntry=a1in.get(fileId,pageIndex);
  if (lruEntry != null)   return lruEntry;
  try {
    removeColdestPageIfNeeded();
  }
 catch (  OAllLRUListEntriesAreUsed e) {
    if (OGlobalConfiguration.SERVER_CACHE_2Q_INCREASE_ON_DEMAND.getValueAsBoolean()) {
      maxSize=(int)Math.ceil(maxSize * (1 + OGlobalConfiguration.SERVER_CACHE_2Q_INCREASE_STEP.getValueAsFloat()));
      K_IN=maxSize >> 2;
      K_OUT=maxSize >> 1;
    }
 else {
      throw e;
    }
  }
  CacheResult cacheResult=cacheFileContent(fileId,pageIndex);
  OLogSequenceNumber lsn;
  if (cacheResult.isDirty)   lsn=dirtyPages.get(fileId).get(pageIndex);
 else   lsn=getLogSequenceNumberFromPage(cacheResult.dataPointer);
  lruEntry=a1in.putToMRU(fileId,pageIndex,cacheResult.dataPointer,cacheResult.isDirty,lsn);
  filePages.get(fileId).add(pageIndex);
  return lruEntry;
}
