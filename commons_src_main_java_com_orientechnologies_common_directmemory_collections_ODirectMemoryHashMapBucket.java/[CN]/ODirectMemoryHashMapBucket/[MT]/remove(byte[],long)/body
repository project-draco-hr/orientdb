{
  ODirectMemoryHashMapBucket<K,V> currentBucket=this;
  ODirectMemoryHashMapBucket<K,V> prevBucket=null;
  while (currentBucket != null) {
    for (int i=0; i < currentBucket.size; i++) {
      if (currentBucket.hashCodes[i] == hashCode) {
        final long keyPointer=currentBucket.keyValuePairs[i * 2];
        final byte[] storedKey=directMemory.get(keyPointer,OBinaryTypeSerializer.INSTANCE);
        if (Arrays.equals(serializedKey,storedKey)) {
          final long valuePointer=currentBucket.keyValuePairs[i * 2 + 1];
          final V removedValue=directMemory.get(valuePointer,valueSerializer);
          directMemory.free(keyPointer);
          directMemory.free(valuePointer);
          System.arraycopy(currentBucket.hashCodes,i + 1,currentBucket.hashCodes,i,currentBucket.size - (i + 1));
          System.arraycopy(currentBucket.keyValuePairs,(i + 1) * 2,currentBucket.keyValuePairs,i * 2,2 * (currentBucket.size - (i + 1)));
          currentBucket.size--;
          if (currentBucket.size == 0 && prevBucket != null)           prevBucket.nextBucket=currentBucket.nextBucket;
          return removedValue;
        }
      }
    }
    prevBucket=currentBucket;
    currentBucket=currentBucket.nextBucket;
  }
  return null;
}
