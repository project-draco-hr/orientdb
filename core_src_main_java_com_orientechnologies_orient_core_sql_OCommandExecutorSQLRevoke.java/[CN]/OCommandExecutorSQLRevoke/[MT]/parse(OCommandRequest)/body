{
  final ODatabaseRecord database=getDatabase();
  database.checkSecurity(ODatabaseSecurityResources.COMMAND,ORole.PERMISSION_READ);
  init(((OCommandRequestText)iRequest).getText());
  privilege=ORole.PERMISSION_NONE;
  resource=null;
  role=null;
  StringBuilder word=new StringBuilder();
  int oldPos=0;
  int pos=nextWord(text,textUpperCase,oldPos,word,true);
  if (pos == -1 || !word.toString().equals(KEYWORD_REVOKE))   throw new OCommandSQLParsingException("Keyword " + KEYWORD_REVOKE + " not found. Use "+ getSyntax(),text,oldPos);
  pos=nextWord(text,textUpperCase,pos,word,true);
  if (pos == -1)   throw new OCommandSQLParsingException("Invalid privilege",text,oldPos);
  parsePrivilege(word,oldPos);
  pos=nextWord(text,textUpperCase,pos,word,true);
  if (pos == -1 || !word.toString().equals(KEYWORD_ON))   throw new OCommandSQLParsingException("Keyword " + KEYWORD_ON + " not found. Use "+ getSyntax(),text,oldPos);
  pos=nextWord(text,text,pos,word,true);
  if (pos == -1)   throw new OCommandSQLParsingException("Invalid resource",text,oldPos);
  resource=word.toString();
  pos=nextWord(text,textUpperCase,pos,word,true);
  if (pos == -1 || !word.toString().equals(KEYWORD_FROM))   throw new OCommandSQLParsingException("Keyword " + KEYWORD_FROM + " not found. Use "+ getSyntax(),text,oldPos);
  pos=nextWord(text,text,pos,word,true);
  if (pos == -1)   throw new OCommandSQLParsingException("Invalid role",text,oldPos);
  final String roleName=word.toString();
  role=database.getMetadata().getSecurity().getRole(roleName);
  if (role == null)   throw new OCommandSQLParsingException("Invalid role: " + roleName);
  return this;
}
