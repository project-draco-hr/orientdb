{
  final String className=readString(bytes);
  if (className.length() != 0)   document.setClassNameIfExists(className);
  int last=0;
  String fieldName;
  int unmarshalledFields=0;
  final boolean partialLoading=iFields != null && iFields.length > 0;
  while (true) {
    OGlobalProperty prop=null;
    final int len=OVarIntSerializer.readAsInteger(bytes);
    if (len == 0) {
      break;
    }
 else     if (len > 0) {
      if (partialLoading) {
        boolean possibleMatch=false;
        for (int i=0; i < iFields.length; ++i)         if (iFields[i].length() == len) {
          possibleMatch=true;
          break;
        }
        if (!possibleMatch) {
          bytes.skip(len + OIntegerSerializer.INT_SIZE + 1);
          continue;
        }
      }
      final String res=new String(bytes.bytes,bytes.offset,len,utf8);
      bytes.skip(len);
      fieldName=res;
      if (partialLoading) {
        boolean foundField=false;
        for (int i=0; i < iFields.length; ++i)         if (iFields[i].equals(fieldName)) {
          foundField=true;
          unmarshalledFields++;
          break;
        }
        if (!foundField) {
          bytes.skip(OIntegerSerializer.INT_SIZE + 1);
          continue;
        }
      }
    }
 else {
      ODatabaseDocument db=document.getDatabase();
      if (db == null || db.isClosed())       throw new ODatabaseException("Cannot unmarshall the document because no database is active");
      OMetadataInternal metadata=(OMetadataInternal)db.getMetadata();
      prop=metadata.getImmutableSchemaSnapshot().getGlobalPropertyById((len * -1) - 1);
      if (prop == null) {
        metadata.clearThreadLocalSchemaSnapshot();
        metadata.reload();
        metadata.makeThreadLocalSchemaSnapshot();
        prop=metadata.getImmutableSchemaSnapshot().getGlobalPropertyById((len * -1) - 1);
      }
      fieldName=prop.getName();
    }
    if (ODocumentInternal.rawContainsField(document,fieldName)) {
      if (prop != null && prop.getType() != OType.ANY)       bytes.skip(OIntegerSerializer.INT_SIZE);
 else       bytes.skip(OIntegerSerializer.INT_SIZE + 1);
      continue;
    }
    final int valuePos=readInteger(bytes);
    final OType type;
    if (prop != null && prop.getType() != OType.ANY)     type=prop.getType();
 else     type=readOType(bytes);
    if (valuePos != 0) {
      int headerCursor=bytes.offset;
      bytes.offset=valuePos;
      final Object value=readSingleValue(bytes,type,document);
      if (bytes.offset > last)       last=bytes.offset;
      bytes.offset=headerCursor;
      ODocumentInternal.rawField(document,fieldName,value,type);
    }
 else     ODocumentInternal.rawField(document,fieldName,null,null);
    if (partialLoading && unmarshalledFields >= iFields.length)     break;
  }
  if (!partialLoading)   ORecordInternal.clearSource(document);
  if (last > bytes.offset)   bytes.offset=last;
}
