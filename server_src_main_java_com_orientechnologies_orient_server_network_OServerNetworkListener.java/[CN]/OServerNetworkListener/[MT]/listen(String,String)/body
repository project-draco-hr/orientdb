{
  int[] ports;
  if (iHostPortRange.contains(",")) {
    String[] portValues=iHostPortRange.split(",");
    ports=new int[portValues.length];
    for (int i=0; i < portValues.length; ++i)     ports[i]=Integer.parseInt(portValues[i]);
  }
 else   if (iHostPortRange.contains("-")) {
    String[] limits=iHostPortRange.split("-");
    int lowerLimit=Integer.parseInt(limits[0]);
    int upperLimit=Integer.parseInt(limits[1]);
    ports=new int[upperLimit - lowerLimit + 1];
    for (int i=0; i < upperLimit - lowerLimit + 1; ++i)     ports[i]=lowerLimit + i;
  }
 else   ports=new int[]{Integer.parseInt(iHostPortRange)};
  for (  int port : ports) {
    inboundAddr=new InetSocketAddress(iHostName,port);
    try {
      serverSocket=new java.net.ServerSocket(port);
      if (serverSocket.isBound()) {
        OLogManager.instance().config(this,"Orient Database Server v" + OConstants.ORIENT_VERSION + " is listening connections on "+ inboundAddr.getHostName()+ ":"+ inboundAddr.getPort());
        return;
      }
    }
 catch (    BindException be) {
      OLogManager.instance().info(this,"Port %s:%d busy, trying the next available...",iHostName,port);
    }
catch (    SocketException se) {
      OLogManager.instance().error(this,"Unable to create socket",se);
      System.exit(1);
    }
catch (    IOException ioe) {
      OLogManager.instance().error(this,"Unable to read data from an open socket",ioe);
      System.err.println("Unable to read data from an open socket.");
      System.exit(1);
    }
  }
  OLogManager.instance().error(this,"Unable to listen connection using the configured ports '%s' on host '%s'",iHostPortRange,iHostName);
  System.exit(1);
}
