{
  makeActive();
  final OClass clazz=database.getMetadata().getImmutableSchemaSnapshot().getClass(label);
  Set<OIndex<?>> indexes=clazz.getInvolvedIndexes(Arrays.asList(iKey));
  if (indexes.iterator().hasNext()) {
    final OIndex<?> idx=indexes.iterator().next();
    if (idx != null) {
      List<Object> keys=Arrays.asList(convertKeys(idx,iValue));
      OCompositeKey compositeKey=new OCompositeKey(keys);
      Object indexValue=idx.get(compositeKey);
      if (indexValue != null && !(indexValue instanceof Iterable<?>))       indexValue=Arrays.asList(indexValue);
      return new OrientElementIterable<Vertex>(this,(Iterable<?>)indexValue);
    }
  }
  GraphQuery query=query();
  for (int i=0; i < iKey.length; i++) {
    query.has(iKey[i],iValue[i]);
  }
  return query.vertices();
}
