{
  if (iVertex == null)   return;
  final Object fieldValue=iVertexToRemove != null ? iVertex.field(iFieldName) : iVertex.removeField(iFieldName);
  if (fieldValue == null)   return;
  if (fieldValue instanceof OIdentifiable) {
    if (iVertexToRemove != null) {
      if (!fieldValue.equals(iVertexToRemove)) {
        return;
      }
      iVertex.removeField(iFieldName);
    }
    if (iAlsoInverse)     removeInverseEdge(iVertex,iFieldName,iVertexToRemove,fieldValue,useVertexFieldsForEdgeLabels);
    deleteEdgeIfAny((OIdentifiable)fieldValue);
  }
 else   if (fieldValue instanceof Collection<?>) {
    final Collection<Object> set=(Collection<Object>)fieldValue;
    if (iVertexToRemove != null) {
      if (!set.remove(iVertexToRemove)) {
        boolean found=false;
        for (Iterator<Object> it=set.iterator(); it.hasNext(); ) {
          final ODocument curr=((OIdentifiable)it.next()).getRecord();
          if (iVertexToRemove.equals(curr)) {
            it.remove();
            if (iAlsoInverse)             removeInverseEdge(iVertex,iFieldName,iVertexToRemove,curr,useVertexFieldsForEdgeLabels);
            found=true;
            break;
          }
 else           if (curr.getSchemaClass().isSubClassOf(OrientEdgeType.CLASS_NAME)) {
            if (curr.getSchemaClass().isSubClassOf(OrientEdgeType.CLASS_NAME)) {
              final Direction direction=getConnectionDirection(iFieldName,useVertexFieldsForEdgeLabels);
              if (iVertexToRemove.equals(OrientEdge.getConnection(curr,direction.opposite()))) {
                it.remove();
                if (iAlsoInverse)                 removeInverseEdge(iVertex,iFieldName,iVertexToRemove,curr,useVertexFieldsForEdgeLabels);
                found=true;
                break;
              }
            }
          }
        }
        if (!found)         OLogManager.instance().warn(null,"[OrientVertex.removeEdges] edge %s not found in field %s",iVertexToRemove,iFieldName);
      }
      deleteEdgeIfAny(iVertexToRemove);
    }
 else {
      for (Iterator<Object> it=set.iterator(); it.hasNext(); ) {
        final OIdentifiable edge=(OIdentifiable)it.next();
        if (iAlsoInverse)         removeInverseEdge(iVertex,iFieldName,null,edge,useVertexFieldsForEdgeLabels);
        deleteEdgeIfAny(edge);
      }
    }
    if (set.isEmpty())     iVertex.removeField(iFieldName);
  }
  iVertex.save();
}
