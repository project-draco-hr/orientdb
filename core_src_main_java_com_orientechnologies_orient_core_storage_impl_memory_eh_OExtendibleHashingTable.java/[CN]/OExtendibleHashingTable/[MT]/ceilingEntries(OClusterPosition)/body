{
  NodePath nodePath=getBucket(key);
  long bucketPointer=hashTree[nodePath.nodeIndex][nodePath.itemIndex + nodePath.hashMapOffset];
  int fileLevel=getFileLevel(bucketPointer);
  long filePosition=getFilePosition(bucketPointer);
  OExtendibleHashingBucket bucket=files.get(fileLevel).get((int)filePosition - 1);
  while (bucket != null && bucket.size() == 0) {
    nodePath=nextBucketToFind(nodePath,bucket.getDepth());
    if (nodePath == null)     return new Entry[0];
    final long nextPointer=hashTree[nodePath.nodeIndex][nodePath.itemIndex + nodePath.hashMapOffset];
    fileLevel=getFileLevel(nextPointer);
    filePosition=getFilePosition(nextPointer);
    bucket=files.get(fileLevel).get((int)filePosition - 1);
  }
  if (bucket != null) {
    final int index=bucket.getPosition(key);
    final int startIndex;
    if (index >= 0)     startIndex=index;
 else     startIndex=-index - 1;
    final int endIndex=bucket.size();
    return convertBucketToEntries(bucket,startIndex,endIndex);
  }
  return new Entry[0];
}
