{
  getDatabase().checkSecurity(ODatabaseSecurityResources.COMMAND,ORole.PERMISSION_READ);
  init(((OCommandRequestText)iRequest).getText());
  final StringBuilder word=new StringBuilder();
  int oldPos=0;
  int pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
  if (pos == -1 || !word.toString().equals(KEYWORD_FIND))   throw new OCommandSQLParsingException("Keyword " + KEYWORD_FIND + " not found. Use "+ getSyntax(),text,oldPos);
  oldPos=pos;
  pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
  if (pos == -1 || !word.toString().equals(KEYWORD_REFERENCES))   throw new OCommandSQLParsingException("Keyword " + KEYWORD_REFERENCES + " not found. Use "+ getSyntax(),text,oldPos);
  pos=OStringParser.jumpWhiteSpaces(text,pos);
  if (pos == -1)   throw new OCommandSQLParsingException("Expected <target>. Use " + getSyntax(),text,oldPos);
  oldPos=pos;
  if (text.charAt(pos) == '(') {
    subQuery=new StringBuilder();
    pos=OStringSerializerHelper.getEmbedded(text,oldPos,-1,subQuery);
  }
 else {
    pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,false);
    if (pos == -1)     throw new OCommandSQLParsingException("Expected <recordId>. Use " + getSyntax(),text,oldPos);
    final String recordIdString=word.toString();
    if (recordIdString == null || recordIdString.equals(""))     throw new OCommandSQLParsingException("Record to search cannot be null. Use " + getSyntax(),text,pos);
    try {
      final ORecordId rid=new ORecordId(recordIdString);
      if (!rid.isValid())       throw new OCommandSQLParsingException("Record ID " + recordIdString + " is not valid",text,pos);
      recordIds.add(rid);
    }
 catch (    IllegalArgumentException iae) {
      throw new OCommandSQLParsingException("Error reading record Id",text,pos,iae);
    }
  }
  oldPos=pos;
  pos=OSQLHelper.nextWord(text,textUpperCase,oldPos,word,true);
  if (pos != -1) {
    classList=word.toString().trim();
    if (!classList.startsWith("[") || !classList.endsWith("]")) {
      throw new OCommandSQLParsingException("Class list must be contained in []. Use " + getSyntax(),text,pos);
    }
    classList=classList.substring(1,classList.length() - 1);
  }
  return this;
}
