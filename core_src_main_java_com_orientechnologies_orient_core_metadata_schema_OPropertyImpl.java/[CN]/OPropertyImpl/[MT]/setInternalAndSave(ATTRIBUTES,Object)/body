{
  if (attribute == null)   throw new IllegalArgumentException("attribute is null");
  final String stringValue=iValue != null ? iValue.toString() : null;
switch (attribute) {
case LINKEDCLASS:
    setLinkedClassInternal(getDatabase().getMetadata().getSchema().getClass(stringValue));
  break;
case LINKEDTYPE:
setLinkedTypeInternal(OType.valueOf(stringValue));
break;
case MIN:
setMinInternal(stringValue);
break;
case MANDATORY:
setMandatoryInternal(Boolean.parseBoolean(stringValue));
break;
case MAX:
setMaxInternal(stringValue);
break;
case NAME:
setNameInternal(stringValue);
break;
case NOTNULL:
setNotNullInternal(Boolean.parseBoolean(stringValue));
break;
case REGEXP:
setRegexpInternal(stringValue);
break;
case TYPE:
setTypeInternal(OType.valueOf(stringValue.toUpperCase(Locale.ENGLISH)));
break;
case CUSTOM:
if (iValue.toString().indexOf("=") == -1) throw new IllegalArgumentException("Syntax error: expected <name> = <value>, instead found: " + iValue);
final List<String> words=OStringSerializerHelper.smartSplit(iValue.toString(),'=');
setCustomInternal(words.get(0),words.get(1));
break;
}
try {
saveInternal();
}
 catch (Exception e) {
owner.reload();
}
}
