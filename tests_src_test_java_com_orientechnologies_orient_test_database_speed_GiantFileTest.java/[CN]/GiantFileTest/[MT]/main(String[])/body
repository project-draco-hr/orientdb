{
  OGlobalConfiguration.USE_WAL.setValue(false);
  OGlobalConfiguration.DISK_CACHE_SIZE.setValue(1024);
  try {
    db=new ODatabaseDocumentTx("plocal:" + DATABASE_NAME);
    if (db.exists() && RECREATE_DATABASE) {
      db.open("admin","admin");
      db.drop();
      System.out.println("Dropped database.");
    }
    if (!db.exists()) {
      db.create();
      System.out.println("Created database.");
      final OSchema schema=db.getMetadata().getSchema();
      final OClass fileClass=schema.createClass("File");
      fileClass.createProperty("FileName",OType.STRING).setMandatory(true).setNotNull(true).setMin("1");
      fileClass.createProperty("FileSize",OType.LONG).setMandatory(true).setNotNull(true).setMin("0");
      fileClass.createProperty("DataChunks",OType.LINKLIST,OType.getTypeByClass(ORecordBytes.class)).setMandatory(true).setNotNull(false);
      System.out.println("Created schema.");
    }
 else {
      db.open("admin","admin");
    }
    final File giantFile=new File("giantFile.bin");
    if (!giantFile.exists()) {
      final long fileSize=(long)2 * 1024 * 1024* 1024;
      final long createFileStartTime=System.currentTimeMillis();
      createGiantFile(giantFile,fileSize);
      final long createFileMs=System.currentTimeMillis() - createFileStartTime;
      System.out.printf("Finished creating giant file in %f seconds.\n",(float)createFileMs / 1000);
    }
    final ODocument fileDoc=db.newInstance("File");
    fileDoc.field("FileName",giantFile.getName());
    fileDoc.field("FileSize",giantFile.length());
    fileDoc.field("DataChunks",(byte[])null);
    fileDoc.save();
    final long storeFileStartTime=System.currentTimeMillis();
    storeFileData(fileDoc,giantFile);
    final long storeFileMs=System.currentTimeMillis() - storeFileStartTime;
    System.out.printf("Finished storing giant file in %f seconds.\n",(float)storeFileMs / 1000);
  }
  finally {
    db.close();
    OGlobalConfiguration.USE_WAL.setValue(true);
  }
}
