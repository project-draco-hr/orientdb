{
  if (iClassName == null || iClassName.length() == 0)   throw new OSchemaException("Found class name null");
  final Character wrongCharacter=checkNameIfValid(iClassName);
  if (wrongCharacter != null)   throw new OSchemaException("Found invalid class name. Character '" + wrongCharacter + "' cannot be used in class name.");
  final ODatabaseRecord database=getDatabase();
  final int[] clusterIds;
  if (iClusterIds == null || iClusterIds.length == 0)   clusterIds=new int[]{database.addCluster(CLUSTER_TYPE.PHYSICAL.toString(),iClassName,null,null)};
 else   clusterIds=iClusterIds;
  database.checkSecurity(ODatabaseSecurityResources.SCHEMA,ORole.PERMISSION_CREATE);
  final String key=iClassName.toLowerCase();
  final OSchemaShared me=this;
  return getDatabase().getStorage().callInLock(new Callable<OClass>(){
    @Override public OClass call() throws Exception {
      if (classes.containsKey(key))       throw new OSchemaException("Class " + iClassName + " already exists in current database");
      final OClassImpl cls=new OClassImpl(me,iClassName,clusterIds);
      classes.put(key,cls);
      if (cls.getShortName() != null)       classes.put(cls.getShortName().toLowerCase(),cls);
      if (iSuperClass != null) {
        cls.setSuperClassInternal(iSuperClass);
        final int[] clustersToIndex=iSuperClass.getPolymorphicClusterIds();
        final String[] clusterNames=new String[clustersToIndex.length];
        for (int i=0; i < clustersToIndex.length; i++)         clusterNames[i]=database.getClusterNameById(clustersToIndex[i]);
        for (        OIndex<?> index : iSuperClass.getIndexes())         for (        String clusterName : clusterNames)         index.getInternal().addCluster(clusterName);
      }
      return cls;
    }
  }
,true);
}
