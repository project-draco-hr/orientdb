{
  if (iMode == null)   throw new IllegalArgumentException("Importing mode not specified received");
  int offset=OStringParser.jump(reader,(int)reader.getPosition(),OStringParser.COMMON_JUMP);
  if (offset == -1 || reader.charAt(offset) != '{')   throw new IllegalStateException("Missed begin of json (expected char '{')");
  long importedRecordsTotal=0;
  long notImportedRecordsTotal=0;
  long beginChronoTotal=System.currentTimeMillis();
  final ODocument doc=new ODocument(database);
  try {
    while (reader.ready()) {
      String className=parse(":");
      if (className.length() > 2)       className=className.substring(1,className.length() - 1);
      OClass cls=database.getMetadata().getSchema().getClass(className);
      if (cls == null) {
        if (iClusterType.equalsIgnoreCase("logical"))         cls=database.getMetadata().getSchema().createClass(className);
 else         cls=database.getMetadata().getSchema().createClass(className,database.addPhysicalCluster(className,className,-1));
      }
      doc.setClassName(className);
      listener.onMessage("\n- Importing document(s) of class '" + cls.getName() + "'...");
      offset=OStringParser.jump(reader,(int)reader.getPosition() + 1,OStringParser.COMMON_JUMP);
      if (iMode.equalsIgnoreCase(MODE_ARRAY)) {
        if (offset == -1 || reader.charAt(offset) != '[')         throw new IllegalStateException("Missed begin of array (expected char '[')");
      }
 else       throw new IllegalArgumentException("mode '" + iMode + "' not supported");
      long beginChronoClass=System.currentTimeMillis();
      long importedRecordsClass=0;
      long notImportedRecordsClass=0;
      try {
        char c;
        while (reader.ready()) {
          String chunk=OStringParser.getWord(reader,(int)reader.getPosition() + 1,"}");
          if (chunk == null)           throw new IllegalStateException("Missed end of record (expected char '}')");
          chunk+="}";
          try {
            doc.reset();
            doc.fromJSON(chunk);
            doc.save();
          }
 catch (          Exception e) {
            listener.onMessage("\nError on importing document: " + chunk);
            listener.onMessage("\n  The cause is " + e + "\n");
            notImportedRecordsClass++;
          }
          importedRecordsClass++;
          offset=OStringParser.jump(reader,(int)reader.getPosition() + 1,OStringParser.COMMON_JUMP);
          c=reader.charAt(offset);
          if (offset == -1 || (c != ']' && c != ','))           throw new IllegalStateException("Missed separator or end of array (expected chars ',' or ']')");
          if (c == ']')           break;
        }
      }
  finally {
        listener.onMessage("Done. Imported " + importedRecordsClass + " record(s) in "+ (System.currentTimeMillis() - beginChronoClass)+ "ms. "+ notImportedRecordsClass+ " error(s)");
        importedRecordsTotal+=importedRecordsClass;
        notImportedRecordsTotal+=notImportedRecordsClass;
      }
      offset=OStringParser.jump(reader,(int)reader.getPosition() + 1,OStringParser.COMMON_JUMP);
      if (offset == -1 || reader.charAt(offset) == '}')       break;
    }
  }
  finally {
    listener.onMessage("\n\nImported " + importedRecordsTotal + " document(s) in "+ (System.currentTimeMillis() - beginChronoTotal)+ "ms. "+ notImportedRecordsTotal+ " error(s)\n");
  }
  return this;
}
