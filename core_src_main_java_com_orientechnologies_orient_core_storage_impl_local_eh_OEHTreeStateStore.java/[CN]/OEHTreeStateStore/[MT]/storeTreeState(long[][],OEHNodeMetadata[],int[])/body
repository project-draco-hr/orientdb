{
  truncate();
  file.allocateSpace(hashTree.length * RECORD_SIZE + bucketsSizes.length * OIntegerSerializer.INT_SIZE + OIntegerSerializer.INT_SIZE);
  long filePosition=0;
  file.writeInt(filePosition,bucketsSizes.length);
  for (  int bucketSize : bucketsSizes) {
    file.writeInt(filePosition,bucketSize);
    filePosition+=OIntegerSerializer.INT_SIZE;
  }
  for (int i=0; i < hashTree.length; i++) {
    long[] node=hashTree[i];
    byte[] nodeContentBuffer=new byte[RECORD_SIZE];
    int offset=0;
    for (    long position : node) {
      OLongSerializer.INSTANCE.serializeNative(position,nodeContentBuffer,offset);
      offset+=OLongSerializer.LONG_SIZE;
    }
    OEHNodeMetadata nodeMetadata=nodesMetadata[i];
    nodeContentBuffer[offset++]=(byte)nodeMetadata.getMaxLeftChildDepth();
    nodeContentBuffer[offset++]=(byte)nodeMetadata.getMaxRightChildDepth();
    nodeContentBuffer[offset]=(byte)nodeMetadata.getNodeLocalDepth();
    file.write(filePosition,nodeContentBuffer);
    filePosition+=nodeContentBuffer.length;
  }
}
