{
  NodePath nodePath=getBucket(key);
  long bucketPointer=hashTree[nodePath.nodeIndex][nodePath.itemIndex + nodePath.hashMapOffset];
  int fileLevel=getFileLevel(bucketPointer);
  long filePosition=getFilePosition(bucketPointer);
  OExtendibleHashingBucket bucket=files.get(fileLevel).get((int)filePosition - 1);
  while (bucket != null && bucket.size() == 0) {
    final NodePath prevNodePath=prevBucketToFind(nodePath,bucket.getDepth());
    if (prevNodePath == null)     return new Entry[0];
    final long prevPointer=hashTree[prevNodePath.nodeIndex][prevNodePath.hashMapOffset + prevNodePath.itemIndex];
    fileLevel=getFileLevel(prevPointer);
    filePosition=getFilePosition(prevPointer);
    bucket=files.get(fileLevel).get((int)filePosition - 1);
    nodePath=prevNodePath;
  }
  if (bucket != null) {
    final int startIndex=0;
    final int index=bucket.getPosition(key);
    final int endIndex;
    if (index >= 0)     endIndex=index + 1;
 else     endIndex=-index - 1;
    return convertBucketToEntries(bucket,startIndex,endIndex);
  }
  return new Entry[0];
}
