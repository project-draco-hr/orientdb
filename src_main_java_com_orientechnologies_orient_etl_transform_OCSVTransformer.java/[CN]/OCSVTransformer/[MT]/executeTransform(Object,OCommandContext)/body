{
  line++;
  if (skipFrom > -1) {
    if (skipTo > -1) {
      if (line >= skipFrom && line <= skipTo)       return null;
    }
 else     if (line >= skipFrom)     return null;
  }
  final List<String> fields=OStringSerializerHelper.smartSplit(input.toString(),new char[]{separator},0,-1,false,false,false,false);
  if (columns == null) {
    if (!columnsOnFirstLine)     throw new OTransformException("CSV: columnsOnFirstLine=false and no columns declared");
    columns=fields;
    for (int i=0; i < columns.size(); ++i)     columns.set(i,OStringSerializerHelper.getStringContent(columns.get(i)));
    return null;
  }
  final ODocument doc=new ODocument();
  for (int i=0; i < columns.size(); ++i) {
    final String fieldStringValue=fields.get(i);
    Object fieldValue;
    if (fieldStringValue != null && !fieldStringValue.isEmpty()) {
      final char firstChar=fieldStringValue.charAt(0);
      if (firstChar == stringCharacter)       fieldValue=OStringSerializerHelper.getStringContent(fieldStringValue);
 else       if (Character.isDigit(firstChar))       if (fieldStringValue.contains(".") || fieldStringValue.contains(","))       try {
        fieldValue=Float.parseFloat(fieldStringValue);
      }
 catch (      Exception e) {
        fieldValue=Double.parseDouble(fieldStringValue);
      }
 else       try {
        fieldValue=Integer.parseInt(fieldStringValue);
      }
 catch (      Exception e) {
        fieldValue=Long.parseLong(fieldStringValue);
      }
 else       fieldValue=fieldStringValue;
      if (nullValue != null && nullValue.equals(fieldValue))       continue;
      doc.field(columns.get(i),fieldValue);
    }
  }
  return doc;
}
