{
  acquireExclusiveLock();
  try {
    this.keySize=keySize;
    this.storage=storageLocal;
    this.keyTypes=keyTypes;
    this.diskCache=storage.getDiskCache();
    this.name=name;
    this.keySerializer=keySerializer;
    if (keySerializer == null)     System.out.println("sdf");
    this.valueSerializer=valueSerializer;
    this.nullPointerSupport=nullPointerSupport;
    initDurableComponent(storageLocal);
    OAtomicOperation atomicOperation=super.startAtomicOperation();
    fileId=addFile(atomicOperation,name + dataFileExtension,diskCache);
    if (nullPointerSupport)     nullBucketFileId=addFile(atomicOperation,name + nullFileExtension,diskCache);
    OCacheEntry rootCacheEntry=addPage(atomicOperation,fileId,diskCache);
    rootCacheEntry.acquireExclusiveLock();
    try {
      OSBTreeBucket<K,V> rootBucket=new OSBTreeBucket<K,V>(rootCacheEntry,true,keySerializer,keyTypes,valueSerializer,getChangesTree(atomicOperation,rootCacheEntry));
      rootBucket.setTreeSize(0);
    }
  finally {
      rootCacheEntry.releaseExclusiveLock();
      releasePage(atomicOperation,rootCacheEntry,diskCache);
    }
    super.endAtomicOperation(false);
  }
 catch (  Throwable e) {
    try {
      super.endAtomicOperation(true);
    }
 catch (    IOException e1) {
      OLogManager.instance().error(this,"Error during sbtree data rollback",e1);
    }
    throw new OSBTreeException("Error creation of sbtree with name" + name,e);
  }
 finally {
    releaseExclusiveLock();
  }
}
