{
  checkOpeness();
  checkIfActive();
  if (!currentTx.isActive())   return this;
  if (!force && currentTx.amountOfNestedTxs() > 1) {
    currentTx.commit();
    return this;
  }
  for (  ODatabaseListener listener : browseListeners())   try {
    listener.onBeforeTxCommit(this);
  }
 catch (  Throwable t) {
    rollback(force);
    OLogManager.instance().debug(this,"Cannot commit the transaction: caught exception on execution of %s.onBeforeTxCommit()",t,OTransactionBlockedException.class,listener.getClass());
  }
  try {
    currentTx.commit(force);
  }
 catch (  RuntimeException e) {
    OLogManager.instance().debug(this,"Error on transaction commit",e);
    for (    ODatabaseListener listener : browseListeners())     try {
      listener.onBeforeTxRollback(this);
    }
 catch (    Throwable t) {
      OLogManager.instance().error(this,"Error before transaction rollback",t);
    }
    currentTx.rollback(false,0);
    getLocalCache().clear();
    for (    ODatabaseListener listener : browseListeners())     try {
      listener.onAfterTxRollback(this);
    }
 catch (    Throwable t) {
      OLogManager.instance().error(this,"Error after transaction rollback",t);
    }
    throw e;
  }
  for (  ODatabaseListener listener : browseListeners())   try {
    listener.onAfterTxCommit(this);
  }
 catch (  Throwable t) {
    OLogManager.instance().debug(this,"Error after the transaction has been committed. The transaction remains valid. The exception caught was on execution of %s.onAfterTxCommit()",t,OTransactionBlockedException.class,listener.getClass());
  }
  return this;
}
