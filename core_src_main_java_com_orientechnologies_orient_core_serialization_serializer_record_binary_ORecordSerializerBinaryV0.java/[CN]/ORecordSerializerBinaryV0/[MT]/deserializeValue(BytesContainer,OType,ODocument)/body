{
  Object value=null;
switch (type) {
case INTEGER:
    value=OVarIntSerializer.readAsInteger(bytes);
  break;
case LONG:
value=OVarIntSerializer.readAsLong(bytes);
break;
case SHORT:
value=OVarIntSerializer.readAsShort(bytes);
break;
case STRING:
value=readString(bytes);
break;
case DOUBLE:
value=Double.longBitsToDouble(readLong(bytes));
break;
case FLOAT:
value=Float.intBitsToFloat(readInteger(bytes));
break;
case BYTE:
value=readByte(bytes);
break;
case BOOLEAN:
value=readByte(bytes) == 1;
break;
case DATETIME:
value=new Date(OVarIntSerializer.readAsLong(bytes));
break;
case DATE:
long savedTime=OVarIntSerializer.readAsLong(bytes) * MILLISEC_PER_DAY;
savedTime=convertDayToTimezone(TimeZone.getTimeZone("GMT"),ODateHelper.getDatabaseTimeZone(),savedTime);
value=new Date(savedTime);
break;
case EMBEDDED:
value=new ODocument();
deserialize((ODocument)value,bytes);
if (((ODocument)value).containsField(ODocumentSerializable.CLASS_NAME)) {
String className=((ODocument)value).field(ODocumentSerializable.CLASS_NAME);
try {
Class<?> clazz=Class.forName(className);
ODocumentSerializable newValue=(ODocumentSerializable)clazz.newInstance();
newValue.fromDocument((ODocument)value);
value=newValue;
}
 catch (Exception e) {
throw new RuntimeException(e);
}
}
 else ODocumentInternal.addOwner((ODocument)value,ownerDocument);
break;
case EMBEDDEDSET:
value=readEmbeddedSet(bytes,ownerDocument);
break;
case EMBEDDEDLIST:
value=readEmbeddedList(bytes,ownerDocument);
break;
case LINKSET:
value=readLinkCollection(bytes,new ORecordLazySet(ownerDocument));
break;
case LINKLIST:
value=readLinkCollection(bytes,new ORecordLazyList(ownerDocument));
break;
case BINARY:
value=readBinary(bytes);
break;
case LINK:
value=readOptimizedLink(bytes);
break;
case LINKMAP:
value=readLinkMap(bytes,ownerDocument);
break;
case EMBEDDEDMAP:
value=readEmbeddedMap(bytes,ownerDocument);
break;
case DECIMAL:
value=ODecimalSerializer.INSTANCE.deserialize(bytes.bytes,bytes.offset);
bytes.skip(ODecimalSerializer.INSTANCE.getObjectSize(bytes.bytes,bytes.offset));
break;
case LINKBAG:
ORidBag bag=new ORidBag();
bag.fromStream(bytes);
bag.setOwner(ownerDocument);
value=bag;
break;
case TRANSIENT:
break;
case CUSTOM:
try {
String className=readString(bytes);
Class<?> clazz=Class.forName(className);
OSerializableStream stream=(OSerializableStream)clazz.newInstance();
stream.fromStream(readBinary(bytes));
if (stream instanceof OSerializableWrapper) value=((OSerializableWrapper)stream).getSerializable();
 else value=stream;
}
 catch (Exception e) {
throw new RuntimeException(e);
}
break;
case ANY:
break;
}
return value;
}
