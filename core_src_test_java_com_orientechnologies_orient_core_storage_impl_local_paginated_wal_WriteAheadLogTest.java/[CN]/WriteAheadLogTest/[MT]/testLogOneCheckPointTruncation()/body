{
  writeAheadLog.close();
  OLocalPaginatedStorage paginatedStorage=mock(OLocalPaginatedStorage.class);
  when(paginatedStorage.getName()).thenReturn("WriteAheadLogTest");
  when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());
  writeAheadLog=new OWriteAheadLog(1024,-1,2048,2 * 2048,paginatedStorage);
  List<OWALRecord> writtenRecords=new ArrayList<OWALRecord>();
  OUpdatePageRecord setPageDataRecord=new OUpdatePageRecord(256,"test");
  final int recordsToWriteOneSegment=2048 / serializeSize(setPageDataRecord);
  final int recordsToWrite=2 * recordsToWriteOneSegment;
  OWALRecord walRecord=new OFuzzyCheckpointStartRecord();
  writeAheadLog.logRecord(walRecord);
  writtenRecords.add(walRecord);
  final int firstRecordsToWrite=(2048 - serializeSize(walRecord)) / serializeSize(setPageDataRecord);
  for (int i=0; i < firstRecordsToWrite; i++) {
    setPageDataRecord=new OUpdatePageRecord(256,"test");
    writtenRecords.add(setPageDataRecord);
    writeAheadLog.logRecord(setPageDataRecord);
  }
  for (int i=0; i < recordsToWrite; i++) {
    setPageDataRecord=new OUpdatePageRecord(256,"test");
    writtenRecords.add(setPageDataRecord);
    writeAheadLog.logRecord(setPageDataRecord);
  }
  assertLogContent(writeAheadLog,writtenRecords.subList(firstRecordsToWrite + 1,writtenRecords.size()));
  Assert.assertNull(writeAheadLog.getLastCheckpoint());
  Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstRecordsToWrite).getLsn()));
  verify(paginatedStorage).scheduleCheckpoint();
  Assert.assertEquals(writeAheadLog.begin(),new OLogSequenceNumber(1,0));
}
