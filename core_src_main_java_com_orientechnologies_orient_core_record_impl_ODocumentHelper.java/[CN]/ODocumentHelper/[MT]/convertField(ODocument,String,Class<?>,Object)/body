{
  if (iFieldType == null)   return (RET)iValue;
  if (ORID.class.isAssignableFrom(iFieldType)) {
    if (iValue instanceof ORID) {
      return (RET)iValue;
    }
 else     if (iValue instanceof String) {
      return (RET)new ORecordId((String)iValue);
    }
 else     if (iValue instanceof ORecord) {
      return (RET)((ORecord)iValue).getIdentity();
    }
  }
 else   if (ORecord.class.isAssignableFrom(iFieldType)) {
    if (iValue instanceof ORID || iValue instanceof ORecord) {
      return (RET)iValue;
    }
 else     if (iValue instanceof String) {
      return (RET)new ORecordId((String)iValue);
    }
  }
 else   if (Set.class.isAssignableFrom(iFieldType)) {
    if (!(iValue instanceof Set)) {
      final Collection<?> newValue;
      if (iValue instanceof ORecordLazyList || iValue instanceof ORecordLazyMap)       newValue=new ORecordLazySet(iDocument);
 else       newValue=new OTrackedSet<Object>(iDocument);
      if (iValue instanceof Collection<?>) {
        ((Collection<Object>)newValue).addAll((Collection<Object>)iValue);
        return (RET)newValue;
      }
 else       if (iValue instanceof Map) {
        ((Collection<Object>)newValue).addAll(((Map<String,Object>)iValue).values());
        return (RET)newValue;
      }
 else       if (iValue instanceof String) {
        final String stringValue=(String)iValue;
        if (stringValue != null && !stringValue.isEmpty()) {
          final String[] items=stringValue.split(",");
          for (          String s : items) {
            ((Collection<Object>)newValue).add(s);
          }
        }
        return (RET)newValue;
      }
 else       if (OMultiValue.isMultiValue(iValue)) {
        for (        Object s : OMultiValue.getMultiValueIterable(iValue)) {
          ((Collection<Object>)newValue).add(s);
        }
        return (RET)newValue;
      }
    }
 else {
      return (RET)iValue;
    }
  }
 else   if (List.class.isAssignableFrom(iFieldType)) {
    if (!(iValue instanceof List)) {
      final Collection<?> newValue;
      if (iValue instanceof OMVRBTreeRIDSet || iValue instanceof ORecordLazyMap || iValue instanceof ORecordLazySet)       newValue=new ORecordLazyList(iDocument);
 else       newValue=new OTrackedList<Object>(iDocument);
      if (iValue instanceof Collection) {
        ((Collection<Object>)newValue).addAll((Collection<Object>)iValue);
        return (RET)newValue;
      }
 else       if (iValue instanceof Map) {
        ((Collection<Object>)newValue).addAll(((Map<String,Object>)iValue).values());
        return (RET)newValue;
      }
 else       if (iValue instanceof String) {
        final String stringValue=(String)iValue;
        if (stringValue != null && !stringValue.isEmpty()) {
          final String[] items=stringValue.split(",");
          for (          String s : items) {
            ((Collection<Object>)newValue).add(s);
          }
        }
        return (RET)newValue;
      }
 else       if (OMultiValue.isMultiValue(iValue)) {
        for (        Object s : OMultiValue.getMultiValueIterable(iValue)) {
          ((Collection<Object>)newValue).add(s);
        }
        return (RET)newValue;
      }
    }
 else {
      return (RET)iValue;
    }
  }
 else   if (iValue instanceof Enum) {
    if (Number.class.isAssignableFrom(iFieldType))     iValue=((Enum<?>)iValue).ordinal();
 else     iValue=iValue.toString();
    if (!(iValue instanceof String) && !iFieldType.isAssignableFrom(iValue.getClass()))     throw new IllegalArgumentException("Property '" + iFieldName + "' of type '"+ iFieldType+ "' cannot accept value of type: "+ iValue.getClass());
  }
 else   if (Date.class.isAssignableFrom(iFieldType)) {
    if (iValue instanceof String && ODatabaseRecordThreadLocal.INSTANCE.isDefined()) {
      final OStorageConfiguration config=ODatabaseRecordThreadLocal.INSTANCE.get().getStorage().getConfiguration();
      DateFormat formatter=config.getDateFormatInstance();
      if (((String)iValue).length() > config.dateFormat.length()) {
        formatter=config.getDateTimeFormatInstance();
      }
      try {
        Date newValue=formatter.parse((String)iValue);
        return (RET)newValue;
      }
 catch (      ParseException pe) {
        final String dateFormat=((String)iValue).length() > config.dateFormat.length() ? config.dateTimeFormat : config.dateFormat;
        throw new OQueryParsingException("Error on conversion of date '" + iValue + "' using the format: "+ dateFormat,pe);
      }
    }
  }
  iValue=OType.convert(iValue,iFieldType);
  return (RET)iValue;
}
