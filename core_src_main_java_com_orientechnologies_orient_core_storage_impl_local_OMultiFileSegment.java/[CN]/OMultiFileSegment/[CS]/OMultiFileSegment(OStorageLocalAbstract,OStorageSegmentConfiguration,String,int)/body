{
  super(storage,config.name);
  readWriteLock.writeLock().lock();
  try {
    this.config=config;
    this.fileExtension=fileExtension;
    type=config.fileType;
    defrag=config.defrag;
    maxSize=OFileUtils.getSizeAsNumber(config.maxSize);
    fileStartSize=(int)OFileUtils.getSizeAsNumber(config.fileStartSize);
    final int tmpFileMaxSize=(int)OFileUtils.getSizeAsNumber(config.fileMaxSize);
    fileIncrementSize=(int)OFileUtils.getSizeAsNumber(config.fileIncrementSize);
    if (roundMaxSize > 0)     fileMaxSize=(tmpFileMaxSize / roundMaxSize) * roundMaxSize;
 else     fileMaxSize=tmpFileMaxSize;
    int perFileMaxSize;
    if (config.infoFiles.length == 0) {
      files=new OFile[1];
      files[0]=OFileFactory.instance().create(type,storage.getVariableParser().resolveVariables(this.config.getLocation() + "/" + name+ "."+ 0+ this.fileExtension),storage.getMode());
      perFileMaxSize=fileMaxSize;
      files[0].setMaxSize(perFileMaxSize);
      files[0].setIncrementSize(fileIncrementSize);
    }
 else {
      files=new OFile[config.infoFiles.length];
      for (int i=0; i < files.length; ++i) {
        files[i]=OFileFactory.instance().create(type,storage.getVariableParser().resolveVariables(config.infoFiles[i].path),storage.getMode());
        perFileMaxSize=fileMaxSize;
        files[i].setMaxSize(perFileMaxSize);
        files[i].setIncrementSize(fileIncrementSize);
      }
    }
  }
  finally {
    readWriteLock.writeLock().unlock();
  }
}
