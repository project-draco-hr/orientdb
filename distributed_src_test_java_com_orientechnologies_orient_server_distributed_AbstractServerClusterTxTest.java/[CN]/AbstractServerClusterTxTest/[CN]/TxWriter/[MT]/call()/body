{
  final String name=Integer.toString(threadId);
  for (int i=0; i < count; i++) {
    final ODatabaseDocumentTx database=poolFactory.get(databaseUrl,"admin","admin").acquire();
    try {
      if ((i + 1) % 100 == 0)       System.out.println("\nWriter " + database.getURL() + "(thread="+ threadId+ ") managed "+ (i + 1)+ "/"+ count+ " records so far");
      final int id=baseCount + i;
      database.begin();
      try {
        ODocument person=createRecord(database,id);
        updateRecord(database,person);
        checkRecord(database,person);
        deleteRecord(database,person);
        checkRecordIsDeleted(database,person);
        person=createRecord(database,id);
        updateRecord(database,person);
        checkRecord(database,person);
        String sql="UPDATE Person SET PostalCode = \"78001\" WHERE id = \"" + person.field("id") + "\"";
        OCommandScript cmdScript=new OCommandScript("sql",sql);
        database.command(cmdScript).execute();
        database.commit();
      }
 catch (      ORecordDuplicatedException e) {
      }
catch (      ODistributedException e) {
        if (!(e.getCause() instanceof ORecordDuplicatedException)) {
          database.rollback();
          throw e;
        }
      }
catch (      Exception e) {
        database.rollback();
        throw e;
      }
      if (delayWriter > 0)       Thread.sleep(delayWriter);
    }
 catch (    InterruptedException e) {
      System.out.println("Writer received interrupt (db=" + database.getURL());
      Thread.currentThread().interrupt();
      break;
    }
catch (    Exception e) {
      System.out.println("Writer received exception (db=" + database.getURL());
      e.printStackTrace();
      break;
    }
 finally {
      runningWriters.countDown();
      database.close();
    }
  }
  System.out.println("\nWriter " + name + " END");
  return null;
}
