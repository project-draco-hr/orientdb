{
  acquireExclusiveLock();
  try {
    long nextPagePointer=-1;
    int entryContentLength=content.length + OByteSerializer.BYTE_SIZE + OLongSerializer.LONG_SIZE;
    if (entryContentLength < OLocalPage.MAX_RECORD_SIZE) {
      byte[] entryContent=new byte[entryContentLength];
      int entryPosition=0;
      entryContent[entryPosition]=recordType;
      entryPosition++;
      System.arraycopy(content,0,entryContent,entryPosition,content.length);
      entryPosition+=content.length;
      OLongSerializer.INSTANCE.serializeNative(nextPagePointer,entryContent,entryPosition);
      size++;
      return addEntry(recordVersion,entryContent);
    }
 else {
      int entrySize=content.length + OVersionFactory.instance().getVersionSize() + OByteSerializer.BYTE_SIZE;
      int fullEntryPosition=0;
      byte[] fullEntry=new byte[entrySize];
      fullEntry[fullEntryPosition]=recordType;
      fullEntryPosition++;
      System.arraycopy(content,0,fullEntry,fullEntryPosition,content.length);
      nextPagePointer=-1;
      int to=fullEntry.length;
      int from=to - (OLocalPage.MAX_RECORD_SIZE - OLongSerializer.LONG_SIZE);
      do {
        byte[] entryContent=new byte[from - to + OLongSerializer.LONG_SIZE];
        System.arraycopy(fullEntry,from,entryContent,0,from - to);
        OLongSerializer.INSTANCE.serializeNative(nextPagePointer,entryContent,entryContent.length - OLongSerializer.LONG_SIZE);
        nextPagePointer=addEntry(recordVersion,entryContent);
        to=from;
        from=from - (OLocalPage.MAX_RECORD_SIZE - OLongSerializer.LONG_SIZE);
        if (from < 0)         from=0;
      }
 while (from > to);
      size++;
      return nextPagePointer;
    }
  }
  finally {
    releaseExclusiveLock();
  }
}
