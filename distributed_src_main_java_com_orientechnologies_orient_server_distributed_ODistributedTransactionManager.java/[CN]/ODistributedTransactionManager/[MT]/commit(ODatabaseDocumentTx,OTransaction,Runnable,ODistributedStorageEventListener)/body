{
  final ODistributedConfiguration dbCfg=dManager.getDatabaseConfiguration(storage.getName());
  final String localNodeName=dManager.getLocalNodeName();
  try {
    OTransactionInternal.setStatus((OTransactionAbstract)iTx,OTransaction.TXSTATUS.BEGUN);
    final List<OAbstractRemoteTask> undoTasks=createUndoTasksFromTx(iTx);
    final int maxAutoRetry=OGlobalConfiguration.DISTRIBUTED_CONCURRENT_TX_MAX_AUTORETRY.getValueAsInteger();
    final int autoRetryDelay=OGlobalConfiguration.DISTRIBUTED_CONCURRENT_TX_AUTORETRY_DELAY.getValueAsInteger();
    Boolean executionModeSynch=dbCfg.isExecutionModeSynchronous(null);
    if (executionModeSynch == null)     executionModeSynch=Boolean.TRUE;
    final boolean finalExecutionModeSynch=executionModeSynch;
    final boolean exclusiveLock=iTx.hasRecordCreation();
    final ODistributedRequestId requestId=new ODistributedRequestId(dManager.getLocalNodeId(),dManager.getNextMessageIdCounter());
    final ODistributedTxContext ctx=localDistributedDatabase.registerTxContext(requestId);
    return (List<ORecordOperation>)storage.executeOperationInLock(exclusiveLock,new OCallable<Object,Void>(){
      @Override public Object call(      final Void nothing){
        try {
          acquireMultipleRecordLocks(iTx,maxAutoRetry,autoRetryDelay,eventListener,ctx);
          final List<ORecordOperation> uResult=(List<ORecordOperation>)ODistributedAbstractPlugin.runInDistributedMode(new Callable(){
            @Override public Object call() throws Exception {
              return storage.commit(iTx,callback);
            }
          }
);
          database.setDefaultTransactionMode();
          for (          ORecordOperation ent : iTx.getAllRecordEntries()) {
            ORecordInternal.getDirtyManager(ent.getRecord()).clear();
          }
          final Set<String> involvedClusters=getInvolvedClusters(uResult);
          final Set<String> nodes=getAvailableNodesButLocal(dbCfg,involvedClusters,localNodeName);
          if (nodes.isEmpty()) {
            ctx.destroy();
            return null;
          }
          updateUndoTaskWithCreatedRecords(uResult,undoTasks);
          final OTxTaskResult localResult=createLocalTxResult(uResult);
          final OTxTask txTask=createTxTask(uResult);
          txTask.setLocalUndoTasks(undoTasks);
          OTransactionInternal.setStatus((OTransactionAbstract)iTx,OTransaction.TXSTATUS.COMMITTING);
          if (finalExecutionModeSynch) {
            ODistributedResponse lastResult=null;
            for (int retry=1; retry <= maxAutoRetry; ++retry) {
              lastResult=dManager.sendRequest(storage.getName(),involvedClusters,nodes,txTask,requestId.getMessageId(),EXECUTION_MODE.RESPONSE,localResult,null);
              if (!processCommitResult(localNodeName,iTx,txTask,involvedClusters,uResult,nodes,autoRetryDelay,maxAutoRetry,lastResult.getRequestId(),lastResult,ctx,eventListener)) {
                continue;
              }
              return null;
            }
            ODistributedServerLog.debug(this,localNodeName,null,ODistributedServerLog.DIRECTION.NONE,"Distributed transaction retries exceed maximum auto-retries (%d)",maxAutoRetry);
            storage.executeUndoOnLocalServer(requestId,txTask);
            sendTxCompleted(localNodeName,involvedClusters,nodes,lastResult.getRequestId(),false);
            throw (ODistributedRecordLockedException)lastResult.getPayload();
          }
 else {
            final OCallable<Void,ODistributedRequestId> unlockCallback=new OCallable<Void,ODistributedRequestId>(){
              @Override public Void call(              final ODistributedRequestId reqId){
                ctx.destroy();
                return null;
              }
            }
;
            executeAsyncTx(nodes,localResult,involvedClusters,txTask,requestId.getMessageId(),localNodeName,unlockCallback);
          }
        }
 catch (        RuntimeException e) {
          ctx.destroy();
          throw e;
        }
catch (        Exception e) {
          ctx.destroy();
          OException.wrapException(new ODistributedException("Cannot commit transaction"),e);
        }
 finally {
          if (finalExecutionModeSynch)           ctx.destroy();
        }
        return null;
      }
    }
);
  }
 catch (  OValidationException e) {
    throw e;
  }
catch (  Exception e) {
    storage.handleDistributedException("Cannot route TX operation against distributed node",e);
  }
  return null;
}
