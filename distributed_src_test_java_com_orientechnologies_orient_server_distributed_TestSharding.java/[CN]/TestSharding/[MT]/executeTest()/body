{
  try {
    OrientGraphFactory localFactory=new OrientGraphFactory("plocal:target/server0/databases/" + getDatabaseName());
    OrientGraphNoTx graphNoTx=localFactory.getNoTx();
    try {
      final OrientVertexType clientType=graphNoTx.createVertexType("Client");
      for (int i=1; i < serverInstance.size(); ++i) {
        final String serverName=serverInstance.get(i).getServerInstance().getDistributedManager().getLocalNodeName();
        clientType.addCluster("client_" + serverName);
      }
      graphNoTx.createVertexType("Product");
      graphNoTx.createVertexType("Hobby");
      graphNoTx.createEdgeType("Knows");
      graphNoTx.createEdgeType("Buy");
      graphNoTx.createEdgeType("Loves");
      Thread.sleep(500);
    }
  finally {
      graphNoTx.shutdown();
    }
    final OrientVertex product;
    final OrientVertex fishing;
    OrientBaseGraph graph=localFactory.getTx();
    try {
      product=graph.addVertex("class:Product");
      fishing=graph.addVertex("class:Hobby");
      fishing.setProperty("name","Fishing");
    }
  finally {
      graph.shutdown();
    }
    Assert.assertEquals(product.getRecord().getVersion(),1);
    Assert.assertEquals(fishing.getRecord().getVersion(),1);
    versions=new int[serverInstance.size()];
    vertices=new OrientVertex[serverInstance.size()];
    for (int i=0; i < vertices.length; ++i) {
      final String nodeName=serverInstance.get(i).getServerInstance().getDistributedManager().getLocalNodeName();
      OrientGraphFactory factory=new OrientGraphFactory("plocal:target/server" + i + "/databases/"+ getDatabaseName());
      graph=factory.getNoTx();
      try {
        vertices[i]=graph.addVertex("class:Client");
        final int clId=vertices[i].getIdentity().getClusterId();
        if (i == 0)         Assert.assertEquals("Error on assigning cluster client",clId,graph.getRawGraph().getClusterIdByName("client"));
 else {
          final int clusterId=graph.getRawGraph().getClusterIdByName("client_" + nodeName);
          Assert.assertEquals("Error on assigning cluster client_" + nodeName,clId,clusterId);
        }
        vertices[i].setProperty("name","shard_" + i);
        long amount=i * 10000;
        vertices[i].setProperty("amount",amount);
        totalAmount+=amount;
        System.out.println("Create vertex, class: " + vertices[i].getLabel() + ", cluster: "+ clId+ " -> "+ vertices[i].getRecord());
        if (i > 1)         vertices[i].addEdge("Knows",vertices[i - 1]);
        final Edge edge=vertices[i].addEdge("Buy",product,new Object[]{"price",1000 * i});
      }
  finally {
        graph.shutdown();
      }
    }
    for (int i=0; i < vertices.length; ++i) {
      versions[i]=vertices[i].getRecord().getVersion();
      Assert.assertTrue(versions[i] > 1);
    }
    graph=localFactory.getNoTx();
    try {
      for (int i=0; i < vertices.length; ++i)       System.out.println("Created vertex " + i + ": "+ vertices[i].getRecord());
    }
  finally {
      graph.shutdown();
    }
    for (int i=0; i < vertices.length; ++i) {
      OrientGraphFactory factory=new OrientGraphFactory("plocal:target/server" + i + "/databases/"+ getDatabaseName());
      graph=factory.getNoTx();
      try {
        Iterable<OrientEdge> result=graph.command(new OCommandSQL("create edge Loves from " + vertices[i].getIdentity() + " to "+ fishing.getIdentity()+ " set real = true")).execute();
        Assert.assertTrue(result.iterator().hasNext());
        OrientEdge e=result.iterator().next();
        Assert.assertEquals(e.getProperty("real"),true);
        Assert.assertEquals(2,e.getRecord().getVersion());
        e.getOutVertex().getRecord().reload();
        Assert.assertEquals(versions[i] + 1,e.getOutVertex().getRecord().getVersion());
        e.getInVertex().getRecord().reload();
        Assert.assertEquals(fishing.getRecord().getVersion() + i + 1,e.getInVertex().getRecord().getVersion());
        final OrientVertex explain=graph.command(new OCommandSQL("explain select from " + e.getIdentity())).execute();
        System.out.println("explain select from " + e.getIdentity() + " -> "+ ((ODocument)explain.getRecord()).field("servers"));
        result=graph.command(new OCommandSQL("select from " + e.getIdentity())).execute();
        Assert.assertTrue(result.iterator().hasNext());
        OrientEdge e2=result.iterator().next();
        Assert.assertEquals(e2.getProperty("real"),true);
      }
  finally {
        graph.shutdown();
      }
    }
    for (int server=0; server < vertices.length; ++server) {
      OrientGraphFactory f=new OrientGraphFactory("plocal:target/server" + server + "/databases/"+ getDatabaseName());
      OrientGraphNoTx g=f.getNoTx();
      System.out.println("Query from server " + server + "...");
      try {
        for (int i=0; i < vertices.length; ++i) {
          final String nodeName=serverInstance.get(i).getServerInstance().getDistributedManager().getLocalNodeName();
          String clusterName="client";
          if (i > 0)           clusterName+="_" + nodeName;
          String query="select from cluster:" + clusterName;
          final OrientVertex explain=g.command(new OCommandSQL("explain " + query)).execute();
          System.out.println("explain " + query + " -> "+ ((ODocument)explain.getRecord()).field("servers"));
          Iterable<OrientVertex> result=g.command(new OCommandSQL(query)).execute();
          Assert.assertTrue("Error on query against '" + clusterName + "' on server '"+ server+ "': "+ query,result.iterator().hasNext());
          OrientVertex v=result.iterator().next();
          Assert.assertEquals("Returned vertices name property is != shard_" + i + " on server "+ server,"shard_" + i,v.getProperty("name"));
          final Iterable<Vertex> knows=v.getVertices(Direction.OUT,"Knows");
          final Iterable<Vertex> boughtV=v.getVertices(Direction.OUT,"Buy");
          Assert.assertTrue(boughtV.iterator().hasNext());
          Assert.assertEquals(boughtV.iterator().next(),product);
          final Iterable<Edge> boughtE=v.getEdges(Direction.OUT,"Buy");
          Assert.assertNotNull(boughtE.iterator().next().getProperty("price"));
        }
      }
  finally {
        graph.shutdown();
      }
    }
    for (int server=0; server < vertices.length; ++server) {
      OrientGraphFactory f=new OrientGraphFactory("plocal:target/server" + 0 + "/databases/"+ getDatabaseName());
      OrientGraphNoTx g=f.getNoTx();
      try {
        Iterable<OrientVertex> result=g.command(new OCommandSQL("select sum(amount) from ( select from Client )")).execute();
        int count=0;
        for (        OrientVertex v : result) {
          System.out.println("select sum(amount) from ( select from Client ) -> " + v.getRecord());
          count++;
        }
        Assert.assertEquals("Returned wrong vertices count on server " + server,1,count);
      }
  finally {
        g.shutdown();
      }
    }
    for (int server=0; server < vertices.length; ++server) {
      OrientGraphFactory f=new OrientGraphFactory("plocal:target/server" + server + "/databases/"+ getDatabaseName());
      OrientGraphNoTx g=f.getNoTx();
      try {
        Iterable<OrientVertex> result=g.command(new OCommandSQL("select from Client")).execute();
        int count=0;
        for (        OrientVertex v : result) {
          count++;
          final Iterable<Vertex> knows=v.getVertices(Direction.OUT,"Knows");
          final Iterable<Vertex> boughtV=v.getVertices(Direction.OUT,"Buy");
          Assert.assertTrue(boughtV.iterator().hasNext());
          Assert.assertEquals(boughtV.iterator().next(),product);
          final Iterable<Edge> boughtE=v.getEdges(Direction.OUT,"Buy");
          Assert.assertNotNull(boughtE.iterator().next().getProperty("price"));
        }
        Assert.assertEquals("Returned wrong vertices count on server " + server,SERVERS,count);
      }
  finally {
        g.shutdown();
      }
    }
    for (int server=0; server < vertices.length; ++server) {
      OrientGraphFactory f=new OrientGraphFactory("plocal:target/server" + server + "/databases/"+ getDatabaseName());
      OrientGraphNoTx g=f.getNoTx();
      try {
        Iterable<OrientVertex> result=g.command(new OCommandSQL("select max(amount), avg(amount), sum(amount) from Client")).execute();
        int count=0;
        for (        OrientVertex v : result) {
          System.out.println("select max(amount), avg(amount), sum(amount) from Client -> " + v.getRecord());
          count++;
        }
        Assert.assertEquals("Returned wrong vertices count on server " + server,1,count);
      }
  finally {
        g.shutdown();
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Thread.sleep(10000);
    throw e;
  }
}
