{
  try {
    final OPhysicalPosition ppos=cluster.getPhysicalPosition(new OPhysicalPosition(rid.clusterPosition));
    if (!checkForRecordValidity(ppos)) {
      final int recordVersion=-1;
      return new OStorageOperationResult<Integer>(recordVersion);
    }
    makeStorageDirty();
    atomicOperationsManager.startAtomicOperation((String)null,true);
    try {
      cluster.recycleRecord(rid.clusterPosition,content,version,recordType);
      final ORecordSerializationContext context=ORecordSerializationContext.getContext();
      if (context != null)       context.executeOperations(this);
      atomicOperationsManager.endAtomicOperation(false,null);
    }
 catch (    Exception e) {
      atomicOperationsManager.endAtomicOperation(true,e);
      OLogManager.instance().error(this,"Error on recycling record " + rid + " (cluster: "+ cluster+ ")",e);
      final int recordVersion=-1;
      return new OStorageOperationResult<Integer>(recordVersion);
    }
    if (OLogManager.instance().isDebugEnabled())     OLogManager.instance().debug(this,"Recycled record %s v.%s size=%d",rid,version,content.length);
    return new OStorageOperationResult<Integer>(version,content,false);
  }
 catch (  IOException ioe) {
    OLogManager.instance().error(this,"Error on recycling record " + rid + " (cluster: "+ cluster+ ")",ioe);
    final int recordVersion=-1;
    return new OStorageOperationResult<Integer>(recordVersion);
  }
}
