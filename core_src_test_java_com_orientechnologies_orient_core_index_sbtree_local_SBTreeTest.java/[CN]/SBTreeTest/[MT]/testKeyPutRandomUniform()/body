{
  final NavigableSet<Integer> keys=new TreeSet<Integer>();
  final MersenneTwisterFast random=new MersenneTwisterFast();
  while (keys.size() < KEYS_COUNT) {
    int key=random.nextInt(Integer.MAX_VALUE);
    sbTree.put(key,new ORecordId(key % 32000,key));
    keys.add(key);
    doReset();
    Assert.assertEquals(sbTree.get(key),new ORecordId(key % 32000,key));
  }
  Assert.assertEquals(sbTree.firstKey(),keys.first());
  doReset();
  Assert.assertEquals(sbTree.lastKey(),keys.last());
  doReset();
  for (  int key : keys) {
    Assert.assertEquals(sbTree.get(key),new ORecordId(key % 32000,key));
    doReset();
  }
}
