{
  acquireExclusiveLock();
  try {
    storage=storageLocal;
    final ODiskCache diskCache=storage.getDiskCache();
    fileStateId=diskCache.openFile(name + metadataConfigurationFileExtension);
    hashStateEntry=diskCache.load(fileStateId,0,true);
    try {
      OHashIndexFileLevelMetadataPage metadataPage=new OHashIndexFileLevelMetadataPage(hashStateEntry.getCachePointer().getDataPointer(),ODurablePage.TrackMode.NONE,false);
      for (int i=0; i < HASH_CODE_SIZE; i++) {
        if (!metadataPage.isRemoved(i)) {
          diskCache.openFile(metadataPage.getFileId(i));
          diskCache.deleteFile(metadataPage.getFileId(i));
        }
      }
    }
  finally {
      diskCache.release(hashStateEntry);
    }
    diskCache.deleteFile(fileStateId);
    directory=new OHashTableDirectory(treeStateFileExtension,name,durableInNonTxMode,storage);
    directory.deleteWithoutOpen();
    final long nullBucketId=diskCache.openFile(name + nullBucketFileExtension);
    diskCache.deleteFile(nullBucketId);
  }
 catch (  IOException ioe) {
    throw new OIndexException("Can not delete hash table with name " + name,ioe);
  }
 finally {
    releaseExclusiveLock();
  }
}
