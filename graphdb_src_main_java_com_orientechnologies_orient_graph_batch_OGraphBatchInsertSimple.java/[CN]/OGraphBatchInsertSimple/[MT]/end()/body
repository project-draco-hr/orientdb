{
  OClass vClass=db.getMetadata().getSchema().getClass(vertexClass);
  int clusterId=vClass.getDefaultClusterId();
  try {
    OCluster cluster=db.getStorage().getClusterById(clusterId);
    long firstAvailableClusterPosition=cluster.getLastPosition() + 1;
    String clusterName=cluster.getName();
    String outField="E".equals(this.edgeClass) ? "out_" : ("out_" + this.edgeClass);
    String inField="E".equals(this.edgeClass) ? "in_" : ("in_" + this.edgeClass);
    db.declareIntent(new OIntentMassiveInsert());
    for (long i=0; i <= last; i++) {
      List<Long> outIds=this.out.get(i);
      List<Long> inIds=this.in.get(i);
      ODocument doc=new ODocument(vClass);
      if (outIds == null && inIds == null) {
        db.save(doc,clusterName).delete();
      }
 else {
        doc.field(idPropertyName,i);
        if (outIds != null) {
          ORidBag outBag=new ORidBag();
          for (          Long l : outIds) {
            ORecordId rid=new ORecordId(clusterId,firstAvailableClusterPosition + l);
            outBag.add(rid);
          }
          doc.field(outField,outBag);
        }
        if (inIds != null) {
          ORidBag inBag=new ORidBag();
          for (          Long l : inIds) {
            ORecordId rid=new ORecordId(clusterId,firstAvailableClusterPosition + l);
            inBag.add(rid);
          }
          doc.field(inField,inBag);
        }
        db.save(doc,clusterName);
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    db.declareIntent(null);
    db.close();
  }
}
