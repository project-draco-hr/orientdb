{
  if (option.equalsIgnoreCase("-excludeAll")) {
    includeClasses=new HashSet<String>();
    excludeClasses=null;
    includeClusters=new HashSet<String>();
    excludeClusters=null;
    includeInfo=false;
    includeClusterDefinitions=false;
    includeSchema=false;
    includeSecurity=false;
    includeRecords=false;
    includeIndexDefinitions=false;
    includeManualIndexes=false;
  }
 else   if (option.equalsIgnoreCase("-includeClass")) {
    includeClasses=new HashSet<String>();
    for (    String item : items)     includeClasses.add(item.toUpperCase());
  }
 else   if (option.equalsIgnoreCase("-excludeClass")) {
    excludeClasses=new HashSet<String>(items);
    for (    String item : items)     excludeClasses.add(item.toUpperCase());
  }
 else   if (option.equalsIgnoreCase("-includeCluster")) {
    includeClusters=new HashSet<String>(items);
    for (    String item : items)     includeClusters.add(item.toUpperCase());
  }
 else   if (option.equalsIgnoreCase("-excludeCluster")) {
    excludeClusters=new HashSet<String>(items);
    for (    String item : items)     excludeClusters.add(item.toUpperCase());
  }
 else   if (option.equalsIgnoreCase("-includeInfo")) {
    includeInfo=Boolean.parseBoolean(items.get(0));
  }
 else   if (option.equalsIgnoreCase("-includeClusterDefinitions")) {
    includeClusterDefinitions=Boolean.parseBoolean(items.get(0));
  }
 else   if (option.equalsIgnoreCase("-includeSchema")) {
    includeSchema=Boolean.parseBoolean(items.get(0));
  }
 else   if (option.equalsIgnoreCase("-includeSecurity")) {
    includeSecurity=Boolean.parseBoolean(items.get(0));
  }
 else   if (option.equalsIgnoreCase("-includeRecords")) {
    includeRecords=Boolean.parseBoolean(items.get(0));
  }
 else   if (option.equalsIgnoreCase("-includeIndexDefinitions")) {
    includeIndexDefinitions=Boolean.parseBoolean(items.get(0));
  }
 else   if (option.equalsIgnoreCase("-includeManualIndexes")) {
    includeManualIndexes=Boolean.parseBoolean(items.get(0));
  }
 else   if (option.equalsIgnoreCase("-useLineFeedForRecords")) {
    useLineFeedForRecords=Boolean.parseBoolean(items.get(0));
  }
}
