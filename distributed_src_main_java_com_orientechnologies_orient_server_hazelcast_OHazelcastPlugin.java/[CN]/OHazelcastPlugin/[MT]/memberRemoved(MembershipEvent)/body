{
  try {
    updateLastClusterChange();
    final Member member=iEvent.getMember();
    final String nodeLeftName=getNodeName(member);
    if (nodeLeftName != null) {
      try {
        final int nodeLeftId=getNodeIdByName(nodeLeftName);
        closeRemoteServer(nodeLeftName);
        for (        ODistributedLifecycleListener l : listeners)         try {
          l.onNodeLeft(nodeLeftName);
        }
 catch (        Exception e) {
        }
        if (messageService != null)         for (        String dbName : messageService.getDatabases())         messageService.getDatabase(dbName).handleUnreachableNode(nodeLeftId);
        activeNodes.remove(nodeLeftName);
        activeNodesNamesByMemberId.remove(member.getUuid());
        if (hazelcastInstance == null || !hazelcastInstance.getLifecycleService().isRunning())         return;
        final Map<String,Object> map=configurationMap;
        final HashSet<String> entriesToRemove=new HashSet<String>();
        for (Iterator<String> it=map.keySet().iterator(); it.hasNext(); ) {
          final String n=it.next();
          if (n.startsWith(CONFIG_DBSTATUS_PREFIX)) {
            final String part=n.substring(CONFIG_DBSTATUS_PREFIX.length());
            final int pos=part.indexOf(".");
            if (pos > -1) {
              if (part.substring(0,pos).equals(nodeLeftName)) {
                ODistributedServerLog.debug(this,nodeName,null,DIRECTION.NONE,"Removing dbstatus for the node %s that just left: %s",nodeLeftName,n);
                entriesToRemove.add(n);
              }
            }
          }
        }
        for (        String entry : entriesToRemove) {
          map.remove(entry);
        }
        ODistributedServerLog.warn(this,nodeLeftName,null,DIRECTION.NONE,"Node removed id=%s name=%s",member,nodeLeftName);
        if (nodeLeftName.startsWith("ext:")) {
          final List<String> registeredNodes=getRegisteredNodes();
          ODistributedServerLog.error(this,nodeName,null,DIRECTION.NONE,"Removed node id=%s name=%s has not being recognized. Remove the node manually (registeredNodes=%s)",member,nodeLeftName,registeredNodes);
        }
        for (        String databaseName : getManagedDatabases()) {
          final ODistributedConfiguration cfg=getDatabaseConfiguration(databaseName);
          final Set<String> clustersWithNotAvailableOwner=cfg.getClustersOwnedByServer(nodeLeftName);
          if (reassignClustersOwnership(nodeName,databaseName,clustersWithNotAvailableOwner,false))           updateCachedDatabaseConfiguration(databaseName,cfg.getDocument(),true,true);
        }
      }
  finally {
        if (messageService != null)         messageService.handleUnreachableNode(nodeLeftName);
      }
    }
  }
 catch (  HazelcastInstanceNotActiveException e) {
    OLogManager.instance().error(this,"Hazelcast is not running");
  }
catch (  RetryableHazelcastException e) {
    OLogManager.instance().error(this,"Hazelcast is not running");
  }
}
