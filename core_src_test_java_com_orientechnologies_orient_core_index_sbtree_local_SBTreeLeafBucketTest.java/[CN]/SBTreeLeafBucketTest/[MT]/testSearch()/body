{
  long seed=System.currentTimeMillis();
  System.out.println("testSearch seed : " + seed);
  TreeSet<Long> keys=new TreeSet<Long>();
  Random random=new Random(seed);
  while (keys.size() < 2 * OSBTreeBucket.MAX_PAGE_SIZE_BYTES / OLongSerializer.LONG_SIZE) {
    keys.add(random.nextLong());
  }
  OByteBufferPool bufferPool=OByteBufferPool.instance();
  ByteBuffer buffer=bufferPool.acquireDirect(true);
  OCachePointer cachePointer=new OCachePointer(buffer,bufferPool,new OLogSequenceNumber(0,0),0,0);
  OCacheEntry cacheEntry=new OCacheEntry(0,0,cachePointer,false);
  cacheEntry.acquireExclusiveLock();
  cachePointer.incrementReferrer();
  OSBTreeBucket<Long,OIdentifiable> treeBucket=new OSBTreeBucket<Long,OIdentifiable>(cacheEntry,true,OLongSerializer.INSTANCE,null,OLinkSerializer.INSTANCE,null);
  int index=0;
  Map<Long,Integer> keyIndexMap=new HashMap<Long,Integer>();
  for (  Long key : keys) {
    if (!treeBucket.addEntry(index,new OSBTreeBucket.SBTreeEntry<Long,OIdentifiable>(-1,-1,key,new OSBTreeValue<OIdentifiable>(false,-1,new ORecordId(index,index))),true))     break;
    keyIndexMap.put(key,index);
    index++;
  }
  Assert.assertEquals(treeBucket.size(),keyIndexMap.size());
  for (  Map.Entry<Long,Integer> keyIndexEntry : keyIndexMap.entrySet()) {
    int bucketIndex=treeBucket.find(keyIndexEntry.getKey());
    Assert.assertEquals(bucketIndex,(int)keyIndexEntry.getValue());
  }
  cacheEntry.releaseExclusiveLock();
  cachePointer.decrementReferrer();
}
