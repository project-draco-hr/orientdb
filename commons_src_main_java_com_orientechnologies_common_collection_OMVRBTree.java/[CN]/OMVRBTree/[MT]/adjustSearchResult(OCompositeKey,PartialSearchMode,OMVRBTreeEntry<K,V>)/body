{
  if (partialSearchMode.equals(PartialSearchMode.NONE))   return foundEntry;
  final OCompositeKey keyToSearch=key;
  final OCompositeKey foundKey=(OCompositeKey)foundEntry.getKey();
  if (keyToSearch.getKeys().size() < keySize) {
    final OCompositeKey borderKey=new OCompositeKey();
    final OCompositeKey keyToCompare=new OCompositeKey();
    final List<Comparable<?>> keyItems=foundKey.getKeys();
    for (int i=0; i < keySize - 1; i++) {
      final Comparable<?> keyItem=keyItems.get(i);
      borderKey.addKey(keyItem);
      if (i < keyToSearch.getKeys().size())       keyToCompare.addKey(keyItem);
    }
    if (partialSearchMode.equals(PartialSearchMode.HIGHEST_BOUNDARY))     borderKey.addKey(ALWAYS_GREATER_KEY);
 else     borderKey.addKey(ALWAYS_LESS_KEY);
    final OMVRBTreeEntry<K,V> adjustedNode=getEntry(borderKey,true,PartialSearchMode.NONE);
    if (partialSearchMode.equals(PartialSearchMode.HIGHEST_BOUNDARY))     return adjustHighestPartialSearchResult(false,adjustedNode,keyToCompare);
 else     return adjustLowestPartialSearchResult(false,adjustedNode,keyToCompare);
  }
  return foundEntry;
}
