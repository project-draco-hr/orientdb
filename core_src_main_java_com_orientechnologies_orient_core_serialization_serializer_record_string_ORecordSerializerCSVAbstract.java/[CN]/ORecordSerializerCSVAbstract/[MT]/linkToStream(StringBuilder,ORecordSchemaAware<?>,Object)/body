{
  if (iLinked == null)   return null;
  Object resultRid=null;
  ORID rid;
  if (iLinked instanceof ORID) {
    rid=(ORID)iLinked;
  }
 else {
    if (!(iLinked instanceof ORecordInternal<?>)) {
      final String boundDocumentField=OObjectSerializerHelper.getDocumentBoundField(iLinked.getClass());
      if (boundDocumentField != null)       iLinked=OObjectSerializerHelper.getFieldValue(iLinked,boundDocumentField);
    }
    if (!(iLinked instanceof ORecordInternal<?>))     throw new IllegalArgumentException("Invalid object received. Expected a record but received type=" + iLinked.getClass().getName() + " and value="+ iLinked);
    ORecordInternal<?> iLinkedRecord=(ORecordInternal<?>)iLinked;
    rid=iLinkedRecord.getIdentity();
    if (rid.isNew() || iLinkedRecord.isDirty()) {
      if (iLinkedRecord.getDatabase() == null)       iLinkedRecord.setDatabase(iParentRecord.getDatabase());
      if (iLinkedRecord instanceof ODocument) {
        final OClass schemaClass=((ODocument)iLinkedRecord).getSchemaClass();
        iLinkedRecord.getDatabase().save(iLinkedRecord,schemaClass != null ? iLinkedRecord.getDatabase().getClusterNameById(schemaClass.getDefaultClusterId()) : null);
      }
 else       iLinkedRecord.getDatabase().save(iLinkedRecord);
      iLinkedRecord.getDatabase().registerPojo(iLinkedRecord.getDatabase().getUserObjectByRecord(iLinkedRecord,null),iLinkedRecord);
      resultRid=iLinkedRecord;
    }
    if (iParentRecord.getDatabase() instanceof ODatabaseRecord) {
      final ODatabaseRecord db=iParentRecord.getDatabase();
      if (!db.isRetainRecords())       resultRid=iLinkedRecord.getIdentity();
    }
  }
  if (rid.isValid()) {
    buffer.append(OStringSerializerHelper.LINK);
    buffer.append(rid.toString());
  }
  return resultRid;
}
