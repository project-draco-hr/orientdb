{
  externalModificationLock.requestModificationLock();
  try {
    acquireExclusiveLock();
    try {
      final long prevSize=size;
      final long prevRecordsSize=recordsSize;
      content=compression.compress(content);
      int grownContentSize=(int)(config.recordGrowFactor * content.length);
      int entryContentLength=grownContentSize + 2 * OByteSerializer.BYTE_SIZE + OIntegerSerializer.INT_SIZE + OLongSerializer.LONG_SIZE;
      if (entryContentLength < OPLocalPage.MAX_RECORD_SIZE) {
        startRecordOperation(transaction,false);
        byte[] entryContent=new byte[entryContentLength];
        int entryPosition=0;
        entryContent[entryPosition]=recordType;
        entryPosition++;
        OIntegerSerializer.INSTANCE.serializeNative(content.length,entryContent,entryPosition);
        entryPosition+=OIntegerSerializer.INT_SIZE;
        System.arraycopy(content,0,entryContent,entryPosition,content.length);
        entryPosition+=grownContentSize;
        entryContent[entryPosition]=1;
        entryPosition++;
        OLongSerializer.INSTANCE.serializeNative(-1L,entryContent,entryPosition);
        OPLocalPage.TrackMode trackMode;
        if (!config.useWal || writeAheadLog == null)         trackMode=OAbstractPLocalPage.TrackMode.NONE;
 else         if (transaction != null)         trackMode=OAbstractPLocalPage.TrackMode.BOTH;
 else         trackMode=OAbstractPLocalPage.TrackMode.FORWARD;
        final AddEntryResult addEntryResult=addEntry(recordVersion,entryContent,trackMode);
        size++;
        recordsSize+=addEntryResult.recordsSizeDiff;
        logClusterState(prevSize,prevRecordsSize);
        endRecordOperation(transaction);
        return createPhysicalPosition(recordType,addEntryResult.pagePointer,addEntryResult.recordVersion);
      }
 else {
        startRecordOperation(transaction,true);
        OPLocalPage.TrackMode trackMode=(!config.useWal || writeAheadLog == null) ? OAbstractPLocalPage.TrackMode.NONE : OAbstractPLocalPage.TrackMode.BOTH;
        int entrySize=grownContentSize + OIntegerSerializer.INT_SIZE + OByteSerializer.BYTE_SIZE;
        int fullEntryPosition=0;
        byte[] fullEntry=new byte[entrySize];
        fullEntry[fullEntryPosition]=recordType;
        fullEntryPosition++;
        OIntegerSerializer.INSTANCE.serializeNative(content.length,fullEntry,fullEntryPosition);
        fullEntryPosition+=OIntegerSerializer.INT_SIZE;
        System.arraycopy(content,0,fullEntry,fullEntryPosition,content.length);
        long prevPageRecordPointer=-1;
        long firstPagePointer=-1;
        ORecordVersion version=null;
        int from=0;
        int to=from + (OPLocalPage.MAX_RECORD_SIZE - OByteSerializer.BYTE_SIZE - OLongSerializer.LONG_SIZE);
        int recordsSizeDiff=0;
        do {
          byte[] entryContent=new byte[to - from + OByteSerializer.BYTE_SIZE + OLongSerializer.LONG_SIZE];
          System.arraycopy(fullEntry,from,entryContent,0,to - from);
          if (from > 0)           entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE]=0;
 else           entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE]=1;
          OLongSerializer.INSTANCE.serializeNative(-1L,entryContent,entryContent.length - OLongSerializer.LONG_SIZE);
          final AddEntryResult addEntryResult=addEntry(recordVersion,entryContent,trackMode);
          recordsSizeDiff+=addEntryResult.recordsSizeDiff;
          if (firstPagePointer == -1) {
            firstPagePointer=addEntryResult.pagePointer;
            version=addEntryResult.recordVersion;
          }
          long addedPagePointer=addEntryResult.pagePointer;
          if (prevPageRecordPointer >= 0) {
            long prevPageIndex=prevPageRecordPointer >>> PAGE_INDEX_OFFSET;
            int prevPageRecordPosition=(int)(prevPageRecordPointer & RECORD_POSITION_MASK);
            final OCachePointer prevPageMemoryPointer=diskCache.load(fileId,prevPageIndex);
            prevPageMemoryPointer.acquireExclusiveLock();
            try {
              final OPLocalPage prevPage=new OPLocalPage(prevPageMemoryPointer.getDataPointer(),false,OAbstractPLocalPage.TrackMode.BOTH);
              int prevRecordPageOffset=prevPage.getRecordPageOffset(prevPageRecordPosition);
              int prevPageRecordSize=prevPage.getRecordSize(prevPageRecordPosition);
              prevPage.setLongValue(prevRecordPageOffset + prevPageRecordSize - OLongSerializer.LONG_SIZE,addedPagePointer);
              logPageChanges(prevPage,prevPageIndex,false);
              diskCache.markDirty(fileId,prevPageIndex);
            }
  finally {
              prevPageMemoryPointer.releaseExclusiveLock();
              diskCache.release(fileId,prevPageIndex);
            }
          }
          prevPageRecordPointer=addedPagePointer;
          from=to;
          to=to + (OPLocalPage.MAX_RECORD_SIZE - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE);
          if (to > fullEntry.length)           to=fullEntry.length;
        }
 while (from < to);
        size++;
        recordsSize+=recordsSizeDiff;
        logClusterState(prevSize,prevRecordsSize);
        endRecordOperation(transaction);
        return createPhysicalPosition(recordType,firstPagePointer,version);
      }
    }
  finally {
      releaseExclusiveLock();
    }
  }
  finally {
    externalModificationLock.releaseModificationLock();
  }
}
