{
  checkOpeness();
  final long timer=Orient.instance().getProfiler().startChrono();
  final OCluster cluster=getClusterById(rid.clusterId);
  cluster.getExternalModificationLock().requestModificationLock();
  try {
    modificationLock.requestModificationLock();
    try {
      lock.acquireSharedLock();
      try {
        Lock recordLock=lockManager.acquireExclusiveLock(rid);
        try {
          final OPhysicalPosition ppos=cluster.getPhysicalPosition(new OPhysicalPosition(rid.clusterPosition));
          if (ppos == null)           return new OStorageOperationResult<Boolean>(false);
          if (version.getCounter() > -1 && !ppos.recordVersion.equals(version))           if (OFastConcurrentModificationException.enabled())           throw OFastConcurrentModificationException.instance();
 else           throw new OConcurrentModificationException(rid,ppos.recordVersion,version,ORecordOperation.DELETED);
          makeStorageDirty();
          atomicOperationsManager.startAtomicOperation();
          try {
            final ORecordSerializationContext context=ORecordSerializationContext.getContext();
            if (context != null)             context.executeOperations(this);
            cluster.deleteRecord(ppos.clusterPosition);
            atomicOperationsManager.endAtomicOperation(false);
          }
 catch (          Throwable e) {
            atomicOperationsManager.endAtomicOperation(true);
            OLogManager.instance().error(this,"Error on deleting record " + rid + "( cluster: "+ cluster+ ")",e);
            return new OStorageOperationResult<Boolean>(false);
          }
          return new OStorageOperationResult<Boolean>(true);
        }
  finally {
          lockManager.releaseLock(recordLock);
        }
      }
  finally {
        lock.releaseSharedLock();
      }
    }
 catch (    IOException e) {
      OLogManager.instance().error(this,"Error on deleting record " + rid + "( cluster: "+ cluster+ ")",e);
    }
 finally {
      modificationLock.releaseModificationLock();
    }
  }
  finally {
    cluster.getExternalModificationLock().releaseModificationLock();
    Orient.instance().getProfiler().stopChrono(PROFILER_DELETE_RECORD,"Delete a record from database",timer,"db.*.deleteRecord");
  }
  return new OStorageOperationResult<Boolean>(false);
}
