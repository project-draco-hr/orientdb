{
  final OSchema schema=database.getMetadata().getSchema();
  final OClass oClass=schema.getClass("PropertyIndexTestClass");
  oClass.createIndex("PropertyIndexFirstIndex",OClass.INDEX_TYPE.UNIQUE,"pROp4");
  oClass.createIndex("PropertyIndexSecondIndex",OClass.INDEX_TYPE.UNIQUE,"prop4","prop5");
  try {
    oClass.getProperty("prop4").dropIndexes();
    Assert.fail();
  }
 catch (  IllegalArgumentException e) {
    Assert.assertEquals(e.getMessage(),"This operation applicable only for property indexes. " + "PropertyIndexSecondIndex is OCompositeIndexDefinition{indexDefinitions=[" + "OPropertyIndexDefinition{className='PropertyIndexTestClass', field='prop4', keyType=INTEGER}, "+ "OPropertyIndexDefinition{className='PropertyIndexTestClass', field='prop5', keyType=STRING}], "+ "className='PropertyIndexTestClass'}");
  }
  Assert.assertNotNull(database.getMetadata().getIndexManager().getIndex("PropertyIndexFirstIndex"));
  Assert.assertNotNull(database.getMetadata().getIndexManager().getIndex("PropertyIndexSecondIndex"));
}
