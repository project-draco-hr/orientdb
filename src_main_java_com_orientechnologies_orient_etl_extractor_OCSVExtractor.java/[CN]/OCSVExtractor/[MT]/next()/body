{
  final CSVRecord csvRecord=recordIterator.next();
  ODocument doc=new ODocument();
  final Map<String,String> recordAsMap=csvRecord.toMap();
  if (columnTypes.isEmpty()) {
    for (    Map.Entry<String,String> en : recordAsMap.entrySet()) {
      final String value=en.getValue();
      if (value == null || nullValue.equals(value) || value.isEmpty())       doc.field(en.getKey(),null,OType.ANY);
 else       doc.field(en.getKey(),determineTheType(value));
    }
  }
 else {
    for (    Map.Entry<String,OType> typeEntry : columnTypes.entrySet()) {
      final OType fieldType=typeEntry.getValue();
      final String fieldName=typeEntry.getKey();
      String fieldValueAsString=recordAsMap.get(fieldName);
      try {
        Object fieldValue=OType.convert(fieldValueAsString,fieldType.getDefaultJavaType());
        doc.field(fieldName,fieldValue);
      }
 catch (      Exception e) {
        processor.getStats().incrementErrors();
        log(OETLProcessor.LOG_LEVELS.ERROR,"Error on converting row %d field '%s' (%d), value '%s' (class:%s) to type: %s",csvRecord.getRecordNumber(),fieldName,fieldValueAsString,fieldValueAsString.getClass().getName(),fieldType);
      }
    }
  }
  log(OETLProcessor.LOG_LEVELS.DEBUG,"document=%s",doc);
  current++;
  return new OExtractedItem(current,doc);
}
