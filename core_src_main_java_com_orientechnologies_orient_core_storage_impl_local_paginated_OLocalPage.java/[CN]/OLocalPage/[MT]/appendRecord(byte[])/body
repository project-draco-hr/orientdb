{
  int freePosition=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + FREE_POSITION_OFFSET);
  int indexesLength=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,PAGE_INDEXES_LENGTH_OFFSET + pagePointer);
  int lastRecordIndexPosition=PAGE_INDEXES_OFFSET + indexesLength * OIntegerSerializer.INT_SIZE;
  int entrySize=record.length + OIntegerSerializer.INT_SIZE;
  int freeListHeader=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + FREELIST_HEADER);
  if (freeListHeader > 0) {
    if (freePosition - entrySize < lastRecordIndexPosition)     return -1;
  }
 else {
    if (freePosition - entrySize < lastRecordIndexPosition + OIntegerSerializer.INT_SIZE)     return -1;
  }
  freePosition-=entrySize;
  long entryPointer=pagePointer + freePosition;
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(entrySize,directMemory,entryPointer);
  entryPointer+=OIntegerSerializer.INT_SIZE;
  directMemory.set(entryPointer,record,record.length);
  entryPointer+=record.length;
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(freePosition,directMemory,pagePointer + FREE_POSITION_OFFSET);
  int entryIndex;
  if (freeListHeader > 0) {
    entryIndex=freeListHeader - 1;
    final int tombstonePointer=OIntegerSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,pagePointer + PAGE_INDEXES_OFFSET + OIntegerSerializer.INT_SIZE * entryIndex);
    int nextEntryPosition=tombstonePointer & POSITION_MASK;
    if (nextEntryPosition > 0)     OIntegerSerializer.INSTANCE.serializeInDirectMemory(nextEntryPosition,directMemory,pagePointer + FREELIST_HEADER);
 else     OIntegerSerializer.INSTANCE.serializeInDirectMemory(0,directMemory,pagePointer + FREELIST_HEADER);
    OIntegerSerializer.INSTANCE.serializeInDirectMemory(getFreeSpace() - entrySize,directMemory,pagePointer + FREE_SPACE_COUNTER_OFFSET);
  }
 else {
    entryIndex=indexesLength;
    OIntegerSerializer.INSTANCE.serializeInDirectMemory(indexesLength + 1,directMemory,pagePointer + PAGE_INDEXES_LENGTH_OFFSET);
    OIntegerSerializer.INSTANCE.serializeInDirectMemory(getFreeSpace() - entrySize - OIntegerSerializer.INT_SIZE,directMemory,pagePointer + FREE_SPACE_COUNTER_OFFSET);
  }
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(getRecordsCount() + 1,directMemory,pagePointer + RECORDS_COUNT_OFFSET);
  OIntegerSerializer.INSTANCE.serializeInDirectMemory(freePosition,directMemory,pagePointer + PAGE_INDEXES_OFFSET + entryIndex * OIntegerSerializer.INT_SIZE);
  return entryIndex;
}
