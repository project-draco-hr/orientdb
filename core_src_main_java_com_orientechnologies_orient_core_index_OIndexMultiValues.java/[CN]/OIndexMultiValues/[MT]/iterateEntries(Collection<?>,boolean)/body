{
  checkForRebuild();
  final List<Object> sortedKeys=new ArrayList<Object>(keys);
  final Comparator<Object> comparator;
  if (ascSortOrder)   comparator=ODefaultComparator.INSTANCE;
 else   comparator=Collections.reverseOrder(ODefaultComparator.INSTANCE);
  Collections.sort(sortedKeys,comparator);
  return new OIndexAbstractCursor(){
    private Iterator<?> keysIterator=sortedKeys.iterator();
    private Iterator<OIdentifiable> currentIterator=OEmptyIterator.IDENTIFIABLE_INSTANCE;
    private Object currentKey;
    @Override public Map.Entry<Object,OIdentifiable> next(    int prefetchSize){
      if (currentIterator == null)       return null;
      Object key=null;
      if (!currentIterator.hasNext()) {
        Collection<OIdentifiable> result=null;
        while (keysIterator.hasNext() && (result == null || result.isEmpty())) {
          key=keysIterator.next();
          key=getCollatingValue(key);
          acquireSharedLock();
          try {
            result=indexEngine.get(key);
          }
  finally {
            releaseSharedLock();
          }
        }
        if (result == null) {
          currentIterator=null;
          return null;
        }
        currentKey=key;
        currentIterator=result.iterator();
      }
      final OIdentifiable resultValue=currentIterator.next();
      return new Map.Entry<Object,OIdentifiable>(){
        @Override public Object getKey(){
          return currentKey;
        }
        @Override public OIdentifiable getValue(){
          return resultValue;
        }
        @Override public OIdentifiable setValue(        OIdentifiable value){
          throw new UnsupportedOperationException("setValue");
        }
      }
;
    }
  }
;
}
