{
  if (iValue == null)   return null;
  if (iType == null)   iType=OType.EMBEDDED;
switch (iType) {
case STRING:
    if (iValue instanceof String) {
      final String s=OStringSerializerHelper.getStringContent(iValue);
      return OStringSerializerHelper.decode(s);
    }
  return iValue.toString();
case INTEGER:
if (iValue instanceof Integer) return iValue;
return new Integer(iValue.toString());
case BOOLEAN:
if (iValue instanceof Boolean) return iValue;
return new Boolean(iValue.toString());
case FLOAT:
if (iValue instanceof Float) return iValue;
return convertValue((String)iValue,iType);
case LONG:
if (iValue instanceof Long) return iValue;
return convertValue((String)iValue,iType);
case DOUBLE:
if (iValue instanceof Double) return iValue;
return convertValue((String)iValue,iType);
case SHORT:
if (iValue instanceof Short) return iValue;
return convertValue((String)iValue,iType);
case BYTE:
if (iValue instanceof Byte) return iValue;
return convertValue((String)iValue,iType);
case BINARY:
if (iValue instanceof byte[]) return iValue;
if (iValue instanceof String) {
final String s=(String)iValue;
if (s.length() > 2) return OBase64Utils.decode(s.substring(1,s.length() - 1));
return null;
}
case DATE:
case DATETIME:
if (iValue instanceof Date) return iValue;
return convertValue((String)iValue,iType);
case LINK:
if (iValue instanceof ORID) return iValue.toString();
 else if (iValue instanceof String) return new ORecordId((String)iValue);
 else return ((ORecord<?>)iValue).getIdentity().toString();
case EMBEDDED:
final Object result=OStringSerializerAnyStreamable.INSTANCE.fromStream(iDocument.getDatabase(),(String)iValue);
if (result instanceof ODocument) ((ODocument)result).addOwner(iDocument);
return result;
case EMBEDDEDSET:
case EMBEDDEDLIST:
{
final String value=(String)iValue;
return ORecordSerializerSchemaAware2CSV.INSTANCE.embeddedCollectionFromStream(iDocument.getDatabase(),iDocument,iType,null,null,value);
}
case EMBEDDEDMAP:
{
final String value=(String)iValue;
return ORecordSerializerSchemaAware2CSV.INSTANCE.embeddedMapFromStream(iDocument,null,value);
}
}
throw new IllegalArgumentException("Type " + iType + " not supported to convert value: "+ iValue);
}
