{
  Map<String,List<String>> songAndMovies=new HashMap<String,List<String>>();
  List<String> movies=new ArrayList<String>();
  List<String> songs=new ArrayList<String>();
  movies.add("Star Wars");
  movies.add("Star Wars: The Empire Strikes Back");
  movies.add("Star Wars: The return of the Jedi");
  songs.add("Metallica - Master of Puppets");
  songs.add("Daft Punk - Harder, Better, Faster, Stronger");
  songs.add("Johnny Cash - Cocaine Blues");
  songs.add("Skrillex - Scary Monsters & Nice Sprites");
  songAndMovies.put("movies",movies);
  songAndMovies.put("songs",songs);
  JavaComplexTestClass p=database.newInstance(JavaComplexTestClass.class);
  p.setName("Chuck");
  p.getStringListMap().put("movies",movies);
  p.getStringListMap().put("songs",songs);
  for (  String referenceRelativ : songAndMovies.keySet()) {
    Assert.assertEquals(songAndMovies.get(referenceRelativ),p.getStringListMap().get(referenceRelativ));
  }
  database.save(p);
  ORID rid=database.getIdentity(p);
  database.close();
  database=OObjectDatabasePool.global().acquire(url,"admin","admin");
  JavaComplexTestClass loaded=database.load(rid);
  Assert.assertNotNull(loaded.getStringListMap());
  for (  String reference : songAndMovies.keySet()) {
    Assert.assertEquals(songAndMovies.get(reference),loaded.getStringListMap().get(reference));
  }
  database.delete(loaded);
  p=database.newInstance(JavaComplexTestClass.class);
  p.setName("Chuck");
  p.setStringListMap(songAndMovies);
  for (  String referenceRelativ : songAndMovies.keySet()) {
    Assert.assertEquals(songAndMovies.get(referenceRelativ),p.getStringListMap().get(referenceRelativ));
  }
  database.save(p);
  rid=database.getIdentity(p);
  database.close();
  database=OObjectDatabasePool.global().acquire(url,"admin","admin");
  loaded=database.load(rid);
  Assert.assertNotNull(loaded.getStringListMap());
  for (  String referenceRelativ : songAndMovies.keySet()) {
    Assert.assertEquals(songAndMovies.get(referenceRelativ),loaded.getStringListMap().get(referenceRelativ));
  }
  database.delete(loaded);
  p=database.newInstance(JavaComplexTestClass.class);
  p.setName("Chuck");
  p.getStringListMap().put("songs",new ArrayList<String>());
  p.getStringListMap().get("songs").add("Metallica - Master of Puppets");
  p.getStringListMap().get("songs").add("Daft Punk - Harder, Better, Faster, Stronger");
  p.getStringListMap().get("songs").add("Johnny Cash - Cocaine Blues");
  p.getStringListMap().get("songs").add("Skrillex - Scary Monsters & Nice Sprites");
  p.getStringListMap().put("movies",new ArrayList<String>());
  p.getStringListMap().get("movies").add("Star Wars");
  p.getStringListMap().get("movies").add("Star Wars: The Empire Strikes Back");
  p.getStringListMap().get("movies").add("Star Wars: The return of the Jedi");
  for (  String referenceRelativ : songAndMovies.keySet()) {
    Assert.assertEquals(songAndMovies.get(referenceRelativ),p.getStringListMap().get(referenceRelativ));
  }
  database.save(p);
  rid=database.getIdentity(p);
  database.close();
  database=OObjectDatabasePool.global().acquire(url,"admin","admin");
  loaded=database.load(rid);
  Assert.assertNotNull(loaded.getStringListMap());
  for (  String referenceRelativ : songAndMovies.keySet()) {
    Assert.assertEquals(songAndMovies.get(referenceRelativ),loaded.getStringListMap().get(referenceRelativ));
  }
  database.delete(loaded);
  p=new JavaComplexTestClass();
  p.setName("Chuck");
  p.setStringListMap(songAndMovies);
  for (  String referenceRelativ : songAndMovies.keySet()) {
    Assert.assertEquals(songAndMovies.get(referenceRelativ),p.getStringListMap().get(referenceRelativ));
  }
  p=database.save(p);
  rid=database.getIdentity(p);
  database.close();
  database=OObjectDatabasePool.global().acquire(url,"admin","admin");
  loaded=database.load(rid);
  Assert.assertNotNull(loaded.getStringListMap());
  for (  String referenceRelativ : songAndMovies.keySet()) {
    Assert.assertEquals(songAndMovies.get(referenceRelativ),loaded.getStringListMap().get(referenceRelativ));
  }
  database.delete(loaded);
}
