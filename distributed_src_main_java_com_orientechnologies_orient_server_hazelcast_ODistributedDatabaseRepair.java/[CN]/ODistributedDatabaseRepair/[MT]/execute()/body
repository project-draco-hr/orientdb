{
  try {
    final ORecordRepairData data=queue.take();
    processed.incrementAndGet();
    final long start=System.currentTimeMillis();
    final ODatabaseDocumentTx db=dManager.getMessageService().getDatabase(data.databaseName).getDatabaseInstance();
    try {
      final ODistributedConfiguration dCfg=dManager.getDatabaseConfiguration(data.databaseName);
      final String clusterName=db.getClusterNameById(data.rid.clusterId);
      final List<String> clusterNames=new ArrayList(1);
      clusterNames.add(clusterName);
      final Collection<String> involvedServers=dCfg.getServers(clusterName);
      involvedServers.remove(dManager.getLocalNodeName());
      final OStorageOperationResult<ORawBuffer> localResult=db.getStorage().readRecord(data.rid,null,true,null);
      ODistributedResponse response=dManager.sendRequest(data.databaseName,clusterNames,involvedServers,new ORepairReadRecordTask(data.rid),dManager.getNextMessageIdCounter(),ODistributedRequest.EXECUTION_MODE.RESPONSE,localResult.getResult(),null);
      if (response != null) {
        final Object payload=response.getPayload();
        if (payload instanceof Map) {
          final Map<Object,List<String>> groupedResult=new HashMap<Object,List<String>>();
          final Map<String,Object> map=(Map<String,Object>)payload;
          for (          Map.Entry<String,Object> entry : map.entrySet()) {
            final Object v=entry.getValue();
            List<String> group=groupedResult.get(v);
            if (group == null) {
              group=new ArrayList<String>();
              groupedResult.put(v,group);
            }
            group.add(entry.getKey());
          }
          if (groupedResult.size() == 1) {
            coherent.incrementAndGet();
            return;
          }
          conflicts.incrementAndGet();
          final ODistributedConflictResolver conflictResolver=dManager.getConflictResolver();
          final Object winnerValue=conflictResolver.onConflict(data.databaseName,clusterName,data.rid,dManager,groupedResult);
          if (winnerValue == null)           return;
          groupedResult.remove(winnerValue);
          for (          Map.Entry<Object,List<String>> entry : groupedResult.entrySet()) {
            final Object value=entry.getKey();
            final List<String> servers=entry.getValue();
            if (winnerValue instanceof ORawBuffer && value instanceof ORawBuffer) {
              final ORawBuffer winnerRecord=(ORawBuffer)winnerValue;
              response=dManager.sendRequest(data.databaseName,clusterNames,servers,new OUpdateRecordTask(data.rid,winnerRecord.buffer,ORecordVersionHelper.setRollbackMode(winnerRecord.version),winnerRecord.recordType),dManager.getNextMessageIdCounter(),ODistributedRequest.EXECUTION_MODE.RESPONSE,null,null);
            }
 else             if (winnerValue instanceof ORecordNotFoundException && value instanceof ORawBuffer) {
              response=dManager.sendRequest(data.databaseName,clusterNames,servers,new ODeleteRecordTask(data.rid,-1),dManager.getNextMessageIdCounter(),ODistributedRequest.EXECUTION_MODE.RESPONSE,null,null);
            }
 else             if (value instanceof Throwable) {
            }
          }
        }
      }
    }
  finally {
      db.close();
      totalTimeProcessing.addAndGet(System.currentTimeMillis() - start);
    }
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    interruptCurrentOperation();
  }
}
