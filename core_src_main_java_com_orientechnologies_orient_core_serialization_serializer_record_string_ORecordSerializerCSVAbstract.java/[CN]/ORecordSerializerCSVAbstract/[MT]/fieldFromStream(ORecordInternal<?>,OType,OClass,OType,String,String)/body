{
  if (iValue == null)   return null;
switch (iType) {
case EMBEDDEDLIST:
case EMBEDDEDSET:
    return embeddedCollectionFromStream((ODocument)iSourceRecord,iType,iLinkedClass,iLinkedType,iValue);
case LINKLIST:
case LINKSET:
{
    if (iValue.length() == 0)     return null;
    final String value=iValue.startsWith("[") ? iValue.substring(1,iValue.length() - 1) : iValue;
    return iType == OType.LINKLIST ? new ORecordLazyList((ODocument)iSourceRecord).setStreamedContent(new StringBuilder(value)) : new OMVRBTreeRIDSet(iSourceRecord).fromStream(new StringBuilder(iValue));
  }
case LINKMAP:
{
  if (iValue.length() == 0)   return null;
  String value=iValue.substring(1,iValue.length() - 1);
  @SuppressWarnings("rawtypes") final Map map=new ORecordLazyMap((ODocument)iSourceRecord,ODocument.RECORD_TYPE);
  if (value.length() == 0)   return map;
  final List<String> items=OStringSerializerHelper.smartSplit(value,OStringSerializerHelper.RECORD_SEPARATOR);
  for (  String item : items) {
    if (item != null && !item.isEmpty()) {
      final List<String> entry=OStringSerializerHelper.smartSplit(item,OStringSerializerHelper.ENTRY_SEPARATOR);
      if (!entry.isEmpty()) {
        String mapValue=entry.get(1);
        if (mapValue != null && !mapValue.isEmpty())         mapValue=mapValue.substring(1);
        map.put(fieldTypeFromStream((ODocument)iSourceRecord,OType.STRING,entry.get(0)),new ORecordId(mapValue));
      }
    }
  }
  return map;
}
case EMBEDDEDMAP:
return embeddedMapFromStream((ODocument)iSourceRecord,iLinkedType,iValue);
case LINK:
if (iValue.length() > 1) {
int pos=iValue.indexOf(OStringSerializerHelper.CLASS_SEPARATOR);
if (pos > -1) ODatabaseRecordThreadLocal.INSTANCE.get().getMetadata().getSchema().getClass(iValue.substring(1,pos));
 else pos=0;
return new ORecordId(iValue.substring(pos + 1));
}
 else return null;
case EMBEDDED:
if (iValue.length() > 2) {
final String value=iValue.substring(1,iValue.length() - 1);
final Object result=OStringSerializerAnyStreamable.INSTANCE.fromStream(value);
if (result instanceof ODocument) ((ODocument)result).addOwner(iSourceRecord);
return result;
}
 else return null;
default :
return fieldTypeFromStream((ODocument)iSourceRecord,iType,iValue);
}
}
