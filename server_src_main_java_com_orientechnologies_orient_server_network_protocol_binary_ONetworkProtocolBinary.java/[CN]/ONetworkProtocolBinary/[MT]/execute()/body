{
  lastRequestType=-1;
  data.commandInfo="Listening";
  data.commandDetail="-";
  lastClientTxId=0;
  try {
    lastRequestType=channel.readByte();
    lastClientTxId=channel.readInt();
    ++data.totalRequests;
    data.lastCommandReceived=System.currentTimeMillis();
    OServerHandlerHelper.invokeHandlerCallbackOnBeforeClientRequest(connection,(byte)lastRequestType);
    parseCommand();
    OServerHandlerHelper.invokeHandlerCallbackOnAfterClientRequest(connection,(byte)lastRequestType);
  }
 catch (  EOFException eof) {
    OServerHandlerHelper.invokeHandlerCallbackOnClientError(connection,eof);
    sendShutdown();
  }
catch (  SocketException e) {
    OServerHandlerHelper.invokeHandlerCallbackOnClientError(connection,e);
    sendShutdown();
  }
catch (  OException e) {
    OServerHandlerHelper.invokeHandlerCallbackOnClientError(connection,e);
    sendError(lastClientTxId,e);
  }
catch (  RuntimeException e) {
    OServerHandlerHelper.invokeHandlerCallbackOnClientError(connection,e);
    sendError(lastClientTxId,e);
  }
catch (  Throwable t) {
    OServerHandlerHelper.invokeHandlerCallbackOnClientError(connection,t);
    OLogManager.instance().error(this,"Error on executing request",t);
    sendError(lastClientTxId,t);
  }
 finally {
    try {
      channel.flush();
    }
 catch (    Throwable t) {
      OLogManager.instance().debug(this,"Error on send data over the network",t);
    }
    OSerializationThreadLocal.INSTANCE.get().clear();
    data.lastCommandExecutionTime=System.currentTimeMillis() - data.lastCommandReceived;
    data.totalCommandExecutionTime+=data.lastCommandExecutionTime;
    data.lastCommandInfo=data.commandInfo;
    data.lastCommandDetail=data.commandDetail;
  }
}
