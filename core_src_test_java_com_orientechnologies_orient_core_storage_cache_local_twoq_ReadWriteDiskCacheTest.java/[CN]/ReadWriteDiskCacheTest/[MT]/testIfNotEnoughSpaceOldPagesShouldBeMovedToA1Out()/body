{
  long fileId=readBuffer.addFile(fileName,writeBuffer);
  OCacheEntry[] entries=new OCacheEntry[6];
  for (int i=0; i < 6; i++) {
    entries[i]=readBuffer.load(fileId,i,false,writeBuffer,1,storagePerformanceStatistic);
    if (entries[i] == null) {
      entries[i]=readBuffer.allocateNewPage(fileId,writeBuffer,storagePerformanceStatistic);
      Assert.assertEquals(entries[i].getPageIndex(),i);
    }
    entries[i].getCachePointer().acquireExclusiveLock();
    entries[i].markDirty();
    final ByteBuffer buffer=entries[i].getCachePointer().getBuffer();
    buffer.position(systemOffset);
    buffer.put(new byte[]{(byte)i,1,2,seed,4,5,6,7});
    entries[i].getCachePointer().releaseExclusiveLock();
    readBuffer.release(entries[i],writeBuffer,storagePerformanceStatistic);
  }
  LRUList am=readBuffer.getAm();
  LRUList a1in=readBuffer.getA1in();
  LRUList a1out=readBuffer.getA1out();
  Assert.assertEquals(am.size(),0);
  for (int i=0; i < 2; i++) {
    OCacheEntry entry=generateRemovedEntry(fileId,i);
    Assert.assertEquals(a1out.get(entry.getFileId(),entry.getPageIndex()),entry);
  }
  final OByteBufferPool bufferPool=OByteBufferPool.instance();
  for (int i=2; i < 6; i++) {
    OCacheEntry entry=generateEntry(fileId,i,entries[i].getCachePointer().getBuffer(),bufferPool,false,new OLogSequenceNumber(0,0));
    Assert.assertEquals(a1in.get(entry.getFileId(),entry.getPageIndex()),entry);
  }
  Assert.assertEquals(writeBuffer.getFilledUpTo(fileId),6);
  writeBuffer.flush();
  for (int i=0; i < 6; i++) {
    assertFile(i,new byte[]{(byte)i,1,2,seed,4,5,6,7},new OLogSequenceNumber(0,0));
  }
}
