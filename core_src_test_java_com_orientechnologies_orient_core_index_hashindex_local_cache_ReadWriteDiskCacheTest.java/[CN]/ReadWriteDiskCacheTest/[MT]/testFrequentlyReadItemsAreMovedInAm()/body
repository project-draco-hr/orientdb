{
  long fileId=buffer.openFile(fileName);
  OCachePointer[] pointers=new OCachePointer[10];
  for (int i=0; i < 10; i++) {
    pointers[i]=buffer.load(fileId,i);
    pointers[i].acquireExclusiveLock();
    buffer.markDirty(fileId,i);
    directMemory.set(pointers[i].getDataPointer() + systemOffset,new byte[]{(byte)i,1,2,seed,4,5,6,(byte)i},0,8);
    setLsn(pointers[i].getDataPointer(),new OLogSequenceNumber(1,i));
    pointers[i].releaseExclusiveLock();
    buffer.release(fileId,i);
  }
  buffer.clear();
  for (int i=0; i < 10; i++)   assertFile(i,new byte[]{(byte)i,1,2,seed,4,5,6,(byte)i},new OLogSequenceNumber(1,i));
  for (int i=0; i < 8; i++) {
    pointers[i]=buffer.load(fileId,i);
    buffer.release(fileId,i);
  }
  for (int i=2; i < 4; i++) {
    pointers[i]=buffer.load(fileId,i);
    buffer.release(fileId,i);
  }
  LRUList am=buffer.getAm();
  LRUList a1in=buffer.getA1in();
  LRUList a1out=buffer.getA1out();
  Assert.assertEquals(am.size(),2);
  Assert.assertEquals(a1in.size(),2);
  Assert.assertEquals(a1out.size(),2);
  for (int i=2; i < 4; i++) {
    OReadCacheEntry lruEntry=generateEntry(fileId,i,pointers[i].getDataPointer(),false,new OLogSequenceNumber(1,i));
    Assert.assertEquals(am.get(fileId,i),lruEntry);
  }
  for (int i=4; i < 6; i++) {
    OReadCacheEntry lruEntry=generateRemovedEntry(fileId,i);
    Assert.assertEquals(a1out.get(fileId,i),lruEntry);
  }
  for (int i=6; i < 8; i++) {
    OReadCacheEntry lruEntry=generateEntry(fileId,i,pointers[i].getDataPointer(),false,new OLogSequenceNumber(1,i));
    Assert.assertEquals(a1in.get(fileId,i),lruEntry);
  }
}
